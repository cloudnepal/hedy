@top Program { newline* (Command newline+)* Command? }
Command {
    Assign | AssignList | Ask | Clear |Print | Play | Turtle | Sleep | Add | Remove| If | Else | ErrorInvalid
}

IfLessCommand {
    Assign | AssignList | Ask | Clear |Print | Play | Turtle | Sleep | Add | Remove | ErrorInvalid
}

Print { print+ ( String | Text | ListAccess )+ }
Ask { Text is+ ask+ ( String | Text | ListAccess )+ }

// Commas in every language are allowed
AssignList { Text is+ Text+ (Op<',' | '،' | '，' | '、' > Text+)+ }
Assign { Text is+ (Text+ | ListAccess) }
Sleep { sleep+ (Text | ListAccess)? }
ListAccess { Text at+ (random+ | Text) }
Add { add+ Text+ to_list+ Text }
Remove { remove+ Text+ from+ Text }
Clear { clear+ }
Play { play+ (ListAccess | Text+) }

Turtle[@isGroup=turtle] {
    Forward { forward+ (Text | ListAccess ) } |
    Turn { turn+ (Text | ListAccess ) } |
    Color { color+ (Text | ListAccess)  }
}

If { ifs+ Condition newline* IfLessCommand Else? }
Else { !else elses+ newline* IfLessCommand }

Condition { 
    EqualityCheck { Text is+ (String | Text | pressed+) } |
    InListCheck { Text ins+  Text } |
    NotInListCheck { Text not_in+  Text }
}

ErrorInvalid[@dynamicPrecedence=-10] { Text+ }

@precedence {
    else,
    command @cut
}

@external specialize { Text } specializeKeyword from "./tokens" {
    ask[@name="ask"],
    at[@name="at"],
    random[@name="random"],
    ifs[@name="if"],
    elses[@name="else"],
    pressed[@name="pressed"]
}

@external extend { Text } extendKeyword from "./tokens" {
    print[@name="print"],
    forward[@name="forward"],
    turn[@name="turn"],
    color[@name="color"],
    sleep[@name="sleep"],
    play[@name="play"],
    is[@name="is"],
    add[@name="add"],
    from[@name="from"],
    remove[@name="remove"],
    to_list[@name="to_list"],
    clear[@name="clear"],    
    ins[@name="in"],
    not_in[@name="not_in"]
}

Op<expr> { expr }

@tokens {
    symbol { $[!%&()*+\-./:;<>=?@\[\]\\\^\{\}`~$_] }
    Comment { "#" ![\n]* }
    newline { '\n' }
    // A char can be anything that goes after the character ! (A1)
    // Excluding the commas in different languages:
    // ، (U+00060C) ，(U+00FF0C) 、 (U+003001)
    identifierChar {
        @asciiLetter | $[\u{0000a1}-\u{00060b}] |
        $[\u{00060d}-\u{003000}] | 
        $[\u{003002}-\u{00ff0b}] | 
        $[\u{00ff0d}-\u{10ffff}]
    }
    Text { (identifierChar | symbol | @digit)+ }
    space { " " }
    String {
        '"' ( ![\\\n"] )* '"' |
        "'" ( ![\\\n'] )* "'"
    }    
}

@skip { Comment | space }
