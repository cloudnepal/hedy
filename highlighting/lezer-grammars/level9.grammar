// Same as level 8
@top Program { newline* (Command newline+)* Command? }
Command {
    Assign | AssignList | Ask | Clear |Print | Play | Turtle | Sleep | Add | Remove| If | Else | Repeat |ErrorInvalid
}

Print { print ( String | ListAccess | Expression )+ }
Ask { Text (is+ | Op<"=">) ask+ ( String | ListAccess | Expression )+ }

// Commas in every language are allowed
AssignList { Text (is+ | Op<"=">) (Text+ | Int ) ~ambig  (Op<',' | '،' | '，' | '、' > (Text+ | Int ))+ }
Assign { Text (is+ | Op<"=">) (Expression ~ambig  | ListAccess)+ }
Sleep { sleep+ (Expression | ListAccess )? }
ListAccess { Text at+ (random+ | Text | Int) }
Add { add+ Text+ to_list+ Text }
Remove { remove+ Text+ from+ Text }
Clear { clear+ }
Play { play+ (ListAccess | Expression) }

Turtle[@isGroup=turtle] {
    Forward { forward+ (Expression | ListAccess ) } |
    Turn { turn+ (Expression | ListAccess ) } |
    Color { color+ (Expression | ListAccess)  }
}   

If { ifs+ Condition }
Else { elses+ }

Condition { 
    EqualityCheck { (Text | Int) (is+ | Op<"=">) (String | Expression | pressed+) } |
    InListCheck { (Text | Int) ins+ Text } |
    NotInListCheck { (Text | Int) not_in+ Text }
}

Repeat { repeat+ (Int | Text) times+ }

ErrorInvalid[@dynamicPrecedence=-10] { Text+ }

Op<expr> { expr }

binaryExpression {
    Expression !times Op<"*" | "/"> Expression |
    Expression !plus Op<"+" | "-"> Expression
}

Expression {
    Int |
    Text |
    binaryExpression
}

@precedence {
    times @left,
    plus @right
}

@external specialize { Text } specializeKeyword from "./tokens" {
    ask[@name="ask"],
    at[@name="at"],
    random[@name="random"],
    ifs[@name="if"],
    pressed[@name="pressed"],
    elses[@name="else"]
}

@external extend { Text } extendKeyword from "./tokens" {
    print[@name="print"],
    forward[@name="forward"],
    turn[@name="turn"],
    color[@name="color"],
    sleep[@name="sleep"],
    play[@name="play"],
    is[@name="is"],
    add[@name="add"],
    from[@name="from"],
    remove[@name="remove"],
    to_list[@name="to_list"],
    clear[@name="clear"],    
    ins[@name="in"],
    not_in[@name="not_in"],
    repeat[@name="repeat"],
    times[@name="times"]
}

@tokens {
    @precedence {
        Int,
        Text
    }
    symbol { $[!%&().:;<>?@\[\]\\\^\{\}`~$_] }
    Comment { "#" ![\n]* }
    newline { '\n' }
    // A char can be anything that goes after the character ! (A1)
    // Excluding the commas in different languages:
    // ، (U+00060C) ，(U+00FF0C) 、 (U+003001)
    // We are also excluding the arab and Pajabi numeral systems.
    identifierChar { 
        @asciiLetter | 
        $[\u{0000a1}-\u{00060b}] | $[\u{00060d}-\u{000659}] |
        $[\u{000670}-\u{0006EF}] | $[\u{0006FA}-\u{003000}] |
        $[\u{003002}-\u{00ff0b}] | $[\u{00ff0d}-\u{10ffff}]
    }
    Text { (identifierChar | symbol | digit)+ }
    space { " " }
    digit { $[٠١٢٣٤٥٦٧٨٩۰۱۲۳۴۵۶۷۸۹0123456789] } // latin, arab and pa_PK (Panjabi) scripts
    Int { digit+ }
    String {
        '"' ( ![\\\n"] )* '"' |
        "'" ( ![\\\n'] )* "'"
    }    
}

@skip { Comment | space }
