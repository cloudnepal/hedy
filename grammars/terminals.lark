// A comment has a negative lookahead to ensure it cannot parse _END_BLOCKS
COMMENT: /#(?!ENDBLOCK)[^\n]*/
%ignore COMMENT

// Internal symbol added by the preprocess_blocks function to indicate the end of blocks
_END_BLOCK: "#ENDBLOCK"

NEGATIVE_NUMBER: _MINUS /\p{Nd}+/ ("." /\p{Nd}+/)?
POSITIVE_NUMBER: /\p{Nd}+/ ("." /\p{Nd}+/)?
NUMBER: NEGATIVE_NUMBER | POSITIVE_NUMBER
INT: _MINUS? /\p{Nd}+/
NON_DECIMAL: _MINUS? /[\p{Nl}\p{No}]+/

// FH Sept 2021: More info on this variable format: https://www.unicode.org/reports/tr31/tr31-1.html
// Exact grammar stolen from: https://lark-parser.readthedocs.io/en/latest/classes.html

NAME: LETTER_OR_UNDERSCORE LETTER_OR_NUMERAL*
LETTER_OR_UNDERSCORE: /[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nl}_]+/
LETTER_OR_NUMERAL: LETTER_OR_UNDERSCORE | /[\p{Mn}\p{Mc}\p{Nd}\p{Pc}·]+/

//symbols. they start with an underscore so they don't appear in the parse tree (Lark convention)
_EOL: "\r"?"\n"+
_SPACE: " "+
_COMMA: _SPACE? (","|"،"|"，"|"、") _SPACE? //support latin and arabic and Chinese commas and always allow these to be surrounded by spaces
_COLON: _SPACE? ":" _SPACE? | _SPACE? "：" _SPACE?
_LEFT_BRACKET : _SPACE? "(" _SPACE? | _SPACE? "（" _SPACE?
_RIGHT_BRACKET : _SPACE? ")" _SPACE? | _SPACE? "）" _SPACE?
_LEFT_SQUARE_BRACKET :  _SPACE? "[" _SPACE?
_RIGHT_SQUARE_BRACKET : _SPACE? "]" _SPACE?
_HASH: "#"
_SMALLER : _SPACE? "<" _SPACE?
_LARGER: _SPACE? ">" _SPACE?
_EQUALS: _SPACE? "=" _SPACE? //always allow = to be surrounded by spaces
_DOUBLE_EQUALS: _SPACE? "==" _SPACE?
_NOT_EQUALS: _SPACE? "!=" _SPACE?
_SMALLER_EQUALS : _SPACE? "<=" _SPACE?
_LARGER_EQUALS: _SPACE? ">=" _SPACE?
_SINGLE_QUOTE: "'" | "‘" | "’"
_DOUBLE_QUOTE: "\"" | "“" | "”"
_QUOTE: _SINGLE_QUOTE | _DOUBLE_QUOTE
_PLUS: _SPACE? "+" _SPACE?
_MINUS: _SPACE? "-" _SPACE?
_MULTIPLY: _SPACE? "*" _SPACE?
_DIVIDE: _SPACE? "/" _SPACE?


empty_line: _SPACE
any: /.+/ -> text
