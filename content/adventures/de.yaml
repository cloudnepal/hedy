adventures:
    default:
        name: "Einführung"
        description: "Erklärung des Levels"
        default_save_name: "Einleitung"
        levels:
            1:
                story_text: |
                    ## Willkommen bei Hedy!
                    In Level 1 kannst du die Befehle `{print}`, `{ask}` und `{echo}` verwenden.
                    Tippe den Code in das Programmierfeld. Oder drücke den grünen Knopf beim Beispielcode um ihn in dein Programm zu übernehmen!
                    Probiere den Code selbst mit der grünen Schaltfläche 'Code ausführen' unter dem linken Programmierfeld aus.

                    Du kannst Text auf dem Bildschirm ausgeben lassen indem du den Befehl `{print}` verwendest.     
                start_code: "{print} Hallo Welt!"
                example_code: "```\n{print} Hallo!\n{print} Willkommen bei Hedy!\n```\n"
                story_text_2: "Du kannst auch mit `{ask}` nach Eingaben fragen und sie dir mit dem Befehl `{echo}` zurückgeben lassen.\n"
                example_code_2: "```\n{ask} Wie heißt du?\n{echo} Hallo\n```\n"
                story_text_3: "Lass uns loslegen! Weißt du nicht was du programmieren sollst? In den nächsten Tabs warten Ideen für Programme auf dich.\n"
            2:
                story_text: |
                    ## Variablen
                    In Level 2 lernen wir zwei neue Befehle: `{is}` und `{sleep}`.
                    Du kannst ein Wort mit `{is}` benennen. Das nennt man eine Variable. In diesem Beispiel haben wir eine Variable name und eine Variable alter erstellt. Du kannst das Wort name irgendwo in deinem Code verwenden und es wird dann durch Hedy ersetzt, und zwar so:

                    Deswegen benötigst du den Befehl `{echo}` nicht mehr!
                start_code: "{print} Hallo Welt!"
                example_code: "```\nname {is} Hedy\nalter {is} 15\n{print} name ist alter Jahre alt\n```\n"
                story_text_2: "`{print}` funktioniert genauso wie vorher, aber der Befehl `{ask}` hat sich verändert. Du brauchst jetzt auch für den Befehl `{ask}` eine Variable. Das sieht so aus:\n"
                example_code_2: "```\nantwort {is} {ask} Wie heißt du?\n{print} Hallo antwort\n```\n"
                story_text_3: "Ein weiterer neuer Befehl in diesem Level ist `{sleep}`, was das Programm für eine Sekunde anhält. Wenn du hinter {sleep} eine Zahl tippst, wartet das Programm so viele Sekunden.\n"
                example_code_3: "```\n{print} Meine Lieblingsfarbe ist...\n{sleep} 2\n{print} grün!\n```\n"
            3:
                story_text: |
                    ## Erstelle eine Liste!
                    In Level 3 kannst du eine Liste erstellen. Du kannst den Computer etwas zufällig aus der Liste auswählen lassen. Du machst dies mit `{at} {random}`. Es bedeutet: Wähle ein Element an zufälliger Stelle in der Liste aus.
                start_code: "{print} Hallo Welt!"
                example_code: "```\ntiere {is} Hund, Katze, Känguru\n{print} tiere {at} {random}\n```\n"
                story_text_2: Du kannst der Liste auch ein Element mit `{add}` hinzufügen und ein Element mit `{remove}` entfernen.
                example_code_2: "```\ntiere {is} Hund, Katze, Känguru\n{add} Pinguin {to_list} tiere\n{remove} Katze {from} tiere\n{print} tiere {at} {random}\n```\n"
            4:
                start_code: "{print} 'Hallo Welt'"
                story_text: |
                    ## 'Anführungszeichen'
                    In Level 4 haben sich `{print}` und `{ask}` geändert.
                    Du musst Text, den du genau so mit ausgeben möchtest, in Anführungszeichen setzen.
                    Das ist nützlich, denn nun kannst du alle Wörter ausgeben, die du möchtest. Auch die Wörter, mit denen du etwas mit `{is}` gespeichert hast.
                    Die meisten Programmiersprachen verwenden ebenfalls Anführungszeichen bei ihren Ausgabebefehlen, sodass wir dem echten Programmieren einen Schritt näher kommen!
                example_code: "```\n{print} 'Ab jetzt musst du Anführungszeichen verwenden!'\nantwort {is} {ask} 'Was müssen wir ab jetzt verwenden?'\n{print} 'Wir müssen ' antwort ' verwenden.'\n```\n"
                story_text_2: "## Kontraktionen\nWichtig! Da wir jetzt Anführungszeichen verwenden, wird Hedy verwirrt, wenn du Apostrophe für Kontraktionen wie I'm oder What's verwendest.\nEntferne diese Apostrophe und ändere die Schreibweise in I am oder What is.\nSchau dir den Beispielcode an, um die falsche Verwendung von Apostrophen zu sehen.\n"
                example_code_2: "```\n_ Dies ist die falsche Verwendung der Apostrophe _\n{print} 'I'm babysitting my sister's kids'\n{print} 'What's more fun than that?'\n```\n"
            5:
                start_code: |-
                    name {is} {ask} 'Wie heisst du?'
                    {if} name {is} Hedy {print} 'Toll!' {else} {print} 'Blöd'
                story_text: |
                    ## Falls... sonst...
                    In Level 5 gibt es etwas Neues, nämlich das `{if}`! Mit `{if}` kannst du zwischen zwei verschiedenen Möglichkeiten wählen.
                    Dieser Code gibt 'Toll!' aus, wenn du Hedy als Namen eingibst, und 'Blöd!', wenn du etwas anderes eingibst.
                    `{ask}` und `{print}` funktionieren immer noch wie in Level 4.
                example_code: "```\nname {is} {ask} 'Wie heißt du?'\n{if} name {is} Hedy {print} 'Schön' {else} {print} 'Buh!'\n```\n"
                story_text_3: "## Listen\nWenn wir überprüfen möchten ob etwas in einer Liste ist, können wir das mit dem Befehl `{in}` machen.\nDieser Code gibt schön! aus wenn du grün oder gelb auswählst, und na ja wenn du dich für eine andere Farbe entscheidest.\n"
                example_code_3: "```\nschöne_farben {is} grün, gelb\nfarbe {is} {ask} 'Was ist deine Lieblingsfarbe?'\n{if} farbe {in} schöne_farben {print} 'schön!'\n{else} {print} 'na ja'\n```\n"
                story_text_2: "Manchmal wird Code mit einem `{if}` ziemlich lang und passt nicht gut in eine Zeile. <br> Du kannst den Code auch auf zwei Zeilen aufteilen, beginnend mit der zweiten Zeile beim `{else}` Befehl, und zwar so:\n"
                example_code_2: "```\nname {is} {ask} 'Wie heißt du?'\n{if} name {is} Hedy {print} 'schön'\n{else} {print} 'buh!'\n```\n"
                story_text_4: "Etwas anderes das mit `{if}` funktioniert, ist `{pressed}`! Mit `{pressed}` kannst du jeden beliebigen Buchstaben des Alphabets und jede Zifferntaste auf deiner Tastatur an einen Befehl binden. Wenn du es bindest und die Taste drückst, wird etwas passieren. Probiere es aus!\n"
                example_code_4: "```\n{if} x {is} {pressed} {print} 'es hat geklappt!'\n```\n"
            6:
                start_code: "{print} '5 mal 5 ist ' 5 * 5"
                story_text: |
                    ## 1 + 1
                    In diesem Level lernst du etwas Neues: Du kannst jetzt auch rechnen.

                    Das Plus ist leicht, das schreibst du wie in Mathe: `5 + 5` zum Beispiel. Das Minus funktioniert genauso, zum Beispiel `5 - 5`.

                    Das Mal ist etwas anders, da auf deiner Tastatur kein Malzeichen vorhanden ist. Suche mal, das gibt es wirklich nicht!
                    Deshalb multiplizieren wir mit dem Stern (auf der Tastatur über dem Plus): `5 * 5`. Lies das als "5 mal 5", dann kannst du dich am einfachsten daran erinnern.
                example_code: "```\n{print} '5 plus 5 macht ' 5 + 5\n{print} '5 minus 5 macht ' 5 - 5\n{print} '5 mal 5 macht ' 5 * 5\n```\n"
                story_text_2: "Wir verändern auch wie du ein Wort in einer Variable speichern kannst! Du darfst jetzt `=` anstatt `{is}` verwenden, wenn du einen Namen oder eine Zahl in einer Variable speicherst, und zwar so:\n"
                example_code_2: "```\nname = Hedy\nantwort = 20 + 4\n```\n"
            7:
                start_code: "{repeat} 3 {times} {print} 'Hedy macht Spaß!'"
                story_text: |
                    ## Level 7! Level 7!
                    In Level 7 kommt der Befehl `{repeat}` dazu. Mit `{repeat}` kannst du eine Zeile Code mehrmals ausführen.
                example_code: "```\n{repeat} 3 {times} {print} 'Hedy macht Spaß!'\n```\n"
            8:
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Hallo Leute'
                        {print} 'Das wird 5 mal ausgegeben'
                story_text: |
                    ## Einrückung
                    `{ask}` und `{print}` funktionieren immer noch wie du es gewohnt bist. Aber `{if}`, `{else}`, {pressed} und `{repeat}` haben sich verändert!
                    Du kannst jetzt mehrere Zeilen gruppieren, aber du musst den Code dafür *einrücken*.
                    Das bedeutet, dass du die Befehlszeilen mit vier Leerzeichen beginnen musst. Das gilt auch, wenn du einen Block mit nur einer Zeile schreiben möchtest.
                example_code: "Der `{repeat}` Befehl funktioniert jetzt so:\n```\n{repeat} 5 {times}\n    {print} 'Hallo zusammen'\n    {print} 'Das hier wird fünf Mal wiederholt'\n```\nDie Befehle `{if}` und `{else}` funktionieren jetzt so:\n\n```\nname {is} {ask} 'Wie heißt du?'\n{if} name {is} Hedy\n    {print} 'Willkommen Hedy'\n    {print} 'Du kannst an deinem Computer spielen'\n{else}\n    {print} 'EINDRINGLING!'\n    {print} 'Du darfst diesen Rechner nicht benutzen!'\n```\n"
            9:
                start_code: |-
                    {repeat} 3 {times}
                        essen = {ask} 'Was möchtest du gern?'
                        {if} essen {is} 'Pizza'
                            {print} 'Gut!'
                        {else}
                            {print} 'Pizza ist besser'
                story_text: |
                    ## Jetzt alles zusammen!
                    In diesem Level kannst du nicht nur mehrere Zeilen mit `{if}` und `{repeat}` verwenden, du kannst sie auch kombinieren!
                    Im Beispiel siehst du einen `{if}` Befehl innerhalb eines `{repeat}` Befehls. Es ist auch anders herum erlaubt. Und ebenso ist `{if}` innerhalb eines anderen `{if}` Befehls erlaubt, genau wie `{repeat}` in einem anderen `{repeat}` Befehl.
                    Versuch es mal!
                example_code: "```\n{repeat} 3 {times}\n    bestellung = {ask} 'Was würden Sie gerne essen?'\n    {if} bestellung {is} Pizza\n        {print} 'schön!'\n    {else}\n        {print} 'Pizza ist leckerer'\n```\n"
            10:
                start_code: |-
                    tiere {is} Hund, Katze, Blobfisch
                    {for} tier {in} tiere
                      {print} 'Ich mag' tier
                story_text: |-
                    ## Für jedes Element in meiner Liste...
                    In diesem Level lernen wir den neuen Befehl `{for}`. Mit `{for}` kannst du eine Liste machen und alle ihre Elemente verwenden.
                    `{for}` erstellt einen Block, so wie `{repeat}` und `{if}`, daher müssen alle Zeilen in dem Block mit Leerzeichen beginnen.
                example_code: "```\ntiere {is} Hund, Katze, Kugelfisch\n{for} tier {in} tiere\n  {print} 'Ich mag ' tier\n```\n"
            11:
                start_code: |-
                    {for} zähler {in} {range} 1 {to} 5
                        {print} zähler
                story_text: |-
                    ## Schleifen!
                    In diesem Level fügen wir eine neue Form des Befehls `{for}` hinzu. In früheren Leveln haben wir `{for}` mit Listen benutzt, aber wir können `{for}` auch mit Zahlen verwenden.
                    Dies machen wir, indem wir einen Variablennamen und dann `{in}` `{range}` schreiben. Dahinter schreiben wir die Zahl bei der es losgehen soll, `{to}` und dann die Zahl, wo es aufhört.

                    Probiere das Beispiel aus, um zu sehen was passiert! In diesem Level musst du wieder Einrückung in den Zeilen unter dem `{for}` anwenden.
                example_code: "```\n{for} zähler {in} {range} 1 {to} 5\n    {print} zähler\n```\n"
            12:
                start_code: |-
                    {print} 'Dezimalzahlen benötigen jetzt einen Punkt'
                    {print} 2.5 + 2.5
                story_text: |-
                    ## Zahlen und Texte
                    **Dezimalzahlen**
                    Bis jetzt konntest du mit Hedy keine Dezimalzahlen (das sind Kommazahlen) wie 1,5 verwenden, aber jetzt geht das. Denke jedoch daran, dass Hedy (wie viele andere Programmiersprachen auch) anstatt des Kommas einen Punkt (`.`) verwendet.
                example_code: "```\n{print} 'Zweieinhalb plus zweieinhalb macht...'\n{print} 2.5 + 2.5\n```\n"
                story_text_2: "**Jeder Text muss zwischen Anführungszeichen stehen**\nAb diesem Level musst du auch Anführungszeichen verwenden, wenn du Text mit einem `=` speicherst:\n"
                example_code_2: "```\nname = 'Hedy der Roboter'\n{print} 'Hallo ' name\n```\n"
                story_text_3: "**Auch alle Elemente in Listen brauchen Anführungszeichen**\nElemente in Listen sind Texte, also brauchen auch sie Anführungszeichen. Achte darauf, dass jedes einzelne Element in einer Liste Anführungszeichen hat.\nSo kannst du zwei Wörter als ein Listenelement speichern, zum Beispiel 'Iron Man'.\n"
                example_code_3: "```\nsuperhelden = 'Spiderman', 'Batman', 'Iron Man'\n{print} superhelden {at} {random}\n```\n"
                story_text_4: "**Auch jeder Text nach einem `{if}` Vergleich braucht Anführungszeichen**\n"
                example_code_4: "```\nname = {ask} 'Wie heißt du?'\n{if} name = 'Hedy der Roboter'\n    {print} 'Hallo!'\n```\n"
                story_text_5: "**Zahlen brauchen keine Anführungszeichen**\nFür Zahlen verwendest du keine Anführungszeichen mit dem `=`:\n"
                example_code_5: "```\nPunkte = 25\n{print} 'Du hast ' score\n```\n"
            13:
                start_code: |-
                    name = {ask} 'Wie heißt du?'
                    alter = {ask} 'Wie alt bist du?'
                    {if} name {is} 'Hedy' {and} alter {is} 2
                        {print} 'Du bist die echte Hedy!'
                story_text: |-
                    ## Und... oder...?
                    Wir werden jetzt `{and}` und `{or}` lernen! Wenn du zwei Angaben überprüfen willst, musst du nicht zwei Mal `{if}` verwenden, sondern kannst `{and}` und `{or}` benutzen.

                    Wenn du `{and}` verwendest, müssen beide Angaben, also links und rechts vom `{and}`, wahr sein. Du kannst auch `{or}` verwenden. Dann muss nur eine der beiden Aussage wahr sein.
                example_code: "```\nname = {ask} 'Wie heißt du?'\nalter = {ask} 'Wie alt bist du?'\n{if} name {is} 'Hedy' {and} alter {is} 2\n    {print} 'Du bist die echte Hedy!'\n```\n"
            14:
                start_code: |-
                    alter = {ask} 'Wie alt bist du?'
                    {if} alter < 13
                        {print} 'Du bist jünger als ich!'
                    {else}
                        {print} 'Du bist älter als ich!'
                story_text: |
                    ## Groß, größer, am größten!
                    Wir lernen weitere neue Elemente kennen! Du kennst sie vielleicht schon aus der Mathematik, das `<` und das `>` Zeichen.
                    Das `<` prüft, ob die erste Zahl kleiner ist als die zweite, so überprüft Alter `<` 12 zum Beispiel, ob Alter kleiner als 12 ist.
                    Wenn du überprüfen willst, ob die erste Zahl kleiner oder gleich der zweiten ist, kannst du `<=` verwenden, zum Beispiel Alter `<=` 11.
                    Das `>` prüft, ob die erste Zahl größer als die zweite ist, so überprüft Punkte `>` 10 zum Beispiel ob Punkte größer als 10 ist.
                    Wenn du überprüfen willst, ob die erste Zahl größer oder gleich der zweiten ist, kannst du `>=` verwenden, also zum Beispiel Punkte `>=` 11.
                    All diese Vergleiche kannst du mit einem `{if}` verwenden, das geht so:
                example_code: "```\nalter = {ask} 'Wie alt bist du?'\n{if} alter > 12\n    {print} 'Du bist älter als ich!'\n```\n"
                story_text_2: "Ab diesem Level, wenn du überprüfen willst ob etwas genau gleich ist, kannst du zwei Gleichheitszeichen verwenden. So machen das die meisten Programmiersprachen:\n"
                example_code_2: "```\nname = {ask} 'Wie heißt du?'\n{if} name == 'Hedy'\n    {print} 'Du bist cool!'\n```\n"
                story_text_3: "Du kannst auch überprüfen, ob etwas *nicht* gleich wie etwas anderes ist. Mit `!=`. Und zwar so:\n"
                example_code_3: "```\nname = {ask} 'Wie heißt du?'\n{if} name != 'Hedy'\n    {print} 'Du bist nicht Hedy'\n```\n"
            15:
                start_code: |-
                    antwort = 0
                    {while} antwort != 25
                        antwort = {ask} 'Wieviel ist 5 mal 5?'
                        {print} 'Das ist die richtge Antwort!'
                story_text: |-
                    ## Mehr Schleifen!
                    Wir lernen eine neue Schleife kennen, die `{while}`-Schleife! Wir setzen die Schleife so lange fort, wie die Aussage wahr ist!
                    Also vergiss nicht den Wert innerhalb der Schleife zu ändern.

                    Im Beispielcode fahren wir also fort, bis eine korrekte Antwort gegeben wurde.
                    Wenn die richtige Antwort nie gegeben wird, endet die Schleife nie!
                example_code: "```\nantwort = 0\n{while} antwort != 25\n    antwort = {ask} 'Was macht 5 mal 5?'\n{print} 'Es wurde eine richtige Antwort abgegeben'\n```\n"
            16:
                start_code: |-
                    obst = ['Apfel', 'Banane', 'Kirsche']
                    {print} obst
                story_text: |-
                    ## Wir kommen dem richtigem Code immer näher!
                    Wir setzen jetzt eckige Klammern um Listen, so wie das in Python gemacht wird! Außerdem müssen wir jetzt einfache Anführungszeichen (') um jedes Element einer Liste setzen, wie wir es in den vorherigen Leveln gelernt haben.
                    Wir nutzen eckige Klammern um auf eine Stelle in einer Liste zu zeigen. Der {at} Befehl kann nicht mehr benutzt werden.
                example_code: "```\nfreunde = ['Ahmed', 'Ben', 'Clemens']\nglückszahlen = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'Die Glückszahl von ' freunde[i]\n    {print} 'ist ' glückszahlen[i]\n```\n"
            17:
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Bereit oder nicht, ich komme!'
                story_text: |-
                    ## {elif}
                    Jetzt werden wir ein wenig an der Einrückung ändern. Jedes Mal, wenn wir eine Einrückung benötigen, brauchen wir `:` in der Zeile vor der Einrückung.

                    In diesem Level kannst du außerdem einen neuen Befehl benutzen: `{elif}`. `{elif}` ist eine Abkürzung für `{else}` `{if}` und du brauchst ihn, wenn du drei (oder mehr!) Optionen machen willst.
                    Probier es mal aus!
                example_code: |
                    ```
                    preise = ['1 Million Euro', 'ein Apfelkuchen', 'nichts']
                    dein_preis = preise[{random}]
                    {print} 'Du gewinnst ' dein_preis
                    {if} dein_preis == '1 Million Euro' :
                        {print} 'Juhuu! Du bist reich!'
                    {elif} dein_preis == 'ein Apfelkuchen' :
                        {print} 'Wunderbar, ein Apfelkuchen!'
                    {else}:
                        {print} 'Viel Glück beim nächsten Mal...'
                    ```
            18:
                start_code: |-
                    name = 'Hedy'
                    {print}('Ich heiße ', name)
                story_text: |-
                    ## Das letzte Level!
                    Wir sind bei echtem Python-Code angekommen! Das bedeutet, dass wir ab jetzt runde Klammern mit den Befehlen `{print}` und `{range}` benutzen müssen.
                    Es bedeutet auch, dass du Hedy-Code aus diesem Level in jeder Python-Umgebung benutzen kannst, solange du die englischen Befehle nutzt. Falls du es bisher noch nicht gemacht hast, kannst du den Schalter im Befehlsmenü zum Umschalten benutzen.

                story_text_2: |-
                    Wenn du mehr als ein Objekt ausgeben möchtest, musst du sie mit einem Komma trennen.

                example_code_2: |
                    ```
                    temperatur = 25
                    {print}('Draußen sind es ', temperatur, ' Grad')
                    ```

                story_text_3: |-
                    ## Eingabe
                    Die letzte Änderung, die wir vornehmen müssen, um Python-Code zu erhalten, ist die Änderung von `{ask}` zu `{input}`.

                example_code_3: |
                    ```
                    {print}('Mein Name ist Hedy!')
                    name = {input}('Wie heißt du?')
                    {print}('Dein Name ist also ', name)
                    ```
                example_code: |
                    ```
                    {print}('Hallo!')
                    {for} i {in} {range}(1, 10):
                        {print}('Dies ist Zeile ', i)
                    ```
    story:
        name: "Geschichte"
        description: "Geschichte"
        default_save_name: "Geschichte"
        levels:
            1:
                story_text: |
                    ## Schreibe eine Geschichte
                    In Level 1 kannst du die Hauptfigur deiner Geschichte ändern, indem du ihren Namen selbst eingibst.

                    Nutze `{ask}` in der ersten Zeile um zu fragen, wer der Hauptcharakter der Geschichte sein soll.

                    Beginne anschließend eine Zeile mit `{print}`, wenn ein Satz ausgegeben werden soll.
                    Nutze `{echo}`, wenn du möchtest, dass der Name deiner Hauptfigur am Ende des Satzes steht.

                example_code: |
                    ```
                    {ask} Der Name der Hauptfigur lautet
                    {print} Die Hauptfigur läuft nun durch einen dunklen Wald
                    {echo} Er ist etwas verängstigt,
                    {print} Er hört überall seltsame Geräusche
                    {print} Er befürchtet, dass es in diesem Wald spukt
                    ```

                start_code: "{print} Deine Geschichte beginnt hier"
                story_text_2: "### Übung\nErstelle nun deine eigene Geschichte aus mindestens 6 Zeilen Code.\nDiese Geschichte soll nicht die gleiche sein wie im Beispiel-Code.\nBenutze mindestens einen `{ask}` und einen `{echo}` Befehl.\nDu kannst das Thema frei wählen.\nWenn dir kein Thema einfällt, nimm eines der folgenden: ins Kino gehen, ein Sportwettkampf oder ein Tag im Zoo.\n"
            2:
                story_text: |
                    ## Schreibe eine Geschichte
                    In Level 2 kannst du deine Geschichte noch etwas spannender machen. Der Name deiner Hauptfigur kann nun an jeder Stelle im Satz auftauchen.

                    Dafür musst du aber auch ein kleines bisschen mehr programmieren. Du musst dir jetzt seinen oder ihren Namen richtig merken.

                    Dafür kannst du den Namen irgendwo im Satz verwenden.

                example_code: |-
                    ```
                    Name {is} {ask} Wie lautet der Name der Hauptfigur?
                    {print} Name läuft nun durch einen dunklen Wald.
                    {print} Name hat etwas Angst.
                    {print} Plötzlich ertönen seltsame Geräusche...
                    {sleep}
                    {print} Name hat Angst, dass es in diesem Wald spukt.
                    ```
                start_code: "{print} Deine Geschichte"
                story_text_2: "### Übung\nNun ist es an der Zeit Variablen zu deiner eigenen Geschichte aus dem vorigen Level hinzu zu fügen.\nGehe zu \"Meine Programme\", suche dein Level 1 Geschichten-Abenteuer und kopiere den Code. Füge den Code in den Eingabebereich in diesem Level ein.\n\nDieser Code wird nicht funktionieren, weil du noch keine Variablen benutzt hast.\nÄndere den `{ask}` Befehl und den `{echo}` Befehl in deinem Code in die richtige Form, die du in diesem Level gelernt hast.\n\n**Extra** Füge deinem Code den warte-Befehl hinzu, um Spannung in deiner Geschichte aufzubauen.\n"
            12:
                story_text: |-
                    ## Geschichte
                    In diesem Level werden Anführungszeichen benötigt, um mehrere Wörter in einer Variablen zu speichern.

                    ### Übung

                    Finde eine Geschichte aus einem beliebigen vorherigen Level. Stelle sicher, dass Anführungszeichen an den richtigen Stellen hinzugefügt werden.

                example_code: |
                    ```
                    Name = 'Die Königin von England'
                    {print} Name ' aß ein Stück Kuchen, als plötzlich...'
                    ```
                start_code: "# setze hier deinen Code hin"
            10:
                # Frankly, this section translates to German awfully.
                # Anybody has a good idea that works well in German?
                story_text: |
                    ## Geschichte
                    In diesem Level kannst du den {for} Befehl für deine Geschichte nutzen. Damit kannst du zum Beispiel ganz einfach das Kinderbuch "Brauner Bär, wen siehst denn Du?" programmieren.

                    ### Übung

                    Schau dir <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf">die Geschichte</a> an, falls du sie nicht kennst und stelle sicher, dass es wie im Buch ausgegeben wird.

                example_code: |
                    ```
                    tiere = _ , _ , _ 
                    {print} 'Brauner Bär'
                    {print} 'Was siehst du?'
                    ```
                start_code: "# setze hier deinen Code hin"
            9:
                story_text: |
                    ## Geschichte
                    In diesem Level kannst du `{if}` und `{repeat}` innerhalb anderer `{if}` und `{repeat}` Befehle verwenden.
                    Das eröffnet dir viele Möglichkeiten und hilft dir, deine Geschichte wirklich interaktiv werden zu lassen.

                    ### Übung 1
                    Vervollständige den Code, damit das `{if}` korrekt funktioniert.

                    ### Übung 2
                    Füge ein `{if}` und `{else}` in den Teil der Geschichte hinzu, wo Robin auch nach Hause geht.

                    ### Übung 3
                    Gehe zurück zu deiner Geschichte aus Level 8 und benutze mindestens zwei `{if}`s innerhalb eines anderen `{if}`.
                start_code: "# setze hier deinen Code hin"
                example_code: "```\n{print} 'Robin läuft durch die Innenstadt.'\nOrt = {ask} 'Geht Robin in ein Geschäft oder nach Hause?'\n{if} Ort {is} Geschäft\n    {print} 'Sie betritt ein Geschäft.'\n    {print} 'Robin sieht ein interessant aussehendes Buch'\n    Buch = {ask} 'Kauft Robin das Buch?'\n    {if} Buch {is} ja\n    _ {print} 'Robin kauft das Buch und geht nach Hause.'\n    _ {else}\n    _ {print} 'Robin verlässt das Geschäft und geht nach Hause.'\n{else}\n    {print} 'Robin geht nach Hause.'\n```\n"
            8:
                story_text: |
                    ## Geschichte
                    In diesem Level kannst du mehrere Zeilen zu einem `{if}`-Befehl hinzufügen. So kannst du deine guten und schlechten Enden etwas erweitern.

                    ### Übung 1
                    Der Beispiel-Code zeigt zwei verschiedene Enden; eines bei dem die Figuren in eine Zeitmaschine springen und eines wo sie es nicht tun.
                    Vervollständige die Lücken mit mindestens einem Satz pro Ende.
                    **(extra)** Mach die Geschichte länger. Was passiert in der Geschichte? Du kannst auch ein zweites `{ask}` mit verschiedenen Auswahlmöglichkeiten hinzufügen.

                    ### Übung 2
                    Gehe zurück zu deinen gespeicherten Programmen und wähle deine Geschichte-Programm aus Level 5 aus. Schreibe nun ein gutes und ein schlechtes Ende mit jeweils mindestens drei Zeilen Länge!

                example_code: |
                    ```
                    {print} 'OH NEIN! Der T-Rex kommt immer näher!'
                    Ende = {ask} 'Soll das Ende gut oder schlecht sein?'
                    {if} Ende {is} gut
                        {print} 'Richard springt gerade noch rechtzeitig zurück in seine Zeitmaschine.'
                        {print} _
                    {else}
                        {print} 'Oh nein! Richard ist zu langsam...'
                        {print} _
                    ```
                start_code: "# setze hier deinen Code hin"
            7:
                story_text: |
                    ## Geschichte
                    In einer Geschichte kommt es manchmal vor, dass jemand ein Wort mehrmals hintereinander sagt. So zum Beispiel, wenn jemand um Hilfe ruft, oder etwas singt.
                    Solche Wiederholungen kannst du mit dem Befehl `{repeat}` in diesem Level in deine Geschichte einfügen.

                    ### Übung
                    Füge Wiederholungen zu deiner eigenen Geschichte hinzu. Gehe zurück zu deinen gespeicherten Programmen, wähle dein Geschichte-Programm aus Level 6 aus und
                    finde eine Zeile die `{print}` enthält und wiederhole sie.

                example_code: |
                    ```
                    {print} 'Der Prinz rief immer wieder um Hilfe.'
                    {repeat} 5 {times} {print} 'Hilfe!'
                    {print} 'Warum hilft mir niemand?'
                    ```

                start_code: "{repeat} 5 {times} {print} 'Hilfe!'"
            5:
                story_text: |
                    ## Geschichte
                    In diesem Level programmierst Du unterschiedliche Enden, was Deine Geschichte noch spannender werden lässt.
                    Im Beispielcode kannst du sehen, wie man zwei verschiedene Enden machen kann.

                    ### Übung 1
                    Schreibe eine neue Kurzgeschichte von mindestens sechs Codezeilen über ein Thema deiner Wahl.
                    Keine Inspiration? Wähle eines der folgenden Themen: ein Superheld, ein langweiliger Schultag, gestrandet auf einer einsamen Insel.

                    Gib der Spielerin nun die Möglichkeit, ein gutes oder schlechtes Ende zu wählen, genau wie im Beispielcode.
                    Programmiere beide Enden.

                    ### Übung 2
                    Kopiere die Geschichte, die du in deinem eigenen Abenteuer in den vorherigen Levels erstellt hast.
                    Finde einen Weg, um mindestens zwei `{if}` und `{else}` Befehle in deine Geschichte einzubauen.
                    Dies kann mit einem guten oder schlechten Ende geschehen, aber du kannst auch andere Möglichkeiten finden, die Befehle einzubauen.

                example_code: |
                    ```
                    name {is} {ask} 'Wer läuft durch den Wald?'
                    {print} name ' läuft durch den Wald.'
                    {print} name ' begegnet einem Monster.'
                    ende {is} {ask} 'Soll das Ende gut oder schlecht sein?'
                    {if} ende {is} gut {print} name ' zieht ihr Schwert und das Monster ergreift die Flucht.'
                    {else} {print} 'Das Monster frisst ' name '.'
                    ```
                start_code: "{print} 'Deine Geschichte beginnt genau hier.'"
            4:
                story_text: |
                    ## Geschichte
                    Vielleicht ist dir aufgefallen, dass es in den vorigen Leveln noch ein Problem gab. Hast du versucht, einen Satz mit dem Wort Name zu schreiben? Z.B. `{print}` mein Name ist Name.
                    In diesem Level kannst du das lösen. Du musst alles, was du ausgeben möchtest, in einfache Anführungszeichen setzen.

                    ### Übung
                    Kopiere den Beispielcode und füge die Anführungszeichen in die Zeilen ein.

                    ### Übung 2
                    Gehe zurück zum vorherigen Level und kopiere deinen Storycode. Bringe den Code in diesem Level zum Laufen, indem du Anführungszeichen an den richtigen Stellen einfügst.
                    Beachte: Die Variablen in deiner eigenen Geschichte sollten außerhalb der Anführungszeichen stehen. So wie in der zweiten Zeile des Beispielcodes. In dieser Zeile wird der Variablenname außerhalb der Anführungszeichen gesetzt.

                example_code: |
                    ```
                    Name {is} {ask} _ Was ist dein Name? _
                    {print}  _ Der Name der Hauptfigur lautet _ Name
                    {print} Name  _ läuft nun in den Wald hinein _
                    {print} Name _ fürchtet sich ein wenig _
                    Tiere {is} 🦔, 🐿, 🦉, 🦇
                    {print} _ Da hört er plötzlich ein _ Tiere {at} {random}
                    {print} Name _ erschrickt. Es spukt in diesem Wald _
                    ```
                start_code: "{print} 'Deine Geschichte wird hier gedruckt!'"
            3:
                story_text: |
                    ## Geschichte
                    In Level 3 wird es etwas witziger. Du kannst nun etwas ganz zufälliges zu Deiner Geschichte hinzufügen. Ein beliebiges Monster, ein Tier oder ein Hindernis. Das funktioniert so:
                start_code: "{print} Deine Geschichte"
                example_code: |
                    ```
                    Tiere {is} 🦔, 🐿, 🦉, 🦇
                    {print} Er hört jetzt ein Tiergeräusch von Tiere {at} {random}
                    ```
                story_text_2: |
                    Der Befehl `{add}` könnte auch nützlich werden in deiner Geschichte.

                example_code_2: |
                    ```
                    {print} Er hört ein Geräusch
                    Tiere {is} 🐿, 🦔, 🦇, 🦉
                    Tier {is} {ask} Was denkst du ist es?
                    {add} Tier {to_list} Tiere
                    {print} Es war das Tiere {at} {random}
                    ```
                story_text_3: |
                    Das ist ein Beispiel für den `{remove}` Befehl in deiner Geschichte

                    ### Übung
                    Kopiere deine Geschichte aus den vorigen Leveln in dieses Level.
                    In diesem Level hast du 3 neue Befehle gelernt: `{at} {random}` , `{add} {to}` und `{remove} {from}`.
                    Füge neue Zeilen Code zu deiner Geschichte hinzu, sodass alle neuen Befehle mindestens ein Mal in deiner Geschichte vorkommen.
                example_code_3: |
                    ```
                    {print} Sein Rucksack wurde viel zu schwer.
                    {print} Drinnen waren eine Flasche Wasser, eine Taschenlampe und ein Ziegelstein.
                    Rucksack {is} Wasser, Taschenlampe, Ziegelstein
                    rauswerfen {is} {ask} Welchen Gegenstand soll er rauswerfen?
                    {remove} rauswerfen {from} Rucksack
                    ```
            15:
                story_text: |
                    ## Geschichte
                    Mit der `{while}`-Schleife kannst du deine Geschichten noch interessanter gestalten. So kannst du zum Beispiel mit `{while} Spiel {is} 'läuft'` dein Spiel so lange laufen lassen, bis es tatsächlich vorbei ist.
                    Oder du lässt die Spieler mit `{while} Schwert {is} 'verloren'` so lange weiter suchen, bis sie etwas finden.

                example_code: |
                    ```
                    Schlüssel = 'verloren'
                    {print} 'Du stehst in Deinem Garten, hast jedoch Deine Schlüssel verloren.'
                    {print} 'Wo willst Du nach ihnen suchen?'
                    {print} 'Wähle zwischen: Baum, Blumenbeet, Stein, Briefkasten'
                    {while} Schlüssel == 'verloren'
                        Ort = {ask} 'Wo willst Du suchen?'
                        {if} Ort == 'Blumenbeet'
                            {print} 'Ah, hier sind sie!'
                            Schlüssel = 'gefunden'
                        {else}
                            {print} 'Nope, sie sind nicht beim ' Ort '.'
                    {print} 'Jetzt kannst Du ins Haus!'
                    ```
                start_code: "# setze hier deinen Code hin"
            13:
                story_text: |
                    ## Geschichte
                    Durch die Verwendung der Befehle `{and}` und `{or}` kannst du deine Geschichten vielseitiger gestalten. Du kannst zwei Fragen stellen und auf die Kombination der Antworten antworten.

                    ### Übung 1
                    Sieh dir den Beispiel-Code an und vervollständige ihn. Füge dann mindestens 2 weitere `{if}` Befehle mit `{and}` oder `{or}` hinzu.

                    ### Übung 2
                    Suche eine Geschichte aus einem vorherigen Level und füge ein `{and}` oder ein `{or}` hinzu.

                example_code: |
                    ```
                    {print} 'Unser Held geht durch den Wald'
                    {print} 'Der Pfad teilt sich in zwei Wege'
                    path = {ask} 'Welchen Weg soll sie wählen?'
                    weapon = {ask} 'Welche Waffe zieht sie?'
                    {if} Pfad {is} 'links' {and} Waffe {is} 'Schwert'
                        _
                    ```
                start_code: "# setze hier deinen Code hin"
    parrot:
        name: "Papagei"
        description: "Erschaffe Dir deinen eigenen zahmen Papageien, der Dir alles nachplappert!"
        default_save_name: "Papagei"
        levels:
            1:
                story_text: |
                    ## Papagei
                    Erschaffe Dir deinen eigenen zahmen Papageien, der Dir alles nachplappert!

                example_code: |
                    ```
                    {print} Ich bin Hedy der Papagei!
                    {ask} Wie lautet Dein Name?
                    {echo}
                    {echo}
                    ```
                start_code: "{print} Ich bin Hedy der Papagei\n{ask} Was ist dein Name?\n{echo}\n{echo}\n"
                example_code_2: "```\n{print} Ich bin Hedy der Papagei\n{ask} _\n{echo}\n{echo}\n"
                story_text_2: "### Übung\nKopiere den Beispiel-Code in deinen Eingabebereich, indem du den gelben Knopf drückst.\nBringe den Papagei dazu, eine andere Frage zu stellen? Fülle die Lücken im Beispiel aus!\n**Extra** Du kannst den Papagei auch mehrere Fragen stellen lassen. Tippe noch ein paar Zeilen Code unter deinen eigenen Code.\n"
            2:
                story_text: |
                    ## Papagei
                    Lass Deinen zahmen Papageien noch etwas echter klingen!

                example_code: |
                    ```
                    {print} Ich bin Hedy der Papagei.
                    Name {is} {ask} Wie lautet Dein Name?
                    {print} Name
                    {sleep}
                    {print} Aaaaaak
                    {sleep}
                    {print} Name
                    ```
                start_code: "{print} Ich bin Hedy der Papagei!"
                story_text_2: "### Übung\nDu kannst Variablen verwenden, damit der Papagei mehr als nur deinen Namen sagt. Kannst du diesen Code vervollständigen?\n"
                example_code_2: "```\n{print} Ich bin Hedy der Papagei\nname {is} {ask} Wie heißt du?\n{print} name\n{sleep}\n{print} name\nNachname {is} {ask} Wie ist dein Nachname?\n_\n{sleep}\n_\n```\n"
            3:
                story_text: |
                    ## Papagei
                    Bringe Deinem Papageien mit dem Befehl `{add}` neue Wörter bei.
                    ### Übung
                    Wie kannst Du deinen Papagei dazu bringen, mehrere Wörter zu sagen?

                example_code: |
                    ```
                    Wörter {is} Aaaaaaak, Hedy
                    {print} Bring deinem Papagei etwas bei!
                    neues_Wort {is} {ask} Welches Wort willst du ihm beibringen?
                    {add} neues_Wort {to_list} Wörter
                    {print} 🧒 Sag neues_Wort, Hedy!
                    {print} 🦜 Wörter {at} {random}
                    ```
                start_code: "# setze hier deinen Code hin"
            5:
                story_text: |
                    ## Papagei
                    Belohne deinen Papagei, wenn er das richtige Wort sagt!
                    Vervollständige den Code, indem du die 4 fehlenden Befehle ergänzt.

                example_code: |
                    ```
                    Wörter {is} Aaaaaaak, Hedy
                    {print} 'Bring deinem Papagei etwas bei!'
                    neues_Wort {is} {ask} 'Welches Wort willst du ihm beibringen?'
                    {add} neues_Wort {to_list} Wörter
                    gesagtes_Wort {is} Wörter {at} {random}
                    {print} '🧒 Sag ' neues_Wort ', Hedy!'
                    {print} '🦜 ' gesagtes_Wort
                    _ gesagtes_Wort {is} neues_Wort _ '🧒 Gut gemacht, Hedy! 🍪'
                    _ _ '🧒 Nein, Hedy! Sag ' neues_Wort
                    ```
                start_code: "# setze hier deinen Code hin"
            4:
                story_text: "## Papagei\nIn diesem Level müssen wir Anführungszeichen bei den Befehlen `{ask}` und `{print}` benutzen.\n### Übung\nVervollständige den Code, indem du Anführungszeichen in die Lücken füllst?\n"
                example_code: "```\nwörter {is} krächz, Hedy\n{print} _ Trainiere deinen Papagei! _\nneues_wort {is} {ask} _ Welches Wort möchtest du ihm beibringen? _\n{add} neues_wort {to_list} wörter\n{print} _ \U0001F9D2 Sage _ neues_wort _, Hedy!_\n{print} _ \U0001F99C _ wörter {at} {random}\n```\n"
                start_code: '# Schreibe deinen Code hier'
    songs:
        name: "Singe ein Lied!"
        description: "Gib einen Songtext aus"
        default_save_name: "Song"
        levels:
            12:
                story_text: |
                    ## Sing ein Lied!
                    Jetzt machen wir es uns richtig einfach und programmieren 'Wenn du glücklich bist, dann klatsche in die Hand'. Alles, was wir tun möchten, wenn wir glücklich sind, speichern wir in einer Variablen. Sieh es dir an:

                    ### Übung
                    Kannst du die richtige Anzahl Leerzeichen zum Einrücken hinzufügen, damit das Lied richtig spielt?
                    Tipp: Nicht jede Zeile braucht Einrückung.

                example_code: |
                    ```
                    Aktionen = 'klatsche in die Hand', 'stampfe mit dem Fuß', 'ruf Hurra'
                    _ {for} Aktion {in} Aktionen
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} 'Wenn Du glücklich bist'
                    _ {print} Aktion
                    _ {print} 'Zeig mir, wenn du bei mir bist, wie dir so zumute ist.'
                    _ {print} 'Wenn Du glücklich bist'
                    _ {print} Aktion
                    ```
                start_code: "# setze hier deinen Code hin"
            11:
                story_text: |
                    ## Lieder
                    In diesem Level nutzt du den Befehl `{for}` mit `{range}` für Lieder, in denen gezählt wird, wie z.B. bei 'Fünf kleine Affen'.

                    ### Übung 1
                    Fülle die Lücken und mach, dass der Code funktioniert. Falls du den Liedtext nicht kennst, schlage ihn selbst nach.

                    ### Übung 2
                    Die letzte Zeile des Liedes unterscheidet sich von den anderen. Gib diese Zeile innerhalb eine `{for}` Befehls aus und nutze `{if}` um es korrekt zum Laufen zu bringen.

                example_code: |
                    ```
                    _ affen _ _ 5 _ 1
                        {print} affen ' kleine Affen springen auf dem Bett'
                        _
                    ```
                start_code: "# setze hier deinen Code hin"
            10:
                story_text: |
                    ## Lieder
                    Mit `{for}` kannst du den ganzen Babyhai-Song (inklusive aller anderen Haie in der Familie) in nur 6 Zeilen Code ausgeben.

                    ### Übung 1
                    Kannst du den Babyhai-Code noch kürzer machen, indem du `{for}` verwendest? Vervollständige den Beispiel-Code.

                example_code: |
                    ```
                    familie = Baby, Mami, Papi, Omi, Opi
                    _ _ _ _ 
                      {print} _
                    ```
                start_code: "# setze hier deinen Code hin"
                example_code_2: "```\naffen = 5, 4, 3, 2, 1\n```\n"
                story_text_2: "### Übung 2\nGib das Lied Fünf kleine Affen springen auf dem Bett aus. Schlag den Text nach, falls du dich nicht daran erinnerst.\n\n**(extra)** Gib das Lied Old MacDonald hat 'ne Farm aus und stelle sicher, dass alle Tiere ein unterschiedliches Geräusch machen, indem du `{if}` benutzt.\n"
            8:
                story_text: |
                    ## Lieder
                    In einem vorigen Level hast du das Lied über die Bierflaschen programmiert. Aber ohne den `{repeat}` Befehl musstest du die Strophen viele Male kopieren.
                    In diesem Level kannst du das Lied 99 mal wiederholen, indem du nur eine einfache Zeile hinzufügst!

                    ### Übung
                    Füge den richtigen Befehl in die Lücken ein und rücke den Code korrekt ein.

                example_code: |
                    ```
                    Strophe = 99
                    _ 99 {times}
                    {print} Strophe ' Flaschen Bier an der Wand'
                    {print} Strophe ' Flaschen Bier'
                    {print} 'Nimm eine runter, reich sie herum'
                    Strophe = Strophe - 1
                    {print} Strophe ' Flaschen Bier an der Wand'
                    ```
                start_code: "# setze hier deinen Code hin"
            7:
                story_text: |
                    ## Lieder
                    In Liedern wiederholt sich oft einiges. So auch im Lied "Baby Hai"! Wenn du es singst, singst du eigentlich immer das gleiche:

                    Baby Hai tututudutudu <br>
                    Baby Hai tututudutudu <br>
                    Baby Hai tututudutudu <br>
                    Baby Hai 

                    ### Übung
                    Kannst du das Lied mit Hilfe des `{repeat}` Befehls ausgeben? Vervollständige den Code, indem du die Lücken füllst!
                    **Extra** Nach dem Baby-Hai kannst du natürlich auch andere Lieder programmieren. Es gibt viele Lieder mit Wiederholung!
                    Kannst du an ein weiteres Lied denken und es ausgeben?

                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Hai tututudutudu'
                    {print} 'Baby Hai'
                    ```

                start_code: "{print} 'Baby Hai'"
            6:
                story_text: |
                    ## Lieder
                    In Liedern wiederholt sich oft einiges. Manchmal basiert die Wiederholung auch darauf, dass etwas gezählt wird.
                    So zum Beispiel im Lied über die Bierflaschen. Dies ist eigentlich ein englisches Lied und hat den Titel "99 bottles of beer". Dieses Lied kannst du mit ein klein wenig Mathematik programmieren.

                    Tipp: Nutze die Laut-Vorlesen-Funktion um Hedy das Lied für dich singen zu lassen.

                    ### Übung
                    Du kannst nun die Zeilen 2 bis 7 so oft wie du möchtest wiederholen, indem du sie kopierst.

                example_code: |
                    ```
                    Strophe = 99
                    {print} Strophe ' Flaschen Bier an der Wand'
                    {print} Strophe ' Flaschen Bier'
                    {print} 'Nimm eine runter, reich sie herum'
                    Strophe = Strophe - 1
                    {print} Strophe ' Flaschen Bier an der Wand'
                    {sleep}
                    ```

                start_code: "{print} 'Lass uns singen!'"
                story_text_2: "## 5 Kleine Affen springen auf dem Bett\nDieses Kinderlied zählt runter, von 5 kleinen Affen bis zu 1 Affe.\nWenn du die Zeilen 2 bis 7 kopierst und unter dem Code einfügst, kannst du das ganze Lied singen!\n"
                example_code_2: "```\nnummer = 6\nnummer = nummer - 1\n{print} nummer ' kleine Affen springen auf dem Bett'\n{print} 'Einer fiel runter und stieß sich den Kopf'\n{print} 'Mama rief den Arzt und der Arzt sagte'\n{print} 'KEINE KLEINEN AFFEN SPRINGEN MEHR AUF DEM BETT!'\n{sleep}\n```\n"
            16:
                story_text: |
                    ## Lieder
                    In diesem Level kannst Du 'Old MacDonald hat ne Farm' sogar noch schneller programmieren. Du kannst jedem Tier das richtige Geräusch zuordnen, indem Du sie an die selbe Stelle einer Liste speicherst.
                    Vielleicht kennst Du ja auch schon das englischsprachige Lied 'The Drunken Sailor'. Hierfür benötigst Du nur 8 Zeilen Code. Sieh es Dir an!

                example_code: |
                    ## Old MacDonald hat ne Farm
                    ```
                    Tiere = ['Schweine', 'Hunde', 'Kühe']
                    Geräusche = ['grunz', 'wuff', 'muh']
                    {for} i {in} {range} 1 {to} 3
                        Tier = Tiere[i]
                        Geräusch = Geräusche[i]
                        {print} 'Old MacDonald hat ne Farm'
                        {print} 'I A I A O!'
                        {print} 'und auf der Farm da gibt es ' Tier
                        {print} 'I A I A O!'
                        {print} 'mit nem ' Geräusch Geräusch ' hier'
                        {print} 'und nem ' Geräusch Geräusch ' da'
                        {print} 'hier ein ' Geräusch
                        {print} 'dort ein ' Geräusch
                        {print} 'überall ein ' Geräusch Geräusch
                    ```

                    ## Drunken Sailor
                    ```
                    Zeilen = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} Zeile {in} Zeilen
                        {for} i {in} {range} 1 {to} 3
                            {print} Zeile
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
                start_code: "# setze hier deinen Code hin"
    turtle:
        name: "Schildkröte"
        description: "Mal dein eigenes Bild"
        default_save_name: "Schildkröte"
        levels:
            1:
                story_text: |
                    ## Lass uns zeichnen
                    Du kannst mit Hedy auch zeichnen. Indem Du Drehungen und Linien kombinierst, kannst Du ein Quadrat oder eine Treppe zeichnen.

                    Mit `{forward}` ziehst Du eine Linie vorwärts. Die Zahl dahinter legt fest, wie weit die Schildkröte wandert. Mit `{turn} {right}` ("drehe Dich nach rechts") macht sie eine Viertelumdrehung im Uhrzeigersinn, mit `{turn} {left}` ("drehe Dich nach links") entgegen dem Uhrzeigersinn.

                    Wenn du zurück laufen möchtest, benutzt du den `{forward}`-Befehl mit einer negativen Zahl., wie zum Beispiel `{forward} -100`.

                    ### Übung
                    Das ist der Anfang einer kleinen Treppe. Kannst Du sie so zeichnen, dass sie 5 Stufen hat?

                example_code: |
                    ```
                    {forward} 50
                    {turn} {right}
                    {forward} 50
                    {turn} {left}
                    {forward} 50
                    ```


                start_code: |-
                    {forward} 50
                    {turn} {left}
            2:
                story_text: |
                    ## Schildkröte
                    In diesen level kann du Variablen nutzen, um die Schildkröte interaktiv zu machen. Du kannst zum Beispiel die Spieler fragen, wie viele Schritte die Schildkröte machen soll.

                example_code: |
                    ```
                    antwort {is} {ask} Wie viele Schritte soll die Schildkröte machen?
                    {forward} antwort
                    ```
                start_code: |-
                    {print} Schildkrötenrennen!
                    Winkel {is} 90
                    {turn} Winkel
                    {forward} 25
                story_text_2: "In Level 1 konnte sich die Schildkröte außerdem nur nach links oder rechts drehen. Das ist ein bisschen langweilig!\nIn level 2 kann sie ihre Nase in alle Richtungen strecken.\n\nBenutze 90 für eine Vierteldrehung. Dies wird Grad genannt. Eine komplette Drehung sind 360 Grad.\n\n### Übung\nKannst du mit diesem Code eine Form gestalten? Vielleicht ein Dreieck oder einen Kreis?\n"
                example_code_2: "```\n{print} Figuren werden gezeichnet\nwinkel {is} 90\n{turn} winkel\n{forward} 25\n{turn} winkel\n{forward} 25\n```\n"
            3:
                story_text: |
                    ## Suchende Schildkröte
                    In diesem Level kannst Du `{at} {random}` nutzen, während die Schildkröte etwas zeichnet. Durch eine zufällige Wahl nimmt die Schildkröte jedes Mal einen anderen Weg.
                    Nutze `{at} {random}` um einen zufälligen Wert aus einer Liste zu wählen.
                    ### Übung
                    Kannst du die Zeilen 2 und 3 kopieren und wieder einfügen, um einen längeren, zufälligen Pfad zu erzeugen?

                example_code: |
                    ```
                    Winkel {is} 10, 50, 90, 150, 250
                    {turn} Winkel {at} {random}
                    {forward} 25
                    ```

                start_code: |-
                    Winkel {is} 10, 50, 90, 150, 250
                    {turn} Winkel {at} {random}
                    {forward} 25
            4:
                story_text: |
                    ## Lass uns zeichnen
                    In Level 4 musst Du bei `{print}` und `{ask}` Anführungszeichen nutzen. Das gilt auch für's Zeichnen!

                example_code: |
                    ```
                    {print} _ Formen zeichnen _
                    Winkel {is} 90
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    ```

                start_code: |-
                    {print} 'Formen zeichnen'
                    Winkel {is} 90
                    {turn} Winkel
                    {forward} 25

                story_text_2: "## Farben\nDu kannst auch die Farben der Linien mit dem Befehl `{color}` ändern. Sieh dir das Beispiel an.\nDu kannst auch den Befehl `{color} {white}` benutzen, um unsichtbare Linien zu ziehen. Du kannst diese weißen Linien nutzen, um die Schildkröte irgendwo auf dem Bildschirm hin zu bewegen bevor du zu malen anfängst.\n"
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
            5:
                story_text: |
                    ## Lass uns zeichnen
                    In Level 5 kannst Du mit dem Befehl `{if}` Entscheidungen treffen. Du kannst Dich zum Beispiel zwischen verschiedenen Formen entscheiden.

                example_code: |
                    ```
                    {print} 'Formen zeichnen'
                    Form {is} {ask} 'Möchtest Du ein Quadrat oder ein Dreieck?'
                    {if} Form {is} Dreieck Winkel {is} 120
                    {else} Winkel {is} 90
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    {turn} Winkel
                    {forward} 25
                    ```
                start_code: |-
                    {print} 'Formen zeichnen'
                    Form {is} {ask} 'Möchtest Du ein Quadrat oder ein Dreieck?'
                    {if} Form {is} Dreieck Winkel {is} 120 {else} Winkel {is} 90
                    {turn} Winkel
                    {forward} 25
            8:
                story_text: |
                    ## Lass uns zeichnen
                    Jetzt, da wir einzelne Linien wiederholen können, fällt uns das Zeichnen einzelner Formen leichter.
                    Wir setzen den Winkel einmalig und nutzen dann die Variable im `{repeat}`.

                    ### Übung 1
                    Der Beispiel-Code erstellt ein Quadrat. Ändere den Code, sodass er eine andere Figur erstellt, wie ein Dreieck oder ein Sechseck.
                    Dies bedarf einer Änderung in zwei Zeilen Code.
                    Tipp: Ein voller Kreis hat 360 Grad.

                    ### Übung 2
                    Erstelle nun eine Zeichnung aus mindestens zwei Polygonen.

                example_code: |
                    ```
                    Winkel = 90
                    {repeat} 4 {times}
                        {turn} Winkel
                        {forward} 50
                    ```
                story_text_2: |
                    **(extra)**Wir können auch das Programm verbessern, das verschiedene Formen zeichnet. Vervollständige den Code und du kannst jedes Vieleck zeichnen, das du möchtest!

                example_code_2: |
                    ```
                    Ecken = {ask} 'Wie viele Ecken soll die Form haben?'
                    Winkel = 360 / Ecken
                    {repeat} Ecken {times}
                        {turn} _
                        {forward} _
                    ```
                start_code: |-
                    Ecken = {ask} 'Wie viele Ecken soll die Form haben?'
            6:
                story_text: |
                    ## Lass uns zeichnen!
                    In diesem Level nutzen wir Berechnungen, um verschiedene Formen zu zeichnen.
                    Du hast vielleicht schon gelernt, dass eine komplette Umdrehung 360° sind. Falls nicht, dann weißt Du es jetzt!
                    Deswegen benutzen wir immer 90° für ein Rechteck. 360 geteilt durch 4 ist 90.
                    Jetzt, da wir wissen wie Mathe mit Hedy geht, können wir alle Formen zeichnen, die wir wollen!

                example_code: |
                    ```
                    Ecken = {ask} 'Wie viele Ecken soll die Form haben?'
                    Winkel = 360 / Ecken
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    {forward} 50
                    {turn} Winkel
                    ```
                start_code: |-
                    {print} 'Formen zeichnen'
            9:
                start_code: '# schreibe deinen Code hier'
                story_text: "## Schildkröte\nNun da wir ein `{repeat}` innerhalb eines `{repeat}` verwenden können, ist es möglich, komplexere Figuren zu erstellen.\n\n### Übung 1\nDieser Code erzeugt drei schwarze Dreiecke, ändere dies zu fünf pinken Quadraten.\n\n**(extra)** Erstelle eine Figur deiner Wahl, die aus mindestens zwei verschiedenen Formtypen besteht.\n"
                example_code: "```\n{color} {black}\n{repeat} 3 {times}\n    {repeat} 3 {times}\n        {forward} 10\n        {turn} 120\n    {color} {white}\n    {forward} 50\n    {color} {black}\n```\n"
                story_text_2: "## Schildkrötensteuerung\nNun kannst du die Schildkröte auch auf viele weitere Arten bewegen als nur vorwärts oder rückwärts!\n### Übung 2\nVervollständige den Code, um die Schildkröte mit den Tasten zu steuern. w für vorwärts, s für rückwärts, a für links und d für rechts. \nTipp: Für links und rechts wirst du drei Zeilen Code benötigen!\n"
                example_code_2: "```\n{repeat} 40 {times}\n    {if} w {is} {pressed}\n        {forward} 10\n    {if} a {is} {pressed}\n        _ _\n```\n"
    dishes:
        name: "Abwasch?"
        description: "Nutze den Computer, um zu sehen, wer abwäscht"
        default_save_name: "Abwasch"
        levels:
            10:
                story_text: |
                    ## Abwaschen
                    In diesem Level kannst du einen Ablauf für die ganze Woche auf eine einfache Art und Weise erstellen!

                    ### Übung
                    Füge eine zweite Hauspflicht hinzu, wie z.B. Staubsaugen oder Aufräumen, und stelle sicher, dass sie ebenfalls für die ganze Woche aufgeteilt ist.
                    <br> **(extra)** Das Programm ist nicht fair, du kannst Pech haben und die ganze Woche abwaschen. Wie könntest du das Programm fairer machen?

                example_code: |
                    ```
                    tage = Montag, Dienstag, Mittwoch, Donnerstag, Freitag, Samstag, Sonntag
                    namen = Mama, Papa, Emma, Sophie
                    for tag in tage
                        {print} namen {at} {random} ' ist am ' tag ' mit dem Abwasch dran.'
                    ```
                start_code: "# setze hier deinen Code hin"
            7:
                story_text: |
                    ## Abwaschen
                    Mit dem Befehl `{repeat}` kannst du Code-Zeilen wiederholen. Das kannst du nutzen, um für mehrere Tage zu berechnen, wer abwäscht.
                    ### Übung
                    Benutze den `{repeat}` Befehl um zu entscheiden wer die ganze Woche abwaschen muss. Jede Lücke muss mit einem Befehl oder einer Zahl gefüllt werden!
                    **(extra)** Kannst du an eine andere Aufgabe im Haushalt denken? Passe den Code an, sodass er drei Haushaltsaufgaben entscheidet. Vergiss nicht auszugeben um welche Aufgaben es sich handelt!

                example_code: |
                    ```
                    Familienmitglieder = Mama, Papa, Emma, Sophie
                    {repeat} _ _ {print} 'Abgewaschen wird von' _ _ _
                    ```
                start_code: "{print} 'Wer macht den Abwasch?'"
            6:
                story_text: |
                    ## Abwaschen
                    Wer ist wie oft mit dem Abwasch dran? Ist es gerecht verteilt? In diesem Level kannst Du mitzählen.

                example_code: |
                    ```
                    Familienmitglieder = Mama, Papa, Emma, Sophie
                    Emmas_Anzahl = 0
                    Tellerwäscher = Familienmitglieder {at} {random}
                    {print} 'Den Abwasch macht ' Tellerwäscher
                    {if} Tellerwäscher {is} Emma Emmas_Anzahl = Emmas_Anzahl + 1
                    {print} 'Emma ist diese Woche ' Emmas_Anzahl ' Mal mit dem Abwasch dran'
                    ```

                    Jetzt kannst Du die Zeilen ein paar Mal kopieren (z.B. weitere 6 Mal für die ganze Woche), um einen Plan für die ganze Woche aufzustellen.
                    Kannst Du den Code für eine ganze Woche schreiben?

                story_text_2: |
                    ## Mache es gerecht
                    Wenn Du ganz großes Pech hast, könnte Dich das vorigen Programm für die ganze Woche als Abwäscher bestimmen. Das ist ungerecht!
                    Um das System gerechter zu gestalten, kannst Du mit dem Befehl `{remove}` die ausgewählt Person von der Liste entfernen. Auf diese Weise musst Du nicht nochmal abwaschen, bis jeder einmal dran war.

                    Montag and Dienstag sind schon vorbereitet! Kannst Du den Rest der Woche vervollständigen?
                    Und... Kannst Du dir etwas einfallen lassen für den Fall, dass die Liste leer ist?

                example_code_2: |
                    ```
                    Familienmitglieder = Mama, Papa, Emma, Sophie
                    Tellerwäscher = Familienmitglieder {at} {random}
                    {print} 'Am Montag macht ' Tellerwäscher ' den Abwasch.'
                    {remove} Tellerwäscher {from} Familienmitglieder
                    Tellerwäscher = Familienmitglieder {at} {random}
                    {print} 'Am Dienstag macht ' Tellerwäscher ' den Abwasch.'
                    {remove} Tellerwäscher {from} Familienmitglieder
                    Tellerwäscher = Familienmitglieder {at} {random}
                    ```

                start_code: "{print} 'Wer wäscht ab?'"
            5:
                story_text: |
                    ## Abwaschen
                    Mit dem Befehl `{if}` kannst Du noch etwas mehr Spaß haben, wenn Du die Auswahl auswertest. Du kannst Dein Programm auf die Auswahl, die der Computer trifft, reagieren lassen.
                    ### Übung
                    Kannst Du den Code so vervollständigen, dass er "So ein Pech" ausgibt, wenn Du dran bist und ansonsten "Zum Glück!"?
                    Vergiss die Anführungszeichen nicht!

                example_code: |
                    ```
                    leute {is} Mama, Papa, Emma, Sophie
                    tellerwäscher {is} leute {at} {random}
                    _ tellerwäscher {is} Sophie {print} _ So ein Pech. Ich muss abwaschen. _
                    _ {print} 'Zum Glück kein Abwasch, weil ' _ ' dran ist.'
                    ```
                start_code: "{print} 'Wer macht den Abwasch?'"
            4:
                story_text: |
                    ## Abwaschen
                    Mit Anführungszeichen kannst du dein Abwaschprogramm noch besser machen.

                    ### Übung
                    Fülle zuerst die richtigen Symbole in die Lücken, um dieses Beispielprogramm zum Laufen zu bringen.
                    Hast du es hinbekommen? Großartig! Kopiere nun deinen eigenen Code aus den vorigen Leveln und bring ihn in diesem Level zum Laufen, indem du Anführungszeichen an den richtigen Stellen hinzufügst.
                example_code: |
                    ```
                    Familienmitglieder {is} Mama, Papa, Emma, Sophie
                    {print} _ den Abwasch macht heute _
                    {sleep}
                    {print} Familienmitglieder {at} _
                    ```
                start_code: "{print} 'Wer macht den Abwasch?'"
            3:
                story_text: |
                    ## Abwaschen
                    Gibt es bei euch zu Hause immer Streit, wer mit dem Abwasch dran ist und wer den Müll raus bringen muss?
                    Dann kannst du den Computer völlig fair entscheiden lassen. Das kannst du in diesem Level programmieren!

                example_code: |
                    ```
                    Familienmitglieder {is} Mama, Papa, Emma, Sophie
                    {print} Familienmitglieder {at} {random} muss abwaschen
                    ```
                story_text_2: |
                    ### Übung
                    Erstelle deine eigene Version des Spülmaschinenprogramms. Erstelle zuerst eine Liste deiner Familienmitglieder.
                    Denke dann an eine Aufgabe, die erledigt werden soll, und lasse den Computer entscheiden, wer die Aufgabe erledigen muss, indem du `{at} {random}` benutzt.

                    **Extra** Keine Lust auf selbst abwaschen? Hacke das Spülmaschinenprogramm und entferne deinen Namen von der Liste mit dem `{remove}` `{from}` Befehl.

                start_code: "{print} Wer macht den Abwasch?"
    dice:
        name: "Würfel"
        description: "Erstelle Deinen eigenen Würfel"
        default_save_name: "Würfel"
        levels:
            10:
                story_text: |
                    ## Würfel
                    Brauchen alle zu lange, um zu würfeln? In diesem Level kannst du Hedy alle Würfel auf einmal werfen lassen.

                    ### Übung
                    Ändere die Namen zu den Namen deiner Freunde oder Familienmitglieder und vervollständige den Code, sodass sie alle würfeln.

                example_code: |
                    ```
                    Spielerliste = Ann, John, Jesse
                    Würfelseiten = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} Spieler ' würfelt ' Würfelseiten {at} {random}
                        {sleep}
                    ```
                start_code: "# setze hier deinen Code hin"
            7:
                story_text: |
                    ## Würfel
                    Auch in Level 5 kannst du wieder einen Würfel programmieren. Mit dem Befehl `{repeat}` kannst du ganz einfach eine ganze Handvoll Würfel werfen.

                    ### Übung
                    Versuche, den Beispiel-Code zu vervollständigen!   **(extra)** Denke an ein Spiel, das du kennst, bei dem es um Würfel geht und programmiere es mit dem Befehl `{repeat}`.

                example_code: |
                    ```
                    Würfelseiten = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
                start_code: "{print} 'Was wird der Würfel diesmal anzeigen?'"
            6:
                story_text: |
                    ## Würfel
                    Hier kannst Du auch wieder der Regenwurmwürfel erstellen, aber hier kannst Du dazu auch noch berechnen, wie viele Punkte gewürfelt wurden.
                    Vielleicht weißt Du ja, dass der Wurm 5 Punkte zählt. Jetzt kannst Du nach jedem Wurf direkt berechnen, wie viele Punkte Du bekommst.
                    Hier ist der Code zur Berechnung der Punkte für einen Würfel:

                    ### Übung
                    Kannst du den Code verändern, um die Gesamtpunktzahl für 8 Würfel zu bekommen? Um das zu machen musst du einige Zeilen Code kopieren und einfügen.

                example_code: |
                    ```
                    Würfelseiten = 1, 2, 3, 4, 5, Regenwurm
                    Punkte = 0
                    Wurf = Würfelseiten {at} {random}
                    {print} 'Du hast ' Wurf ' gewürfelt.'
                    {if} Wurf {is} Regenwurm Punkte = Punkte + 5 {else} Punkte = Punkte + Wurf
                    {print} 'Jetzt hast Du ' Punkte ' Punkte.'
                    ```

                start_code: "{print} 'Was wird der Würfel diesmal anzeigen?'"
                example_code_2: "## Vorschau\n\nIst es dir gelungen, die Gesamtpunktzahl für 8 Würfel auszurechnen? Dafür musstest du ganz schön viel hin und her kopieren, oder?In Level 7 machen wir das einfacher!\n"
            5:
                story_text: |
                    ## Würfel
                    Wir werden die `{if}` und `{else}` Befehle zu unseren Würfeln hinzufügen!

                    ### Übung
                    Vervollständige den Beispiel-Code, sodass der Code sagt "Du kannst aufhören zu werfen", sobald du einen Regenwurm gewürfelt hast. Er sollte "Du musst nochmal werfen" ausgeben, falls du etwas anderes gewürfelt hast.
                    **Extra** Vielleicht möchtest Du auch einen Würfel aus einem ganz anderen Spiel nachbauen. Das ist auch super! Dann überlege dir selbst eine Reaktion. Zum Beispiel 'ja' bei einer 6 und 'schade' für alles andere.

                example_code: |
                    ```
                    würfelseiten {is} 1, 2, 3, 4, 5, Regenwurm
                    wurf {is} würfelseiten {at} {random}
                    {print} 'Du hast gewürfelt: ' würfelseiten
                    _ wurf {is} Regenwurm {print} 'Du kannst aufhören zu würfeln.'
                    _ {print} 'Du musst nochmal würfeln!'
                    ```
                start_code: "{print} 'Was zeigt der Würfel diesmal?'"
            4:
                story_text: |
                    ## Würfel
                    In diesem Level kannst du auch Würfel erstellen. Aber dieses Mal kannst du es selbst versuchen, ohne Beispiel-Code!

                    ### Übung
                    Erstelle deinen eigenen Würfel in diesem Level.
                    Tipp: Falls du keine Idee hast, wie man einen Würfel erstellt, schau dir deinen Würfel vom vorigen Level an, aber vergiss nicht, Anführungszeichen hinzuzufügen.

                start_code: "{print} 'Was zeigt der Würfel diesmal?'"
            3:
                story_text: |
                    ## Würfel
                    In diesem Level können wir von einer Liste wählen. Damit können wir den Computer eine Seite des Würfels wählen lassen.
                    Schaut mal in die Brettspiele in Eurem Schrank zu Hause.
                    Haben einige davon (besondere) Würfel? Die kannst Du auch mit diesem Code nachbauen.
                    Zum Beispiel den Würfel aus "Heckmeck am Bratwurmeck" mit den Zahlen 1 bis 5 und einem Regenwurm darauf.

                    ![Würfel aus "Heckmeck am Bratwurmeck" mit den Zahlen 1 bis 5 und einem Regenwurm darauf](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)

                example_code: |
                    ```
                    Würfelseiten {is} 1, 2, 3, 4, 5, Regenwurm
                    {print} Du warfst _ {at} {random}
                    ```

                start_code: "{print} Was zeigt der Würfel diesmal?"
                story_text_2: "### Übung\nDie Würfel im Beispiel oben sind die Würfel für ein bestimmtes Spiel. Kannst du normale Würfel machen?\nOder andere Spezialwürfel von einem anderen Spiel?\n"
                example_code_2: "```\nAuswahlmöglichkeiten {is} _\n```\n"
            15:
                story_text: |
                    ## Würfel
                    In diesem Spiel musst Du in möglichst wenig Versuchen eine 6 würfeln.

                example_code: |
                    ```
                    Würfelseiten = 1, 2, 3, 4, 5, 6
                    {print} 'Wirf so schnell wie möglich eine 6!'
                    Wurf = 0
                    Versuche = 0
                    {while} Wurf != 6
                        Wurf = Würfelseiten {at} {random}
                        {print} 'Du hast eine ' Wurf ' gewürfelt.'
                        Versuche = Versuche + 1
                    {print} 'Ja! Du hast in ' Versuche ' Versuchen eine 6 gewürfelt.'
                    ```
                start_code: "# setze hier deinen Code hin"
    rock:
        name: "Schere, Stein, Papier"
        description: "Mache dein eigenes Schere, Stein, Papier-Spiel"
        default_save_name: "Stein"
        levels:
            1:
                story_text: |
                    ## Schere, Stein, Papier
                    In Level 1 kannst du mit einem Schere, Stein, Papier-Spiel beginnen.

                    Mit `{ask}` kannst du eine Wahl treffen und mit `{echo}` kannst du diese Wahl wiederholen.

                example_code: |
                    ```
                    {print} Was wählst du?
                    {ask} Wähle aus Stein, Schere oder Papier
                    {echo} Also war deine Wahl:
                    ```
                start_code: "{print} Willkommen bei deinem eigenen Stein Schere Papier!\n{ask} Was wählst du?\n"
                story_text_2: "### Übung\nAnstelle von Wörtern kannst du auch Emoji benutzen ✊✋✌\nKannst du Code erstellen, der Emoji benutzt?\n"
                example_code_2: "```\n{print} Was wählst du?\n{ask} Wähle aus _\n{echo} Also war deine Wahl:\n```\n"
            10:
                story_text: |
                    ## Schere, Stein, Papier
                    Bist du zu faul, um das Spiel selbst zu spielen? Lass Hedy es für dich spielen!
                    Du musst nur die Namen der Spieler ausfüllen und sie bekommen eine zufällige Auswahl.

                    ### Übung 1
                    Vervollständige das Programm, indem du eine Liste von Namen ausfüllst.

                    ### Übung 2
                    Füge einen Computerspieler hinzu, der mit jedem Spieler auswählt.

                    **(extra)** Gehe zurück zu deinem Code und entscheide, wer in jeder Runde gewinnt: der Computer oder die benannte Person.

                example_code: |
                    ```
                    Auswahl = rock, paper, scissors
                    Personen = _
                    {for} Spieler {in} Personen
                         {print} Spieler ' wählt ' Auswahl {at} {random}
                    ```
                start_code: "# setze hier deinen Code hin"
            9:
                story_text: |
                    ## Stein, Schere, Papier
                    In diesem Level kannst du das ganze Stein-Schere-Papier-Programm programmieren, indem du `{if}` Befehle verschachtelst.

                    ### Übung
                    Kannst du den Code vervollständigen? Das Programm muss für jede Kombination sagen, wer gewonnen hat.

                    **(extra)** Möchtest du mehr als eine Runde spielen? Erweitere den Code, sodass du mehrere Runden spielen kannst. Du kannst sogar ein `{ask}` verwenden, um die Nutzer zu fragen, wie viele Runden sie spielen möchten.
                example_code: |
                    ```
                    Auswahl {is} Schere, Stein, Papier
                    deine_Wahl {is} {ask} 'Was wählst du?'
                    {print} 'Du wählst ' deine_Wahl
                    Computer_Wahl {is} Auswahl {at} {random}
                    {print} 'Der Computer wählt ' Computer_Wahl
                    {if} Computer_Wahl {is} deine_Wahl
                        {print} 'Unentschieden'
                    {if} Computer_Wahl {is} 'Stein'
                        {if} deine_Wahl {is} 'Papier'
                            {print} 'Du gewinnst!'
                        {if} deine_Wahl {is} 'Schere'
                            {print} 'Du verlierst!'
                    # mach den Beispiel-Code fertig
                    ```
                start_code: "# setze hier deinen Code hin"
            5:
                story_text: |
                    ## Stein, Schere, Papier
                    In diesem Level können wir bestimmen, ob es unentschieden war oder nicht. Dafür brauchst du den neuen `{if}` Code.

                    ### Übung
                    Vervollständige den Code, indem du die Lücken füllst.
                    * Lass den Computer eine zufällige Wahl treffen
                    * Frage den Spieler, was er wählt
                    * Fülle die korrekten Variablen in Zeile 4 und 5
                    * Programmiere Zeile 6 so, dass Hedy prüfen kann, ob es unentschieden war oder nicht

                example_code: |
                    ```
                    auswahl {is} Schere, Stein, Papier
                    computer_wahl {is} _
                    deine_wahl {is} _
                    {print} 'Du wählst ' _
                    {print} 'Der Computer wählte ' _
                    {if} _ {is} _ {print} 'Unentschieden!' {else} {print} 'kein Unentschieden'
                    ```

                    Ersetze die Unterstriche (_) mit dem richtigen Code, um zu sehen, ob das Spiel unentschieden ausgeht.

                start_code: "{print} 'Welcome to your own rock scissors paper!'"
            4:
                story_text: |
                    ## Stein, Schere, Papier
                    In diesem Level können wir Stein Schere Papier weiter programmieren. Aber wenn du Text hinzufügen möchtest, musst du auch hier Anführungszeichen verwenden.
                    ### Übung
                    Kopiere deinen Code aus dem vorigen Level und bring ihn mit Hilfe von Anführungszeichen nach jedem `{print}` oder `{ask}` Befehl zum Laufen.

                start_code: "{print} 'Welcome to your own rock scissors paper!'"
            3:
                story_text: |
                    ## Rock, paper, scissors

                    In this level we can enter lists and choose things from them.
                    You first make a list with `{is}`. Then you can let the computer choose something from the list with `{at} {random}`.
                    For example, you can let the computer pick from rock, paper and scissors.

                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} choices {at} {random}
                    ```
                start_code: "{print} Welcome to your own rock scissors paper!"
                story_text_2: "### Übung\nKopiere den Beispiel-Code und fülle die Lücken, um einen extra Spieler zu diesem Spiel hinzu zu fügen.\n\n**Extra** Gerade heißen die Spieler nur Spieler 1 und Spieler 2. Kannst du frage-Befehle hinzufügen (mit Variablen natürlich), um die Spielernamen zu erfragen?\nAuf diese Weise kannst du z.B. folgende Ausgabe erzeugen: `James wählt... Papier`\n"
                example_code_2: "```\nAuswahl {is} Stein, Schere, Papier\n{print} Spieler 1 wählt... Auswahl {at} {random}\n{print} Spieler 2 _\n```\n"
            2:
                story_text: |
                    ## Schere, Stein, Papier
                    In diesem Level kannst du üben, Variablen zu benutzen, damit du im nächsten Level das Spiel Schere, Stein, Papier machen kannst!

                example_code: |
                    ```
                    _ {is} {ask} Stein, Schere oder Papier?
                    {print} Ich wähle
                    ```
                start_code: "# setze hier deinen Code hin"
                story_text_2: "### Übung\nKopiere den Beispiel-Code in deinen Eingabebereich, indem du den gelben Knopf drückst.\nVervollständige den Code, indem du die richtigen Befehle in die Lücken schreibst.\n"
            15:
                story_text: |
                    ## Schere, Stein, Papier
                    Spiele, bis du den Computer besiegst! Aber mach zuerst den Beispiel-Code fertig...

                example_code: |
                    ```
                    gewonnen = 'nein'
                    Auswahl = 'Schere', 'Stein', 'Papier'
                    {while} gewonnen == 'nein'
                        deine_Wahl = {ask} 'Was wählst du?'
                        Computer_Wahl = Auswahl {at} {random}
                        {print} 'Du wähltest ' deine_Wahl
                        {print} 'Der Computer wählte ' Computer_Wahl
                        {if} Computer_Wahl == deine_Wahl
                            {print} 'Unentschieden!'
                        {if} Computer_Wahl == 'Stein' {and} deine_Wahl == 'Schere'
                            {print} 'Du hast verloren!'
                        {if} Computer_Wahl == 'Stein' {and} deine_Wahl == 'Papier'
                            {print} 'Du hast gewonnen!'
                            gewonnen = 'ja'
                    _
                    ```
                start_code: "# setze hier deinen Code hin"
            13:
                story_text: |
                    ## Schere, Stein, Papier
                    Mit dem Befehl `{and}` kannst du deinen Schere, Stein, Papier Code kürzen! Sieh dir den Beispielcode an.

                    ### Übung
                    Beende den Code so, dass immer ein Gewinner ermittelt wird. Führe dein Code ein paar Mal aus, um zu überprüfen, ob immer ein Gewinner ausgegeben wird.

                example_code: |
                    ```
                    Optionen = 'Stein', 'Papier', 'Schere'
                    deine_auswahl = {ask} 'Was wählst du?'
                    computer_auswahl = Optionen {at} {random}
                    {print} 'Du wählst ' deine_auswahl
                    {print} 'Der Computer wählt ' computer_auswahl
                    {if} computer_auswahl {is} deine_auswahl
                        {print} 'Unentschieden'
                    {if} computer_auswahl {is} 'Stein' {and} deine_auswahl {is} 'Papier'
                        {print} 'Du gewinnst!'
                    {if} computer_auswahl {is} 'Stein' {and} deine_auswahl {is} 'Schere'
                        {print} 'Der Computer gewinnt!'
                    _
                    ```
                start_code: "# setze hier deinen Code hin"
    calculator:
        name: "Taschenrechner"
        description: "Programmiere einen Taschenrechner"
        default_save_name: "Taschenrechner"
        levels:
            14:
                story_text: |
                    ## Zahlen raten
                    In diesem Level kannst du das Spiel 'Zahlen raten' programmieren

                example_code: |
                    ```
                    {print} 'Rate welche Zahl'
                    Zahlen = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    Zahl = Zahlen {at} {random}
                    Spiel = 'läuft'
                    {for} i {in} {range} 1 {to} 10
                        {if} Spiel == 'läuft'
                            Vermutung = {ask} 'Welche Zahl denkst du ist es?'
                            {if} Vermutung > Zahl
                                {print} 'Niedriger!'
                            {if} Vermutung < Zahl
                                {print} 'Höher!'
                            {if} Vermutung == Zahl
                                {print} 'Du hast gewonnen!'
                                Spiel = 'vorbei'
                    ```
                start_code: "# setze hier deinen Code hin"
            12:
                story_text: |
                    ## Taschenrechner
                    In diesem Level kannst du einen Taschenrechner bauen, der mit Dezimalzahlen arbeitet.

                    ### Übung 1
                    Fülle die Lücken aus, um den Taschenrechner zu vervollständigen. Denke daran, für Dezimalzahlen einen Punkt und kein Komma zu verwenden.

                    ### Übung 2
                    Erstelle ein neues Mathematik-Übungsprogramm, aber verwenden jetzt Dezimalzahlen.
                    Erstelle eine Liste von Zahlen, wähle zwei zum Multiplizieren aus und lasse die Spielerin antworten.
                    Und natürlich musst du die Antwort überprüfen! **(extra)** Erhöhe den Schwierigkeitsgrad, indem du Leben hinzufügen: Ein Spieler verliert ein Leben für eine falsche Antwort und nach drei falschen Antworten endet das Spiel.

                example_code: |
                    ```
                    Zahl1 = {ask} 'Was ist die erste Zahl?'
                    Zahl2 = {ask} 'Was ist die zweite Zahl?'
                    Antwort = _
                    {print} Zahl1 ' plus ' Zahl2 ' macht ' _
                    ```
                start_code: "# setze hier deinen Code hin"
            10:
                story_text: |
                    ## Taschenrechner
                    Dieses Taschenrechnerspiel hilft dir deine Multiplikationstabellen zu üben!
                    ### Übung
                    Kannst du mehr Nummern zur Liste hinzufügen, um alle Malfolgen bis 10 zu üben?

                example_code: |
                    ```
                    nummern = 1, 2, 3
                    {for} nummer1 {in} nummern
                        {for} nummer2 {in} nummern
                            antwort = {ask} 'Wie viel ist ' nummer2 ' mal ' nummer1 '?'
                            richtig = nummer1 * nummer2
                            {if} antwort {is} richtig
                                {print} 'Gut gemacht!'
                            {else}
                                {print} 'Das ist falsch. Die richtige Antwort ist ' richtig
                    ```
                start_code: "# setze hier deinen Code hin"
            9:
                story_text: |
                    ## Taschenrechner
                    In Level 6 hast du einen Taschenrechner erstellt. In diesem Level kannst du den Code erweitern, so dass er mehrere Fragen stellt.

                    ### Übung 1
                    Kannst du Zeile 10 vervollständigen, damit das Programm funktioniert?

                    ### Übung 2
                    Gib dem Spieler eine Rückmeldung, wenn sie eine richtige oder falsche Antwort eingegeben haben. Um das zu erreichen, erweitere dein Programm mit einem `{else}`.

                example_code: |
                    ```
                    Punkte = 0
                    {repeat} 10 {times}
                        Nummern = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        Nummer1 = Nummern {at} {random}
                        Nummer2 = Nummern {at} {random}
                        richtige_antwort = Nummer1 * Nummer2
                        {print} 'Was ist ' Nummer1 ' mal ' Nummer2 '?'
                        Antwort = {ask} 'Tippe deine Antwort hier ein...'
                        {print} 'Deine Antwort ist' Antwort
                        {if} _ {is} _
                            Punkte = Punkte + 1
                    {print} 'Großartig gemacht! Dein Punktestand ist... ' Punkte ' von 10!'
                    ```
                start_code: "{print} 'Welcome to this calculator!'"
            6:
                story_text: |
                    ## Taschenrechner
                    Nun da du die Mathematik beherrscht, kannst du selbst einen Taschenrechner erstellen!

                example_code: |
                    ```
                    nummer1 {is} {ask} 'Gib die erste Zahl ein:'
                    nummer2 {is} {ask} 'Gib die zweite Zahl ein:'
                    richtige_antwort = nummer1 * nummer2
                    {print} nummer1 ' mal ' nummer2 ' ist ' richtige_antwort
                    ```
                story_text_2: |
                    ### Übung
                    Der Taschenrechner oben berechnet die Antwort für dich, aber du kannst auch ein Programm erstellen, um deine mathematischen Fähigkeiten zu testen, so wie dieses:
                    Fülle die Lücken aus, um es zu vervollständigen!

                example_code_2: |
                    ```
                    richtige_antwort = 11 * 27
                    antwort = {ask} 'Wie viel ist 11 mal 27?'
                    {if} antwort {is} _ {print} 'Gut gemacht!'
                    {else} {print} 'Falsch! Es war ' _
                    ```

                start_code: "{print} 'Willkommen bei diesem Taschenrechner!'"
                example_code_3: "```\nTabellen = 4, 5, 6, 8\nNummern = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nTabelle = Tabellen {at} {random}\nNummer = Nummern {at} {random}\nrichtige_antwort = Tabelle * Nummer\nAntwort = {ask} 'Wie viel ist ' Tabelle ' mal ' Nummer '?'\n{if} Antwort {is} richtige_antwort {print} 'okay'\n{else} {print} 'Fehler! Es war ' richtige_antwort\n```\n"
                story_text_3: "## Zufallszahlen\nDu kannst den Computer auch allein zufällige Summen rechnen lassen, indem du zufällig benutzt.\nSo wählst du einige Tabellen zum Üben, und daraus erhältst du immer eine andere Summe.\n"
            15:
                story_text: |
                    ## Taschenrechner
                    Du kannst die `{while}` Schleife zum Taschenrechnerspiel, was du im vorigen Level gelernt hast, hinzufügen.
                    Dies stellt sicher, dass der Spieler nicht zur nächsten Frage weiterkommt, wenn er falsch antwortet.

                example_code: |
                    ```
                    punkte = 0
                    {for} i {in} {range} 0 {to} 9
                        zahlen = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        zahl1 = zahlen {at} {random}
                        zahl2 = zahlen {at} {random}
                        korrekt = zahl1 * zahl2
                        antwort = 0
                        {while} antwort != korrekt
                            {print} 'Wie viel ist ' zahl1 ' mal ' zahl2 '?'
                            antwort = {ask} 'Schreibe deine Antwort hier:'
                            {print} 'Deine Antwort ist ' antwort
                        {print} 'Gut gemacht!'
                    {print} 'Du gewinnst!'
                    ```
                start_code: "# setze hier deinen Code hin"
            11:
                example_code: "```\nzahl = 10\n{for} i {in} {range} 1 bis 10\n    {print} i * zahl\n```\n"
                story_text: "## Taschenrechner\nMit einem `{for}` kannst du das Multiplikationsprogramm vereinfachen.\n\n### Übung 1\nVerbessere den Beispiel-Code, sodass es eine nette Multiplikationstabelle ausgibt: \"1 mal 10 is 10\", \"2 mal 10 ist 20\", usw.\n\n### Übung 2\nGehe zurück zu deinem Level 10 Multiplikations-Code und verändere ihn, sodass er ein `{for}` und `{range}` benutzt.\n"
                start_code: '# platziere deinen Code hier'
            13:
                example_code: "```\nantwort1 = {ask} 'Was ist 10 mal 7?'\nantwort2 = {ask} 'Was ist 6 mal 7?'\n{if} _ _ _ _ _ _ _\n    {print} _\n```\n"
                start_code: '# Schreib deinen Code hier'
                story_text: "## Taschenrechner\n\n### Übung 1\nWir wollen das Übungsprogramm etwas schwieriger gestalten. Der Spieler muss nun zwei Fragen richtig beantworten. Fülle die Lücken aus, um das Programm zu vervollständigen.\n\n### Übung 2 (extra)\nManchmal gibt es bei Berechnungen mehrere richtige Antworten. Zum Beispiel kann 10 durch 5 und durch 2 geteilt werden. Die Frage \"Welche Zahl teilt 10?\" kann also durch 2 und durch 5 beantwortet werden.\nFrage nach einer Berechnung, die mehrere richtige Antworten hat, bitte die Spielerin, sie zu beantworten, und bestimme mit `{or}`, ob die Antwort richtig ist.\nLeere das Programmierfeld und erstelle deine eigene Lösung.\n"
    restaurant:
        name: "Restaurant"
        description: "Erstelle dein eigenes virtuelles Restaurant"
        default_save_name: "Restaurant"
        levels:
            1:
                story_text: |
                    ## Restaurant
                    Im ersten Level kannst du dein eigenes virtuelles Restaurant erstellen, und die Bestellungen deiner Gäste aufnehmen.

                example_code: |
                    ```
                    {print} Willkommen in Hedys Restaurant 🍟
                    _ Was würden Sie gerne bestellen?
                    {echo} Sie hätten also gerne
                    {print} Danke für Ihre Bestellung!
                    {print} Kommt sofort!
                    ```
                start_code: "# setze hier deinen Code hin"
                story_text_2: "### Übung\nKopiere den Beispiel-Code in den Eingabebereich, indem du den gelben Knopf drückst.\nFülle zuerst die Lücken mit den richtigen Befehlen, um den Code zum Laufen zu bringen.\nFüge dann mindestens 4 zusätzliche Zeilen zum Restaurant-Programm hinzu.\nFrage die Gäste, was sie trinken möchten und frage, ob sie in bar oder mit Karte zahlen möchten.\nDenke die zum Schluss eine nette Verabschiedung für deine Gäste aus.\n"
            2:
                story_text: |
                    ## Restaurant
                    In Level 2 konntest du dein Restaurant mit Variablen erweitern. In Level 1 konnte Hedy nur die Bestellung einmal wiedergeben (mit `{echo}`) und sich nur das merken, was zuletzt bestellt wurde.
                    Jetzt kannst du Variablen verwenden und Hedy kann sich sowohl das Essen als auch den Belag merken!
                start_code: "# setze hier deinen Code hin"
                example_code: "```\n{print} Willkommen in Hedys Restaurant!\n{print} Heute gibt es Pizza oder Lasagne.\nEssen {is} {ask} Was würden Sie gerne essen?\n{print} Gute Wahl! Das ist mein Lieblingsessen!\nBelag {is} {ask} Hätten Sie die gerne mit Fleisch oder mit Gemüse?\n{print} Das Essen mit Belag ist auf dem Weg!\n```\n"
                story_text_2: "### Übung\nKopiere deinen eigenen Restaurant-Code aus dem vorigen Level in den unteren Eingabebereich.\nRepariere den Code, indem du die {ask} und {echo} Befehle ersetzt und Variablen benutzt, wie du in diesem Level gelernt hast.\n\nNun da dein Code wieder läuft, ist es Zeit etwas Weiteres hinzu zu fügen.\nSchau dir die letzte Zeile des Beispiel-Codes an: `{print} essen mit belag ist auf dem Weg!`\nIn dieser einzelnen Zeile wurden 2 Variablen benutzt, um die Bestellung zusammen zu fassen.\nFüge nun deine eigene Zusammenfassung der Essen- und Getränkebestellung deiner Gäste hinzu.\n\n**Extra** Nun da du gelernt hast Variablen zu benutzen, kannst du so viele Variablen in einer Zeile nutzen wie du magst. Kannst du mehr Variablen zu deinem Code hinzufügen, wie hier essen oder zum Mitnehmen, bar oder Karte, mit oder ohne Strohhalm usw.?\n"
            12:
                story_text: |
                    ## Restaurant
                    Ab diesem Level kannst du Dezimalzahlen verwenden, um deine Speisekarte realistischer zu machen.

                    ## Übung
                    Kannst du dir Code ausdenken mit dem du deinen Freunden und deiner Familie 15% Rabatt geben kannst?

                example_code: |
                    ```
                    preis = 0.0
                    essen = {ask} 'Was möchten Sie bestellen?'
                    trinken = {ask} 'Was möchten Sie trinken?'
                    {if} essen {is} 'Hamburger'
                        preis = preis + 6.50
                    {if} essen {is} 'Pizza'
                        preis = preis + 5.75
                    {if} trinken {is} 'Wasser'
                        preis = preis + 1.20
                    {if} trinken {is} 'Sprudel'
                        preis = preis + 2.35
                    {print} 'Das macht ' preis ' Euro, bitte'
                    ```
                start_code: "# setze hier deinen Code hin"
            11:
                story_text: |
                    ## Restaurant
                    Wir können `{for}` mit `{range}` nutzen, um die Bestellungen mehrerer Gäste ordentlich auszugeben.

                    ### Übung
                    Beende den Restaurant-Code, sodass du nach den Bestellungen mehrerer Gäste fragen kannst. Gib jedes Mal die Bestellnummer aus: 'Bestellung 1', 'Bestellung 2', usw.
                    Bist du dir nicht sicher, wie du das anstellen sollst? Schau dir deinen Level 8 Code an.

                    **(extra)** In Level 9 benutzte das Restaurant auch Preise. Das kannst du hier ebenfalls hinzufügen!

                example_code: |
                    ```
                    {print} 'Willkommen im Restaurant Hedy!'
                    Leute = {ask} 'Für wie viele Leute möchten Sie bestellen?'
                    {print} 'Also möchten Sie für' Leute ' Leute bestellen.'
                    {print} "Los geht's!"
                    ```
                start_code: "# setze hier deinen Code hin"
            10:
                story_text: |
                    ## Restaurant
                    In diesem Level wirst du lernen, wie du leicht nach Bestellungen für verschiedene Gänge fragst.

                    ### Übung 1
                    Vervollständige den Code mit einem `{ask}` in den Lücken, sodass der Kunde für jeden Gang gefragt wird, was er essen möchte.

                example_code: |
                    ```
                    gänge = Vorspeise, Hauptgericht, Nachtisch
                    {for} gang {in} gänge
                        {print} 'Was ist Ihre Bestellung als ' gang '?'
                        _ 
                        _
                    ```

                story_text_2: |
                    ### Übung
                    Natürlich kannst auch für mehrere Personen bestellen!
                    Kannst du die richtige Anzahl an Leerzeichen zur Einrückung vor jeder Zeile hinzufügen, damit der Code richtig läuft?
                    Tipp: manche Zeilen brauchen gar keine Einrückung.

                example_code_2: |
                    ```
                    _ Kurse = Vorspeise, Hauptgericht, Nachtisch
                    _ Namen = Timon, Onno
                    _ {for} Name {in} Namen
                    _ {for} Kurs {in} Kurse
                    _ Essen = {ask} Name ', Was möchten Sie als ' Kurs '?'
                    _ {print} Name ' bestellt ' Essen ' als ' Kurs
                    ```
                start_code: "Gänge = Vorspeise, Hauptspeise, Dessert"
            9:
                story_text: |
                    ## Restaurant
                    In diesem Level kannst du Verschachtelung benutzen, um dein Restaurant realistischer und spaßiger zu machen!

                    ### Übung
                    Die Einrückung im Beispiel-Code wurde entfernt.
                    Kannst du herausfinden wie viel Einrückung jede Zeile benötigt, damit der Code ordentlich funktioniert?
                    Falls der Kunde Pizza bestellt, sollte Hedy nicht fragen, welche Soße der Kunde möchte.

                    **(extra)** Ein Restaurant lagert nicht alle möglichen Soßen. Erstelle eine Liste mit verfügbaren Soßen und gib eine Antwort bei jeder Bestellung, ob du sie auf Lager hast. <br>
                    **(extra)** Pizzen haben Beläge. Frag die Kunden, was sie möchten.<br>
                    **(extra)** Möchten die Kunden etwas trinken? Frag sie! <br>                    

                example_code: |
                    ```
                    {print} 'Willkommen im Restaurant Chez Hedy!'
                    Leute = {ask} 'Wie viele Leute kommen heute?'
                    {print} 'Großartig!'
                    Preis = 0
                    {repeat} Leute {times}
                    _ Essen = {ask} 'Was möchten Sie bestellen?'
                    _ {print} Essen
                    _ {if} Essen {is} Fritten
                    _ Preis = Preis + 3
                    _ Sauce = {ask} 'Welche Sauce möchten Sie für die Fritten?'
                    _ {if} Sauce {is} keine
                    _ {print} 'keine Sauce'
                    _ {else}
                    _ Preis = Preis + 1
                    _ {print} 'mit ' Sauce
                    _ {if} Essen {is} Pizza
                    _ Preis = Preis + 4
                    {print} 'Das macht ' Preis ' Euro'
                    {print} 'Genießen Sie Ihre Mahlzeit!'
                    ```
                start_code: "# setze hier deinen Code hin"
            8:
                story_text: |
                    ## Restaurant
                    In diesem Level kannst du dein virtuelles Restaurant ausbauen, indem du mehrere Zeilen Code wiederholst. Das geht so:
                start_code: "# setze hier deinen Code hin"
                example_code: "```\n{print} 'Willkommen im Restaurant Chez Hedy!'\nGäste = {ask} 'Zu wie vielen kommen Sie heute zu uns?'\n{print} 'Großartig!'\n{repeat} Gäste {times}\n    Essen = {ask} 'Was würden Sie gerne bestellen?'\n    {print} Essen\n{print} 'Danke für Ihre Bestellung!'\n{print} 'Guten Appetit!'\n```\n"
                story_text_2: "### Übung\nDieser Code kann mit mehr Gerichten auf der Karte erweitert werden, zum Beispiel einem Getränkeangebot, und/oder mehreren Gängen oder Nachtisch. Füge mindestens ein Gericht hinzu.\n**(extra)** Füge so viele Gerichte hinzu wie du magst!\n"
            7:
                story_text: |
                    ## Restaurant
                    In diesem Level hast du gelernt, wie du den Befehl `{repeat}` verwenden kannst, um eine Codezeile um eine bestimmte Anzahl zu wiederholen.
                    Du kannst das in deinem Restaurant verwenden um mehrere Leute nach ihren Essenswünschen zu fragen (`{ask}`).

                    ### Übung
                    Kannst du die Lücken füllen? Hedy muss diese Frage so oft wiederholen wie Leute da sind. Wenn also 5 Leute da sind, muss die Frage 5 mal gestellt werden.
                    **(extra)** Erweitere deinen Code mit mehr Fragen, zum Beispiel zu Getränken oder Soßen.
                start_code: "# setze hier deinen Code hin"
                example_code: "```\n{print} 'Willkommen im Restaurant Chez Hedy'\nGäste = {ask} 'Wie viele Leute kommen heute zu uns?'\n```\n"
            6:
                story_text: |
                    ## Restaurant
                    In diesem Level kannst du Mathe verwenden um den Gesamtpreis einer Bestellung auszurechnen. Da macht dein virtuelles Restaurant realistischer.

                example_code: |4

                    Du kannst einen einfachen Restaurant Code erstellen. Das geht so:
                    ```
                    {print} 'Willkommen im Restaurant Chez Hedy'
                    {print} 'Hier ist unsere Karte:'
                    {print} 'Unsere Hauptgerichte sind Pizza, Lasagne oder Spaghetti'
                    haupt = {ask} 'Welches Hauptgericht möchten Sie?'
                    preis = 0
                    {if} haupt {is} Pizza preis = 10
                    {if} haupt {is} Lasagne preis = 12
                    {if} haupt {is} Spaghetti preis = 8
                    {print} 'Sie bestellten ' haupt
                    {print} 'Das kostet ' preis ' Euro, bitte'
                    {print} 'Danke, genießen Sie Ihre Mahlzeit!'
                    ```
                story_text_2: |
                    Aber du kannst auch noch viel mehr Elemente zu deinem virtuellen Restaurant hinzufügen, zum Beispiel mehrere Essensgänge.

                    ### Übung
                    Es gibt noch viel was du deinem virtuellen Restaurant hinzufügen könntest. Kannst du zum Beispiel...
                    - fragen wie viele Gäste kommen und den Preis mit dieser Anzahl multiplizieren?
                    - einen weiteren Gang hinzufügen?
                    - Gästen einen Rabatt geben wenn sie einen (geheimen) Gutscheincode eingeben?
                    - ein Kindermenü hinzufügen?
                    - dir noch weitere Ideen ausdenken?

                example_code_2: |4

                    In diesem Beispiel gibt es ein Drei-Gänge-Menü, was mehr Code erfordert sowie ein paar Zusätze in der Preisberechnung.
                    ```
                    {print} 'Willkommen im Restaurant Chez Hedy'
                    {print} 'Hier ist die Speisekarte:'
                    {print} 'Unsere Vorspeisen sind Salat, Suppe und Carpaccio'
                    {print} 'Als Hauptspeise gibt es Pizza, Lasagne oder Spaghetti'
                    {print} 'Zum Desserts gibt es Brownie, Eis oder Milchshake'
                    Vorspeise = {ask} 'Welche Vorspeise hätten Sie gerne?'
                    Hauptspeise = {ask} 'Welche Hauptspeise hätten Sie gerne?'
                    Dessert = {ask} 'Was nehmen Sie als Dessert?'
                    Preis = 0
                    {if} Vorspeise {is} Suppe Preis = Preis + 6 {else} Preis = Preis + 7
                    {if} Hauptspeise {is} Pizza Preis = Preis + 10
                    {if} Hauptspeise {is} Lasagne Preis = Preis + 12
                    {if} Hauptspeise {is} Spaghetti Preis = Preis + 8
                    {if} Dessert {is} Brownie Preis = Preis + 7
                    {if} Dessert {is} Eis Preis = Preis + 5
                    {if} Dessert {is} Milchshake Preis = Preis + 4
                    {print} 'Sie haben ' Vorspeise ' , ' Hauptspeise ' und ' Dessert ' bestellt'
                    {print} 'Das macht dann ' Preis ' Euro, bitte'
                    {print} 'Danekschön, guten Appetit!'
                    ```

                start_code: "# setze hier deinen Code hin"
            5:
                story_text: |
                    ## Restaurant
                    In diesem Level erlaubt dir der `{if}`-Befehl deinen Kundinnen oder Kunden Fragen zu stellen (`{ask}`) und verschiedene Antworten zu geben.
                    In dem unteren Beispiel siehst du, dass du die Kundin oder den Kunden fragen (`{ask}`) kannst, ob (`{if}`) sie oder er die Tagesgerichte erfahren möchte, und Hedy kann dementsprechend antworten.

                example_code: |
                    ```
                    {print} 'Willkommen im Restaurant Chez Hedy'
                    Tagesgericht {is} {ask} 'Würden Sie gerne das heutige Tagesgericht erfahren?'
                    {if} Tagesgericht {is} ja {print} 'Das Tagesgericht ist Nudeln mit Tomatensoße.' {else} {print} 'Ok, kein Problem.'
                    Essen {is} {ask} 'Was würden Sie gerne essen?'
                    {print} 'Einmal ' Essen ', kommt sofort!'
                    Getränk {is} {ask} 'Was würden Sie gerne dazu trinken?'
                    {if} Getränk {is} Cola {print} 'Tut mir leid, die Cola ist aus!' {else} {print} 'Großartige Wahl!'
                    etwas {is} {ask} 'Hätten Sie gerne noch etwas?'
                    {print} 'Lassen Sie mich Ihre Bestellung noch einmal wiederholen...'
                    {print} 'Einmal ' Essen
                    {if} Getränk {is} Cola {print} 'und...' {else} {print} 'Einmal ' Getränk
                    {if} etwas {is} nein {print} 'Das ist alles!' {else} {print} 'Einmal ' etwas
                    {print} 'Danke für Ihre Bestellung und guten Appetit!'
                    ```

                start_code: "# setze hier deinen Code hin"
                story_text_2: "### Übung\nFallen dir noch mehr Fragen ein, die du den Kundinnen oder Kunden stellen kannst (`{ask}`), wenn sie bestellen? Und kannst du dir ein paar Antworten auf ihre Fragen ausdenken, indem du den `{if}` Befehl verwendest?\n"
            4:
                story_text: |
                    ## Restaurant
                    In diesem Level musst du Anführungszeichen verwenden, wenn du die Befehle `{print}` oder `{ask}`benutzt.

                    ### Übung 1
                    Füge die Anführungszeichen zum Code hinzu, um ihn zum Laufen zu bringen! Sei vorsichtig: Variablen sollten nicht in Anführungszeichen sein.

                    ### Übung 2
                    Gehe zurück zum vorigen Level und kopiere deinen Restaurant-Code. Bringe diesen Code in diesem Level zum Laufen, indem du Anführungszeichen an den richtigen Stellen hinzufügst.
                start_code: "# setze hier deinen Code hin"
                example_code: "## Beispiel für Hedy's Restaurant\n```\n_ Füge Anführungszeichen in diesen Code ein _\n{print} Willkommen im Restaurant Chez Hedy!\n{print} Heute gibt es Pizza oder Lasagne.\nEssen {is} {ask} Was würden Sie gerne essen?\n{print} Gute Wahl! Die  Essen  ist mein Favorit!\nBelag {is} {ask} Hätten Sie gerne Fleisch oder Gemüse als Belag?\n{print} Essen  mit  Belag  ist auf dem Weg!\nGetränke {is} {ask} Was würden Sie gerne dazu trinken?\n{print} Danke für Ihre Bestellung.\n{print} Ihre  Essen  und  Getränke  kommen sofort!\n```\n"
            3:
                story_text: |
                    ## Zufallsrestaurant
                    Fällt es dir schwer zu entscheiden, was du gerne zum Abendessen hättest? Du kannst das Hedy machen lassen!
                    Füge einfach Listen deiner Lieblingsgerichte (oder der von dir nicht so gemochten Gerichte) hinzu und Hedy kann zufällig für dich ein Abendessen auswählen.
                    Du kannst dir auch einen Spaß draus machen, indem du Hedy den Preis für dein Abendessen auswählen lässt! Was wird wohl rauskommen?

                example_code: |
                    ```
                    gerichte {is} Spaghetti, Rosenkohl, Hamburger
                    {print} Du bekommst gerichte {at} {random} heute abend!
                    preise {is} 1 Euro, 10 Euro, 100 Euro
                    {print} Das macht preise {at} {random} bitte.
                    ```
                story_text_2: |
                    ### Übung
                    Erstelle nun deine eigene Version des Zufallsrestaurants.
                    Erstelle selbst eine Liste aller Vorspeisen, Hauptgerichte, Nachtische, Getränke und Preise.
                    Nutze dann `{print}` und `{at} {random}` Befehle, um dem Kunden zu sagen, was heute auf seinem Menü steht.

                example_code_2: |
                    ```
                    {print} Willkommen in deinem eigenen Zufallsrestaurant!
                    vorspeisen {is} _
                    hauptgerichte {is} _
                    nachspeisen {is} _
                    getränke {is} _
                    preise {is} _
                    _
                    ```
                start_code: "# setze hier deinen Code hin"
                story_text_3: "## Allergien\n**Extra** Hat dein Gast irgendwelche Allergien oder eine Abneigung gegenüber bestimmten Gerichten? Dann kannst du den `{remove}` Befehl verwenden, um es von der Speisekarte zu entfernen.\n"
                example_code_3: "```\n{print} Geheim-Milch-Shake\nsorten {is} Erdbeer, Schokolade, Vanille\nallergien {is} {ask} Bist du allergisch gegenüber einer Sorte?\n_\n{print} Du bekommst einen sorten {at} {random} Milch-Shake\n```\n"
            15:
                story_text: |
                    ## Restaurant
                    With the `{while}` you can make sure your costumers can keep adding orders until they are done.

                example_code: |
                    ```
                    {print} 'Willkommen bei McHedy'
                    mehr = 'ja'
                    {while} mehr == 'ja'
                        Bestellung = {ask} 'Was würden Sie gerne bestellen?'
                        {print} Bestellung
                        mehr = {ask} 'Würden Sie gerne noch etwas bestellen?'
                    {print} 'Dankeschön!'
                    ```
                start_code: "# setze hier deinen Code hin"
            13:
                story_text: |
                    ## Restaurant
                    In diesem Level lernst du neue Befehle, mit denen du deinen Code noch weiter ausbauen kannst.

                    ### Übung 1
                    Setze ein `{and}` und ein `{or}` an die logische Stelle im Programm.

                    ### Übung 2
                    Erweitere dein Restaurant mit mindestens einem weiteren `{and}` und einem `{or}`.
                    Erstelle zum Beispiel einen speziellen Rabattcoupon, der nur für Pizza gilt, oder gib deinen Kunden ein kostenloses Getränk
                    mit Pommes und Pfannkuchen. Oder natürlich etwas ganz anderes!

                example_code: |
                    ```
                        {print} 'Das ist unser Rabattmenü'
                        preis = preis - 3
                    {if} getränk {is} 'Wasser' _ getränk {is} 'Saft'
                        {print} 'Das ist eine gesunde Wahl'
                    {print} 'Das kostet dann ' preis '  Euro'
                    ```
                start_code: "# setze hier deinen Code hin"
    fortune:
        name: "Wahrsagerin"
        description: "Lass Hedy die Zukunft voraussagen"
        default_save_name: "Wahrsagerin"
        levels:
            1:
                story_text: |
                    ## Wahrsagerin
                    Warst du schon mal auf dem Rummel und hast dir die Zukunft von einer Wahrsagerin vorhersagen lassen? Oder hast du schon mal mit einer magischen schwarzen Kugel gespielt?
                    Dann weißt du bestimmt, dass sie nicht wirklich die Zukunft vorhersagen können, aber dass es trotzdem Spaß macht.

                    In den nächsten Leveln kannst du lernen, wie du deine eigene Wahrsagemaschine erstellst!
                    In Level 1 kannst du einfach anfangen, indem du Hedy sich als Wahrsagerin vorstellen lässt und sie die Antwort des Spielers mit `{echo}` ausgibst.
                    So wie hier:

                example_code: |
                    ```
                    _ Hallo, ich bin Hedy, die Wahrsagerin!
                    _ Wer bist du?
                    _ Lass mich in meine Kristallkugel sehen
                    _ Ich sehe... Ich sehe...
                    _ Du heißt
                    ```

                start_code: "# setze hier deinen Code hin"
                story_text_2: "### Übung\nKopiere den Beispiel-Code in deinen Eingabebereich und fülle die Lücken, um den Code zum Laufen zu bringen.\n**Extra** Ändere den Code und lasse die Wahrsagerin nicht nur deinen Namen vorhersagen, sondern auch dein Alter, dein Lieblingssport-Team oder etwas anderes über dich.\n"
            12:
                story_text: |-
                    ## Wahrsager
                    Ab Level 12 musst du auch in Listen Anführungszeichen vor und nach jedem Element verwenden.

                    ### Übung
                    Ergänze die Liste um zwei Vorhersagen

                example_code: |
                    ```
                    Schicksale = 'Du wirst auf einer Bananenschale ausrutschen', _
                    {print} 'Ich werde in meine Kristallkugel schauen, um deine Zukunft zu sehen.'
                    {print} 'Ich sehe... Ich sehe...'
                    {sleep}
                    {print} Schicksale {at} {random}
                    ```
                start_code: "# setze hier deinen Code hin"
            10:
                story_text: |
                    ## Wahrsagerin
                    In diesem Level wirst du lernen, das englische Spiel MASH zu programmieren. In diesem Spiel geht es darum, für alle Spieler die Zukunft vorauszusagen. Auf Englisch stehen die Buchstaben für mansion, apartment, shack, und house, was auf Deutsch Schloss, Wohnung, Schuppen und Haus bedeutet.

                    ### Übung 1
                    Füge zwei Namen zur Liste hinzu und sieh wie die Ausgabe des Programms sich verändert, wenn du es ausführst.

                example_code: |
                    ```
                    Häuser = Schloss, Wohnung, Schuppen, Haus
                    Liebe = niemand, eine königliche Person, ihr Nachbar, ihre wahre Liebe
                    Haustiere = Hund, Katze, Elefant
                    Namen = Judith, Ralf, Tim
                    {for} Name {in} Namen
                        {print} Name ' lebt in einem ' Häuser {at} {random}
                        {print} Name ' wird ' Liebe {at} {random} ' heiraten.'
                        {print} Name ' wird eine(n) ' Haustiere {at} {random} ' als Haustier haben.'
                        {sleep}
                    ```
                story_text_2: "### Übung 2\nWir können auch eine Harry-Potter-Wahrsagerin machen. Fülle die Lücken so, dass 9 Zeilen ausgegeben werden.\n**(extra)** Ändere das Thema der Wahrsagerin zu etwas anderem, wie zum Beispiel deinem Lieblingsbuch, -film oder -serie.\n"

                example_code_2: |
                    ```
                    Häuser = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    Fächer = Zaubertränke, Verteidigung gegen die dunklen Künste, Zauberkunst, Verwandlung
                    Ängste = Voldemort, Spinnen, den ZAG nicht bestehen
                    Namen = Harry, Ron, Hermine
                    _
                    _ {print} Name ' gehört zu ' Häuser {at} {random}
                    _ {print}  Name ' ist gut in ' Fächer {at} {random}
                    _ {print}  Name 's größte Angst: ' Ängste {at} {random}
                    ```
                start_code: "# setze hier deinen Code hin"
            8:
                story_text: |
                    ## Wahrsagerin
                    In den vorigen Leveln hast du gelernt `{repeat}` zu nutzen, um die Wahrsagerin 3 Fragen in Folge beantworten zu lassen, aber wir hatten ein Problem die Fragen anzuzeigen.
                    Jetzt ist das Problem gelöst, weil wir den neuen Weg den `{repeat}` Befehl zu benutzen nutzen.
                    Im nächsten Beispiel kannst du die Wahrsagerin 3 Fragen stellen lassen und sie auch anzeigen!

                    ### Übung
                    Kannst du den richtigen Befehl in die Lücken füllen?

                example_code: |
                    ```
                    {print} 'Ich bin Hedy die Wahrsagerin!'
                    {print} 'Du kannst mir 3 Fragen stellen.'
                    Antworten = ja, nein, vielleicht
                    _ _ _
                       Frage = {ask} 'Was möchtest du wissen?'
                       {print} Frage
                       {sleep}
                       {print} 'Meine Kristallkugel sagt...' Antworten {at} {random}
                    ```
                start_code: "# setze hier deinen Code hin"
            7:
                story_text: |
                    ## Fortune Teller
                    In this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.

                example_code: |
                    ```
                    {print} 'Ich bin Hedy, die Wahrsagerin!'
                    {print} 'Du kannst 3 Fragen stellen!'
                    {repeat} 3 {times} Frage = {ask} 'Was würdest du gerne wissen?'
                    Antwort = ja, nein, vielleicht
                    {repeat} 3 {times} {print} 'Meine Kristallkugel sagt... ' Antwort {at} {random}
                    ```
                start_code: "# setze hier deinen Code hin"
                story_text_2: "### Übung\nDas Beispielprogramm stellt drei Fragen, aber gibt nicht drei Antworten.\nErstelle eine Liste von Antworten und gib eine zufällige Antwort dreifach aus. Denk dir selbst spaßige Antworten aus.\n\nLeider können wir die Antworten noch nicht paarweise anzeigen. In den nächsten Leveln wird sich der Aufbau des `{repeat}` Befehls ändern und dieses Problem lösen.\n"
            6:
                story_text: |
                    ## Wahrsagerin
                    In diesem Level können wir Mathe in deinen Vorhersagen als Wahrsagerin verwenden. Das ermöglicht es dir (alberne) Formeln zur Berechnung der Zukunft zu erfinden.
                    Zum Beispiel könntest du ausrechnen wie reich du einmal wirst oder wie viele Kinder du haben wirst, wenn du erwachsen bist.



                    ### Übung
                    Kannst du dir deine eigene (alberne) Vorhersagemaschine ausdenken?

                example_code: |
                    ```
                    {print} 'Ich bin Hedy die Wahrsagerin!'
                    {print} 'Ich kann vorhersehen wie viele Kinder du haben wirst!'
                    Alter = {ask} 'Wie alt bist du?'
                    Geschwister = {ask} 'Wie viele Geschwister hast du?'
                    Länge = {ask} 'Wie groß bist du in Zentimetern?'
                    Kinder = Länge / Alter
                    Kinder = Kinder - Geschwister
                    {print} 'Du bekommst ...'
                    {sleep}
                    {print} Kinder ' Kinder!'
                    ```

                    ## Beispiel Alberne Wahrsagerin
                    Wenn das vorige Beispiel dir nicht albern genug war, schau dir dieses an!
                    ```
                    {print} 'Ich bin Hedy die alberne Wahrsagerin!'
                    {print} 'Ich werde vorhersagen wie schlau du bist!'
                    Fußball = {ask} 'Auf einer Skala von 1 bis 10, wie sehr magst du Fußball?'
                    Bananen = {ask} 'Wie viele Bananen hast du diese Woche gegessen?'
                    Hygiene = {ask} 'Wie viele Male hast du heute deine Hände gewaschen?'
                    Ergebnis = Bananen + Hygiene
                    Ergebnis = Ergebnis * Fußball
                    {print} 'Du bist ' Ergebnis ' Prozent schlau.'
                    ```
                start_code: "# setze hier deinen Code hin"
            5:
                story_text: |
                    ## Fortune Teller
                    In this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!
                    By using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.
                    Check out this example to find out how.

                example_code: |
                    ```
                    {print} 'Ich bin Hedy die Wahrsagerin!'
                    {print} 'Ich kann vorhersehen, ob du morgen die Lotterie gewinnst!'
                    Person {is} {ask} 'Wer bist du?'
                    {if} Person {is} Hedy {print} 'Du wirst sicher gewinnen!🤩' {else} {print} 'Pech gehabt! Jemand anderes wird gewinnen!😭'
                    ```

                story_text_2: |
                    ## Hacke das Programm
                    Ersetze Hedy mit deinem eigenen Namen in der letzten Zeile, und Hedy wird immer vorhersagen dass du die Lottery gewinnen wirst und die anderen nicht!
                    Natürlich könnte das den anderen Spielern etwas verdächtig vorkommen... Um das zu vermeiden, kannst du sicherstellen, dass Hedy für jedes Mal wenn das Programm läuft eine unterschiedliche Antwort gibt.
                    Aber natürlich so, dass du einen positive Antwort und deine Mitspieler eine negative Antwort bekommen.

                example_code_2: |
                    ```
                    {print} 'Ich bin Hedy, die Wahrsagerin!'
                    {print} 'Ich kann vorhersagen ob du morgen im Lotto gewinnen wirst!'
                    Person {is} {ask} 'Wer bist du?'
                    gute_Antwort {is} Juhuu! Du gewinnst!, Du wirst auf jeden Fall gewinnen!, Wir haben einen Gewinner!
                    schlechte_Antwort {is} Pech gehabt! Probiers nochmal!, Jemand anderes wird gewinnen, du leider verlieren!
                    {if} Person {is} Hedy {print} gute_Antwort {at} {random} {else} {print} schlechte_Antwort {at} {random}
                    ```

                start_code: "# setze hier deinen Code hin"
                story_text_3: "### Übung\nMit diesem Konzept können viele verschieden Programme geschrieben werden, dafür musst du nur ein bisschen kreativ werden! Du könntest zum Beispiel eine Maschine bauen die vorhersagt, dass deine Lieblingsmannschaft alle gegnerischen Teams schlagen wird!\nOder du könntest den sprechenden Spiegel der bösen Königin aus Schneewittchen machen, der jedem sagst dass du der Schönste oder die Schönste im ganzen Land bist!\nLass deiner Fantasie freien Lauf!\n"
            4:
                story_text: |
                    ## Wahrsagerin
                    Dieses Level hat keine neuen Funktionen, aber gibt dir die Möglichkeit ein wenig mit Anführungszeichen zu üben.
                    Du kannst deinen Code aus Level 3 neu machen, aber achte darauf Anführungszeichen an den richtigen Stellen hinzuzufügen!

                    Beachte dass wir in Level 3 das Wort 'Frage' nicht sowohl als Variablenname, als auch als normales Wort das ausgegeben wird, benutzen konnten.
                    Die Anführungszeichen in Level 3 machen das möglich!

                    ### Übung 1
                    Wir haben alle Anführungszeichen aus diesem Beispiel-Code entfernt. Kannst du sie alle an der richtigen Stelle hinzufügen?

                    ### Übung 2
                    Gehe zurück zum vorigen Level und kopiere deinen Wahrsagerin-Code. Bring diesen Code in diesem Level zum Laufen, indem du Anführungszeichen an den richtigen Stellen hinzufügst.

                example_code: |
                    ```
                    _ Füge die Anführunszeichen in diesen Code ein _
                    {print} Ich bin Hedy die Wahrsagerin!
                    Frage {is} {ask} Was möchtest du wissen?
                    {print} Dies ist deine Frage:  Frage
                    Antworten {is} ja, nein, vielleicht
                    {print} Meine Kristallkugel sagt...
                    {sleep} 2
                    {print} Antworten {at} {random}
                    ```
                start_code: "# setze hier deinen Code hin"
            3:
                story_text: |
                    ## Wahrsagerin
                    Im vorigen Level hast du deine erste Wahrsagemaschine erstellt, aber Hedy konnte nichts wirklich vorhersagen, sonder nur `{echo}`.
                    In diesem Level kannst du Variablen und den `{at} {random}` Befehl benutzen, um Hedy wirklich eine Antwort für dich auswählen zu lassen. Schau dir zum Beispiel diesen Code an:

                example_code: |4

                    In diesem Beispiel kann die Spielerin Hedy eine Ja-Nein-Frage {ask} und Hedy wird eine zufällige Antwort für dich aussuchen.
                    ```
                    {print} Ich bin Hedy, die Wahrsagerin!
                    Frage {is} {ask} Was würdest du gerne wissen?
                    {print} Das würdest du gerne wissen: Frage
                    Antworten {is} ja, nein, vielleicht
                    {print} Meine Kristallkugel sagt...
                    {sleep} 2
                    {print} Antworten {at} {random}
                    ```
                start_code: "# setze hier deinen Code hin"
                story_text_2: "### Übung\nBis hierhin konnte Hedy nur mit ja, nein oder vielleicht antworten. Kannst du Hedy mit zusätzlichen Antwortmöglichkeiten ausstatten, wie zum Beispiel 'auf jeden Fall' oder 'frag nochmal'?\n"
    haunted:
        name: "Spukhaus"
        description: "Entkomme dem Spukhaus"
        default_save_name: "Spukhaus"
        levels:
            1:
                story_text: |
                    ## Spukhaus
                    In diesem Abenteuer arbeiten wir an einem Spiel, in dem du aus einem Geisterhaus entkommen musst, indem du die richtigen Türen wählst.
                    Wenn du die richtige Tür wählst, überlebst du, aber wenn nicht, könnte ein schreckliches Monster…

                    In Level 1 beginnen wir mit unserem Spukhaus-Spiel, indem wir uns eine gruselige Geschichte ausdenken und die Spieler fragen, welches Monster sie in unserem Spukhaus finden werden.

                example_code: |
                    ```
                    {print} Wie bin ich hierher gekommen?
                    {print} Ich erinnere mich an meinen Freund, der sagte dass ich in das alte Haus gehen soll...
                    {print} und plötzlich wurde alles dunkel.
                    {print} Aber warum bin ich jetzt auf dem Boden...?
                    {print} Mein Kopf tut weh als hätte mir jemand mit der Pfanne eine übergezogen!
                    {print} Was ist das für ein Geräusch?
                    {print} Oh nein! Ich habe das Gefühl dass ich nicht alleine in diesem Haus bin!
                    {print} Ich muss hier raus!
                    {print} Vor mir sind drei Türen...
                    {ask} Durch welche Tür soll ich gehen?
                    {echo} Ich nehme Tür
                    {print} ...?
                    ```
                start_code: "{print} How did I get here?"
                story_text_2: "### Übung\nKopiere den Beispiel-Code in deinen Eingabebereich, indem du den gelben Knopf drückst.\nBeende nun die Geschichte, indem du mindestens 5 Zeilen zum Code hinzufügst.\nDenke daran, dass du jede Zeile mit einem `{print}` Befehl beginnst.\n"
            2:
                story_text: |
                    ## Spukhaus
                    In diesem Spukhaus kannst du Monster mit Emojis auswählen. Natürlich kannst du auch Wörter verwenden.
                start_code: "monster1 {is} _"
                example_code: "```\nMonster_1 {is} \U0001F47B\nMonster_2 {is} \U0001F921\nMonster_3 {is} \U0001F476\n{print} Du gehst ins Spukhaus.\n{print} Plötzlich siehst du ein Monster_1\n{print} Du läufst in den anderen Raum, aber ein Monster_2 wartet dort auf dich!\n{print} Oh nein! Schnell flitzt du in die Küche.\n{print} Aber als du reinkommst greift dich Monster_3 an!\n```\n"
                story_text_2: "### Übung\nIm obigen Beispiel sind die Monster vorherbestimmt. Also ist die Ausgabe deines Codes jedes Mal das Gleiche.\nKannst du `{ask}` Befehle hinzufügen, um das Spukhaus interaktiv zu machen und die Spieler die Monster auswählen zu lassen auf die sie treffen?\n"
                example_code_2: "```\nMonster1 {is} _\nMonster2 {is} _\nMonster3 {is} _\n{print} Du betrittst das Spukhaus.\n{print} Plötzlich siehst du ein Monster1\n{print} Du rennst in den anderen Raum, aber ein Monster2 wartet dort auf dich!\n{print} Oh nein! Schnell in die Küche.\n{print} Aber als du hineingehst attackiert dich Monster3 !\n```\n"
            14:
                story_text: |
                    ## Spukhaus
                    In diesem Level kannst du die Symbole `<` und `>` verwenden um deinen Spielen Leben hinzuzufügen.

                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives > 0
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = lives -1
                        {else}
                            {print} 'GAME OVER'
                    ```
                start_code: "# setze hier deinen Code hin"
            11:
                story_text: |
                    ## Spukhaus
                    In diesem Level haben wir den `{for}` Befehl verändert, um dem Spieler zu sagen, wo er ist.

                    ### Übung 1
                    Vervollständige das Programm, sodass der Spieler weiß in welchem Raum er ist.

                    ### Übung 2
                    Mache ein Abenteuer aus dem Programm, indem du folgenden Schritten folgst:

                    1. Erstelle eine Liste von Auswahlmöglichkeiten (wie kämpfe oder flüchte)
                    2. Stelle sicher, dass der Spieler eine Möglichkeit auswählen kann. Nutze `{ask}`
                    3. Ist die Antwort richtig? Dann darf er zum nächsten Monster fortfahren. Gibt er eine falsche Antwort? Lass es den Spieler mit `{print}` wissen.

                    **(extra)** Wenn man eine falsche Wahl trifft, wird immer noch ein Monster angezeigt! Wie könntest du das ändern?

                example_code: |
                    ```
                    {print} 'Entkomme aus dem Spukhaus!'
                    monsterliste = Zombie, Vampir, Riesenspinne
                    _
                        {print} 'Raum ' i
                        monster = monsterliste {at} {random}
                    ```
                start_code: "{print} 'Escape from the haunted house!'"
            9:
                story_text: |
                    ## Spukhaus
                    In diesem Level kannst du Verschachtelung verwenden, um das Spukhaus noch interaktiver zu machen!

                    ### Übung
                    Im Moment ist es ziemlich schwer, das Spiel zu gewinnen. Kannst du es leichter machen?
                    Ändere deinen Code, sodass er nur eine falsche Tür und zwei richtige Türen, anstatt eine richtige und zwei falsche hat.
                    Tipp: Dies bedeutet, dass du die Variablen für richtige und falsche Türen und die Befehle `{if}` und `{else}` tauscht.
                    Und natürlich kannst du auch die Geschichte nach Belieben verändern. Ändere die Monster oder mach es zu einer fröhlichen Spiel-Show, wo man ein Geschenk bekommt!

                example_code: |
                    ```
                    {print} 'Entkomme dem Spukhaus!'
                    Spieler = am_Leben
                    Türen = 1, 2, 3
                    Monster = Zombie, Vampir, riesige Spinne
                    {repeat} 3 {times}
                        {if} Spieler {is} am_Leben
                            richtige_Tür {is} Türen {at} {random}
                            {print} 'Vor dir sind drei Türen...'
                            gewählte_Tür = {ask} 'Welche Tür wählst du?'
                            {if} gewählte_Tür {is} richtige_Tür
                                {print} 'Hier sind keine Monster!'
                            {else}
                                {print} 'Du wirst gefressen von einem(r) ' Monster {at} {random}
                                Spieler = tot
                        {else}
                            {print} 'GAME OVER'
                    {if} Spieler {is} am_Leben
                        {print} 'Großartig! Du hast überlebt'
                    ```

                start_code: "{print} 'Escape from the haunted house!'"
            5:
                story_text: |
                    ## Spukhaus
                    Bis zu diesem Level hat das Spukaus den Spieler immer gefragt durch welche Tür er gehen will, aber wie du vielleicht gemerkt hast, musste der Spieler nicht wirklich richtig antworten.
                    Wenn der Spieler einfach irgendetwas eingeben hat, ging das Spiel trotzdem weiter und der Spieler konnte sogar gewinnen (obwohl er gar keine Tür gewählt hat).
                    In diesem Level kannst du nur gewinnen, wenn du die gleiche Tür wählst die Hedy zufällig ausgesucht hat.

                    ### Übung
                    Kannst du die 4 fehlenden Wörter finden, um den Code zu vervollständigen?

                example_code: |
                    ```
                    {print} 'Entkomme aus dem Spukhaus!'
                    {print} 'Es sind 3 Türen vor dir...'
                    Türen {is} 1, 2, 3
                    Monster {is} Werwolf, Mumie, Vampir, Zombie
                    gewählte_Tür {is} {ask} 'Welche Tür wählst du?'
                    {print} 'Du wählst Tür Nummer...' gewählte_Tür
                    {sleep}
                    richtige_Tür {is} Türen {at} {random}
                    _ _ _ _ {print} 'Großartig! Du bist entkommen!'
                    {else} {print} 'Oh nein! Du wirst gegessen von...' Monster {at} {random}
                    ```

                start_code: "# setze hier deinen Code hin"
            4:
                story_text: |
                    ## Spukhaus
                    In diesem Level lernst du mit Anführungszeichen umzugehen.

                    ### Übung 1
                    Kannst du dein Spukhaus für Level 4 fit machen?

                    ### Übung 2
                    Gehe zurück zum vorigen Level und kopiere deinen Spukhaus-Code. Bring den Code in diesem Level zum Laufen, indem du Anführungszeichen an den richtigen Stellen hinzufügst.

                start_code: "# setze hier deinen Code hin"
                example_code: "```\n_ Füge Anführungszeichen zu diesem Code hinzu _\n{print} Entkomme dem Spukhaus!\n{print} Vor dir sind drei Türen...\nWahl {is} {ask} Welche Tür wählst du?\n{print} Du nimmst Tür ... Wahl\nMonster {is} ein Zombie, ein Vampir, NICHTS DU BIST ENTKOMMEN\n{print} Du siehst...\n{sleep}\n{print} Monster {at} {random}\n```\n"
            3:
                story_text: |
                    ## Spukhaus-Spiel
                    In den vorherigen Leveln hast du eine Einleitung ins Spukhaus-Spiel gemacht, aber wie du vielleicht gemerkt hast war das Ender der Geschichte immer schrecklich.
                    In diesem Level kannst du die Geschichte interaktiver machen, indem du den Ausgang des Spiels änderst. Manchmal wirst du gefressen, manchmal kannst du entkommen!
                    Lass Hedy zufällig entscheiden!

                start_code: "# setze hier deinen Code hin"
                story_text_2: "### Übung\nKopiere den Beispiel-Code und fülle die Lücken, um ihn zum Laufen zu bringen!\n\n**Extra** Diese Geschichte ist ziemlich einfach, vielleicht kannst du sie etwas mehr gruselig machen indem du die Geschichte spannender machst.\nAußerdem kennt die Geschichte gerade nur wenige Ausgänge, es gibt nur drei Möglichkeiten was hinter den Türen ist. Fallen dir noch mehr Monster ein die du der Liste hinzufügen kannst?\n"
                story_text_3: "## Mach das Spiel zu einer Fernseh-Show!\n### Übung\nZum Schluss wollen wir dich herausfordern, das Spiel zu einer Fernseh-Show zu machen, in der du eine Tür oder einen Koffer wählst der einen großen Preis enthält!\nSchaffst du das? Wir haben bereits die ersten Zeilen in den Beispiel-Code getan.\n"
                example_code_3: "```\n{print} Die große Spielshow!\n{print} Es liegen 3 Koffer vor dir...\n{print} Einer enthält _\n_\n```\n"
                example_code_2: "```\n_ Entkomme aus dem Spukhaus!\n_ Vor dir sind 3 Türen...\n_ _ _ Welche Tür wählst du?\n_ Du wähltest ... wahl\nmonster _ ein Zombie, ein Vampir, NICHTS DU ENTKAMST\n_ Du siehst...\n{sleep}\n_ _ _ _\n```\n"
            16:
                story_text: |
                    ## Spukhaus-Spiel
                    Dieses Spukhaus-Spiel verwendet die Verbindung zwischen Listen, die du in diesem Level verwenden kannst.
                    Zum Beispiel kommen alle Eigenschaften, die zu Zombies gehören, als Erstes in der Liste, dann die Hexen und als drittes die Vampire.
                    Schau dir mal den Code an!

                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts etaing it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mension'
                    {print} 'Something is not right here'
                    {print} 'You hear ' hint[i]
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen en see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' monsters[i]
                    needed_weapon = weapons[i]
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} good_fate[i]
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} bad_fate[i]
                        {print} 'GAME OVER'
                    ```
                start_code: "# setze hier deinen Code hin"
    piggybank:
        name: Sparschwein
        description: Zähle dein Taschengeld!
        default_save_name: Sparschwein
        levels:
            14:
                story_text: |
                    ## Sparschwein
                    In diesem Level kannst du dir von Hedy sagen lassen, ob du genug Geld gespart hast!

                example_code: |
                    ```
                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'
                    to_save = wish - money
                    weeks = to_save / allowance
                    {if} wish > money
                        {print} 'You need to save up some more!'
                        {print} 'Youll need ' weeks ' more weeks.'
                    {else}
                        {print} 'Great! You have enough'
                        {print} 'Lets go shopping!'
                    ```
                start_code: "# setze hier deinen Code hin"
            12:
                story_text: |
                    ## Sparschwein
                    In diesem Abenteuer lernst du, wie man ein digitales Sparschwein herstellt.

                    ### Übung
                    Beende den Code, um zu berechnen, wie viel Geld du hast und wie lange du sparen musst, um dir zu kaufen, was du willst!
                    **(extra)** Vielleicht hast du schon etwas Geld gespart? Ziehe das von dem Betrag ab, den du noch sparen musst.

                example_code: |
                    ```
                    {print} 'Das digitale Sparschwein'
                    Wunsch = {ask} 'Was würdest du dir gerne kaufen?'
                    Preis = {ask} 'Wieviel kostet das?'
                    Gespartes = {ask} 'Wieviel Geld hast du schon gespart?'
                    Taschengeld = {ask} 'Wieviel Taschengeld bekommst du pro Woche?'
                    zu_sparen = Preis - Gespartes
                    Wochen = zu_sparen / Taschengeld
                    {print} 'Du kannst dir ein ' _ ' in ' _ ' Wochen kaufen.'
                    ```
                start_code: "# setze hier deinen Code hin"
    quizmaster:
        name: Quizmeister
        description: Mache dein eigenes Quiz!
        default_save_name: Quizmeister
        levels:
            14:
                story_text: |
                    ## Mache dein eigenes Quiz
                    In diesem Abenteuer kannst du dein eigenes Quiz machen! Füll alle Lücken aus, füge mehr Fragen hinzu und hab Spaß bei deinem eigenen Quiz!
                    Du kannst das Quiz machen über was du möchtest: dein Hobby, dein Lieblingstier, dein Lieblingsbuch, eigentlich über alles!

                example_code: |
                    ```
                    {print} 'Erstelle dein eigenes Quiz'
                    punkte_a = 0
                    punkte_b = 0
                    {print} 'Frage'
                    {print} 'Antwortmöglichkeit A'
                    {print} 'Antwortmöglichkeit B'
                    antwort = {ask} 'Welche Antwort?'
                    {if} antwort == 'A'
                        punkte_a = punkte_a + 1
                    {if} antwort == 'B'
                        punkte_b = punkte_b + 1
                    {print} 'Ende des Quiz!'
                    {print} 'Lasst und die Ergebnisse ansehen!'
                    {if} punkte_a > punkte_b
                        {print} 'Du gehörst zum A-Club'
                    {if} punkte_b > punkte_a
                        {print} 'Du gehörst zum B-Club'
                    ```

                start_code: "# setze hier deinen Code hin"
    language:
        name: Sprache
        description: Übe Wörter in einer Fremdsprache
        default_save_name: Sprache
        levels:
            5:
                story_text: |
                    ## Lerne eine neue Sprache
                    Schreibe dein eigenes Programm, um Vokabeln in einer neuen Sprache zu üben.

                    ### Übung
                    Mache das Programm länger, indem du mindestens 3 weitere Wörter zum Lernen für den Spieler hinzufügst.
                    **Extra** Natürlich kannst du auch eine andere Sprache als Französisch wählen. Du kannst den Code zu jeder beliebigen Sprache ändern, die du lernen möchtest.
                start_code: "# setze hier deinen Code hin"
                example_code: "```\n{print} 'Lerne Französisch!'\nKatze {is} {ask} '\U0001F431'\n{if} Katze {is} chat {print} 'Großartig!'\n{else} {print} 'Nein, Katze heißt chat'\nFrosch {is} {ask} '\U0001F438'\n{if} Frosch {is} grenouille {print} 'Super!'\n{else} {print} 'Nein, Frosch heißt grenouille'\n```\n"
            16:
                story_text: |
                    ## Lerne eine neue Sprache
                    Schreibe dein eigenes Programm dien Vokabular in einer neuen Sprache zu lernen.

                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
                start_code: "# setze hier deinen Code hin"
    secret:
        default_save_name: Sprache
        levels:
            12:
                story_text: "## Erstelle einen Geheimcode wie ein Superspion\nIn diesem Abenteuer kannst du deinen eigenen Superspion-Code erstellen. Verschlüssele eine Nachricht, die nur der richtige Agent entschlüsseln kann.\nWenn der Feind versucht, den Code zu knacken, wird er falsche Informationen erhalten, um seine Zeit zu verschwenden.\n\n### Übung 1\nErstelle deinen eigenen Geheimcode für deinen Superspion und gib beide Teile nur an den echten Spion zurück.\n\n### Übung 2\nFüge dem Code eine dritte Komponente hinzu, zum Beispiel ein Kleidungsstück oder einen Gegenstand.\n"
                example_code: "```\nName {is} {ask} 'Wie heißt du?'\nif Name {is} '_'\n    a {is} 'Geh zum Flughafen '\n{else}\n    a {is} 'Geh zum Bahnhof '\nPasswort {is}  {ask} 'Wie lautet das Passwort?'\n{if} Passwort {is} _\n    b {is} 'Morgen um 2 Uhr'\n{else}\n    b {is} 'Morgen um 10 Uhr'\n{print} _ _ _\n```\n"
                start_code: '## setze hier deinen Code hin'
            13:
                story_text: "## Superspy\nWir können den Superspy-Code mit `{and}` vereinfachen, so dass wir nur einen `{if}` benötigen.\n\n### Übung 1\nVervollständige den Code, indem du den richtigen Befehl in das leere Feld einträgst. Tipp: Der Superspion muss BEIDE Fragen richtig beantworten, bevor er die vertraulichen Informationen erhält!\n\n### Übung 2\nWir wollen den Gegner noch mehr verwirren! Erstelle eine Liste mit falschen Antworten und wähle eine zufällig aus, wenn eine falsche Antwort gegeben wird.\n"
                example_code: "```\nName {is} {ask} 'Wie heißt du?'\nPasswort {is} {ask} 'Wie lautet dein Passwort?'\n{if} Name {is} 'Agent007' _ Passwort {is} 'STRENGGEHEIM'\n    {print} 'Gehe um 2 Uhr zum Flughafen'\n{else}\n    {print}  'Gehe um 10 Uhr zum Bahnhof'\n ```\n"
                start_code: '## setze hier deinen Code hin'
        name: Superspion
        description: Schreibe deinen eigenen Spion-Code
    tic:
        name: Tic Tac Toe
        description: Spiele ein Spiel Tic Tac Toe!
        default_save_name: Tic
        levels:
            13:
                story_text: "## Tic Tac Toe\nIn diesem Abenteuer kannst du ein Spiel Tic Tac Toe programmieren. Du kannst mit zwei Personen spielen. Abwechselnd wählst du die Nummer des Feldes (1 - 9), auf das du dein Zeichen (x oder o) setzen willst.\nDer erste Spieler, der drei in einer Reihe (waagerecht, senkrecht oder diagonal) hat, gewinnt!\n\n### Übung 1\nDas Spiel funktioniert, aber es hat einige Probleme. Zum Beispiel kann sich jede Spielerin ein beliebiges Feld aussuchen, sogar ein bereits besetztes! Verwende `{if}`, um festzustellen, ob das Feld schon besetzt ist, und wenn ja, warne die Spielerin.\n\n### Übung 2\nDas Spiel entscheidet auch nicht, wer gewonnen hat. Du musst dies hinzufügen, indem du prüfst, ob drei Felder in einer Reihe das gleiche Symbol haben.\n\n### Übung 3 (extra)\nDu hast nicht immer einen Freund, mit dem du spielen kannst. Kannst du einen Computergegner erstellen?\n"
                example_code: "```\nspieler = 'x'\nfeld = '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'\n\n{for} i {in} {range} 1 {to} 9\n    wahl = {ask} 'Spieler ' spieler ' welchen Platz wählst du?'\n    feld {at} wahl = spieler\n    {clear}\n    print feld {at} 1 feld {at} 2 feld {at} 3\n    drucke feld {at} 4 feld {at} 5 feld {at} 6\n    print feld {at} 7 feld {at} 8 feld {at} 9\n    {if} spieler = 'x'\n        spieler = 'o'\n    {else}\n        spieler = 'x'\n```\n"
                start_code: '## Schreib deinen Code hier'
            14:
                start_code: '## Schreibe deinen Code hier'
                story_text: "## Tic Tac Toe\nIn den vorigen Levels hast du ein Tic Tac Toe-Spiel kreiert. Jetzt weißt du, wie du das =-Symbol, das ==-Symbol und das !=-Symbol nutzen kannst.\nDu kannst dieses Wissen in deinem neuen Tic Tac Toe-Spiel zum Beispiel so anwenden:\n"
                example_code: "```\nzeichen = 'x'\noffene_stellen = 1, 2, 3, 4, 5, 6, 7, 8, 9\nspiel = 'an'\nstelle_1 = '.'\nstelle_2 = '.'\nstelle_3 = '.'\nstelle_4 = '.'\nstelle_5 = '.'\nstelle_6 = '.'\nstelle_7 = '.'\nstelle_8 = '.'\nstelle_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} stelle_1 stelle_2 stelle_3\n{print} stelle_4 stelle_5 stelle_6\n{print} stelle_7 stelle_8 stelle_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} spiel != 'aus'\n        wahl = {ask} 'Spieler ' zeichen ', welche Stelle?'\n        {if} wahl {in} offene_stellen\n            {remove} wahl {from} offene_stellen\n            {if} wahl == 1\n                stelle_1 = zeichen\n            {if} wahl == 2\n                stelle_2 = zeichen\n            {if} wahl == 3\n                stelle_3 = zeichen\n            {if} wahl == 4\n                stelle_4 = zeichen\n            {if} wahl == 5\n                stelle_5 = zeichen\n            {if} wahl == 6\n                stelle_6 = zeichen\n            {if} wahl == 7\n                stelle_7 = zeichen\n            {if} wahl == 8\n                stelle_8 = zeichen\n            {if} wahl == 9\n                stelle_9 = zeichen\n        {else}\n            {print} 'Die Stelle ist schon besetzt'\n        {print} stelle_1 stelle_2 stelle_3\n        {print} stelle_4 stelle_5 stelle_6\n        {print} stelle_7 stelle_8 stelle_9\n        {print} ' '\n        gewinner = {ask} 'Hast du gewonnen?'\n        {if} gewinner == 'ja'\n            {print} 'Gut gemacht, Spieler ' zeichen '!'\n            spiel = 'aus'\n        {else}\n            {if} zeichen == 'x'\n                zeichen = 'o'\n            {else}\n                zeichen = 'x'\n```\n"
            15:
                start_code: '## füge hier deinen Code ein'
                story_text: "## Tic Tac Toe\nIn diesem Level kannst du dein Tic Tac Toe-Spiel mit der {while}-Schleife verbessern. Mit dieser Schleife kannst du `{if} game != 'over'` und `{for} i {in} {range} 1 {to} 9` in eine einfache Zeile zusammenführen.\nProbiere es gleich aus:\n"
                example_code: "```\nzeichen = 'x'\noffene_stellen = 1, 2, 3, 4, 5, 6, 7, 8, 9\nspiel = 'an'\nstelle_1 = '.'\nstelle_2 = '.'\nstelle_3 = '.'\nstelle_4 = '.'\nstelle_5 = '.'\nstelle_6 = '.'\nstelle_7 = '.'\nstelle_8 = '.'\nstelle_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} stelle_1 stelle_2 stelle_3\n{print} stelle_4 stelle_5 stelle_6\n{print} stelle_7 stelle_8 stelle_9\n{print} ' '\n{while} spiel != 'aus'\n    wahl = {ask} 'Spieler ' zeichen ', welche Stelle?'\n    {if} wahl {in} offene_stellen\n        {remove} wahl {from} offene_stellen\n        {if} wahl == 1\n            stelle_1 = zeichen\n        {if} wahl == 2\n            stelle_2 = zeichen\n        {if} wahl == 3\n            stelle_3 = zeichen\n        {if} wahl == 4\n            stelle_4 = zeichen\n        {if} wahl == 5\n            stelle_5 = zeichen\n        {if} wahl == 6\n            stelle_6 = zeichen\n        {if} wahl == 7\n            stelle_7 = zeichen\n        {if} wahl == 8\n            stelle_8 = zeichen\n        {if} wahl == 9\n            stelle_9 = zeichen\n    {else}\n        {print} 'Die Stelle ist bereits belegt'\n    {print} stelle_1 stelle_2 stelle_3\n    {print} stelle_4 stelle_5 stelle_6\n    {print} stelle_7 stelle_8 stelle_9\n    {print} ' '\n    gewinner = {ask} 'Hast du gewonnen?'\n    {if} gewinner == 'ja'\n        {print} 'Gut gemacht, Spieler ' zeichen '!'\n        spiel = 'aus'\n    {else}\n        {if} zeichen == 'x'\n            zeichen = 'o'\n        {else}\n            zeichen = 'x'\n```\n"
            17:
                start_code: '## gib deinen Code hier ein'
                story_text: "## Tic Tac Toe\nIn den vorigen Leveln hatte das Tic-Tac-Toe-Spiel ein nerviges Verhalten. Nach jedem Zug musstest du selbstständig eintragen, ob du gewonnen hast oder nicht.\nDies hat das Spiel spielbar gemacht, aber auch recht langsam. In diesem Level haben wir gelernt, wie wir den `{elif}`-Befehl nutzen können, um dieses Problem zu lösen.\nDen `{elif}`-Befehl so zu nutzen, um Hedy feststellen zu lassen, ob eine Spielerin oder ein Spieler gewonnen hat, ist spaßig, braucht aber auch eine gewisse Anzahl an zusätzlichen Zeilen.\n\nIm Beispielcode kannst du sehen, dass wir Siegesbestimmungen hinzugefügt haben (3 Felder in einer horizontalen, vertikalen oder diagonalen Reihe).\nDu kannst diese in den Zeilen 46 bis 69 finden. Du kannst ebenso sehen, dass jedes Mal, wenn die Bestimmungen erfüllt sind (also, wenn jemand gewonnen hat), die Variable game auf 'over' gesetzt wird.\nDas bedeutet, dass die `{while}`-Schleife gestoppt wird und das Spiel zu Ende ist.\n"
                example_code: "```\nzeichen = 'x'\noffene_stellen = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nspiel = 'an'\nstelle_1 = '.'\nstelle_2 = '.'\nstelle_3 = '.'\nstelle_4 = '.'\nstelle_5 = '.'\nstelle_6 = '.'\nstelle_7 = '.'\nstelle_8 = '.'\nstelle_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} stelle_1 stelle_2 stelle_3\n{print} stelle_4 stelle_5 stelle_6\n{print} stelle_7 stelle_8 stelle_9\n{print} ' '\n{while} spiel != 'aus':\n    wahl = {ask} 'Spieler ' zeichen ', welche Stelle?'\n    {if} wahl {in} offene_stellen:\n        {remove} wahl {from} offene_stellen\n        {if} wahl == 1:\n            stelle_1 = zeichen\n        {if} wahl == 2:\n            stelle_2 = zeichen\n        {if} wahl == 3:\n            stelle_3 = zeichen\n        {if} wahl == 4:\n            stelle_4 = zeichen\n        {if} wahl == 5:\n            stelle_5 = zeichen\n        {if} wahl == 6:\n            stelle_6 = zeichen\n        {if} wahl == 7:\n            stelle_7 = zeichen\n        {if} wahl == 8:\n            stelle_8 = zeichen\n        {if} wahl == 9:\n            stelle_9 = zeichen\n    {else}:\n        {print} 'Diese Stelle ist bereits belegt'\n    {print} stelle_1 stelle_2 stelle_3\n    {print} stelle_4 stelle_5 stelle_6\n    {print} stelle_7 stelle_8 stelle_9\n    {print} ' '\n    {if} stelle_1 == stelle_2 {and} stelle_2 == stelle_3 {and} stelle_1 != '.':\n        {print} 'Spieler ' zeichen ' gewinnt!'\n        spiel = 'aus'\n    {elif} stelle_4 == stelle_5 {and} stelle_5 == stelle_6 {and} stelle_4 != '.':\n        {print} 'Spieler ' zeichen ' gewinnt!'\n        spiel = 'aus'\n    {elif} stelle_7 == stelle_8 {and} stelle_8 == stelle_9 {and} stelle_7 != '.':\n        {print} 'Spieler ' zeichen ' gewinnt!'\n        spiel = 'aus'\n    {elif} stelle_1 == stelle_4 {and} stelle_4 == stelle_7 {and} stelle_1 != '.':\n        {print} 'Spieler ' zeichen ' gewinnt!'\n        spiel = 'aus'\n    {elif} stelle_2 == stelle_5 {and} stelle_5 == stelle_8 {and} stelle_2 != '.':\n        {print} 'Spieler ' zeichen ' gewinnt!'\n        spiel = 'aus'\n    {elif} stelle_3 == stelle_6 {and} stelle_6 == stelle_9 {and} stelle_3 != '.':\n        {print} 'Spieler ' zeichen ' gewinnt!'\n        spiel = 'aus'\n    {elif} stelle_1 == stelle_5 {and} stelle_5 == stelle_9 {and} stelle_1 != '.':\n        {print} 'Spieler ' zeichen ' gewinnt!'\n        spiel = 'aus'\n    {elif} stelle_3 == stelle_5 {and} stelle_5 == stelle_7 {and} stelle_3 != '.':\n        {print} 'Spieler ' zeichen ' gewinnt!'\n        spiel = 'aus'\n    {else}:\n        {if} zeichen == 'x':\n            zeichen = 'o'\n        {else}:\n            zeichen = 'x'\n```\n"
    blackjack:
        name: Blackjack
        description: Versuche, so nah wie möglich an die 21 heran zu kommen
        default_save_name: Blackjack
        levels:
            17:
                story_text: "## Erstelle ein Blackjack-Spiel\nBlackjack ist ein einfaches Kartenspiel, bei dem du so nahe wie möglich an die 21 herankommen musst. Du bekommst zwei Karten. Jede Karte hat den Wert ihrer abgebildeten zahl und die Karten mit Bildern (Bube, Dame, König) sind 10 Punkte Wert.\nDas Ass is entweder 1 oder 11 Punkte wert (das kannst du dir aussuchen). Der Kartengeber, dein Gegner, erhält auch zwei Karten.\nWenn du möchtest, kannst du noch eine Karte ziehen und ihre Punkte werden zu deinen dazugerechnet. Der Kartengeber darf auch noch eine Karte ziehen.\nAber pass auf, dass du nicht mehr als 21 Punkte bekommst, denn dann verlierst du!\nDer Spieler, der am nächsten an 21 herankommt ohne sie zu überschreiten, gewinnt!\n\nViel Spaß!\n"
                example_code: "```\n{print} 'BLACKJACK'\nkarten = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Bube', 'Dame','König', 'As']\npunkte = 0\ngeber_punkte = 0\nkarte_1 = karten[{random}]\nkarte_2 = karten[{random}]\nkarte_3 = karten[{random}]\ngeber_karte_1 = karten[{random}]\ngeber_karte_2 = karten[{random}]\ngeber_karte_3 = karten[{random}]\n# Punkte für Karte 1\n{if} karte_1 == 'Bube' {or} karte_1 == 'Dame' {or} karte_1 == 'König':\n    punkte = punkte + 10\n{elif} karte_1 == 'As':\n    punkte = punkte + 11\n{else}:\n    punkte = punkte + karte_1\n# Punkte für Karte 2\n{if} karte_2 == 'Bube' {or} karte_2 == 'Dame' {or} karte_2 == 'König':\n    punkte = punkte + 10\n{elif} karte_2 == 'As':\n    punkte = punkte + 11\n{else}:\n    punkte = punkte + karte_2\n# Punkte für Geberkarte 1\n{if} geber_karte_1 == 'Bube' {or} geber_karte_1 == 'Dame' {or} geber_karte_1 == 'König':\n    geber_punkte = geber_punkte + 10\n{elif} geber_karte_1 == 'As':\n    geber_punkte = geber_punkte + 11\n{else}:\n    geber_punkte = geber_punkte + geber_karte_1\n# Punkte für Geberkarte 2\n{if} geber_karte_2 == 'Bube' {or} geber_karte_2 == 'Dame' {or} geber_karte_2 == 'König':\n    geber_punkte = geber_punkte + 10\n{elif} geber_karte_2 == 'As':\n    geber_punkte = geber_punkte + 11\n{else}:\n    geber_punkte = geber_punkte + geber_karte_2\n# Zwei As\n{if} card_1 == 'As' {and} card_2 == 'As':\n    punkte = 12\n{if} geber_karte_1 == 'As' {and} geber_karte_2 == 'As':\n    geber_punkte = 12\n# Zwischenstand\n{print} 'Du hast ' karte_1 ' und ' karte_2 ' (' punkte ' Punkte)'\n{print} 'Der Geber hat ' geber_karte_1 ' und ' geber_karte_2 ' (' geber_punkte ' Punkte)'\n# Extra Karte für den Spieler\nextra = {ask} 'Möchtest du eine extra Karte?'\n{if} extra == 'ja':\n    {if} karte_3 == 'Bube' {or} karte_3 == 'Dame' {or} karte_3 == 'König':\n        punkte = punkte + 10\n    {elif} karte_3 == 'Ace':\n        {if} punkte > 11:\n            punkte = punkte + 11\n        {else}:\n            punkte = punkte + 1\n    {else}:\n        punkte = punkte + karte_3\n    {print} 'Du hast extra ' karte_3 ' (' punkte ' Punkte)'\n{else}:\n    {print} 'Keine extra Karten'\n# Gewinner\n{if} punkte > 21 {or} geber_punkte > punkte {or} geber_punkte == 21:\n    {print} 'Du verlierst'\n{elif} geber_punkte < 17:\n    {print} 'Der Geber nimmt eine extra Karte. Es ist eine... ' geber_karte_3\n    {if} geber_karte_3 == 'Bube' {or} geber_karte_3 == 'Dame' {or} geber_karte_3 == 'König':\n        geber_punkte = geber_punkte + 10\n    {elif} geber_karte_3 == 'As':\n        {if} geber_punkte < 11:\n            geber_punkte = geber_punkte + 11\n        {else}:\n            geber_punkte = geber_punkte + 1\n    {else}:\n        geber_punkte = geber_punkte + geber_karte_3\n    {print} 'Der Geber hat jetzt ' geber_punkte ' Punkte'\n    {if} geber_punkte < 21 {and} geber_punkte > punkte:\n        {print} 'Du verlierst'\n    {else}:\n        {print} 'Du gewinnst'\n{elif} punkte > geber_punkte {and} punkte < 21:\n    {print} 'Du gewinnst!'\n```\n"
                start_code: '# Schreibe deinen Code hier'
    pressit:
        levels:
            9:
                start_code: '# platziere deinen Code hier'
                story_text: "## Blindtippspiel\nNun da du weißt wie man Befehle kombiniert, kannst du mit Hilfe von `{pressed}` ein Blindtippwerkzeug erstellen. \n\n### Übung\nVervollständige den Code. Jedes Mal soll ein zufälliger Buchstabe ausgewählt werden. Diesen muss man drücken. Du bekommst einen Punkt für die richtige Taste und zwei Punkte Abzug für die falsche Taste.\n"
                example_code: "```\nPunkte = 1\nBuchstaben = a, b, c, d, e\n{repeat} 10 {times}\n    Buchstabe = _ _ _ \n    {print} 'Drück den Buchstaben ' Buchstabe\n    {if} Buchstabe {is} {pressed}\n    _\n    _\n    _\n```\n"
            10:
                start_code: '# platziere deinen Code hier'
                example_code: "```\nentfernungen = 100, 80, 60, 40, 20, 10\n{if} x {is} {pressed}\n    {for} entfernung {in} entfernungen\n        {forward} entfernung\n        {turn} -90\n{if} y {is} {pressed}\n    {for} entfernung {in} entfernungen\n        {forward} entfernung\n        {turn} 90\n```\n"
                story_text: "In diesem Level kannst du die Schildkröte eine Figur für dich zeichnen lassen. Die Schildkröte wartet nur darauf loszulegen.\nGib der Schildkröte das Startsignal, indem du die X oder Y Taste auf deiner Tastatur drückst.\nKannst du die Schildkröte eine andere Figur zeichnen lassen?\n"
            11:
                start_code: '# platziere deinen Code hier'
                story_text: "Nun da du die `{for} ... {in} {range} ... {to} ...` Regel gelernt hast, kannst du sie auch mit `{pressed}` benutzen!\nVersuche zum Beispiel die Schildkröte zu bewegen! Die Schildkröte wächst jedes Mal, wenn du einen verbundenen Knopf drückst.\nAuf diese Weise kann die Schildkröte jeden Schritt weiter gehen!\n"
                example_code: "```\nlinks = -90\nrechts = 90\numdrehen = 180\n{for} zähler {in} {range} 1 {to} 15\n    schrittweite = zähler * 5\n    {if} w {is} {pressed}\n        {forward} schrittweite\n    {if} s {is} {pressed}\n        {turn} umdrehen\n    {if} a {is} {pressed}\n        {turn} links\n    {if} d {is} {pressed}\n        {turn} rechts\n```\n"
            14:
                example_code: "```\nschrittweite = 15\nlinks = -90\nrechts = 90\numdrehen = 180\nsprungzeit = 5\ndrehungen = 4\n{repeat} 40 {times}\n    {if} w {is} {pressed}\n        {forward} schrittweite\n        sprungzeit = sprungzeit - 1\n    {if} s {is} {pressed}\n        {turn} umdrehen\n    {if} a {is} {pressed}\n        {turn} links\n        drehungen = drehungen - 1\n    {if} d {is} {pressed}\n        {turn} rechts\n        drehungen = drehungen - 1\n    {if} p {is} {pressed}\n        {if} sprungzeit <= 0 {or} drehungen <= 0\n            {forward} schrittweite * 3\n            sprungzeit = 5\n            drehungen = 4\n```\n"
                start_code: '# platziere deinen Code hier'
                story_text: "Nun da du gelernt hast, wie man Operatoren benutzt, können wir sie auch mit `{pressed}` verwenden!\nStell dir vor, dass die Schildkröte einen Supersprung vorwärts machen kann.\nWenn du `p` drückst, macht die Schildkröte einen Supersprung!\nJedoch kann die Schildkröte den Supersprung nur alle 5 Schritte oder alle 4 Drehungen machen.\n"
            15:
                story_text: "Nun da du gelernt hast wie `{while}` Schleifen funktionieren, kannst du sie für die Schildkröte einsetzen!\nDiesmal darf die Schildkröte nur 15 Schritte oder 15 Drehungen machen, bevor sie müde wird!\nVersuche so weit wie möglich zu kommen, bevor die Schildkröte müde wird! Du kannst alle 2 Drehungen den Supersprung verwenden,\noder alle 5 Schritte.\n"
                example_code: "```\nschrittweite = 15\nlinks = -90\nrechts = 90\numdrehen = 180\nsprungzeit = 5\ndrehungen = 2\nmüde_in = 15\n{while} müde_in > 0\n    {if} w {is} {pressed}\n        {forward} schrittweite\n        sprungzeit = sprungzeit - 1\n    {if} s {is} {pressed}\n        {turn} umdrehen\n    {if} a {is} {pressed}\n        {turn} links\n        drehungen = drehungen - 1\n    {if} d {is} {pressed}\n        {turn} rechts\n        drehungen = drehungen - 1\n    {if} p {is} {pressed}\n        {if} sprungzeit <= 0 {or} drehungen <= 0\n            {forward} schrittweite * 4\n            sprungzeit = 5\n            drehungen = 2\n    müde_in = müde_in - 1\n```\n"
                start_code: '# platziere deinen Code hier'
            16:
                start_code: '# platziere deinen Code hier'
                story_text: "Lass uns ein bisschen in Bewegung kommen mit einer Runde Twister!\nWenn alle bereit sind, drück die X-Taste für den nächsten Spielzug!\n"
                example_code: "```\ngliedmaßen = ['Rechte Hand', 'Linke Hand', 'Rechter Fuß', 'Linker Fuß']\nfarben = ['Blau', 'Grün', 'Rot', 'Gelb']\n{repeat} 20 {times}\n    g = gliedmaßen[{random}]\n    f = farben[{random}]\n    {if} x {is} {pressed}\n        {print} g + ' auf ' + f + '!'\n```\n"
            17:
                story_text: "Nun da du gelernt hast wie man `{elif}` benutzt, könne wir es auch mit `{pressed}`benutzen! Beachte, `{elif} ... {is} {pressed}` ist nicht möglich! Deshalb verschachteln wir einige `{elif}` Befehle in die `{pressed}` Optionen. Wir mussten auch `:` hinzufügen damit alles klappt! Stell dir vor, dass die Schildkröte einen Supersprung nach vorn machen kann. Wenn du `p` drückst, macht die Schildkröte einen Supersprung! Jedoch kann die Schildkröte diesen Sprung nur alle 5 Schritte oder alle 4 Drehungen machen.\n"
                start_code: '# platziere deinen Code hier'
                example_code: "```\nschrittweite = 15\nlinks = -90\nrechts = 90\numdrehen = 180\nsprungzeit = 5\ndrehungen = 4\n{repeat} 40 {times}\n    {if} w {is} {pressed}:\n        {forward} schrittweite\n        sprungzeit = sprungzeit - 1\n    {if} s {is} {pressed}:\n        {turn} umdrehen\n    {if} a {is} {pressed}:\n        {turn} links\n        drehungen = drehungen - 1\n    {if} d {is} {pressed}:\n        {turn} rechts\n        drehungen = drehungen - 1\n    {if} p {is} {pressed}:\n        {if} sprungzeit <= 0 {or} drehungen <= 0:\n            {forward} schrittweite * 3\n            sprungzeit = 5\n            drehungen = 4\n        {elif} sprungzeit > 0:\n            {print} \"Du musst noch mehr Schritte oder Drehungen machen, bevor du einen Supersprung machen kannst!\"\n```\n"
            12:
                story_text: "Kennst du Videospiele? Du gehst in hohes Gras und plötzlich geht eine sehr verdächtige Maus auf dich zu.\nWas wirst du tun?\nIn diesem Level werden wir ein kleines Menü mit verschiedenen Auswahlmöglichkeiten erstellen.\nEs ist echt praktisch Text in einer Variablen zu speichern, um ihn mehrfach zu benutzen.\nAuswahlmöglichkeit, ich wähle dich!\n"
                example_code: "```\nauswahl = 'Du wählst Option: '\n{print} 'Eine wilde Maus erscheint!'\n{print} 'Wähle eine Option und drücke den ersten Buchstaben: (n)etz, (k)atze, (b)eutel, (r)ennen'\n{if} n {is} {pressed}\n    {print} auswahl + 'Netz'\n    {print} 'Du versuchst die Maus mit einem Netz zu fangen..'\n    {sleep}\n    {print} 'Glückwunsch! Du hast es geschafft!'\n{if} c {is} {pressed}\n    {print} auswahl + 'Katze'\n    {print} 'Du schickst deine Katze los'\n    {sleep}\n    {print} 'Die Maus hat sich erschreckt und ist weggelaufen!'\n{if} b {is} {pressed}\n    {print} auswahl + 'Beutel'\n    {print} 'Die Maus ist in den Beutel gesprungen!'\n{if} r {is} {pressed}\n    {print} auswahl + 'rennen'\n    {print} 'Du bist davongekommen!'\n```\n"
                start_code: '# platziere deinen Code hier'
            13:
                story_text: "Nun da du gelernt hast, wie man `{and}` und `{or}` benutzt, können wir sie auch mit `{pressed}` benutzen!\nStell dir vor, dass die Schildkröte einen Supersprung vorwärts machen könnte.\nWenn man `p` drückt, macht die Schildkröte einen Supersprung!\nJedoch kann die Schildkröte diesen Sprung nur machen, wenn sie sich zuerst nach links oder rechts dreht!\n"
                example_code: "```\nschrittweite = 10\nlinks = -90\nrechts = 90\numdrehen = 180\nlinks_geschaut = 0\nrechts_geschaut = 0\n{repeat} 40 {times}\n    {if} w {is} {pressed}\n        {forward} schrittweite\n    {if} s {is} {pressed}\n        {turn} umdrehen\n    {if} a {is} {pressed}\n        {turn} links\n        links_geschaut = 1\n    {if} d {is} {pressed}\n        {turn} rechts\n        rechts_geschaut = 1\n    {if} p {is} {pressed}\n        {if} links_geschaut {is} 1 {and} rechts_geschaut {is} 1\n            {forward} 40\n            links_geschaut = 0\n            rechts_geschaut = 0\n```\n"
                start_code: '# platziere deinen Code hier'
            5:
                start_code: '# platziere deinen Code hier'
                story_text: "## Drück es!\nIn der Einleitung wurde dir das neue Schlüsselwort `{pressed}` mitgeteilt! Mit `{pressed}`\nkannst du deinen Code viel interaktiver machen und du hast live die Kontrolle was ausgeführt wird!\nIn den kommenden Leveln lernst du wie`{pressed}` dies ermöglicht und welche Anwendungsfälle `{pressed}`\nhat.\nNeben dem Ausgeben von Text gibt es eine Reihe von anderen Anwendungsfällen von `{pressed}`\nZum Beispiel kannst du auch Schildkrötenbefehle an Tasten binden! Probiere es!\n"
                example_code: "```\n{if} x {is} {pressed} {forward} 50\n```\n"
                story_text_2: "## falls sonst gedrückt\nDu kannst auch einen `{else}` Befehl an `{pressed}` zuweisen. Der `{else}` Befehl wird ausgeführt, wenn eine andere als die zugewiesene Taste gedrückt wird.\n"
                example_code_2: "```\n{if} y {is} {pressed} {print} 'Toll! Du hast die y Taste gedrückt!'\n{else} {print} 'Oh nein! Du hast nicht die y Taste gedrückt.'\n```\n"
            6:
                story_text: "Wusstest du, dass du auch einen Taschenrechner mit `{pressed}` machen kannst?\nGib dem Taschenrechner zwei Zahlen und drücke die m Taste, um zu multiplizieren.\nNun brauchst du deinen eigenen nicht mitbringen!\nProbiere andere Tasten und schau was passiert! Bekommst du ein anderes Ergebnis?\n"
                example_code: "```\nerstes = {ask} 'Was ist deine erste Zahl?'\nzweites = {ask} 'Was ist deine zweite Zahl?'\n{print} 'press a to add, s to substract, d to divide, m to multiply'\n{if} a {is} {pressed} ergebnis = erstes + zweites\n{if} s {is} {pressed} ergebnis = erstes - zweites\n{if} d {is} {pressed} ergebnis = erstes / zweites\n{if} m {is} {pressed} ergebnis = erstes * zweites\n{print}'Die Antwort ist ' ergebnis\n```\n"
                start_code: '# Platziere deinen Code hier'
            7:
                example_code: "```\n{if} x {is} {pressed} {forward} 15 {else} {turn} 90\n```\n"
                start_code: '# Platziere deinen Code hier'
                story_text: "## Die Schildkröte steuern\nNun da du `{repeat}` kennengelernt hast, können wir Tasten mehrfach drücken! Du kannst es benutzen, um die Schildkröte vorwärts gehen und sich drehen zu lassen.\n\n### Übung\nDer Beispiel-Code prüft die Taste nur ein Mal. Ändere den Code, um die Tasten viele Male drücken zu können und benutze Code, um etwas nettes zu zeichnen.\n"
        name: Tastengedrücke
        description: Versuche eine Taste an einen Befehl zu binden!
        default_save_name: Drückes
    years:
        name: Neujahr
        description: Runterzählen zum neuen Jahr!
        default_save_name: Neujahrs-Countdown
        levels:
            11:
                story_text: "## Frohes neues Jahr\nIn diesem Level kannst du den Befehl `{for}` Zahl `{in}` `{range}` benutzen, um zum neuen Jahr runterzuzählen.\n\n### Übung\nFülle die Lücken und bring den Code zum Laufen!\n"
                example_code: "```\n{for} Zahl {in} {range} _ {to} _\n    {print} Zahl\n{print} 'Frohes neues Jahr!'\n```\n"
                start_code: '# Platziere deinen Code hier'
#    next:
#        name: "Was kommt als nächstes?"
#        description: "Was kommt als nächstes?"
#        default_save_name: "next"
#        levels:
#            1:
#                story_text: |
#                    ## Was kommt als Nächstes?
#                    Herzlichen Glückwunsch! Du bist zum Ende von Level 1 gekommen. Hoffentlich hast du schon jetzt ein paar coole Codes geschrieben, aber bei Hedy gibt es noch eine Menge zu entdecken.
#                    Im ersten Level hast du vielleicht gemerkt, dass der `{echo}` Befehl nur eine Information auf einmal speichern kann.
#                    Im Restaurant-Abenteuer zum Beispiel konntest du nur entweder wiedergeben was der Kunde essen wollte, oder was er trinken wollte, aber nicht beides in einem Satz.
#                start_code: "{print} Let's go!"
#                example_code: "```\n{print} Willkommen bei Hedy's\n{ask} Was würden Sie gerne essen?\n{echo} Sie hätten also gerne \n{ask} Was würden Sie gerne trinken?\n{echo} Sie hätten also gerne \n```\n"
#                story_text_2: "Wenn der Spieler einen Hamburger und ein Cola eintippt, kannst du nicht \"Sie hätten also gerne einen Hamburger und ein Cola\" sagen , sondern musst zwei eigene Zeilen schreiben. \nAußerdem gibt der `{echo}` Befehl nur das letzte Wort des Satzes zurück. Du kannst also nicht \"Ihr Hamburger kommt sofort!\" sagen.\n\nDas ändert sich ab Level 2. In Level 2 lernst du, mit Variablen zu arbeiten, die es dir erlauben, mehrere Informationsfragmente zu speichern und sie dort wo du willst auszugeben.\nAlso gleich weiter zu Level 2!\n"
#            2:
#                story_text: |
#                    ## Was kommt als nächstes?
#                    In diesem Level hast du gelernt was eine Variable ist und wie du sie benutzen kannst um deine Abenteuer interaktiver zu machen.
#                    Aber... das ist nicht das Einzige was du mit Variablen anfangen kannst! Du kannst Variablen auch verwenden um Listen zu machen.
#                    Und du kannst sogar Hedy ein zufälliges Wort aus einer Liste auswählen lassen, womit du richtige Spiele machen kannst!
#                    Schau dir dafür einfach mal das nächste Level an!
#                start_code: "{print} Let's go to the next level!"
#            3:
#                story_text: |
#                    ## Was kommt als Nächstes?
#                    In diesem Level hast du mit Variablen geübt, aber vielleicht bist du diesem Fehler über den Weg gelaufen.
#                    Probier mal diesen Code aus:
#                    ```
#                    Name {is} Sophie
#                    {print} Mein Name ist Name
#                    ```
#                    Natürlich wolltest du `Mein Name ist Sophie` ausgeben, aber Hedy schreibt `Mein Sophie ist Sophie`.
#                    Im nächsten Level wird diese Problem gelöst. Dazu benutzen wir Anführungszeichen.
#                start_code: "{print} Let's go to the next level!"
#            4:
#                story_text: |
#                    ## What's next?
#                    In the previous levels you've already learned to use `{at} {random}` which made your games different every time you ran the code.
#                    But it's not really interactive, the player doesn't have any influence on what happens in the game.
#                    In the next level you'll learn the `{if}` command, that allows you to give different responses in your program. This way you can program a secret password for your computer for example.
#                    So let's take a peak!
#                    ```
#                    password {is} {ask} 'What is the correct password?'
#                    ```
#                start_code: "{print} 'Lets go to the next level!'"
#            5:
#                story_text: |
#                    ## Was kommt als Nächstes?
#                    Du bist jetzt am Ende dieses Levels angekommen. Dabei hast du `{ask}` and `{if}` gelernt. Zum Beispiel kannst du jetzt Gäste fragen, was sie gerne essen würden.
#                    Du kannst aber noch nicht den Preis für das Abendessen von jedem ausrechnen.
#                    Das nächste Level ermöglicht es, Addition, Subtraktion und Multiplikation in deinen Programmen zu verwenden. So kannst du die Preise im Restaurant ausrechnen, aber du könntest auch Geheimcode einfügen der deinen Freunden und deiner Familie einen Rabatt gibt.
#                    Eine andere Möglichkeit im nächsten Level ist ein eigenes Mathespiel zu programmieren, für deinen kleinen Bruder oder deine kleine Schwester, damit sie Multiplikation üben.
#                    Schau es dir selbst an, im nächsten Level!
#                start_code: "{print} 'On to the next level!'"
#                example_code: "## Freigetränke!\n```\n{print} 'Willkommen bei McHedy'\nBestellung {is} {ask} 'Was würden Sie gerne essen?'\n{print} 'Sie hätten gerne ' Bestellung\n{if} Bestellung {is} Hamburger Preis {is} 5\n{if} Bestellung {is} Pommes Preis {is} 2\nGetränke {is} {ask} 'Was würden Sie gerne dazu trinken?'\n{print} 'Sie hätten gerne ' Getränke\n{print} 'Das macht dann ' Preis ' Euro für Ihre ' Bestellung ' bitte'\n{print} 'Die Getränke sind gratis in diesem Level weil Hedy noch nicht den Preis ausrechnen kann...'\n```\n"
#            6:
#                story_text: |
#                    ## Was kommt als Nächstes?
#                    Gut gemacht! Du hast das Ende dieses Levels erreicht, was bedeutet dass du mit `{if}` und `{else}` geübt hast. Vielleicht ist dir aufgefallen, dass deine Codes immer länger und länger werden.
#                    Zum Beispiel wenn du 'Zum Geburtstag viel Glück' programmieren möchtest.
#                    Das ist eine Menge Code, dafür das eigentlich nur die Gleichen Wörter immer wieder kommen. Zum Glück gibt es im nächsten Level eine Lösung dafür, den `{repeat}` Befehl, der es dir erlaubt eine Zeile Code mehrmals zu wiederholen.
#                start_code: "{print} 'On to the next level!'"
#                example_code: "```\n {print} 'Zum Geburtstag viel Glück'\n {print} 'Zum Geburtstag viel Glück'\n {print} 'Zum Geburtstag liebe Hedy'\n {print} 'Zum Geburtstag viel Glück'\n```\n"
#            7:
#                story_text: |
#                    ## Was kommt als Nächstes?
#                    Jetzt hast du gelernt, wie du eine Zeile Code wiederholen kannst. Das wird sich noch als nützlich erweisen, reicht aber nicht immer aus. Manchmal musst du mehrere Zeilen auf einmal wiederholen.
#                    Das nächste Level erlaubt dir, ein paar Zeilen Code zu einer Gruppe zusammenzufügen und diese kleine Gruppe dann auf einmal zu wiederholen!
#                start_code: "{print} 'Lets go to the next level!'"
#                example_code: "```\n{repeat} 5 {times} {print} 'Im nächsten Level kannst du mehrere Zeilen Code auf einmal wiederholen!'\n```\n"
#            8:
#                story_text: |
#                    ## Was kommt als Nächstes?
#                    Gut gemacht! Du hast den Schluss eines weiteren Levels erreicht! In diesem Level hast du gelernt, mehrere Zeilen Code in einem {if} oder {repeat} Befehl zu verwenden. Noch kannst du nicht beide kombinieren...
#                    Aber es gibt gute Neuigkeiten! Im nächsten Level wirst du ein {if} in ein {if} setzen dürfen, oder in einen {repeat} Befehl.
#                start_code: "{print} 'Lets go to the next level!'"
#                example_code: "```\nAntwort = {ask} 'Würdest du gerne zum nächsten Level gehen?'\n{if} Antwort {is} ja\n    {print} 'Toll! Du kannst den {repeat} Befehl im {if} Befehl verwenden!'\n    {print} 'Juhuu!'\n    {print} 'Juhuu!'\n    {print} 'Juhuu!'\n{else}\n    {print} 'Okay, du darfst noch ein bisschen hier bleiben!'\n```\n"
#            9:
#                story_text: |
#                    ## Was kommt als Nächstes?
#                    Du machst das super! In diesem Level begegnet uns noch ein kleines Problem. Du hast das Wiederholen einer Zeile gelernt, aber was wenn du eine Zeile ein wenig ändern wolltest?
#                    Wenn du zum Beispiel das Lied 'if you're happy and you know it' singen würdest, sähe das so aus:
#                    Wenn du auch noch den nächsten Verse 'stomp your feet' wolltest, und den nächsten, und den nächsten, dann müsstest du den Code komplett ändern.
#                    Im nächsten Level lernst du den `{for}` Befehl, der es dir erlaubt eine Liste von Aktionen zu machen und den Code jedes Mal mit einer anderen Aktion zu wiederholen!
#                    Schau es dir an!
#                start_code: "{print} 'Lets go to the next level!'"
#                example_code: "```\n{repeat} 2 {times}\n    {print} 'Wenn du glücklich bist, dann klatsche in die Hand'\n{print} 'Zeig mir, wenn du bei mir bist, wie dir so zumute ist'\n{print} 'Wenn du glücklich bist, dann klatsche in die Hand'\n```\n"
#            10:
#                story_text: |
#                    ## What's next?
#                    You have reached the end of this level, you're doing great! You are about to go to the next level. In the higher levels, Hedy is focussing more and more on teaching you the programming language Python.
#                    In Python there is no `{repeat}` command, but there is a command that works like {repeat}. Are you curious to find out how to say `{repeat}` in Python language? Quickly go on to find out!
#                start_code: "{print} 'Lets go to the next level!'"
#            11:
#                story_text: |
#                    ## Was kommt als Nächstes?
#                    Vielleicht hast du im Restaurant-Abenteuer schon einmal versucht, Dezimalzahlen zu verwenden. Falls ja, hast du vielleicht bemerkt, dass Hedy diese noch nicht verstanden und immer abgerundet hat.
#                    Ab dem nächsten Level kannst du Dezimalzahlen verwenden.
#                start_code: "{print} 'Lets go to the next level!'"
#                example_code: "```\nburger {is} 5\ndrink {is} 2\ntotal {is} burger + drink\n{print} 'Du hast einen Burger und ein Getränk bestellt'\n{print} 'Das macht dann bitte ' total ' Euro'\n```\nDer Code oben funktioniert, weil der Burger 5 Dollar und das Getränk 2 Dollar kostet. Wenn du aber 50 Cent mehr verrechnest, funktioniert das Programm nicht mehr! So wie im unteren Code:\n```\nburger {is} 5,50\ndrink {is} 2,30\ntotal {is} burger + drink\n{print} 'Du hast einen Burger und ein Getränk bestellt'\n{print} 'Das macht dann bitte ' total ' Euro'\n```\nGeh zum nächsten Level, um diesen Code zum Laufen zu bringen!\n"
#            12:
#                story_text: |
#                    ## Was kommt als Nächstes?
#                    In den letzten Leveln hast du gelernt, wie du zwei `{if}` Befehle ineinanderfügen kannst. Das funktioniert soweit gut, aber so bekommst du ziemlich lange und unhandliche Codes, so wie diesen hier:
#                    In diesem System musst du sowohl den richtigen Nutzernamen als auch das richtige Passwort angeben.
#                    Im nächsten Level lernst du den Befehl `{and}`, der deinen Code ein ganzes Stück kürzer und verständlicher machen wird!
#                    Sieh für dich selbst!
#                start_code: "{print} 'Lets go to the next level!'"
#                example_code: "```\nNutzername {is} {ask} 'Was ist dein Nutzername?'\nPasswort {is} {ask} 'Was ist dein Passwort?'\n{if} Nutzername {is} 'Hedy'\n    {if} Passwort {is} 'geheim'\n        {print} 'Willkommen Hedy!'\n    {else}\n        {print} 'Zugang gesperrt!'\n{else}\n    {print} 'Zugang gesperrt!'\n```\n"
#            13:
#                story_text: |
#                    ## Was kommt als Nächstes?
#                    Mit dem Programm unten kannst du ausrechnen, ob du eine Schulaufgabe bestanden hast (dafür brauchst du sechs oder mehr Punkte).
#                    Wie du siehst, ist der Code super ineffizient, wegen des sehr langen Codes in der fünften Zeile.
#                    Alle unterschiedlichen Punktzahlen von 1 bis 5 mussten einzeln programmiert werden. Zum Glück lernst du im nächsten Level wie du das ohne extrem langen Code hinbekommst!
#                start_code: "{print} 'Lets go to the next level!'"
#                example_code: "```\nErste_Punktzahl = {ask} 'Wie viele Punkte hast du im ersten Test?'\nZweite_Punktzahl = {ask} 'Wie viele Punkte hast du im zweiten Test?'\nSumme {is} Erste_Punktzahl + Zweite_Punktzahl\nDurchschnitt {is} Summe / 2\n{if} Durchschnitt = 1 {or} Durchschnitt = 2 {or} Durchschnitt = 3 {or} Durchschnitt = 4 {or} Durchschnitt = 5\n    {print} 'Oh nein! Du bist durchgefallen...'\n{else}\n    {print} 'Juhuu! Du hast bestanden!'\n```\n"
#            14:
#                story_text: |
#                    ## Was kommt als Nächstes?
#                    In diesem Spiel unten wurde der Code so gemacht, dass der Spieler solange spielen kann wie er oder sie möchte...
#                    Aber der Code ist ineffizient und viel zu lang. Und was, wenn der Spieler 101 Spiele und nicht 100 spielen möchte?
#                    Kann man nicht bis unendlich spielen?
#                    Im nächsten Level lernst du einen Befehl der das alles ein ganzes Stück einfacher macht.
#                start_code: "{print} 'Lets go to the next level!'"
#                example_code: "```\nSpiel {is} 'läuft'\n{for} i {in} {range} 1 {to} 100\n    {if} Spiel {is} 'läuft'\n        Antwort = {ask} 'Möchtest du weiterspielen?'\n        {if} Antwort {is} 'nein'\n            Spiel {is} 'vorbei'\n        {if} Antwort {is} 'ja'\n            {print} 'Ok dann machen wir weiter.'\n```\n"
#            15:
#                story_text: |
#                    ## Was kommt als Nächstes?
#                    Im nächsten Level werden wir uns ein bisschen mehr in Richtung echten Python-Code bewegen. Du wirst lernen wie sich zwei Listen zusammenfügen lassen.
#                    So kannst du Code programmieren in dem einem Tier das entsprechende Tiergeräusch zugeordnet wird.
#                    Weil die beiden Codes unten... sind einfach nur Quatsch!
#                start_code: "{print} 'Lets go to the next level!'"
#                example_code: "```\nTiere = 'Huhn', 'Pferd', 'Kuh'\nGeräusche = 'Gack', 'Wieh', 'Muh'\n{for} Tier {in} Tiere\n    {print} 'Ein ' Tier ' macht ' Geräusche {at} {random}\n```\nSo kannst du es auch hinbekommen, aber....\n```\nTiere = 'Huhn', 'Pferd', 'Kuh'\nGeräusche = 'Gack', 'Wieh', 'Muh'\n{for} Tier {in} Tiere\n    {for} Geräusch {in} Geräusche\n        {print} 'Ein ' Tier ' macht ' Geräusch\n```\n"
#            16:
#                story_text: |
#                    ## Was kommt als Nächstes?
#                    Im nächsten Level wird es Zeit für einen neuen Befehl. Vielleicht ist dir in den vorherigen Leveln schon aufgefallen, dass `{if}` und `{else}`manchmal nicht ausreichen.
#                    Schau dir zum Beispiel mal diesen Code an:
#                start_code: "{print} 'Lets go to the next level!'"
#                story_text_2: In diesem Code wäre es toll, zweimal ein `{else}` zu haben, damit du eine Option für den Brokkoli und eine für die Grünen Bohnen haben kannst. Das nächste Level bringt den Befehl `{elif}` mit, der genau das möglich macht! Also nichts wie los zum nächsten Level!
#                example_code: "```\n{print} 'Was gibt es heute zum Abendessen?'\nMöglichkeiten = ['Pizza', 'Brokkoli', 'Grüne Bohnen']\nWahl = Möglichkeiten {at} {random}\n{if} Wahl = 'Pizza'\n    {print} 'Lecker! Pizza!'\n{else}\n    {print} 'Igitt...'\n```\n"
#            17:
#                story_text: |
#                    ## What's next?
#                    In the next level you will learn a real Python way to use `{print}`.
#                start_code: "{print} 'Lets go to the next level!'"
#            18:
#                story_text: |
#                    ## Was kommt als nächstes?
#                    Herzlichen Glückwunsch! Du hast das letzte Level von Hedy erreicht! Der Code, den du geschrieben hast, kann in echte Python-Umgebungen wie Replit oder PyCharm kopiert werden, wo du dann weiterüben kannst!
#                    Beachte jedoch, dass Python nur englische Befehle auslesen kann. Wenn du sonst also mit anderen Sprachen gearbeitet hast, musst du jetzt auch Englisch wechseln.
#                start_code: "{print} ('Great job!!!')"
