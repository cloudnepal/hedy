adventures:
    default:
        name: "Introductie"
        description: "Level uitleg"
        default_save_name: "intro"
        levels:
            1:
                story_text: |
                    ## Welkom bij Hedy!
                    In Level 1 kun je de commando's `{print}`, `{ask}` en `{echo}` gebruiken.
                    Typ de code over in het programmeerveld of druk op de gele knop bij de voorbeeldcode, om de computer voor je te laten typen.
                    Je kunt het voorbeeld uittesten door op de groene 'Voer de code uit' knop in de hoek te klikken.

                    Je kunt bijvoorbeeld tekst laten verschijnen in het beeld met het commando `{print}`     

                start_code: "{print} hallo wereld!"
                example_code: |
                    ```
                    {print} Hallo!
                    {print} Welkom bij Hedy!
                    ```
                story_text_2: |
                    Je kunt ook een vraag stellen met `{ask}` en het antwoord laten herhalen met `{echo}`.
                example_code_2: |
                    ```
                    {ask} Hoe heet je?
                    {echo} hallo
                    ```
                story_text_3: |
                    Laten we beginnen! Weet je niet wat je wilt maken? In de volgende tabjes vind je ideeën voor programma's die je kunt maken.
            2:
                story_text: |
                    ## Variabelen
                    In level 2 leer je 2 nieuwe commando's: `{is}` en `{sleep}`.
                    Je kunt een woord een naam geven met `{is}`. Dit noem je een variabele.In dit voorbeeld hebben we een variabele gemaakt die naam heet en een variabele die leeftijd heet. Je kunt deze woorden (variabelen) overal in je code neerzetten en Hedy zal ze vervangen met de gegeven antwoorden. Kijk maar:

                    Hierdoor heb je het `{echo}` commando niet meer nodig!

                example_code: |
                    ```
                    naam {is} Hedy
                    leeftijd {is} 15
                    {print} naam is leeftijd jaar oud
                    ```
                story_text_2: |
                    `{print}` werkt nog hetzelfde, maar`{ask}` is veranderd. Je hebt een variabele nodig om het antwoord in op te slaan. Dat ziet er zo uit:
                example_code_2: |
                    ```
                    antwoord {is} {ask} Hoe heet jij?
                    {print} Hoi antwoord
                    ```
                story_text_3: |
                    Nog een nieuw commando in dit level is `{sleep}`, waarmee je het programma een tijdje kunt pauzeren.Als je een getal achter {sleep} zet, wacht het programma zoveel seconden.
                example_code_3: |
                    ```
                    {print} Mijn favoriete kleur is...
                    {sleep} 2
                    {print} groen!
                    ```
                start_code: "{print} hallo wereld!"
            3:
                story_text: |
                    ## Maak een lijstje!
                    In level 3 kan je ook een lijstje maken. Uit de lijst kun je dan iets willekeurigs kiezen. Dat doe je met `{at} {random}`.

                example_code: |
                    ```
                    dieren {is} hond, kat, kangoeroe
                    {print} dieren {at} {random}
                    ```

                story_text_2: |-
                    Je kunt in dit level ook dingen aan een lijstje toevoegen met het commando `{add}`. Daarnaast kun je dingen van het lijstje verwijderen. Dat doe je met `{remove}`.

                example_code_2: |
                    ```
                    taarten {is} aardbei, chocolade
                    {add} appel {to_list} taarten
                    {remove} chocolade {from} taarten
                    {print} taarten {at} {random}
                    ```
                start_code: "{print} hallo wereld!"
            4:
                start_code: "{print} 'hallo wereld'"
                story_text: |
                    ## 'Aanhalingstekens'
                    In level 4 zijn `{ask}` en `{print}` anders.

                    Je moet tekst die je letterlijk wilt printen tussen aanhalingstekens zetten.

                    Dat is handig, want nu kan je alle woorden printen die je maar wilt. Ook de woorden die je hebt gebruikt om iets in op te slaan met `{is}`.

                    De meeste programmeertalen gebruiken ook aanhalingstekens bij het printen, dus we komen zo al een stapje dichterbij echt programmeren!
                story_text_2: |
                    ### Opdrachten worden steeds moeilijker
                    Je vindt de commando's weer links, en opdrachten in de volgende tabjes. De opdrachten worden in de opeenvolgende tabjes nu steeds iets moeilijker.
                    Begin dus links en werk zo door naar rechts om steeds meer uitgedaagd te worden.
                example_code: |
                    ```
                    {print} 'Vanaf nu gebruiken we aanhalingstekens!'
                    antwoord {is} {ask} 'Wat gebruiken we vanaf nu?'
                    {print} 'We gebruiken ' antwoord
                    ```

            5:
                start_code: |-
                    naam {is} {ask} 'hoe heet jij?'
                    {if} naam {is} Hedy {print} 'leuk' {else} {print} 'minder leuk!'
                story_text: |
                    ## Als... Anders...
                    In level 5 is er iets nieuws, de `{if}`! Met de `{if}` kun je een keuze maken tussen twee verschillende opties.
                    Deze code print leuk als je Hedy als naam invoert, en minder leuk als je iets anders invoert.
                    `{ask}` en `{print}` werken nog zoals in level 4.
                example_code: |
                    ```
                    naam {is} {ask} 'hoe heet jij?'
                    {if} naam {is} Hedy {print} 'leuk' {else} {print} 'minder leuk!'
                    ```
                story_text_2: |
                    Soms wordt code met een `{if}` erg lang en past het niet meer goed in het tekstvlak. Je mag dan een enter gebruiken en de code over twee regels verdelen. Begin dan de tweede regel met een `{else}`:
                example_code_2: |
                    ```
                    naam {is} {ask} 'hoe heet jij?'
                    {if} naam {is} Hedy {print} 'leuk'
                    {else} {print} 'minder leuk!'
                    ```
                story_text_3: |
                    ## Lijstjes
                    Om te kijken of iets in een lijst zit, kun je nu ook gebruik maken van `{in}`.
                     Deze code print mooi als je geel of rood antwoordt, en anders meh!
                example_code_3: |
                    ```
                    mooie_kleuren {is} geel, rood
                    lievelingskleur {is} {ask} 'Wat is jouw lievelingskleur?'
                    {if} lievelingskleur {in} mooie_kleuren {print} 'mooi!'
                    {else} {print} 'mwah'
                    ```
                story_text_4: "Iets anders dat met `{if}` werkt, is `{pressed}`! Met `{pressed}` kun je iedere letter\nuit het alfabeth en ieder nummer op jouw keyboard koppelen aan een commando. \nAls je een koppeling maakt en die knop indrukt gebeurt er iets. Probeer maar eens!\n"
                example_code_4: "```\n{if} x {is} {pressed} {print} 'het werkt!'\n```\n"
            6:
                start_code: "{print} '5 keer 5 is ' 5 * 5"
                story_text: |
                    ## 1 + 1
                    In level 6 is er iets nieuws: je kunt nu ook rekenen.

                    De plus is makkelijk, die schrijf je zoals bij rekenen: `5 + 5` bijvoorbeeld. De min gaat ook goed, dat is `5 - 5`.

                    De keer is een beetje anders, want er zit namelijk geen keer op je toetsenbord. Zoek maar eens, die is er echt niet!
                    Daarom doen we de keer met het sterretje boven de 8: `5 * 5`. Lees dat maar als "5 keer 5", dan onthoud je dat het makkelijkst.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 min 5 is ' 5 - 5
                    {print} '5 keer 5 is ' 5 * 5
                    ```
                story_text_2: |
                    Vanaf dit level mag je ook opslaan met een `=` in plaats van met het woord `{is}`. Bij woorden en bij sommen. Dus zo:
                example_code_2: |
                    ```
                    naam = Hedy
                    antwoord = 5 + 12
                    ```
            7:
                start_code: "{repeat} 3 {times} {print} 'Hedy is leuk!'"
                story_text: |
                    ## Level 7! Level 7!
                    In level 7 kun je gebruik maken van het `{repeat}` commando. Met `{repeat}` kun je codes een aantal keer herhalen.
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is leuk!'
                    ```
            8:
                start_code: |-
                    {repeat} 5 {times}
                        {print} 'Hallo allemaal'
                        {print} 'Dit wordt allemaal 5 keer herhaald'
                story_text: |
                    ## Inspringen
                    `{ask}` en `{print}` werken nog steeds zoals je gewend bent. Maar bij  `{if}`, `{else}`, `{pressed}` en `{repeat}` is er iets veranderd!
                    Je kunt vanaf dit level meerdere regels samen uitvoeren. Daarvoor moet je deze regels *inspringen*, dat betekent dat ze moeten beginnen met vier spaties.
                    Ook als je maar één regel in een blok wilt zetten, moet je inspringen!

                example_code: |
                    Zo werkt het `{repeat}` commando vanaf nu:
                    ```
                    {repeat} 5 {times}
                        {print} 'Hallo allemaal'
                        {print} 'Dit wordt allemaal 5 keer herhaald'
                    ```
                    Dit is hoe `{if}` en `{else}` vanaf nu werken:
                    ```
                    naam {is} {ask} 'Hoe heet je?'
                    {if} naam {is} Hedy
                        {print} 'Welkom, Hedy'
                        {print} 'Je kan nu spelen op je computer!'
                    {else}
                        {print} 'INDRINGER!'
                        {print} 'Je kunt deze computer niet gebruiken!'
                    ```
            9:
                start_code: |-
                    {repeat} 3 {times}
                        eten = {ask} 'Wat wil je bestellen?'
                        {if} eten {is} pizza
                            {print} 'lekker'
                        {else}
                            {print} 'pizza is lekkerder'
                story_text: |
                    ## En nu alles tegelijk!
                    In dit level kun je niet alleen meerdere regels gebruiken bij `{if}` en `{repeat}`, maar je kunt ze ook nog eens in elkaar zetten!
                    In het voorbeeldje zie je een `{if}` commando in een `{repeat}` commando staan. 

                    Andersom mag het ook en een `{if}` mag ook in een `{if}` en een `{repeat}` in een `{repeat}`.
                    Probeer het maar eens!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        eten = {ask} 'Wat wil je bestellen?'
                        {if} eten {is} pizza
                            {print} 'lekker'
                        {else}
                            {print} 'pizza is lekkerder'
                    ```
            10:
                start_code: |-
                    dieren {is} hond, kat, papegaai
                    {for} dier {in} dieren
                      {print} dier ' is een leuk dier!'
                story_text: |-
                    ## Voor elk item op mijn lijstje
                    In dit level leren we een nieuwe code, de code `{for}`. Met `{for}` kun je alle dingen in een lijstje gebruiken.
                    `{for}` mag meerdere regels gebruiken, net zoals de `{repeat}` en `{if}`, dus alle regels eronder moeten met spaties beginnen.
                example_code: |
                    ```
                    dieren {is} hond, kat, papegaai
                    {for} dier {in} dieren
                      {print} dier ' is een leuk dier!'
                    ```
            11:
                start_code: |-
                    {for} i {in} {range} 1 {to} 10
                        {print} i
                    {print} 'Wie niet weg is, is gezien'
                story_text: |-
                    ## Lussen!
                    We gaan nu een extra vorm van de `{for}` toevoegen! In vorige levels gebruikten we de `{for}` altijd met een lijst. Maar nu mag je `{for}` ook gebruiken met getallen.
                    We doen dat met een variabele, maar gevolgd door `{in}` en `{range}`. Daarna komt het begingetal, `{to}` en dan het eindgetal.

                    Probeer het voorbeeld eens uit. Je moet nog steeds alle regels die na `{for}`komen, inspringen. Dat betekent dat ze moeten beginnen met vier spaties.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10
                        {print} i
                    {print} 'Wie niet weg is, is gezien'
                    ```
            12:
                start_code: |-
                    {print} 'kommagetallen gaan met een punt!'
                    {print} 2.5 + 2.5
                story_text: |-
                    ## Getallen en teksten
                    **Kommagetallen**
                    Tot nu toe mocht je nog geen kommagetallen gebruiken zoals bijv anderhalf, maar nu wel! Let wel heel goed op... kommagetallen gaan op de computer met een `.` en niet met een komma.
                example_code: |
                    ```
                    {print} 'Kommagetallen gaan met een punt!'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |
                    **Tekst moet altijd met aanhalingstekens**
                    Nu we verder zijn met programmeren moet je ook weten dat tekst altijd tussen aanhalingstekens hoort. Ook in de `=`.
                example_code_2: |
                    ```
                    naam = 'Hedy de Robot'
                    {print} 'Hallo ' naam
                    ```
                story_text_3: |
                    **Tekst moet ook in lijstjes met aanhalingstekens**
                    Ook bij lijstjes gebruik je nu aanhalingstekens. Let op: elk item op je lijstje moet los tussen aanhalingstekens staan!
                    Hierdoor kun je nu ook twee woorden opslaan als 1 item op je lijstje, bijvoorbeeld 'Iron Man'.
                example_code_3: |
                    ```
                    superhelden = 'Spiderman', 'Batman', 'Iron Man'
                    {print} superhelden {at} {random}
                    ```
                story_text_4: |
                    **Tekst moet ook aanhalingstekens na een `{if}` commando**
                example_code_4: |
                    ```
                    naam = {ask} 'Wie ben jij?'
                    {if} naam = 'Hedy de Robot'
                        {print} 'Hoi!'
                    ```
                story_text_5: |
                    **Getallen hoeven geen aanhalingstekens**
                    Alleen bij tekst gebruik je aanhalingstekens, bij getallen dus niet:
                example_code_5: |
                    ```
                    score = 25
                    {print} 'Jij hebt ' score ' gehaald!'
                    ```
            13:
                start_code: |-
                    naam = {ask} 'hoe heet jij?'
                    leeftijd = {ask} 'hoe oud ben jij?'
                    {if} naam {is} 'Hedy' {and} leeftijd {is} 2
                        {print} 'Jij bent de echte Hedy!'
                story_text: |-
                    ## En... Of?
                    We gaan nu `{and}` en `{or}` gebruiken! Als je twee dingen wilt checken hoef je niet meer twee {if}jes in elkaar te doen maar kan je nu `{and}` en `{or}` gebruiken. Beide dingen moeten waar zijn als je een `{and}` gebruikt. We kunnen ook `{or}` gebruiken. Daarbij moet er één van de twee waar zijn.
                example_code: |
                    ```
                    naam = {ask} 'hoe heet jij?'
                    leeftijd = {ask} 'hoe oud ben jij?'
                    {if} naam {is} 'Hedy' {and} leeftijd {is} 2
                        {print} 'Jij bent de echte Hedy!'
                    ```
            14:
                start_code: |-
                    leeftijd = {ask} 'Hoe oud ben jij?'
                    {if} leeftijd < 13
                        {print} 'Dan ben je jonger dan ik!'
                    {else}
                        {print} 'Dan ben je ouder dan ik!'
                story_text: |
                    ## Groot, Groter, Grootst
                    We gaan nieuwe tekens leren, je kent ze misschien wel van rekenen/wiskunde, `<` en `>`.
                    De `<` kijkt of het eerste getal kleiner is dan de tweede. Bijvoorbeeld met `leeftijd < 12` kun je kijken of `leeftijd` kleiner is dan 12.
                    Als je wil kijken of een getal kleiner of even groot is dan een ander getal, kun je `<=` gebruiken. Bijvoorbeeld `leeftijd <= 11`.
                    De `>` kijkt of iets groter is dan het tweede getal. Bijvoorbeeld met `punten > 10` kun je kijken of `punten` groter is dan 10.
                    Als je wil kijken of een getal groter of even groot is als een ander getal, kun je `>=` gebruiken. Bijvoorbeeld `punten >= 11`.
                    Je gebruikt de vergelijkingen in de `{if}` zo:
                example_code: |
                    ```
                    leeftijd = {ask} 'Hoe oud ben jij?'
                    {if} leeftijd < 12
                            {print} 'Dan ben je jonger dan ik!'
                    ```
                story_text_2: |
                    Als je iets precies wilt vergelijken, mag je dat nu doen met twee isgelijktekentjes. Zo doen de meeste programmeertalen dat:
                example_code_2: |
                    ```
                    name = {ask} 'Hoe heet jij?'
                    {if} name == 'Hedy'
                        {print} 'Jij bent cool!'
                    ```
                story_text_3: |
                    Je kan ook vergelijken of iets *niet* hetzelfde is met `!=`. Zo:
                example_code_3: |
                    ```
                    name = {ask} 'Hoe heet jij?'
                    {if} name != 'Hedy'
                        {print} 'Jij bent Hedy niet'
                    ```
            15:
                start_code: |-
                    antwoord = 0
                    {while} antwoord != 25
                        antwoord = {ask} 'Wat is 5 keer 5?'
                    {print} 'Goed gedaan!'
                story_text: |-
                    ## Meer lussen!
                    Nu gaan we een nieuwe loop leren: De `{while}` loop!
                    We gaan door zo lang het statement dat we hebben waar is.
                    Vergeet dus niet in de loop de waarde te veranderen.

                    Dus bij de voorbeeldcode gaan we door totdat er een goed antwoord is gegeven.
                    Als er nooit een goed antwoord wordt gegeven, dan stopt de loop nooit!
                example_code: "```\nanswer = 0\n{while} answer != 25\n    answer = {ask} 'What is 5 times 5?'\n{print} 'A correct answer has been given'\n```\n"
            16:
                start_code: |-
                    fruit = ['appel', 'banaan', 'kers']
                    {print} fruit
                story_text: |-
                    ## Steeds meer als echte code!
                    We zijn aangekomen bij de laatste paar Hedy levels. We komen dus steeds dichter bij echte Python code.
                    In dit level gaan we leren hoe je lijsten maakt op de Pythonmanier. Dat werkt met vierkante haakjes zetten om lijstjes, dat zijn deze: `[` en `]`.
                    Als we woorden in de lijst willen zetten, moeten we om de woorden ook enkele aanhalingstekens zetten. Bij getallen hoeft dat niet.
                    We kunnen in dit level ook met een getal plekken in lijstjes aanwijzen.
                example_code: |
                    ```
                    vrienden = ['Ahmed', 'Ben', 'Cayden']
                    geluksgetallen = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                       {print} 'het geluksgetal van ' vrienden[i]
                       {print} 'is ' geluksgetallen[i]
                    ```
            17:
                start_code: |-
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Wie niet weg is, is gezien'
                story_text: |-
                    ## {elif}
                    Nu veranderen we nog een klein stukje dat te maken heeft met het inspringen. Elke keer dat we gaan inspringen moeten we een `:` bij de regel ervoor zetten.

                    Daarnaast kun je in dit level een nieuw commando gebruiken: `{elif}`. `{elif}` is de afkorting van {else} en {if} en zorgt ervoor dat je 3 (of meer!) opties kunt maken.
                    Kijk maar!
                example_code: "```\nprijzen = ['1 miljoen euro', 'een appeltaart', 'niets']\njouw_prijs = prijzen[{random}]\n{print} 'Je wint ' jouw_prijs\n{if} jouw_prijs == '1 miljoen euro' :\n    {print} 'Joepie, je bent rijk!'\n{elif} jouw_prijs == 'een appeltaart' :\n    {print} 'Lekker, een appeltaart!'\n{else}:\n    {print} 'Veel geluk de volgende keer..'\n```\n"
            18:
                start_code: |-
                    naam = 'Hedy'
                    {print}('Mijn naam is ', naam)
                story_text: |-
                    ## Het laatste level!
                    We zijn aangekomen bij echte Python code! Dat betekent wel dat we vanaf nu ronde haakjes moeten gebruiken bij {print} en bij {range}.
                    Dit betekent ook dat je de Hedy code uit de level in iedere Python omgeving kunt gebruiken als je Engelse commando's gebruikt. Deed je dat tot nu toe nog niet, zet dan de knop om in het commando's menu. 
                example_code: |
                    ```
                    {print}('Hallo!')
                    {for} i {in} {range}(1, 10):
                        {print}('Dit is regel ', i)
                    ```
                story_text_2: Als je meer dan één tekst wilt printen, moeten er komma's tussen.
                example_code_2: "```\ntemperatuur = 25\n{print}('Het is ', temperatuur, ' graden buiten')\n```\n"
                story_text_3: "## Input\nDe laatste aanpassing die we moeten maken om echte Python code te krijgen is `{ask}` veranderen in `{input}`."
                example_code_3: "```\n{print}('Mijn naam is Hedy!')\nnaam = {input}('Hoe heet jij?')\n{print}('Jij heet dus ', naam)\n```\n"
    story:
        name: "Verhaal"
        description: "Maak een interactief verhaal"
        default_save_name: "Verhaal"
        levels:
            1:
                story_text: |
                    ## Maak een verhaal
                    In level 1 kun je een verhaal maken met steeds een andere hoofdpersoon die je zelf invoert.

                    Gebruik als eerste regel `{ask}` en vraag wie de hoofdpersoon van jouw verhaal wordt.

                    Na die eerste regel begin je met `{print}` als de zin moet worden geprint.
                    Je gebruikt `{echo}` als je wilt dat jouw hoofdpersoon op het einde van de zin komt.
                example_code: |
                    ```
                    {ask} De hoofdpersoon van dit verhaal is
                    {print} De hoofdpersoon gaat nu in het bos lopen
                    {echo} Hij is wel een beetje bang, die
                    {print} Overal hoort hij gekke geluiden
                    {print} Hij is bang dat dit een spookbos is
                    ```
                start_code: "{print} Hier begint jouw verhaal"
                story_text_2: |
                    ### Opdracht
                    Maak nu je eigen verhaal van minstens 6 regels code.
                    Dit verhaaltje mag niet hetzelfde zijn als de voorbeeldcode.
                    Gebruik minstens een `{ask}` en een `{echo}` commando.
                    Je mag zelf een onderwerp kiezen.
                    Geen inspiratie? Kies dan een van onze onderwerpen: Naar de bioscoop, een sportwedstrijd of een dagje naar de dierentuin
            2:
                story_text: |
                    ## Verhaal
                    In level 2 kun je je verhaal leuker maken. De naam van je hoofdpersoon kan nu overal in de zin staan.

                    Je moet daar wel een klein beetje extra voor programmeren. Je moet je hoofdpersoon nu eerst een naam geven.

                    Die naam kun je dan overal in een zin neerzetten.
                story_text_2: |
                    ### Opdracht
                    Het is tijd om variabelen toe te voegen aan jouw eigen verhaal, dat je in level 1 hebt geschreven.
                    Ga naar 'Mijn programma's', zoek jouw level 1 verhaal avontuur op en kopieer de code. Plak de code daarna in het invoerscherm hier in dit level.

                    Deze code werkt nog niet, omdat je nog geen variabelen gebruikt hebt.
                    Verander de `{ask}` en `{echo}` commando's in jouw code naar de juiste vorm, die je in dit level geleerd hebt.

                    **Extra** Voeg een slaapcommando toe aan jouw code om spanning in het verhaal op te bouwen.
                example_code: |-
                    ```
                    naam {is} {ask} Hoe heet de hoofdpersoon?
                    {print} naam gaat nu in het bos lopen
                    {print} naam is wel een beetje bang
                    {print} ineens hoort hij een vreemd geluid
                    {sleep} 2
                    {print} naam is bang dat dit een spookbos is
                    ```
                start_code: "{print} Hier komt straks jouw verhaal!"
            3:
                story_text: |
                    ## Verhaal
                    In dit level kun je iets willekeurigs aan je verhaal toevoegen. Een willekeurig monster, dier of ander obstakel. Dat gaat zo:
                start_code: "{print} Hier komt straks jouw verhaal!"
                example_code: |
                    ```
                    dieren {is} 🦇, 🐿, 🦉, 🦔
                    {print} Hij hoort nu het geluid van een dieren {at} {random}
                    ```
                story_text_2: |
                    Het `{add}`commando kun je misschien ook in je verhaal gebruiken.

                example_code_2: |
                    ```
                    {print} Hij hoort een geluid...
                    dieren {is} 🐿, 🦔, 🦇, 🦉
                    dier {is} {ask} Wat denk jij dat het is?
                    {add} dier {to_list} dieren
                    {print} het was een dieren {at} {random}
                    ```
                story_text_3: |
                    Hiernaast zie je een voorbeeld van het `{remove}` commando in een verhaal

                    ### Opdracht
                    Kopieer jouw verhaal uit het vorige level in dit level.
                    In dit level leerde je 3 nieuwe commando's: `{at} {random}` , `{add} {to}` en `{remove} {from}`.
                    Voeg nieuwe regels code toe aan jouw verhaal, zodat deze 3 nieuwe commando's allemaal minstens 1x gebruikt worden.
                example_code_3: |
                    ```
                    {print} Zijn rugzak is veel te zwaar...
                    {print} In de rugzak zitten een fles water, een zaklamp en een baksteen.
                    tas {is} water, zaklamp, baksteen
                    weggooien {is} {ask} Welk ding zal onze held weggooien?
                    {remove} weggooien {from} tas
                    ```
            4:
                story_text: |
                    ## Verhaal
                    Misschien heb je gezien dat in het vorige level nog wel een foutje zit. Heb je toevallig geprobeerd om een zin te maken waarin het woord naam zat? Bijv. `{print}` mijn naam is naam.
                    Dat werkte niet goed! Dan krijg je: mijn Henk is Henk. Dat kun je in dit level oplossen. Daarvoor moet je wel aanhalingstekens gebruiken bij alles dat je gaat printen.
                example_code: |
                    ```
                    naam {is} Hans
                    {print} _De naam van de hoofdpersoon {is} _ naam
                    {print} naam _ gaat nu in het bos lopen_
                    {print} naam _ is wel een beetje bang_
                    dieren {is} 🦔, 🦉, 🐿, 🦇
                    {print} _Hij hoort het geluid van een _ dieren {at} {random}
                    {print} naam _ is bang dat dit een spookbos is_
                    ```
                start_code: "{print} 'Hier komt straks jouw verhaal!'"
            5:
                story_text: |
                    ## Verhaal
                    In dit level kun jij je verhaal nog leuker maken door verschillende eindes te programmeren.

                    ## Opdracht
                    Verzin twee eindes voor je verhaal, bijvoorbeeld zo:

                    - De prinses loopt door het bos
                    - Ze komt een monster tegen

                    - Goed einde: Ze pakt haar zwaard en het monster rent snel weg
                    - Slecht einde:  Het monster eet de prinses op

                    Je kunt ook zorgen dat er weer een naam ingevoerd kan worden. Dat werkt net zoals in level 3. Dat kun je combineren met een `{if}`, en dan heb je al een heel programma gemaakt!
                example_code: |
                    ```
                    naam {is} {ask} 'Wie loopt er in het bos?'
                    {print} naam ' loopt door het bos'
                    {print} naam ' komt een monster tegen'
                    eind {is} {ask} 'Wil je een goed of slecht einde?'
                    {if} eind {is} goed {print} naam ' pakt het zwaard en het monster rent snel weg'
                    {else} {print} 'Het monster eet ' naam ' op'
                    ```
                start_code: "{print} 'Hier komt straks jouw verhaal!'"
            7:
                story_text: |
                    ## Verhaal
                    Soms zegt iemand in een verhaal iets meerdere keren. Bijvoorbeeld als iemand om hulp roept, of een liedje zingt.
                    Dat kun je nu in je verhaal zetten met `{repeat}`.

                    ### Opdracht
                    Kun jij ook herhaling in jouw verhaal gebruiken? Zoek je verhaalprogramma van level 6 op en kies minstens
                    één `{print}` regel om te herhalen.
                example_code: |
                    ```
                    {print} 'De prins riep steeds om hulp'
                    {repeat} 5 {times} {print} 'Help!'
                    {print} 'Waarom helpt niemand me nou toch?'
                    ```
                start_code: "{repeat} 5 {times} {print} 'Help!'"
            8:
                story_text: |
                    ## Verhaal
                    In dit level kun je je verhaal écht interactief maken! In dit level is het `{if}` commando namelijk veranderd, waardoor je meerdere regels kan printen na een `{if}`. Zo kun je de lezer van je verhaal een keuze laten maken. Na de keuze gaat het verhaal verder op basis van die keuze. Kijk maar naar het voorbeeld.

                    ### Opdracht 1
                    In de voorbeeldcode zie je hoe je twee verschillende verhalen kunt maken; eentje waarbij je op het geluid afgaat en eentje waarbij je je verstopt. Vul zelf lege plekken in! **(extra)** Maak het verhaal nog langer. Wat gebeurt er verder? Je kan ook een tweede vraag toevoegen met een tweede keuze.

                    ### Opdracht 2
                    Oefen met het inspringen. Ga terug naar level 5, zoek je verhaalprogramma op. Maak dan je goede én slechte einde ieder minstens drie regels.

                example_code: |
                    ```
                    hoofdpersoon = {ask} 'Hoe heet de hoofdpersoon in dit verhaal?'
                    {print} hoofdpersoon ' loopt door het bos'
                    {print} hoofdpersoon ' hoort plotseling een geluid!'
                    dapper = {ask} 'Gaat 'hoofdpersoon ' op het geluid af?'
                    {if} dapper {is} ja
                        {print} 'Dapper stapt ' hoofdpersoon ' op het geluid af'
                        {print} _
                    {else}
                        {print} 'Snel zoekt ' hoofdpersoon ' een verstopplek'
                        {print} _
                    ```
                start_code: "# Schrijf jouw code hier"
            9:
                story_text: |
                    ## Verhaal
                    In dit level kun je `{if}` and `{repeat}` commando's in andere `{if}` en `{repeat}` commando's stoppen. 
                    Hierdoor krijg je nog meer mogelijkheden om je verhaal echt interactief te maken!

                    ### Opdracht 1
                    Maak de code af op de streepjes zodat de `{if}` het doet.

                    ### Opdracht 2
                    Voeg een `{if}` en een `{else}` toe aan het gedeelte van het verhaal waar Robin naar huis gaat.

                    ### Opdracht 3
                    Ga terug naar je verhaal van level 8 en gebruik ook minstens twee keer een `{if}` in een `{if}`.
                example_code: |
                    ```
                    {print} 'Robin loopt door de stad'
                    locatie = {ask} 'Gaat Robin een winkel in of gaat ze naar huis?'
                    {if} locatie {is} winkel
                        {print} 'Ze stapt de winkel binnen'
                        {print} 'Robin ziet een interessant boek.'
                        boek = {ask} 'Koopt Robin het boek?'
                        {if} boek {is} ja
                            _ {print} 'Robin koopt het boek en gaat naar huis'
                            _ {else}
                            _ {print} 'Robin verlaat de winkel en gaat naar huis'
                    {else}
                        {print} 'Robin gaat naar huis'
                    ```
                start_code: "# Schrijf jouw code hier"
            10:
                story_text: |
                    ## Verhaal
                    In dit level kun je het commando `{for}` in je verhaal gebruiken. Op deze manier kun je gemakkelijk het kinderboek 'Beertje bruin, wat zie jij daar?' programmeren.

                    ### Opdracht 
                    Kijk naar <a href="https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf"> het verhaal</a>, als je het niet kent, en zorg dat dit hele verhaal wordt uitgeprint.
                example_code: |
                    ```
                    dieren = _ , _ , _
                    {print} 'Brown Bear, Brown Bear'
                    _

                    ```
                start_code: "# Schrijf jouw code hier"
            12:
                story_text: |-
                    ## Verhaal
                    Aanhalingstekens zijn nu nodig om woorden op te slaan in een variabele.

                    ### Opdracht
                    Zoek een verhaal op uit een eerder level, je mag zelf kiezen welk level.
                    Zorg dan dat alles weer in orde is door op de juiste plekken aanhalingstekens toe te voegen.
                example_code: |
                    ```
                    naam = 'De Koningin van Engeland'
                    {print} naam ' zat te genieten van een lekker taartje, toen plotseling...'
                    ```
                start_code: "# Schrijf jouw code hier"
            15:
                story_text: |
                    ## Verhaal
                    In dit level kun je de `{while}` loop gebruiken om je verhaaltjes nog interessanter te maken. Zo kun je `{while} spelletje {is} 'aan'` gebruiken om het spel te laten werken totdat je game over bent.
                    Of je kunt `{while} zwaard {is} 'kwijt'` gebruiken, zodat de speler niet verder kan totdat hij/zij het zwaard gevonden heeft.
                example_code: |
                    ```
                    sleutels = 'kwijt'
                    {print} 'Je staat in de voortuin en bent je sleutels kwijt.'
                    {print} 'Waar ga je zoeken?'
                    {print} 'kies uit: boom, steen, bloembed, brievenbus'
                    {while} sleutels == 'kwijt'
                        locatie = {ask} 'Waar wil je zoeken?'
                        {if} locatie == 'bloembed'
                            {print} 'Hier zijn ze!'
                            sleutels = 'gevonden'
                        {else}
                            {print} 'Helaas, ze liggen niet bij de ' locatie
                    {print} 'Nu kun je het huis in!'
                    ```
                start_code: "# Schrijf jouw code hier"
    parrot:
        name: "Papegaai"
        description: "Maak je eigen online papegaai die je napraat!"
        default_save_name: "Papegaai"
        levels:
            1:
                story_text: |
                    ## Papegaai
                    Maak je eigen online papegaai die je napraat!
                example_code: |
                    ```
                    {print} Ik ben papegaai Hedy
                    {ask} Wie ben jij?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Opdracht
                    Kopieer de voorbeeldcode naar jouw invoerscherm door op de gele knop te klikken.
                    Laat de papegaai nu een andere vraag stellen dan in het voorbeeld. Vul de vraag in op het lijntje.
                    **Extra** Je kunt de papegaai ook meerdere vragen laten stellen. Typ onder jouw code nog meer regels code.
                example_code_2: |-
                    ```
                    {print} Ik ben Hedy de papegaai
                    {ask} _
                    {echo}
                    {echo}
                    ```
                start_code: "{print} Ik ben Hedy de papegaai!\n{ask} Wie ben jij?\n{echo}\n{echo}"
            2:
                story_text: |
                    ## Papegaai
                    Maak je eigen online papegaai die je napraat!
                example_code: |
                    ```
                    {print} Ik ben papegaai Hedy
                    naam {is} {ask} Wie ben jij?
                    {print} naam
                    {sleep}
                    {print} koppie krauw
                    {sleep}
                    {print} naam
                    ```
                start_code: "{print} Ik ben Hedy de papegaai!"
                story_text_2: |
                    ### Opdracht
                    Je kunt variabelen gebruiken om de papegaai meer te laten zeggen dat alleen je naam. Kun jij deze code afmaken?
                example_code_2: |
                    ```
                    {print} Ik ben Hedy de papegaai
                    naam {is} {ask} Wat is jouw naam?
                    {print} naam
                    {sleep}
                    {print} naam
                    achternaam {is} {ask} Wat is jouw achternaam?
                    _
                    {sleep}
                    _
                    ```
            3:
                story_text: |
                    ## Papegaai
                    Leer je papegaai nieuwe woordjes met het `{add}` commando!
                    ### Opdracht
                    Hoe kun je de papegaai meerdere woorden laten zeggen?
                example_code: |
                    ```
                    woorden {is} lorre, Hedy
                    {print} Train je papegaai!
                    nieuw_woord {is} {ask} Welk woord moet je papegaai leren?
                    {add} nieuw_woord {to_list} woorden
                    {print} 🧒: Zeg nieuw_woord, Hedy!
                    {print} 🦜: woorden {at} {random}
                    ```
                start_code: "# Schrijf jouw code hier"
            4:
                story_text: |
                    ## Papegaai
                    In dit level gebruiken we aanhalingstekens bij de commando's `{ask}` en `{print}`.
                    Kun jij de code afmaken door aanhalingstekens toe te voegen?
                example_code: |
                    ```
                    woorden {is} lorre, Hedy
                    {print} 'Train je papegaai!'
                    nieuw_woord {is} {ask} _ Welk woord moet je papegaai leren? _
                    {add} nieuw_woord {to_list} woorden
                    {print} _ 🧒: Zeg _ nieuw_woord _ , Hedy! _
                    {print} _ 🦜: _ woorden {at} {random}
                    ```
                start_code: "# Schrijf jouw code hier"
            5:
                story_text: |
                    ## Papegaai
                    Beloon je papegaai als hij het nieuwe woordje zegt!
                    Maak de code af door de 4 missende commando's in te vullen.
                example_code: |
                    ```
                    woorden {is} lorre, Hedy
                    {print} 'Train je papegaai!'
                    nieuw_woord {is} {ask} 'Welk woord moet je papegaai leren?'
                    {add} nieuw_woord {to_list} woorden
                    {print} '🧒 Zeg ' nieuw_woord ', Hedy!'
                    gezegd_woord {is} woorden {at} {random}
                    {print} '🦜 ' gezegd_woord
                    _ gezegd_woord {is} nieuw_woord _ '🧒 Goedzo! 🍪'
                    _ _ '🧒 Nee! Zeg ' nieuw_woord
                    ```
                start_code: "# Schrijf jouw code hier"
    songs:
        name: "Zing een liedje!"
        description: "Print een liedje"
        default_save_name: "Liedje"
        levels:
            6:
                story_text: |
                    ## Liedjes
                    In liedjes zit vaak veel herhaling. Soms wordt er in die herhaling ook geteld.
                    Bijvoorbeeld in het welbekende potje met vet. Dat kan je met een beetje rekenen zelf programmeren.

                    Tip: gebruik de 'lees voor' funtie om Hedy het liedje voor je te laten zingen. 

                    ### Opdracht
                    Je kunt nu regel 2 t/m 9 zo vaak herhalen als je wil door de regels te kopiëren en plakken.
                example_code: |
                    ```
                    couplet = 1
                    {print} 'Ik heb het potje met vet'
                    {print} 'al op de tafel gezet'
                    {print} 'Ik heb het'
                    {print} 'potje, potje, potje, potje... '
                    {print} 'veeeeeet'
                    {print} 'al op de tafel gezet'
                    couplet = couplet + 1
                    {print} 'Door naar het ' couplet 'e couplet'
                    ```

                    Na het potje met vet kun je natuurlijk ook nog andere liedjes programmeren. Er zijn veel liedjes met tellen erin.
                    Misschien kun jij het liedje 99 bottles of beer ook wel maken! Daar tellen we af in plaats van op.
                start_code: "{print} 'Zing een liedje!'"
                story_text_2: |
                    ## 10 kleine visjes
                    Dit kinderliedje telt van 10 visjes naar 1 visje. 
                    Kopieer regel 2 tot en met 7 om het hele lied te maken!
                example_code_2: |
                    ```
                    nummer = 11
                    nummer = nummer - 1
                    {print} nummer 'kleine visjes zwommen naar de zee'
                    {print} 'Moeder zei ik ga niet mee! '
                    {print} 'Ik blijf liever in de vieze oude sloop want in de zee daar zwemmen haaien en die bijten je'
                    {print} 'BLUB BLUB BLUB BLUB BLUB BLUB BLUB BLUB BLUB BLUB BLUB BLUB BLUB'
                    {sleep}
                    ```
            7:
                story_text: |
                    ## Liedjes
                    In liedjes zit vaak veel herhaling. Denk maar aan Baby Shark! Ze zingen steeds hetzelfde:

                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark tututudutudu <br>
                    Baby Shark

                    ### Opdracht

                    Kan jij Baby Shark printen met een `{repeat}`? Maak de code af door de streepjes in te vullen. **(extra)**
                    Na Baby Shark kun je natuurlijk ook nog andere liedjes programmeren. Er zijn veel liedjes met herhaling erin! Kun jij er nog eentje verzinnen en printen met code?

                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Shark tututudutudu'
                    {print} 'Baby Shark'
                    ```

                start_code: "{print} 'Baby Shark'"
            8:
                story_text: |
                    ## Zing een liedje!
                    Nu kun je meerdere regels herhalen met `{repeat}`, wat heel fijn is in liedjes!
                    In dit level kun je een liedje 3 keer herhalen, met maar één regel code. 

                    ### Opdracht
                    Zet het juiste commando op de streepjes, en zorg dat de code op de juiste manier inspringt. **(extra)** Is Billie Boem gelukt? Probeer dan 10 kleine visjes.

                example_code: |
                    ```
                    _ 3 {times}
                    dier = {ask} 'Welk dier kies je?'
                    {print} 'En wie rijdt er op zijn ' dier ' door de prairie? Dat is cowboy Billie Boem, door de boeven zeer gevreesd!'
                    {print} 'Er is nooit in het Wilde Westen een cowboy geweest, die zo dapper was als Cowboy Billie Boem.'
                    {print} 'Van je hotsie knotsie knetter! Van je jippie jippie jeej! Maar zijn ' dier ' was zeer vermoeid en die kon niet langer mee'
                    {print} 'Maar hij moest de boeven vangen, dus koos hij een ander beest, en nu mag je zelf bedenken wat voor beest dat is geweest!'
                    ```
                start_code: "# Schrijf jouw code hier"
            10:
                story_text: |
                    ## Zing een liedje!
                    Ook in dit level kunnen we weer liedjes zingen, bijv. Baby Shark. Met `{for}` kunnen we het liedje met maar 6 regels code printen. 

                    ### Opdracht 1
                    Kun jij baby shark printen met een `{for}`? Vul de streepjes in en maak de codes verder af.
                story_text_2: |
                    ### Opdracht 2
                    Print het liedjes 10 kleine visjes met gebruik van de lus. Zoek de tekst op als je die niet kent.

                    **(extra)** Print het liedje Old MacDonald had a farm. Zoek de tekst op als je die niet kent, en zorg dat alle dieren ook het goede geluid maken, met een `{if}`.
                example_code_2: |
                    ```
                    visjes = 10, 9, 8, 7, 6, 5, 4, 3, 2
                    ```
                example_code: |
                    ```
                    familie = baby, mama, papa, opa, oma
                    _ _ _ _ 
                      {print} _
                    ```
                start_code: "# Schrijf jouw code hier"
            11:
                story_text: |
                    ## Zing een stapelliedje!
                    In dit level kun je makkelijk (af)tellen in een liedje. Zo kun je bijvoorbeeld het kinderliedje '10 kleine visjes' programmeren.

                    ### Opdracht 1
                    Maak het liedje af. Zoek de tekst op als je die niet meer weet.

                    ### Opdracht 2
                    De laatste regel van het liedje is anders. Zorg dta je die regel ook print iin de `{for}`. Darr heb je een `{if}` voor nodig.

                example_code: |
                    ```
                    _ _ _ _ 10 _ 1
                        {print} i ' kleine visjes zwommen naar de zee'
                    ```
                start_code: "# Schrijf jouw code hier"
            12:
                story_text: |
                    ## Zing een liedje
                    In dit level kun je meerdere woorden in een variabele opslaan. Dat komt goed uit bij liedjes zoals het Engelse kinderliedje 'if you're happy and you know it, clap your hands'.

                    ### Opdracht
                    Kun jij de regels beginnen met de goede hoeveelheid spaties om het liedje aan de praat te krijgen?
                    Let op: Je hoeft niet overal in te springen!
                example_code: |
                    ```
                    _ actions = 'clap your hands', 'stomp your feet', 'shout Hurray!'
                    _ {for} action {in} actions
                    _ {for} i {in} {range} 1 {to} 2
                    _ {print} 'if youre happy and you know it'
                    _ {print} action
                    _ {print} 'if youre happy and you know it {and} you really want to show it'
                    _ {print} 'if youre happy and you know it'
                    _ {print} action
                    ```
                start_code: "# Schrijf jouw code hier"
            16:
                story_text: |
                    ## Zing een lied!
                    Maak het nog makkelijker om een liedje te programmeren zoals old MacDonald! Je kunt nu de dieren en hun geluiden aan elkaar koppelen, door ze op dezelfde plaats in het lijstje te zetten.
                    Ook de Dronken Zeeman gaat lekker snel in dit level! Je hebt maar 5 regels nodig voor het gehele lied. Kijk maar!
                example_code: |
                    ## Old MacDonald
                    ```
                    dieren = ['big', 'hond', 'koe']
                    geluiden = ['knor', 'woef', 'boe']
                    {for} i {in} {range} 1 {to} 3
                        dier = dieren[i]
                        geluid = geluiden[i]
                        {print} 'Old MacDonald had een wei'
                        {print} 'hi ja hi ja ho!'
                        {print} 'En in die wei daar stond een ' dier
                        {print} 'hi ja hi ja ho!'
                        {print} 'met een ' geluid geluid ' hier'
                        {print} 'en een ' geluid geluid ' daar'
                        {print} 'hier een ' geluid
                        {print} 'daar een ' geluid
                        {print} 'overal een ' geluid geluid
                    ```

                    ## Dronken Zeeman
                    ```
                    coupletten = ['wat zullen we doen met de dronken zeeman?', 'hang hem aan de mast om uit te waaien', 'stop hem met zijn kop in een emmer water', 'dat zullen we doen met de dronken zeeman']
                    {for} couplet {in} coupletten
                        {for} i {in} {range} 1 {to} 3
                            {print} couplet
                        {print} 's morgens in de vroegte'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'HELA HUP! daar gaat ie!'
                        {print} 's morgens in de vroegte'
                    ```
                start_code: "# Schrijf jouw code hier"
    turtle:
        name: "Tekenen"
        description: "Maak jouw eigen tekening"
        default_save_name: "Schildpad"
        levels:
            1:
                story_text: |
                    ## Tekenen maar
                    In level 1 kun je ook beginnen met een programmeer-tekening! Door lijnen te combineren met draaien kun je bijvoorbeeld een
                    vierkant maken of een trapje.

                    Met `{forward}` ga je naar voren. Het getal erna bepaalt hoe ver naar voren. Met `{turn} {right}` draai je een kwartslag, met de klok mee. `{turn} {left}` draait tegen de klok in.
                    Wil je naar achteren? Gebruik dan het `{forward} ` commando met een negatief getal. Dus bijvoorbeeld `{forward} -100`.
                example_code: |
                    ```
                    {turn} {right}
                    {forward} 50
                    {turn} {left}
                    {forward} 50
                    ```
                start_code: "{forward} 50\n{turn} {right}"
            2:
                story_text: |
                    ## Tekenen maar
                    In dit level kun je variabelen gebruiken om de turtle interactief te maken. Je kunt bijvoorbeeld aan de speler vragen hoeveel stapjes de turtle moet nemen.
                example_code: |
                    ```
                    {print} Figuren tekenen
                    hoek {is} 90
                    {turn} hoek
                    {forward} 25
                    {turn} hoek
                    {forward} 25
                    ```
                start_code: |-
                    {print} Schildpaddenrace!
                    hoek {is} 90
                    {turn} hoek
                    {forward} 25
                story_text_2: "Daarnaast kon je in level 1 alleen maar linksaf of rechtsaf slaan. Dat is een beetje saai!\nIn level 2 kun je de neus van de turtle naar elke richting laten wijzen. \n\nGebruik 90 om een kwartslag te draaien, we noemen dit graden. Een heel rondje draaien is 360 graden. \n\n## Opdracht\nKun jij een figuurtje tekenen met deze code? Misschien een driehoek of een cirkel?\n"
                example_code_2: "```\n{print} Figuren tekenen\nhoek {is} 90\n{turn} hoek\n{forward} 25\n{turn} hoek\n{forward} 25\n```\n"
            3:
                story_text: |
                    ## Zoekende schildpad
                    Ook bij je teken-schildpad kun je `{at} {random}` gebruiken! Dan loopt hij steeds een ander pad.
                    Kies met `{at} {random}` een hoek uit een lijstje. Als je regels 2 en 3 een paar keer herhaalt, krijg je een langere tekening.
                    ### Opdracht
                    Kun jij regel 2 en 3 kopiëren en plakken om een langere random code te maken?
                example_code: |
                    ```
                    hoeken {is} 10, 50, 90, 150, 250
                    {turn} hoeken {at} {random}
                    {forward} 25
                    ```
                start_code: |-
                    {print} Schildpaddenrace!
                    hoek {is} 90
                    {turn} hoek
                    {forward} 25
            4:
                story_text: |
                    ## Tekenen maar
                    In dit level moet je aanhalingstekens gebruiken bij `{print}` en `{ask}`. Ook bij het tekenen dus!
                example_code: |
                    ```
                    {print} _ Figuren tekenen _
                    hoek {is} 90
                    {turn} hoek
                    {forward} 25
                    {turn} hoek
                    {forward} 25
                    ```

                start_code: |-
                    {print} 'Figuren tekenen'
                    hoek {is} 90
                    {turn} hoek
                    {forward} 25
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
                story_text_2: "## Kleuren\nJe kunt de lijn ook van kleur laten wisselen met `{color}`. Kijk maar eens naar het voorbeeld.\nJe kunt het commande `{color} {white}` gebruiken om onzichtbare lijnen te tekenen. Je kunt die witte lijnen b.v. gebruiken om ergens anders op het scherm te beginnen met tekenen.\n"
            5:
                story_text: |
                    ## Tekenen maar
                    In dit level kun je met `{if}` een keuze maken. Bijvoorbeeld tussen verschillende soorten figuren.
                example_code: |
                    ```
                    {print} 'Figuren tekenen'
                    figuur {is} {ask} 'Wil je een driehoek of een vierkant?'
                    {if} figuur {is} driehoek hoek {is} 120
                    {else} hoek {is} 90
                    {turn} hoek
                    {forward} 25
                    {turn} hoek
                    {forward} 25
                    {turn} hoek
                    {forward} 25
                    {turn} hoek
                    {forward} 25
                    ```
                start_code: |-
                    {print} 'Figuren tekenen'
                    hoek {is} 90
                    {turn} hoek
                    {forward} 25
            6:
                story_text: |
                    ## Tekenen maar
                    In dit level kun je gaan rekenen en kun je daarmee verschillende figuren tekenen.
                    Misschien heb je op school al geleerd dat een heel rondje rond draaien 360 graden is. Zo niet, dan weet je het nu!
                    Daarom gebruik je voor een vierkant ook 90 graden. 360 gedeeld door 4 is 90.
                    Nu we met Hedy kunnen rekenen, kunnen we alle figuren tekenen die we maar willen!
                example_code: |
                    ```
                    hoeken = {ask} 'Hoeveel hoeken krijgt dit figuur?'
                    hoek = 360 / hoeken
                    {forward} 50
                    {turn} hoek
                    {forward} 50
                    {turn} hoek
                    {forward} 50
                    {turn} hoek
                    {forward} 50
                    {turn} hoek
                    {forward} 50
                    {turn} hoek
                    {forward} 50
                    {turn} hoek
                    ```
                start_code: |-
                    {print} 'Figuren tekenen'
            8:
                story_text: |
                    ## Tekenen maar
                    Nu we meerdere regels kunnen herhalen, kunnen we makkelijker figuren maken.
                    Want we hoeven maar één keer in te stellen wat de hoek is, en die variabele steeds gebruiken in de `{repeat}`.

                    ### Opdracht 1
                    De voorbeeldcode tekent een vierkant. Verander dat in een ander figuur zoals een driehoek of zeshoek. Je moet daarvoor twee regels veranderen!
                    Tip: een heel rondje is 360 graden.                   

                    ### Opdracht 2
                    Maak nu een tekening naar je eigen inzicht, met minstens twee verschillende veelhoeken.

                example_code: |
                    ```
                    hoek = 90
                    {repeat} 4 {times}
                        {turn} hoek
                        {forward} 50
                    ```
                story_text_2: |
                    **(extra)** We kunnen nu het programma verbeteren dat verschillende figuren tekent.
                    Maak de code af en je kunt iedere veelhoek tekenen.

                example_code_2: |
                    ```
                    kanten = {ask} 'Hoeveel hoeken krijgt dit figuur?'
                    hoek = 360 / kanten
                    {repeat} kanten {times}
                        {turn} _
                        {forward} _
                    ```
                start_code: |-
                    hoeken = {ask} 'Hoeveel hoeken krijgt dit figuur?'
            9:
                story_text: |
                    ## Tekenen
                    We kunnen met een `{repeat}` in een `{repeat}` we complexere figuren maken.

                    ### Opdracht 1
                    De voorbeeldcode tekent drie zwarte driehoeken, verander dat in vijf roze vierkanten.

                     **(extra)** Maak je eigen figuur bestaande uit minstens twee verschillende vormen.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
                story_text_2: |
                    ## Schildpad besturen
                    Je kunt je schildpad nu ook met toetsen besturen.
                    ### Opdracht 2
                    Maak de code af zodat je de schildpad ermee bestuurt: w voor vooruit, s voor achteruit, a voor links en d voor rechts. 
                    Tip: Voor links en rechts moet je drie regels code schrijven.
                example_code_2: |
                    ```
                    {repeat} 40 {times}
                        {if} w {is} {pressed}
                            {forward} 10
                        {if} a {is} {pressed}
                            _ _
                    ```
                start_code: "# place your code here"
    dishes:
        name: "Afwas?"
        description: "Gebruik de computer om te kijken wie de afwas doet"
        default_save_name: "Afwas"
        levels:
            3:
                story_text: |
                    ## Afwasprogramma
                    Heb jij altijd onenigheid thuis over wie vandaag de afwas moet doen of de kattenbak moet verschonen?
                    Dan kun je de computer heel eerlijk laten kiezen. Dat kun jij nu programmeren in dit level!
                example_code: |
                    ```
                    mensen {is} mama, papa, Emma, Sophie
                    {print} mensen {at} {random} doet de afwas!
                    ```
                story_text_2: |
                    ### Opdracht
                    Maak je eigen versie van het afwasprogramma. Maak eerst een lijst van jouw gezinsleden.
                    Daarna bedenk je een taak die gedaan moet worden en laat je de computer kiezen wie de taak moet doen met het `{at} {random}` commando.

                    **Extra** Heb jij geen zin om de afwas te doen? Hack dan het programma door jouw naam van het lijstje te halen met `{remove}``{from}`.
                start_code: "{print} Wie doet de afwas?"
            4:
                story_text: |
                    ## Afwasprogramma
                    Met aanhalingstekens kun je je afwasprogramma mooier maken.
                    Deze keer is de voorbeeldcode niet helemaal compleet.
                    Maak jij de code af door op de lage streepjes de juiste commando's of tekens in te vullen?
                    Op ieder streepje moet steeds één woord of teken komen.

                    Tip: Vergeet de aanhalingstekens niet!
                example_code: |
                    ```
                    mensen {is} mama, papa, Emma, Sophie
                    {print} _ de afwas wordt gedaan door _
                    {print} mensen {at} _
                    ```
                start_code: "{print} 'Wie doet de afwas?'"
            5:
                story_text: |
                    ## Afwasprogramma
                    Met de `{if}` kun je jouw programma nu nog leuker maken. Je kan je programma laten reageren op de keuze.

                    Maak jij de code af zodat het 'chips' {print} als jij aan de beurt bent, en anders 'yes!'?
                    Vergeet de aanhalingstekens niet!
                example_code: |
                    ```
                    mensen {is} mama, papa, Emma, Sophie
                    afwasser {is} mensen {at} {random}
                    {if} afwasser {is} Sophie {print} _ chips ik moet de afwas doen _
                    {else} {print} ' gelukkig geen afwas want ' _ ' wast al af'
                    ```
                start_code: "{print} 'Wie doet de afwas?'"
            6:
                story_text: |
                    ## Afwasprogramma
                    Hoe vaak gaat iedereen eigenlijk afwassen? Is dat wel eerlijk? Dat kun je nu tellen.

                    Nu kun je regels 3 t/m 5 een paar keer (bijv 7 keer voor een hele week) kopiëren om weer voor een hele week vooruit te rekenen.
                    Maak jij de code voor de hele week?
                example_code: |
                    ```
                    mensen = mama, papa, Emma, Sophie
                    emma_wast_af = 0
                    afwasser = mensen {at} {random}
                    {print} 'De afwasser is ' afwasser
                    {if} afwasser {is} Emma emma_wast_af = emma_wast_af + 1
                    {print} 'Emma gaat deze week ' emma_wast_af ' keer afwassen'
                    ```
                story_text_2: |
                    ## Eerlijk afwasprogramma
                    Als je heel veel pech hebt moet je bij het vorige afwasprogramma misschien wel de hele week afwassen! Dat is niet eerlijk!
                    Daarom kun je ook het `{remove}` commando gebruiken om de gekozen afwasser uit het lijstje te halen. Zo hoeft de afwasser pas weer af te wassen als iedereen geweest is.
                    De code voor maandag en dinsdag staat klaar, maak jij de rest van de week af?
                    En kan jij een oplossing bedenken voor als het lijstje leeg is...?
                example_code_2: |
                    ```
                    mensen = mama, papa, Emma, Sophie
                    afwasser = mensen {at} {random}
                    {print} 'Maandag is de afwasser: ' afwasser
                    {remove} afwasser {from} mensen
                    afwasser = mensen {at} {random}
                    {print} 'Dinsdag is de afwasser: ' afwasser
                    {remove} afwasser {from} mensen
                    afwasser = mensen {at} {random}
                    ```
                start_code: "{print} 'Wie doet de afwas?'"
            7:
                story_text: |
                    ## Afwasprogramma
                    Met de `{repeat}` kun je stukjes code herhalen. Daarmee kun je dan voor meerdere dagen uitrekenen wie er aan de beurt is voor de afwas.
                    ### Opdracht
                    Print voor 7 dagen uit wie er moet afwassen. Op ieder streepje moet een ander commando of getal komen.
                    **(extra)** Er zijn nog meer klusjes in huis! Verander je programma zo dat het voor drie taakjes een rooster maakt. Print er ook bij voor welke taakjes het is.
                example_code: |
                    ```
                    mensen = mama, papa, Emma, Sophie
                    {repeat} _ _ {print} 'De afwasser is ' _ _ _
                    ```
                start_code: "{print} 'Wie doet de afwas?'"
            10:
                story_text: |
                    ## Afwasprogramma
                    In dit level kun je je afwasrooster nog makkelijker programmeren en het rooster netjes voor de hele week uitprinten.

                    ### Opdracht
                    Voeg nog een tweede klusje toe, bijvoorbeeld afdrogen, opruimen of stofzuigen, en zorg dat dat ook voor iedere dag toegewezen wordt.
                    <br> **(extra)** Het programma is nu niet zo eerlijk, je kan zomaar pech hebben en heel vaak moeten afwassen. Hoe zou je het eerlijk kunnen maken zodat niemand meer dan twee keer afwast?

                example_code: |
                    ```
                    dagen = maandag, dinsdag, woensdag, donderdag, vrijdag, zaterdag, zondag
                    namen = mama, papa, Emma, Sophie
                    {for} dag {in} dagen
                        {print} 'Op ' dag ' doet ' namen {at} {random} ' de afwas.'
                    ```
                start_code: "# Schrijf jouw code hier"
    dice:
        name: "Dobbelsteen"
        description: "Maak je eigen dobbelsteen"
        default_save_name: "Dobbelsteen"
        levels:
            3:
                story_text: |
                    ## Dobbelsteen
                    In dit level kunnen we kiezen uit een lijst. Daarmee kunnen we de computer een kant van de dobbelsteen laten kiezen.
                    Kijk eens bij de spelletjes die je thuis in de kast hebt staan.
                    Zitten daar spelletjes tussen met een (speciale) dobbelsteen? Die kun je ook namaken met deze code.
                    Bijvoorbeeld de dobbelsteen van het spelletje Regenwormen met daarop de getallen 1 tot en met 5 en een regenworm.
                    ![Dobbelsteen van regenwormen met 1 tot en met 5 en een regenworm erop](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    keuzes {is} 1, 2, 3, 4, 5, regenworm
                    {print} keuzes {at} {random}
                    ```
                start_code: "{print} Wat zal de dobbelsteen deze keer aangeven?"
                example_code_2: |
                    ```
                    keuze {is} _
                    ```
                story_text_2: |
                    ## Challenge
                    De dobbelsteen in het voorbeeld hierboven zijn voor het spelletje regenwormen. Kun jij ook normale dobbelstenen maken? 
                    Of andere speciale dobbelstenen van een ander spel?
            4:
                story_text: |
                    ## Dobbelsteen
                    In dit level kunnen we zinnen maken met de dobbelwaarde in de zin, met aanhalingstekens natuurlijk.
                    Deze keer is de voorbeeldcode niet helemaal compleet. Maak jij de code af?
                example_code: |
                    ```
                    keuzes {is} 1, 2, 3, 4, 5, regenworm
                    {print} _ jij gooide _
                    {print} _ _ _ <- hier moet je het kiezen programmeren
                    ```
                start_code: "{print} 'Wat zal de dobbelsteen deze keer aangeven?'"
            5:
                story_text: |
                    ## Dobbelsteen
                    Je kunt ook in dit level weer een dobbelsteen maken en daarbij de `{if}` gebruiken.
                    Maak de voorbeeldcode af zodat de code zegt 'Je mag stoppen met gooien' als je een regenworm hebt gegooid.

                    Maar misschien wil jij wel een dobbelsteen uit een heel ander spel namaken. Dat is natuurlijk ook goed. Verzin dan zelf een reactie. Bijvoorbeeld 'yes' bij 6 en 'jammer' bij iets anders.
                example_code: |
                    ```
                    keuzes {is} 1, 2, 3, 4, 5, regenworm
                    worp {is} _
                    {print} 'je hebt ' _ ' gegooid'
                    {if} _ {is} regenworm {print} 'Je mag stoppen met gooien.'
                    _ {print} 'Je moet nog een keer hoor!'
                    ```
                start_code: "{print} 'Wat zal de dobbelsteen deze keer aangeven?'"
            6:
                story_text: |
                    ## Dobbelsteen
                    Je kunt nu weer een regenwormendobbelsteen maken, maar nu kun je ook uitrekenen hoeveel punten er gegooid zijn.
                    Je weet misschien dat de worm bij Regenwormen telt voor 5 punten. Nu kun je een worp gooien, en dan meteen uitrekenen hoeveel punten je dan hebt gegooid. 
                    Het voorbeeld doet dat voor 1 dobbelsteen.

                    ## Opdracht
                    Kun jij de code aanpassen zodat je de totale score krijgt voor 8 dobbelstenen? Je moet dan wat code kopiëren en plakken.
                example_code: |
                    ```
                    keuzes = 1, 2, 3, 4, 5, regenworm
                    punten = 0
                    worp = keuzes {at} {random}
                    {print} 'je gooide ' worp
                    {if} worp {is} regenworm punten = punten + 5 {else} punten = punten + worp
                    {print} 'dat zijn dan ' punten ' punten'
                    ```
                start_code: "{print} 'Wat zal de dobbelsteen deze keer aangeven?'"
                example_code_2: "## Kijkje vooruit\n\nIs het gelukt om de score met 8 dobbelstenen te berekenen? Daar had je dan veel knip en plak werk voor nodig, toch? Dit gaan we eenvoudiger maken in level 7!\n"
            7:
                story_text: |
                    ## Dobbelsteen
                    Je kunt ook in dit level weer een dobbelsteen maken. Met de `{repeat}` code kun je makkelijk een heel handje dobbelstenen rollen.

                    ## Opdracht
                    Probeer de voorbeeldcode maar eens af te maken! Op de streepjes moeten meerdere commando's en tekens komen. Misschien ken jij wel een ander dobbelsteen spel dat je met `{repeat}` kunt maken.
                example_code: |
                    ```
                    keuzes = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
                start_code: "{print} 'Wat zal de dobbelsteen deze keer aangeven?'"
            10:
                story_text: |
                    ## Dobbelsteen
                    Treuzelen je medespelers altijd bij het gooien van de dobbelstenen en duurt je spel te lang? In dit level kun je Hedy in een keer laten gooien voor alle spelers!

                    ### Opdracht
                    Verander de namen in jouw eigen vrienden of je familie, en maak de code af zodat iedereen met de dobbelsteen dobbelt.
                example_code: |
                    ```
                    spelers = Anne, Jonneke, Jessie, Ilona
                    keuzes = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} speler ' gooit ' keuzes {at} {random}
                        {sleep}
                    ```
                start_code: "# Schrijf jouw code hier"
            15:
                story_text: |
                    ## Dobbelstenen
                    In dit dobbelspelletje moet je 6 gooien in zo min mogelijk beurten.
                example_code: |
                    ```
                    opties = 1, 2, 3, 4, 5, 6
                    {print} 'Gooi 6 in zo min mogelijk beurten!'
                    gegooid = 0
                    pogingen = 0
                    {while} gegooid != 6
                        gegooid = opties {at} {random}
                        {print} 'Jij gooide ' gegooid
                        pogingen = pogingen + 1
                    {print} 'Hoera! Je hebt 6 gegooid in ' pogingen ' pogingen.'
                    ```
                start_code: "# Schrijf jouw code hier"
    rock:
        name: "Steen, papier, schaar"
        description: "Maak jouw eigen steen, papier, schaar spel"
        default_save_name: "Steen"
        levels:
            1:
                story_text: |
                    ## Steen, papier, schaar
                    In level 1 kun je een begin maken met een steen, papier, schaar spel.

                    Met `{ask}` kun je een keuze maken, en met `{echo}` kan je die keuze herhalen.
                example_code: |
                    ```
                    {print} Wat kies jij?
                    {ask} Kies uit steen, papier of schaar
                    {echo} Dus jouw keuze was:
                    ```

                    Je kunt in plaats van woorden natuurlijk ook emoji's gebruiken: ✊✋✌
                start_code: |
                    {print} Welkom bij jouw eigen steen papier schaar!
                    {ask} Kies uit steen, papier of schaar
                example_code_2: |
                    ```
                    {print} Wat kies jij?
                    {ask} kies uit: _
                    {echo} Dus jouw keuze was :
                    ```
                story_text_2: |
                    ### Opdracht
                    In plaats van woorden kun je ook emojis gebruiken: ✊✋✌
                    Kun jij de code maken met emojis?
            2:
                story_text: |
                    ## Steen, papier, schaar
                    In dit level kun je variabelen gebruiken om alvast een stukje van het spelletje te programmeren. In het volgende level leer je het spelletje maken.
                example_code: |
                    ```
                    _ {is} {ask} steen, papier of schaar?
                    {print} ik kies _
                    ```
                story_text_2: |
                    ### Opdracht
                    Kopieer de voorbeeldcode naar jouw invoerscherm door op de gele knop te klikken.
                    Maak de code af door de juist commando's in te vullen.
                start_code: "# Schrijf jouw code hier"
            3:
                story_text: |
                    ## Steen, papier, schaar

                    In dit level kunnen we lijstjes invoeren en daar dingen uit kiezen.
                    Je maakt eerst een lijstje met `{is}`. Daarna kan je de computer met `{at} {random}` iets uit de lijst laten kiezen.
                    Zo kun je de computer laten kiezen uit steen, papier en schaar.
                example_code: |
                    ```
                    keuzes {is} steen, papier, schaar
                    {print} keuzes {at} {random}
                    ```
                start_code: "{print} Welkom bij jouw eigen steen papier schaar!"
                example_code_2: |
                    ```
                    keuses {is} steen, papier, schaar
                    {print} speler 1 kiest... keuzes {at} {random}
                    {print} speler 2 _
                story_text_2: |
                    ### Opdracht
                    Kopieer de voorbeeldcode en vul de correcte code in op het lijntje om een extra speler aan het spel toe te voegen.

                    **Extra** Nu heten de spelers nog speler 1 speler 2. Kun jij met behulp van vraagcommando's (en natuurlijk variabelen) vragen naar de namen van de spelers?
                    Daarna kun jij uitvoer maken die er bijvoorbeeld zo uitziet: James kiest... papier
            4:
                story_text: |
                    ## Steen, papier, schaar
                    In dit level kunnen we steen, papier, schaar verder programmeren. Maar als je er tekst bij wilt, moet je ook hier nu aanhalingstekens gebruiken.
                    Maak jij de code af door op de stipjes de juiste commando's of tekens in te vullen?
                example_code: |
                    ```
                    keuzes {is} steen, papier, schaar
                    {print} _ De computer koos: _ _ {at} _
                    ```
                start_code: "{print} 'Welkom bij jouw eigen steen papier schaar!'"
            5:
                story_text: |
                    ## Steen, papier, schaar
                    In level 5 kunnen we gaan bepalen wie er gewonnen heeft.
                    Daarvoor heb je de nieuwe `{if}` code nodig.

                    Sla jouw keuze op met de naam keuze en de keuze van de computer als computerkeuze.
                    Dan kun je met `{if}` kijken of ze hetzelfde zijn of verschillend.
                    Maak jij de code af?
                example_code: |
                    ```
                    opties {is} steen, papier, schaar
                    computerkeuze {is} _
                    keuze {is} {ask} 'Wat kies jij?'
                    {print} 'jij koos ' _
                    {print} 'computer koos ' _
                    {if} _ {is} _ {print} 'gelijkspel!' {else} {print} 'geen gelijkspel'
                    ```

                    Vul op de streepjes eerst de goede code aan om te kijken of het gelijkspel is.
                start_code: "{print} 'Welkom bij jouw eigen steen papier schaar!'"
            9:
                story_text: |
                    ## Steen, papier, schaar
                    In dit level kun je het hele steen, papier, schaar programma maken door de `{if}` commando's in elkaar te zetten!

                    ### Opdracht
                    Maak de code af zodat het programma bij iedere combinatie vertelt wie er heeft gewonnen.

                    **(extra)** Is één potje voor jou niet genoeg? Breid de code uit zodat je meerdere potjes kan spelen. Je kan zelfs met een `{ask}` beginnen en
                    vragen hoeveel potjes er gespeeld gaan worden.
                example_code: |
                    ```
                    keuzes {is} steen, papier, schaar
                    jouw_keuze {is} {ask} 'Wat kies jij?'
                    computer_keuze {is} keuzes {at} {random}
                    {print} 'Jij kiest ' jouw_keuze
                    {print} 'De computer kiest ' computer_keuze
                    {if} computer_keuze {is} jouw_keuze
                        {print} 'Gelijkspel'
                    {if} computer_keuze {is} steen
                        {if} jouw_keuze {is} papier
                            {print} 'Jij wint!'
                        {if} jouw_keuze {is} schaar
                            {print} 'De computer wint!'
                    # Maak deze code af
                    ```
                start_code: "# Schrijf jouw code hier"
            10:
                story_text: |
                    ## Steen, papier, schaar
                    Wil je niet steeds zelf kiezen? Laat Hedy het voor je doen!
                    Je hoeft alleen de namen van de spelers in te vullen en ze krijgen steeds een willekeurige keuze.

                    ### Opdracht 1
                    Maak het programma af door de lijst met namen in te vullen.

                    ### Opdracht 2
                    Voeg nu ook een computerspeler toe die bij iedere speler iets kiest.

                    **(extra)** Zoek je code van level 9 op en print ook wie er in iedere ronde wint: de computer of de persoon uit de lijst namen?

                example_code: |
                    ```
                    keuzes = steen, papier, schaar
                    spelers = _
                    {for} speler {in} spelers
                        {print} speler ' kiest ' keuzes {at} {random}
                    ```
                start_code: "# Schrijf jouw code hier"
            13:
                story_text: |
                    ## Steen, papier, schaar
                    Met het `{and}` commando kun je steen, papier, schaar met veel minder regels programmeren. Kijk maar eens naar de voorbeeldcode.

                    ### Opdracht
                    Maak de code af zodat bij iedere combinatie een antwoord wordt geprint.
                example_code: |
                    ```
                    opties = 'steen', 'papier', 'schaar'
                    jouw_keuze = {ask} 'Wat kies jij?'
                    computer_keuze = opties {at} {random}
                    {print} 'Jij kiest ' jouw_keuze
                    {print} 'De computer kiest ' computer_keuze
                    {if} computer_keuze {is} jouw_keuze
                        {print} 'Gelijkspel'
                    {if} computer_keuze {is} 'steen' {and} jouw_keuze {is} 'papier'
                        {print} 'Jij wint!'
                    {if} computer_keuze {is} 'steen' {and} jouw_keuze {is} 'schaar'
                        {print} _
                    _
                    ```
                start_code: "# Schrijf jouw code hier"
            15:
                story_text: |
                    ## Steen, papier, schaar
                    Speel tot je de computer verslaat! Maar maak eerst de voorbeeld code af...
                example_code: |
                    ```
                    gewonnen = 'nee'
                    opties = 'steen', 'papier', 'schaar'
                    {while} gewonnen == 'nee'
                        jouw_keuze = {ask} 'Wat kies jij?'
                        computer_keuze = opties {at} {random}
                        {print} 'jij koos ' jouw_keuze
                        {print} 'de computer koos ' computer_keuze
                        {if} computer_keuze == jouw_keuze
                            {print} 'Gelijkspel!'
                        {if} computer_keuze == 'steen' {and} jouw_keuze == 'schaar'
                            {print} 'Je verliest!'
                        {if} computer_keuze == 'steen' {and} jouw_keuze == 'papier'
                            {print} 'Je wint!'
                            gewonnen = 'ja'
                    _
                    ```
                start_code: "# Schrijf jouw code hier"
    calculator:
        name: "Rekenmachine"
        description: "Maak een rekenmachine"
        default_save_name: "Rekenmachine"
        levels:
            6:
                story_text: |
                    ## Rekenmachine
                    Nu je kunt rekenen, kun je ook een programma maken om sommetjes te oefenen. Je kunt de sommen zelf verzinnen, bijv zo:
                example_code: |
                    ```
                    getal1 {is} {ask} 'Vul een getal in: '
                    getal2 {is} {ask} 'Vul nog een getal in: '
                    goede_antwoord = getal1 * getal2
                    {print} getal1 ' keer ' getal2 ' is ' goede_antwoord
                    ```
                story_text_2: |
                    ### Opdracht
                    De rekenmachine hierboven rekent het antwoord voor je uit, maar je kunt ook een programma maken om je eigen rekenvaardigheid te testen, zoals deze:
                    Vul de streepjes in om het af te maken!
                example_code_2: |
                    ```
                    goed_antwoord = 11 * 27
                    antwoord = {ask} 'Heveel is 11 keer 27?'
                    {if} antwoord {is} _ {print} 'goed gedaan!'
                    {else} {print} 'Wrong! It was ' _
                    ```
                story_text_3: |
                    ## Willekeurige getallen
                    Je kunt ook de computer zelf willekeurige sommen laten maken met {random}.
                    Zo kies je een aantal tafels om uit te oefenen, en pak je daaruit steeds een andere som:
                example_code_3: |
                    ```
                    tafels = 4, 5, 6, 8
                    keer = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    tafel = tafels {at} {random}
                    keergetal = keer {at} {random}
                    goede_antwoord = tafel * keergetal
                    antwoord = {ask} 'hoeveel is ' tafel ' keer ' keergetal '?'
                    {if} antwoord {is} goede_antwoord {print} 'goedzo'
                    {else} {print} 'foutje! het was ' goede_antwoord
                    ```
                start_code: "{print} 'Welkom bij jouw rekenmachine'"
            9:
                story_text: |
                    ## Rekenmachine
                    In dit level kunnen we de rekenmachine van level 6 uitbreiden en meerdere sommen achter elkaar vragen.

                    ### Opdracht 1
                    Kun jij regel 10 afmaken zodat het programma werkt?

                    ### Opdracht 2
                    Geef de speler feedback over een goed en over een fout antwoord. Breid je programma daarvoor uit met een `{else}`.
                example_code: |
                    ```
                    score = 0
                    {repeat} 10 {times}
                        getallen = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        getal1 = getallen {at} {random}
                        getal2 = getallen {at} {random}
                        goede_antwoord = getal1 * getal2
                        {print} 'Hoeveel is ' getal1 ' keer ' getal2 '?'
                        antwoord = {ask} 'Vul hier het antwoord in:'
                        {print} 'Jouw antwoord is ' antwoord
                        {if} _ {is} _
                            score = score + 1
                    {print} 'Je score is ' score ' van 10!'
                    ```
                start_code: "{print} 'Welkom bij de rekenmachine!'"
            10:
                story_text: |
                    ## Rekenmachine
                    Met dit rekenspelletje kun je de tafels oefenen.
                    Hoe meer getallen je aan de lijst toevoegt, hoe meer tafels je kunt oefenen.
                    ### Opdracht
                    Kun jij meer getallen toevoegen aan de lijst, zodat je alle tafels tot 10 kunt oefenen?
                example_code: |
                    ```
                    nummers = 1, 2, 3
                    {for} nummer1 {in} nummers
                        {for} nummer2 {in} nummers
                            antwoord = {ask} 'Hoeveel is ' nummer2 ' keer ' nummer1 '?'
                            goed = nummer1 * nummer2
                            {if} antwoord {is} goed
                                {print} 'Goedzo!'
                            {else}
                                {print} 'Foutje! Het was... ' goed
                    ```
                start_code: "# Schrijf jouw code hier"
            11:
                story_text: |
                    ## Rekenmachine
                    Met een `{for}` kan je jouw tafeloefenprogramma met nog minder regels code maken.

                    ### Opdracht 1
                    Verbeter de voorbeeldcode zodat een nette tafel geprint wordt: <br> "1 keer 10 is 10", "2 keer 10 is 20", enz.

                    ### Opdracht 2
                    Ga terug naar jouw code van level 10, en zorg dat je code `{for}` en `{range}` gebruikt.
                example_code: |
                    ```
                    nummer = 10
                    {for} i {in} {range} 1 to 10
                        {print} i * nummer
                    ```
                start_code: "# Jouw code komt hier"
            12:
                story_text: |
                    ## Rekenmachine
                    In dit level kun je ook met kommagetallen werken met de rekenmachine.

                    ### Opdracht 1
                    Vul de lege plekken weer in om de rekenmachine goed te laten werken. Onthoud wel dat je geen komma gebruikt, maar een punt!

                    ### Opdracht 2
                    Maak nu weer een rekensommenoefenprogramma, maar dan met kommagetallen.
                    Maak een lijst met getallen, kies er steeds twee uit en laat de speler het juiste antwoord invullen.
                    Controleer natuurlijk ook of het klopt. **(extra)** Maak het progamma moeilijker met levens. Bij een fout gaat er een leven af, en na drie fouten stopt het spel.

                example_code: |
                    ```
                    getal1 = {ask} 'Wat is het eerste getal?'
                    getal2 = {ask} 'Wat is het tweede getal?'
                    antwoord = _
                    {print} getal1 ' plus ' getal2 ' is ' antwoord
                    ```
                start_code: "# Schrijf jouw code hier"
            14:
                story_text: |
                    ## Raad mijn getal
                    In dit level kun je het spelletje 'Raad mijn getal' programmeren!
                example_code: |
                    ```
                    {print} 'Raad mijn getal'
                    getallen = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    getal = getallen {at} {random}
                    spel = 'aan'
                    {for} i {in} {range} 1 {to} 10
                        {if} spel == 'aan'
                            gok = {ask} 'Welk getal denk je?'
                            {if} gok > getal
                                {print} 'Lager!'
                            {if} gok < getal
                                {print} 'Hoger!'
                            {if} gok == getal
                                {print} 'Hoera!'
                                spel = 'af'
                    ```
                start_code: "# Schrijf jouw code hier"
            15:
                story_text: |
                    ## Rekenmachine
                    In het rekenspelletje dat je een aantal levels terug hebt leren maken, kun je de `{while}` loop toevoegen.
                    Hierdoor mag de speler pas door naar de volgende vraag als het goede antwoord gegeven is.
                example_code: |
                    ```
                    score = 0
                    {for} i {in} {range} 0 {to} 9
                        getallen = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        getal1 = getallen {at} {random}
                        getal2 = getallen {at} {random}
                        goede_antwoord = getal1 * getal2
                        antwoord = 0
                        {while} antwoord != goede_antwoord
                            {print} 'Hoeveel is ' getal1 ' keer ' getal2 '?'
                            antwoord = {ask} 'Vul hier het antwoord in:'
                            {print} 'Jouw antwoord is ' antwoord
                        {print} 'Goed zo!'
                    {print} 'Je hebt gewonnen!'
                    ```
                start_code: "# Schrijf jouw code hier"
    fortune:
        name: "Waarzegger"
        description: "Laat Hedy jouw toekomst voorspellen"
        default_save_name: "Waarzegger"
        levels:
            1:
                story_text: |
                    ## Hedy de Waarzegger
                    Heb je ooit op de kermis jouw toekomst laten voorspellen door een waarzegger? Of heb je ooit met magische biljartbal gespeeld?
                    Dan weet je waarschijnlijk dat zij niet echt de toekomst kunnen voorspellen, maar dat maakt de voorspelling niet minder leuk!

                    Ook Hedy kunnen we omtoveren in een waarzeggersmachine! In level 1 beginnen we makkelijk, met het voorstellen van Hedy de Waarzegger en het herhalen van de antwoorden van de speler met {echo}.
                    Kijk maar naar het voorbeeld:
                example_code: |
                    ```
                    _ Hoi, ik ben Hedy de waarzegger!
                    _ Wie ben jij?
                    _ Ik voorspel... Ik voorspel...
                    _ Jouw naam is
                    ```
                story_text_2: |
                    ### Opdracht
                    Kopieer de voorbeeldcode naar jouw invoerscherm met de gele knop en vul de commando's in op de lijntjes om de code te laten werken.
                    **Extra** Pas de code aan en laat de waarzegger niet alleen je naam voorspellen, maar ook iets anders. Zoals je leeftijd, woonplaats, favoriete sportteam of iets anders over jezelf.
                start_code: "# Maak jouw eigen code hier"
            3:
                story_text: |
                    ## Hedy de Waarzegger
                    In het vorige level heb je een begin gemaakt aan de waarzegger, maar echt voorspellingen waren er nog niet.
                    In dit level kun je een variabele gebruiken en het `{at} {random}` commando om Hedy antwoorden te laten kiezen op je vraag.
                    Kijk maar naar dit voorbeeld:
                example_code: |4

                    In dit voorbeeld kan de speler een ja/nee-vraag stellen aan Hedy, en Hedy kiest een willekeurig antwoord.
                    ```
                    {print} Hoi Ik ben Hedy de Waarzegger
                    vraag {is} {ask} Wat wil je weten?
                    {print} vraag
                    antwoorden {is} ja, nee, misschien
                    {print} Mijn glazen bol zegt...
                    {sleep} 2
                    {print} antwoorden {at} {random}
                    ```
                story_text_2: |
                    ### Opdracht
                    Er zijn nu maar 3 antwoordopties waar Hedy uit kan kiezen, kun jij er meer toevoegen? Bijvoorbeeld: zeker weten, geen idee of probeer het nog eens!
                start_code: "# Schrijf jouw code hier"
            4:
                story_text: |
                    ## Hedy de Waarzegger
                    In dit level kun je oefenen met de aanhalingstekens. 
                    Probeer dezelfde code te maken als in je vorige level, maar let op dat je de aanhalingstekens op de goede plek plaatst!

                    ### Opdracht
                    We hebben alle aanhalingstekens uit het voorbeeld verwijderd. Kun jij ze toevoegen om de code aan de praat te krijgen?
                example_code: |
                    ```
                    {print} _Hoi ik ben Hedy de Waarzegger!_
                    voorspelling {is} {ask} _Wat wil je weten?_
                    {print} _ Dit is je vraag: _ voorspelling
                    antwoorden {is} ja, nee, misschien
                    {print} _ Mijn glazen bol zegt..._
                    {sleep} 2
                    {print} antwoorden {at} {random}
                    ```
                start_code: "# Schrijf jouw code hier"
            5:
                story_text: |
                    ## Hedy de Waarzegger
                    In dit level leer je hoe je er (stiekem) voor kunt zorgen dat Hedy altijd goede voorspellingen voor jou heeft.
                    Door `{if}` en `{else}` te gebruiken kun je er namelijk voor zorgen dat jij de leuke voorspellingen krijgt, en de anderen niet!
                    Kijk naar het voorbeeld om te zien hoe het moet:
                example_code: |
                    ```
                    {print} 'Hoi ik ben Hedy de Waarzegger'
                    {print} 'Ik kan voorspellen wie morgen de loterij wint!'
                    naam {is} {ask} 'Wie ben jij?'
                    {if} naam {is} Hedy {print} 'Hoera, je wint! 🤩' {else} {print} 'Helaas, iemand anders wint 😭'
                    ```
                story_text_2: |
                    ## Hack het programma
                    Verander Hedy in je eigen naam en jij zult altijd de loterij winnen!
                    Natuurlijk is dit wel een beetje verdacht voor andere spelers... Om dat op te lossen kun je ervoor zorgen dat Hedy wel steeds iets anders zegt, maar bij jou altijd een goed antwoord en bij de anderen een slechte.
                    Kijk maar naar dit voorbeeld:
                example_code_2: |
                    ```
                    {print} 'Hoi ik ben Hedy de Waarzegger'
                    {print} 'Ik kan voorspellen wie morgen de loterij wint!'
                    naam {is} {ask} 'Wie ben jij?'
                    goedantwoord {is} Hoera! Je wint!, Je bent rijk!, Jij gaat zeker winnen!
                    slechtantwoord {is} Helaas!, Geen prijs voor jou, Probeer het nog eens
                    {if} naam {is} Hedy {print} goedantwoord {at} {random} {else} {print} slechtantwoord {at} {random}
                    ```
                story_text_3: |
                    ### Opdracht
                    Op deze manier kun je nog veel meer programma's schrijven! Je zou bijvoorbeeld kunnen voorspellen welke club de Eredivisie wint.
                    Of je zou de toverspiegel uit Sneeuwwitje kunnen laten voorspellen dat jij de mooiste van het land bent (en de rest natuurlijk niet!).
                    Of er zijn nog heel veel meer opties, laat je fantasie de vrije loop en wees creatief!
                start_code: "# Schrijf jouw code hier"
            6:
                story_text: |
                    ## Hedy de Waarzegger
                    In dit level kun je rekenen met Hedy, waardoor je "magische" formules kunt gebruiken in je voorspellingen!
                    Zo kun je berekenen hoe rijk je wordt, aan de hand van de formule in het voorbeeld:



                    ### Opdracht
                    Kun jij je eigen (gekke) waarzegmachine maken?
                example_code: |
                    ```
                    {print} 'Ik ben Hedy de Waarzegger!'
                    {print} 'Ik kan voorspellen hoeveel kinderen je later krijgt!'
                    leeftijd = {ask} 'Hoe oud ben je?'
                    brusjes = {ask} 'Hoeveel broers/zussen heb je?'
                    lengte = {ask} 'Hoe lang ben je (in cm)?'
                    kinderen = lengte / leeftijd
                    kinderen = kinderen - brusjes
                    {print} 'Jij krijgt later... '
                    {sleep} 2
                    {print} kinderen ' kinderen!'
                    ```

                    ## Example Silly Fortune Teller
                    If the previous example wasn't silly enough for you, take a look at this one!
                    ```
                    {print} 'Ik ben Hedy de gekke Waarzegger!'
                    {print} 'Ik kan voorspellen hoe slim jij bent!!'
                    voetbal = {ask} 'Geef een cijfer van 1 tot 10 hoe erg jij van voetbalt houdt?'
                    bananen = {ask} 'Hoeveel bananen heb jij deze week gegeten?'
                    hygiene = {ask} 'Hoevaak heb jij jouw handen gewassen vandaag?'
                    resultaat = bananen + hygiene
                    resultaat = resultaat * voetbal
                    {print} 'Jij bent ' resultaat ' procent slim.'
                    ```
                start_code: "# Schrijf jouw code hier"
            7:
                story_text: |
                    ## Hedy de Waarzegger
                    Nu kun je het a`{repeat}` commando gebruiken om meerdere voorspellingen te doen. Kijk maar naar het voorbeeld.
                example_code: |
                    ```
                    {print} 'Ik ben Hedy de waarzegger'
                    {print} 'Je mag 3 vragen stellen!'
                    {repeat} 3 {times} vraag = {ask} 'Wat wil je weten?'
                    ```
                story_text_2: |
                    ### Opdracht
                    Er worden in het voorbeeldprogramma drie vragen gesteld, maar... er zijn nog geen antwoorden bij.
                    Maak een lijst met antwoorden en print drie keer een willekeurig antwoord. Je mag de antwoorden zelf bedenken.

                    Helaas kunnen we de vragen en antwoorden niet per keer laten zien. In het volgende level verandert het `{repeat}`-commando, waardoor dit probleem verdwijnt!
                start_code: "# Schrijf jouw code hier"
            8:
                story_text: |
                    ## Hedy de waarzegger
                    Weet je nog dat je in voorgaande levels, met `{repeat}` een waarzegger hebt gemaakt die drie vragen kon stellen?
                    Het probleem dat we tegenkwamen is dat Hedy toen eerst de drie vragen printte en daarna pas de drie antwoorden.
                    Nu is dat probleem opgelost met de nieuwe manier waarop `{repeat}` werkt en kan Hedy na een vraag meteen een antwoord printen.

                    ### Opdracht
                    Weet jij het juiste commando voor op de streepjes?
                example_code: |
                    ```
                    {print} 'Ik ben Hedy de waarzegger!'
                    {print} 'Je mag 3 vragen stellen!'
                    antwoorden = ja, nee, misschien
                    _ _ _
                        vraag = {ask} 'Wat wil je weten?'
                        {print} vraag
                        {sleep}
                        {print} antwoorden {at} {random}
                    ```
                start_code: "# Schrijf jouw code hier"
            10:
                story_text: |
                    ## Hedy de Waarzegger
                    In dit level kun je met een druk op de knop het hele leven voorspellen van al je vrienden tegelijk!

                    ### Opdracht 1
                    Voeg minstens twee namen toe aan de lijst en voer je programma nog een keer uit. Kijk goed wat er nu veranderd is!
                example_code: |
                    ```
                    huizen = villa, appartement, krot, rijtjeshuis
                    liefdes = niemand, een prins(es), zomaar iemand, je ware liefde
                    huisdieren = hond, cavia, olifant
                    namen = Jenna, Ryan, Jim
                    {for} naam {in} namen
                        {print} naam ' woont in een ' huizen {at} {random}
                        {print} naam ' trouwt met ' liefdes {at} {random}
                        {print} naam ' krijgt een ' huisdieren {at} {random} ' als huisdier'
                        {sleep} 2
                    ```
                story_text_2: |
                    ### Opdracht 2
                    We kunnen ook een waarzegger maken in een ander thema, bijvoorbeeld Harry Potter. Vul de streepjes in om het programma af te maken zodat er 9 regels uitvoer in beeld komen.
                    **(extra)** Verander het thema van je waarzegger in een ander thema, bijv. van jouw favoriete boek, film of serie.
                example_code_2: |
                    ```
                    huizen = Griffoendor, Zwadderich, Huffelpuf, Ravenklauw
                    vakken = toverdranken, verweer tegen de zwarte kunsten, bezweringen, transfiguratie
                    angsten = Voldemort, Spinnen, falen bij je SLIJMBALLEN
                    namen = Harry, Ron, Hermelien
                    _
                    _ {print} naam ' wordt gesorteerd in ' huizen {at} {random}
                    _ {print} naam ' is goed in ' vakken {at} {random}
                    _ {print} naam 's grootste angst is ' angsten {at} {random}
                    ```
                start_code: "# Schrijf jouw code hier"
            12:
                story_text: |
                    ## Waarzegger
                    Vanaf level 12 moet je in een lijst ook aanhalingstekens gebruiken.

                    ### Opdracht
                    Kun jij minstens twee voorspellingen toevoegen aan het lijstje?
                example_code: |
                    ```
                    voorspellingen = 'je glijdt uit over een bananenschil', _
                    {print} 'Ik pak mijn glazen bol erbij...'
                    {print} 'Ik zie... Ik zie...'
                    {sleep} 2
                    {print} voorspellingen {at} {random}
                    ```
                start_code: "# Schrijf jouw code hier"
    restaurant:
        name: "Restaurant"
        description: "Maak een virtueel restaurant"
        default_save_name: "Restaurant"
        levels:
            1:
                story_text: |
                    ## Restaurant
                    Je kunt met Hedy ook een virtueel restaurant bouwen en de bestellingen van je klanten opnemen!
                example_code: |
                    ```
                    {print} Welkom bij McHedy! 🍟
                    _ Wat wilt u bestellen?
                    {echo} Dus u wilt graag
                    {print} Bedankt voor uw bestelling!
                    {print} Het komt eraan!
                    ```
                start_code: "{print} Welkom bij McHedy!"
                story_text_2: |
                    ### Opdracht
                    Kopieer de voorbeeldcode naar jouw invoerscherm door op de gele knop te klikken.
                    Vul allereerst het goede commando in op het streepje om de code te laten werken.
                    Voeg daarna zelf minstens 4 regels code toe aan het restaurantprogramma.
                    Vraag de klanten wat ze willen drinken en vraag of ze willen pinnen.
                    Bedenk tot slot een aardige manier om de klant gedag te zeggen.
            2:
                story_text: |
                    ## Restaurant
                    In level 2 kun je variabelen gebruiken om je restaurant interactiever te maken! In level 1 kon je alleen met {echo} één ding teruggeven, met variabelen kan dat vaker, bijvoorbeeld met eten en extra's. Kijk maar naar het voorbeeld.
                example_code: |
                    ```
                    {print} Welkom bij Hedy's restaurant!
                    {print} Vandaag serveren we pizza of lasagne.
                    eten {is} {ask} Wat wilt u eten?
                    {print} Heerlijk! eten is ook mijn favoriet!
                    topping {is} {ask} Wilt eten met groente of vlees?
                    {print} eten met topping komt eraan!
                    ```
                start_code: "# Schrijf jouw code hier"
                story_text_2: |
                    ### Opdracht
                    Kopieer jouw restaurantcode van het vorige level naar het invoerscherm hier beneden.
                    Maak de code kloppend door de `{ask}` en `{echo}` commando's te vervangen door variabelen zoals je in dit level geleerd hebt.

                    Nu je code weer werkt is het tijd om er iets aan toe te voegen.
                    Kijk naar de laatste zin van de voorbeeldcode `{print} eten met topping komt eraan!`
                    In deze regel zijn 2 variabelen in 1 regel gebruikt om een opsomming te maken van de bestelling.
                    Voeg nu in jouw code ook zo'n opsomming toe van het eten en het drinken dat de klant heeft besteld.

                    **Extra** Nu je variabelen hebt leren gebruiken, kun je zoveel variabelen als je wil toevoegen aan één regel. Kun jij nog meer variabelen toevoegen aan je regel, zoals hier opeten of meenemen, pinnen of cash, met of zonder rietje etc.?
            3:
                story_text: |
                    ## Willekeurig restaurant
                    Vind jij het moeilijk om te kiezen wat je wil eten? Je kunt Hedy voor je laten kiezen!
                    Je maakt gewoon een lijst van je favoriete eten en Hedy kiest dan een willekeurig menu voor je uit.
                    Je kan het extra grappig maken, door Hedy ook de prijs van je eten te laten kiezen. Wat zal het worden vandaag?
                start_code: "# Schrijf jouw code hier"
                example_code: |
                    ```
                    gerechten {is} spaghetti, spruitjes, hamburgers
                    {print} Jij eet vanavond gerechten {at} {random}!
                    prijzen {is} 1 euro, 10 euro, 100 euro
                    {print} Dat wordt dan prijzen {at} {random}, alstublieft.
                    ```
                story_text_2: |
                    ### Exercise
                    Nu ga je zelf een random restaurant maken.
                    Maak nu zelf lijstjes van voorgerechten, hoofdgerechten, toetjes, drinken en prijzen.
                    Gebruik dan het `{print}` en het `{at} {random}` commando om de klant te vertellen wat hij vanavond voorgeschoteld krijgt.
                example_code_2: |
                    ```
                    voorgerechten
                    hoofdgerechten {is} _
                    toetjes {is} _
                    drinken {is} _
                    prijzen {is} _
                    _
                    ```
                story_text_3: |
                    ## Allergieën
                    **Extra** Vindt je klant iets niet lekker of is je klant allergisch? Haal dan een item van je menu met het `{remove}` commando.
                example_code_3: |
                    ```
                    {print} Mysterie Milkshake
                    smaken {is} aardbei, banaan, chocolade
                    allergie {is} {ask} Ben je allergisch voor een smaak?
                    _
                    {print} Jij krijgt een milkshake smaken {at} {random}
                    ```
            4:
                story_text: |
                    ## Restaurant
                    In dit level moet je aanhalingstekens gebruiken bij het `{print}` of `{ask}` commando.

                    ## Opdracht
                    Lukt het jou om aanhalingstekens toe te voegen aan je restaurantcode? (Let op! In vorige levels was het toegestaan om enkele aanhalingstekens (`'`) te gebruiken in de tekst, maar vanaf dit level zal Hedy denken dat het aanhalingstekens voor tekst zijn, waardoor je code niet werkt. Dus in plaats van `print Hedy's pizza is de lekkerste`, moet je nu typen: `print 'De pizza van Hedy is de lekkerste'`)
                start_code: "# Schrijf jouw code hier"
                example_code: |
                    ## Voorbeeld Hedy Restaurant
                    ```
                    #Voeg aanhalingstekens toe aan deze code
                    {print} Welkom bij Hedys restaurant!
                    {print} Vandaag serveren we pizza of lasagna.
                    eten {is} {ask} Wat wil je eten?
                    {print} Goede keuze! eten is mijn favoriet!
                    topping {is} {ask} wil je er vlees of groeten bij?
                    {print} eten met topping wordt gemaakt!
                    drank {is} {ask} Wat wil je erbij drinken?
                    {print} Bedankt voor de bestelling.
                    {print} Jouw + eten _ en _ drank _ komen er zo aan!
                    ```
            5:
                story_text: |
                    ## Restaurant
                    Nu kun je het nieuwe `{if}` commando gebruiken om een `{ask}` te stellen aan jouw klanten en verschillende reacties te geven op hun antwoorden.
                    Zo kun je bijvoorbeeld de `{ask}` stellen of de klant saus wil bij de frietjes, terwijl dat een rare vraag zou zijn `{if}` de klant pizza bestelt.
                example_code: |
                    ```
                    {print} 'Welkom bij Restaurant Chez Hedy!'
                    special {is} {ask} 'Wilt u weten wat onze specialiteit vandaag is?'
                    {if} special {is} ja {print} 'Vandaag is speciaal de chicken piri piri met rijst.' {else} {print} 'OK, geen probleem.'
                    eten {is} {ask} 'Wat wilt u eten?'
                    {print} 'Een ' eten ', komt eraan!'
                    drank {is} {ask} 'Wat wilt u er bij drinken?'
                    {if} drink {is} cola {print} 'Sorry, die is helaas op!' {else} {print} 'Lekker keuze!'
                    iets {is} {ask} 'Wilt u nog iets anders?'
                    {print} 'Dan wordt het...'
                    {print} 'One ' eten
                    {if} drink {is} cola {print} 'en...' {else} {print} 'Een' drank
                    {if} iets {is} no {print} 'Dat is alles!' {else} {print} 'Een' iets
                    {print} 'Bedankt voor uw bestelling en smakelijk eten!'
                    ```
                story_text_2: |
                    ### Opdracht
                    Kun je nog meer verzinnen dat je met `{ask}` aan de klanten kunt stellen, wat afhangt van het antwoord dat ze op de vorige vraag gaven? Hierbij maak je natuurlijk gebruik van het `{if}` commando.
                start_code: "# Schrijf jouw code hier"
            6:
                story_text: |
                    ## Restaurant
                    In dit level kun je in je restaurant prijzen toevoegen en berekenen!
                example_code: |4

                    Je kunt zo een simpel restaurant maken:
                      ```
                      {print} 'Welkom bij McHedy'
                      {print} 'U kunt kiezen uit een hamburger, een kroket of een kaassouffle'
                      {print} 'U krijgt frietjes en drinken bij uw bestelling. '
                      eten = {ask} 'Wat wilt u bestellen?'
                      prijs = 0
                      {if} eten {is} hamburger prijs = 8
                      {if} eten {is} kroket prijs = 6
                      {if} eten {is} kaassoufle prijs = 5
                      {print} 'U heeft een ' eten ' besteld'
                      {print} 'Dat is dan ' prijs ' euro, alstublieft!'
                      {print} 'Bedankt en eet smakelijk!'
                      ```
                story_text_2: |
                    Je kunt de code nog een stuk uitgebreider maken, kijk maar naar dit voorbeeld waarin je 3 gangen kunt bestellen.

                    ### Opdracht
                    Kun jij nog meer toevoegingen bedenken voor je restaurant? Bijvoorbeeld:
                    - mensen korting geven met een geheime code?
                    - vraag hoeveel mensen er komen en de prijs daarop aanpassen?
                    - nog een gang toevoegen?
                    - een kindermenu toevoegen?
                    - nog iets anders?
                example_code_2: |4

                    Met deze code kan een klant drie gerechten bestellen.
                      ```
                      {print} 'Welkom in restaurant Hedy'
                      {print} 'Dit is ons menu:'
                      {print} 'Onze voorgerechten zijn salade, soep of carpaccio'
                      {print} 'Onze hoofdgerechten zijn pizza, lasagne, of spaghetti'
                      {print} 'Onze toetjes zijn brownie, ijsje, of milkshake'
                      voorgerecht = {ask} 'Welk voorgerecht wilt u?'
                      hoofdgerecht = {ask} 'Welk hoofdgerecht wilt u?'
                      nagerecht = {ask} 'Welk nagerecht wilt u?'
                      prijs = 0
                      {if} voorgerecht {is} soep prijs = prijs + 6 {else} prijs = prijs + 7
                      {if} hoofdgerecht {is} pizza prijs = prijs + 10
                      {if} hoofdgerecht {is} lasagne prijs = prijs + 12
                      {if} hoofdgerecht {is} spaghetti prijs = prijs + 8
                      {if} nagerecht {is} brownie prijs = prijs + 7
                      {if} nagerecht {is} ijsje prijs = prijs + 5
                      {if} nagerecht {is} milkshake prijs = prijs + 4
                      {print} 'Dit heb je besteld: ' voorgerecht ' , ' hoofdgerecht ' en ' nagerecht
                      {print} 'Dat wordt dan ' prijs ' euro, alstublieft.'
                      {print} 'Bedankt en eet smakelijk!'
                    ```
                start_code: "{print} 'Welkom'"
            7:
                story_text: |
                    ## Restaurant
                    In dit level heb je geleerd hoe je `{repeat}` gebruikt om een regel code een aantal keren te herhalen.
                    Nu kun je dit commando gebruiken om een `{ask}` aan meerdere klanten te stellen om hun bestelling op te nemen.

                    ### Opdracht
                    Kun jij de code afmaken? Hedy moet de vraag zo vaak herhalen als dat er klanten zijn. Dus als je 5 antwoordt, moet er 5 keer een vraag gesteld worden.
                    **(extra)** Maak de code nog langer door niet alleen 5 keer naar eten, maar ook naar drinken of saus te vragen.
                example_code: |
                    ```
                    {print} 'Welkom bij restaurant Hedy'
                    mensen = {ask} 'Met hoeveel personen bent u?'
                    ```
                start_code: "# Schrijf jouw code hier"
            8:
                story_text: |
                    ## Restaurant
                    In dit level kun je meerdere regels code herhalen, wat betekent dat je meerdere mensen kunt vragen wat ze willen eten en drinken en dat ook nog kunt printen.
                    Kijk maar naar het voorbeeld!
                example_code: |
                    ```
                    {print} 'Welkom bij McHedy!'
                    {print} 'U kunt hier uw bestelling doorgeven'
                    mensen = {ask} 'Voor hoeveel personen wilt u bestellen?'
                    {repeat} mensen {times}
                        besteld = {ask} 'Wat wilt u eten?'
                        {print} besteld
                    {print} 'Bedankt voor uw bestelling.'
                    {print} 'Eet smakelijk!'
                    ```
                story_text_2: |
                    ### Opdracht
                    Breid je code uit met meer dingen op het menu. Bijvoorbeeld: vragen of ze drinken willen, of toetjes. Voeg minstens nog een extra vraag toe. 
                    **(extra)** Voeg alles toe aan het menu dat je kan verzinnen, zoveel dingen als je wil!
                start_code: "{print} 'Welkom bij McHedy!'"
            9:
                story_text: |
                    ## Restaurant
                    In dit level kun je het restaurant nog beter maken.

                    ### Opdracht
                    Alle inspringcode is verdwenen! Kan jij het repareren?
                    Het restaurant moet zo werken dat als de klant friet bestelt, moet Hedy vraagt welke saus de klant daarbij wil, maar niet bij pizza.

                    **(extra)** Een restaurant heeft natuurlijk niet alles op voorraad. Maak een lijstje met sauzen en zeg bij iedere bestelling of je die saus wel verkoopt. <br>
                    **(extra)** Op een pizza kan ook van alles! Vraag de klant bij een pizza wat voor beleg hij wil.<br>
                    **(extra)** Willen de klanten ook wat drinken? Vraag dat ook.<br>

                example_code: |
                    ```
                    {print} 'Welkom bij restaurant Hedy'
                    mensen = {ask} 'Met hoeveel mensen bent u vanavond?'
                    {print} 'Mooi, welkom allemaal'
                    prijs = 0
                    {repeat} mensen {times}
                    _ eten = {ask} 'Wat wilt u bestellen?'
                    _ {print} eten
                    _ {if} eten {is} friet
                    _ prijs = prijs + 3
                    _ saus = {ask} 'Welke saus wilt u daarbij?'
                    _ {if} saus {is} geen
                    _ {print} 'zonder saus'
                    _ {else}
                    _ prijs = prijs + 1
                    _ {print} 'met ' saus
                    _ {if} eten {is} pizza
                    _ prijs = prijs + 4
                    {print} 'Dat is dan ' prijs ' euro'
                    {print} 'Eet smakelijk!'
                    ```
                start_code: "# Schrijf jouw code hier"
            10:
                story_text: |
                    ## Restaurant
                    In dit level kun je gemakkelijk de bestelling opnemen van gasten voor verschillende gangen.

                    ### Opdracht 1
                    Voeg op de streepjes een `{ask}` in, zodat er om de bestelling gevraagd wordt en print de bestelling uit in een mooie zin.
                example_code: |
                    ```
                    gangen = voorgerecht, hoofdgerecht
                    {for} gang {in} gangen
                        {print} 'Wat wilt u voor ' gang '?'
                        _
                        _
                    ```
                story_text_2: |
                    ### Opdracht 2
                    Dit kun je uiteraard ook voor meerdere mensen toepassen!
                    Kun jij elke regel inspringen met de goede hoeveelheid spaties?
                    Tip: Sommige regels hebben geen spaties nodig.
                example_code_2: |
                    ```
                    _ gangen = voorgerecht, hoofdgerecht
                    _ namen = Timon, Onno
                    _ {for} naam {in} namen
                    _ {for} gang {in} gangen
                    _ eten = {ask} naam ', Wat wil jij bestellen als ' gang '?'
                    _ {print} naam ' bestelt ' eten ' als ' gang
                    ```
                start_code: "gangen = voorgerecht, hoofdgerecht, nagerecht"
            11:
                story_text: |
                    ## Maak je eigen restaurant
                    Je kunt nu `{for}`met een `{range}` gebruiken om een bestelling te tonen voor meerdere mensen.

                    ### Opdracht
                    Maak de restaurantcode af. Zorg dat je de bestelling van meerdere mensen kan opnemen. Print steeds netjes het nummer uit, dus 'persoon 1', 'persoon 2', enz.
                    Weet je niet meteen hoe het moet? Kijk dan bij jouw restaurant van level 8.

                    **(extra)** In level 9 hebben we prijzen uitgerekend in het restaurant. Dat kun je nu ook weer toevoegen.
                example_code: |
                    ```
                    {print} 'Welkom bij McHedy!'
                    {print} 'U kunt hier uw bestelling doorgeven'
                    mensen = {ask} 'Voor hoeveel personen wilt u bestellen?'
                    {print} 'Dus u wilt bestellen voor ' mensen ' mensen.'
                    {print} 'Laten we beginnen'
                    ```
                start_code: "{print} 'Welkom bij McHedy!'"
            12:
                story_text: |
                    ## Restaurant
                    In dit level kun je kommagetallen gebruiken op je menukaart, kijk maar!

                    ### Opdracht
                    Kun jij een manier bedenken om je vrienden en familie 15% korting te geven?
                example_code: |
                    ```
                    prijs = 0.0
                    eten = {ask} 'Wat wil je eten?'
                    drinken = {ask} 'Wat wil je drinken?'
                    {if} eten {is} 'hamburger'
                        prijs = prijs + 6.50
                    {if} eten {is} 'pizza'
                        prijs = prijs + 5.75
                    {if} drinken {is} 'water'
                        prijs = prijs + 1.20
                    {if} drinken {is} 'frisdrank'
                        prijs = prijs + 2.35
                    {print} 'Dat wordt dan ' prijs ' euro, alsjeblieft'
                    ```
                start_code: "# Schrijf jouw code hier"
            13:
                story_text: |
                    ## Restaurant
                    In dit level leer je nieuwe commando's om je code nog verder uit te breiden.

                    ### Opdracht
                    Zet op de logische plek in het progamma een `{and}` en een `{or}`.

                example_code: |
                    ```
                    prijs = 10
                    eten = {ask} 'Wat wil je eten?'
                    drinken = {ask} 'Wat wil je drinken?'
                    {if} eten {is} 'broodje' _ drinken {is} 'sap'
                        {print} 'Dat is ons voordeelmenu'
                        prijs = prijs - 3
                    {if} drinken {is} 'water' _ drinken {is} 'sap'
                        {print} 'Dat is een gezonde keuze!'
                    {print} 'Dat wordt dan ' prijs ' euro'
                    ```
                start_code: "# Schrijf jouw code hier"
            15:
                story_text: |
                    ## Restaurant
                    Met de `{while}` kun je zorgen dat je klanten kunnen blijven bestellen tot ze klaar zijn.

                example_code: |
                    ```
                    {print} 'Welkom bij McHedy'
                    meer = 'ja'
                    {while} meer == 'ja'
                        bestelling = {ask} 'Wat wil je bestellen?'
                        {print} bestelling
                        meer = {ask} 'Wilt u nog iets bestellen?'
                    {print} 'Bedankt!'
                    ```
                start_code: "# Schrijf jouw code hier"
    haunted:
        name: "Spookhuis"
        description: "Ontsnap uit het spookhuis"
        default_save_name: "Spookhuis"
        levels:
            1:
                story_text: |
                    ## Spookhuis
                    In dit avontuur leer je een echte spookhuis game maken, waarbij de spelers moeten ontsnappen uit jouw spookhuis door je juiste deur te kiezen.
                    Als je de goede deur kiest overleef je het, maar anders...

                    In level 1 beginnen we ons spookhuisspel door een spannend verhaal te verzinnen en de speler te vragen welk monster ze tegenkomen in het spookhuis.
                example_code: |
                    ```
                    {print} Hoe ben ik hier terechtgekomen?
                    {print} Ik herinner me dat ik mijn vrienden vertelde over die verlaten villa..
                    {print} en toen werd ineens alles zwart.
                    {print} Maar waarom lig ik hier nu op de grond...?
                    {print} ik heb knallende hoofdpijn, alsof ik een harde klap heb gehad.
                    {print} Huh? Wat is dat geluid?
                    {print} Oh nee! Volgens mij ben ik niet alleen in dit huis!
                    {print} Ik moet maken dat ik wegkom!
                    {print} Er staan drie deuren voor me, maar welke moet ik kiezen?
                    {ask} Welke deur kies ik?
                    {echo} Ik kies deur
                    {print} _
                    ```
                start_code: "{print} Hoe ben ik hier terechtgekomen?"

                story_text_2: |
                    ### Opdracht
                    Kopieer de voorbeeldcode naar jouw invoerscherm door op de gele knop te klikken.
                    Maak het spookverhaal zelf af door minstens 5 regels aan het verhaal toe te voegen.
                    Begin elke regel met een `{print}` commando.
            2:
                story_text: |
                    ## Spookhuis
                    In dit spookhuis kun je je monsters kiezen met emojis. Al kun je natuurlijk ook gewoon woorden gebruiken.
                example_code: |
                    ```
                    monster1 {is} 👻
                    monster2 {is} 🤡
                    monster3 {is} 👶
                    {print} Je stapt het oude verlaten spookhuis binnen
                    {print} Meteen hoor je het geluid van een monster1
                    {print} Dus snel ren je naar de volgende kamer.
                    {print} Maar daar wordt je opgewacht door een monster2
                    {print} HELP!
                    {print} Je rent naar de keuken, maar wordt daar aangevallen door een monster3
                    ```
                start_code: "monster1 {is} _"
                story_text_2: |
                    ### Opdracht
                    In het voorbeeldje hierboven is van tevoren bepaald welk monster er achter de deur staat. Dus elke keer als je het programma start, heb je dezelfde uitkomst.
                    Kun jij het `{ask}` commando gebruiken om het spookhuis interactief te maken, zodat de spelers kunnen kiezen welke monsters ze tegenkomen?
                example_code_2: |
                    ```
                    monster1 {is} _
                    monster2 {is} _
                    monster3 {is} _
                    {print} Je stapt het oude verlaten spookhuis binnen
                    {print} Meteen hoor je het geluid van een monster1
                    {print} Dus snel ren je naar de volgende kamer, maar daar wordt je opgewacht door een monster2
                    {print} HELP!
                    {print} Je rent naar de keuken, maar wordt daar aangevallen door een monster3
                    ```

            3:
                story_text: |
                    ## Spookhuis
                    In het vorige level heb je een spannende intro bedacht voor je spookhuis, maar een echt spel is het nog niet: Het loopt namelijk altijd hetzelfde af.
                    In level twee kun je jouw verhaal interactiever maken door verschillende eindes te bedenken: soms wordt je opgepeuzeld door een verschrikkelijk monster en soms ontsnap je!
                    Hedy kiest willekeurig of je overleeft of niet...
                example_code_2: |
                    ```
                    _ Ontsnap uit het spookhuis!
                    _ Voor je staan drie deuren...
                    _ _ _ Welke deur kies je?
                    _ Je koos deur keuze
                    monsters _ een zombie, een vampier, NIKS JE ONTSNAPT
                    _ Jij ziet...
                    {sleep}
                    _ _ _ _
                    ```
                story_text_2: |
                    ### Opdracht
                    Kopieer de voorbeeldcode en vul de lijntjes in om het programma aan de praat te krijgen!

                    **Extra** Dit verhaal is kort maar krachtig. Kun jij het verhaal opleuken tot een echte spannende game?
                    Daarbij zijn er nu maar 3 mogelijke opties voor wat er achter de deur zit, kun jij meer monsters toevoegen aan die lijst?
                story_text_3: |
                    ## Verander het spel in een tv prijzenshow!
                    ### Opdracht
                    Tot slot willen we je graag uitdagen om dit spel om te bouwen tot een prijzenshow zoals op tv! In prijzenshows kiest de kandidaat een deur of een koffertje en vindt daarin een grote prijs (of niets natuurlijk...).
                    Kun jij een prijzenshow bouwen? We hebben de eerste regels als in het voorbeeld gegeven.
                start_code: "{print} Ontsnap uit het spookhuis!"
                example_code_3: |
                    ```
                    {print} Miljoenenjacht!
                    {print} Voor je staan 3 koffers...
                    {print} In een koffer zit ____
                    _
                    ```
            4:
                story_text: |
                    ## Spookhuis
                    In dit level heb je geleerd hoe je aanhalingstekens moet gebruiken.
                    Kun jij je spookhuis ook in level 4 aan de praat krijgen?
                start_code: "{print} 'Ontsnap uit het spookhuis!'"
                example_code: |
                    ```
                    {print} _Ontsnap uit het spookhuis!_
                    {print} _ Voor je staan drie deuren... _
                    keuze {is} {ask} _ Welke deur kies je?_
                    {print} _ Je koos deur keuze _
                    monsters {is} een zombie, een vampier, NIKS JE ONTSNAPT
                    {print} _ Jij ziet... _
                    {sleep}
                    {print} monsters {at} {random}
                    ```
            5:
                story_text: |
                    ## Spookhuis
                    Tot nu toe werd er in je spookhuisspel wel altijd aan de speler gevraagd welke deur geopend moest worden, maar zoals je misschien al gemerkt hebt, maakte het niet uit wat voor antwoord de speler gaf.
                    De speler kon netjes een deur kiezen, maar als de speler een compleet random antwoord gaf, zoals 'pannenkoek!', dan zou de speler het spel nog steeds kunnen winnen (ook al is er niet eens een deur gekozen!).
                    In dit level kun je alleen winnen als je dezelfde deur kiest als Hedy heeft gekozen en maakt het dus echt uit welk antwoord je invult!

                    ### Opdracht
                    Kun jij de 4 missende woorden invullen op de streepjes?

                example_code: |
                    ```
                    {print} 'Ontsnap uit het spookhuis!'
                    {print} 'Voor je staan 3 deuren...'
                    deuren {is} 1,2,3
                    monsters {is} weerwolf, mummy, vampier, zombie
                    gekozendeur {is} {ask} 'Welke deur kies je?'
                    {print} 'Jij kiest deur...' gekozendeur
                    {sleep}
                    goededeur {is} deuren {at} {random}
                    _ _ _ _ {print} 'Hoera! Je ontsnapt!'
                    {else} {print} 'Oh nee! Je wordt opgepeuzeld door een...' monsters {at} {random}
                    ```
                start_code: "{print} 'Ontsnap uit het spookhuis!'"
            9:
                story_text: |
                    ## Spookhuis
                    In de vorige levels heb je geleerd hoe je hele stukken code meerdere keren kunt herhalen. Hierdoor kun je levels maken in je spookhuisgame!
                    In de lagere levels hoefde je maar een kamer door voordat je ontsnapt was, maar in dit level moet je wel 3x uit een kamer vluchten voordat je ontsnapt bent.
                    Dat maakt het spel een stuk lastiger om te winnen, kijk maar...

                    ### Opdracht
                    Je spel is nu wel heel lastig te winnen... Kun jij je spel zo aanpassen dat er maar één foute deur is om te kiezen, in plaats van twee?
                    Tip: Je moet goede_deur veranderen in foute_deur, en de `{if}` en `{else}` code omdraaien.
                    En natuurlijk mag je ook je eigen draai aan het verhaal geven. Andere monsters, of juist cadeautjes?
                example_code: |
                    ```
                    {print} 'Ontsnap uit het spookhuis!'
                    speler = levend
                    deuren = 1, 2, 3
                    monsters = zombie, vampier, mummy, reuzespin
                    {repeat} 3 {times}
                        {if} speler {is} levend
                            goede_deur {is} deuren {at} {random}
                            {print} 'Voor je staan drie deuren...'
                            gekozen_deur = {ask} 'Welke deur kies je?'
                            {if} gekozen_deur {is} goede_deur
                                {print} 'Gelukkig! Geen monster!'
                            {else}
                                {print} 'Je wordt opgegeten door een... ' monsters {at} {random}
                                speler = dood
                        {else}
                            {print} 'GAME OVER'
                    {if} speler {is} levend
                        {print} ' Hoera! Je bent ontsnapt!'
                    ```
                start_code: "{print} 'Ontsnap uit het spookhuis!'"
            11:
                story_text: |
                    ## Spookhuis
                    De speler van het spookhuis loopt door drie kamers en komt steeds een monster tegen.

                    ### Opdracht 1
                    Maak het programma af op de streepjes, en zorg dat je steeds laat weten in welke kamer de speler is.

                    ### Opdracht 2
                    Maak er een spannend avontuur van door deze stappen te volgen:

                    1. Maak een lijst met keuzes (bijv aanvallen of wegrennen)
                    2. Zorg dat de speler kan kiezen met een `{ask}`
                    3. Is het antwoord goed? Dan komt het volgende monster. Is de keuze fout? Laat dat de speler weten met een `{print}`.

                    **(extra)** Als je de foute keuze maakt, komt er toch nog een monster! Denk na over hoe je dat zou kunnen veranderen.
                example_code: |
                    ```
                    {print} 'Ontsnap uit het spookhuis!'
                    monsters = zombie, vampier, mummy, reuzespin
                    _
                        {print} 'Kamer ' i
                        monster = monsters {at} {random}
                    ```
                start_code: "{print} 'Ontsnap uit het spookhuis!'"
            14:
                story_text: |
                    ## Spookhuis
                    In dit level gebruik je `<` en `>` om levens toe te voegen aan je spel.
                example_code: |
                    ```
                    {print} 'Ontsnap uit het spookhuis'
                    levens = 3
                    deuren = 1, 2, 3
                    monsters = 'de boze heks', 'een zombie', 'een slapende 3 koppige hond'
                    {for} i {in} {range} 1 {to} 10
                        {if} levens > 0
                            goede_deur = deuren {at} {random}
                            monster = monsters {at} {random}
                            gekozen_deur = {ask} 'Welke deur kies jij?'
                            {if} goede_deur == gekozen_deur
                                {print} 'Je hebt de goede deur gekozen'
                            {else}
                                {print} 'Je ziet...' monster
                                {if} monster == 'een slapende 3 koppige hond'
                                    {print} 'Pffieuw.... Hij slaapt'
                                {else}
                                    {print} 'Je hebt een leven kwijt!'
                                    levens = levens - 1
                        {else}
                            {print} 'GAME OVER'
                    ```
                start_code: "# Schrijf jouw code hier"
            16:
                story_text: |
                    ## Spookhuis
                    Deze spookhuisgame gebruikt de connectie tussen de verschillende lijstjes, die je in dit level kunt gebruiken.
                    Bijvoorbeeld: alle eigenschappen die bij de zombie horen staan als eerste in alle lijstjes, de heks als tweede en de vampier derde.
                    Kijk maar naar de code.
                example_code: |
                    ```
                    getallen = [1, 2, 3]
                    i = getallen[{random}]
                    hint = ['gegrom', 'kakelende lach', 'vleermuis gefladder']
                    monsters = ['zombie', 'heks', 'vampier']
                    noodlot = ['Je brein wordt opgepeuzeld', 'Je wordt vervloekt', 'Je wordt gebeten']
                    goedlot = ['Je gooit de ham naar de zombie die er lekker aan begint te knagen.', 'Je zet de gordijnen in de fik. De heks vlucht, bang voor het vuur', 'De vampier haat knoflook en vlucht weg']
                    wapens = ['rauwe ham', 'aansteker', 'knoflook']
                    {print} 'Je staat bij een oude verlaten villa'
                    {print} 'Iets is hier niet pluis...'
                    {print} 'Je hoort ' hint[i]
                    {print} 'Je gaat op ontdekking'
                    {print} 'Je stapt de keukendeur binnen en ziet daar een aansteker, een rauwe ham en een knoflook'
                    jouw_wapen = {ask} 'Wat neem je mee?'
                    {print} 'Met je ' jouw_wapen ' loop je door naar de woonkamer'
                    {print} 'Daar zie je een ' monsters[i]
                    benodigde_wapen = wapens[i]
                    {if} jouw_wapen == benodigde_wapen
                        {print} 'Je gebruikt je ' jouw_wapen
                        {print} goedlot[i]
                        {print} 'Jij wint!'
                    {else}
                        {print} 'Je hebt helaas het verkeerde wapen'
                        {print} noodlot[i]
                        {print} 'GAME OVER'
                    ```
                start_code: "# Schrijf jouw code hier"
    piggybank:
        name: "Spaarvarken"
        description: "Tel je zakgeld!"
        default_save_name: "Spaarvarken"
        levels:
            12:
                story_text: |
                    ## Spaarvarken
                    In dit avontuur kun je een digitaal spaarvarkentje maken.

                    ### Opdracht
                    Maak de code af zodat je jouw zakgeld kunt tellen en kunt berekenen hoe lang het duurt voordat je iets kunt kopen!
                    **(extra)** Misschien heb je al wat geld gespaard? Voeg een extra `{ask}` toe en trek je al gespaarde bedrag af van wat je nog moet sparen.
                example_code: |
                    ```
                    {print} 'Het digitale spaarvarken'
                    wens = {ask} 'Wat zou je graag willen hebben?'
                    prijs = {ask} 'Hoeveel kost dat?'
                    zakgeld = {ask} 'Hoeveel zakgeld krijg je per week?'
                    weken = prijs / zakgeld
                    {print} 'Je kunt over ' _ ' weken een ' _ ' kopen!'
                    ```
                start_code: "# Schrijf jouw code hier"
            14:
                story_text: |
                    ## Spaarvarken
                    In dit level kun je Hedy laten vertellen of je al genoeg geld hebt gespaard of niet!
                example_code: |
                    ```
                    geld = {ask} 'Hoeveel geld heb je al gespaard?'
                    wens = {ask} 'Hoeveel geld heb je nodig?'
                    zakgeld = {ask} 'Hoeveel zakgeld krijg je per week?'
                    sparen = wens - geld
                    weken = sparen / zakgeld
                    {if} wens > geld
                        {print} 'Helaas even doorsparen!'
                        {print} 'Je moet nog ' weken ' weken.'
                    {else}
                        {print} 'Hoera, je hebt genoeg!'
                        {print} 'Op naar de winkel!'
                    ```
                start_code: "# Schrijf jouw code hier"
    quizmaster:
        name: "Quizmaster"
        description: "Maak je eigen quiz!"
        default_save_name: "Quizmaster"
        levels:
            14:
                story_text: |
                    ## Maak je eigen quiz!
                    In dit avontuur leer je jouw eigen quiz maken. Vul het voorbeeld in, maak extra vragen en geniet van je eigen quiz!
                    Je kunt de quiz maken over wat je maar wil: je hobby, lievelingsdier, lievelingsboek of ...?
                example_code: |
                    ```
                    {print} 'Maak je eigen quiz'
                    punten_a = 0
                    punten_b = 0
                    {print} 'Vraag'
                    {print} 'Antwoordoptie A'
                    {print} 'Antwoordoptie B'
                    antwoord = {ask} 'Welk antwoord?'
                    {if} antwoord == 'A'
                        punten_a = punten_a + 1
                    {if} antwoord == 'B'
                        punten_b = punten_b + 1
                    {print} 'Einde van de quiz!'
                    {print} 'We kijken naar de resultaten!'
                    {if} punten_a > punten_b
                        {print} 'Jij hoort in club A'
                    {if} punten_b > punten_a
                        {print} 'Jij hoort in club B'
                    ```
                start_code: "# Schrijf jouw code hier"
    language:
        name: "Woordjes leren"
        description: "Maak je eigen programma om woordjes te leren in een vreemde taal"
        default_save_name: "Woordjes leren"
        levels:
            5:
                story_text: |
                    ## Leer een nieuwe taal
                    Maak een programma om woordjes mee te leren in een andere taal.

                    ### Opdracht
                    Kun jij dit programma maken voor een andere taal? Of kun je meer woordjes toevoegen aan het Franse programma?
                example_code: |
                    ```
                    {print} 'Leer Frans!'
                    kat {is} {ask} '🐱'
                    {if} kat {is} chat {print} 'Goedzo!'
                    {else} {print} 'Helaas, kat is chat'
                    kikker {is} {ask} '🐸'
                    {if} kikker {is} grenouille {print} 'Super!'
                    {else} {print} 'Helaas, kikker is grenouille'
                    ```
                start_code: "# Schrijf jouw code hier"
            16:
                story_text: |
                    ## Leer een nieuwe taal
                    Maak je eigen programma om woordjes te leren in een vreemde taal.
                example_code: |
                    ```
                    franswoord = ['bonjour', 'ordinateur', 'pomme de terre']
                    vertaling = ['hallo', 'computer', 'aardappel']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        antwoord = {ask} 'Wat betekent ' franswoord[i] '?'
                        correct = vertaling[i]
                        {if} antwoord == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Fout, ' franswoord[i] ' betekent ' vertaling[i]
                    {print} 'Je hebt ' score ' goede antwoorden gegeven.'
                    ```
                start_code: "# Schrijf jouw code hier"
    secret:
        name: "Geheim agent"
        description: "Maak je eigen spionnencode"
        default_save_name: "Geheim agent"
        levels:
            12:
                start_code: '## Schrijf jouw code hier'
                story_text: |
                    ## Geheim agent
                    In dit avontuur kun je jouw eigen geheim agent code maken. Maak een bericht dat alleen de juiste agent kan ontcijferen.
                    Als je vijand probeert de code te kraken krijgen ze valse informatie om hun tijd te verspillen.

                    ### Opdracht
                    Maak je eigen code voor jouw geheime agent. Kun jij het misschien zelfs uit meerdere variabelen laten bestaan?
                example_code: |
                    ```
                    naam {is} {ask} 'Hoe heet je?'
                    {if} naam {is} '_'
                        plek {is} 'Ga naar het vliegveld '
                    {else}
                        plek {is} 'Ga naar het treinstation '
                    wachtwoord {is} {ask} 'Wat is het wachtwoord?'
                    {if} wachtwoord {is} _
                        tijd {is} 'morgen om 02:00'
                    {else}
                        tijd {is} 'vandaag om 10:00'
                    {print} _ _ _
                    ```
            13:
                start_code: '## Schrijf jouw code hier'
                story_text: |
                    ## Geheim agent
                    We kunnen nu met maar één `{if}` bekijken of het programma gebruikt wordt door de geheim agent.

                    ### Opdracht 1
                    Maak de afmaken door de lege stukje te vullen. Let op: de superspion moet beide antwoorden goed hebben, voordat hij de juiste geheime informatie krijgt.

                    ### Opdracht 2
                    We willen de vijand extra verwarren! Maak een lijst met nepantwoorden en kies, bij een fout antwoord, iets uit de lijst.

                example_code: |
                    ```
                    naam {is} {ask} 'Hoe heet je?'
                    wachtwoord {is} {ask} 'Wat is het wachtwoord?'
                    {if} naam {is} 'Agent007' _ wachtwoord {is} 'TOPSECRET'
                        {print} 'Ga naar het vliegveld om 02:00'
                    {else}
                        {print} 'Ga naar het treinstation om 10:00'
                    ```
#    next:
#        name: "Vooruitblik"
#        description: "Vooruitblik"
#        default_save_name: "Vooruitblik"
#        levels:
#            1:
#                story_text: |
#                    ## Vooruitblik
#                    Gefeliciteerd! Je bent aan het einde gekomen van het eerste level van Hedy. Hopelijk heb je al wat mooie codes kunnen maken, maar er is in Hedy nog veel meer te ontdekken.
#
#                    In level 1 ben je er misschien tegenaan gelopen dat Hedy in het `{echo}` commando maar één ding kan onthouden.
#                    In het restaurantavontuur kon je bijvoorbeeld alleen herhalen wat de klant wilde eten, of alleen wat hij wilde drinken. Kijk maar:
#
#                start_code: "{print} Op naar het volgende level!"
#                example_code: "```\n{print} Welkom bij restaurant Hedy\n{ask} Wat wilt u eten?\n{echo} Dus dit wilt u eten\n{ask} Wat wilt u drinken\n{echo} Dus dit wilt u drinken\n```\n"
#                story_text_2: |
#                    Als de speler hamburger en cola invult, kun je nog niet zeggen \"dus u wilt een hamburger en cola\", maar je moet daar twee losse zinnen van maken.
#                    Daarnaast echoot Hedy alleen woorden aan het einde van de zin. Dus je kunt in level 1 niet zeggen \"Je hamburger komt eraan!\"
#
#                    Dat verandert in level 2. In level 2 leer je namelijk werken met variabelen waardoor je Hedy heel veel verschillende stukjes informatie kunt laten onthouden en ze overal in de zin te printen.
#            2:
#                story_text: |
#                    ## Vooruitblik
#                    In dit level heb je geleerd wat een variabele is en dat je het kunt gebruiken om je avonturen interactief te maken.
#                    Maar.... dit is niet het enige wat variabelen kunnen! Je kunt variabelen namelijk ook gebruiken om lijstjes mee te maken.
#                    En je kunt Hedy dan zelfs een willekeurig woord uit dat lijstje laten kiezen, waardoor je ineens echte spelletjes kunt maken.
#                    Neem snel een kijkje in het volgende level!
#
#                start_code: "{print} Op naar het volgende level!"
#            3:
#                story_text: |
#                    ## Vooruitblik
#                    In dit level heb je veel geoefend met variabelen, maar misschien heb je ook wel eens gezien dat dat nog niet altijd perfect werkt.
#
#                    Probeer deze code maar eens uit:
#                    ```
#                    naam {is} Sophie
#                    {print} Mijn naam is naam
#                    ```
#                    Je wilde natuurlijk printen `Mijn naam is Sophie` maar Hedy {print} `Mijn Sophie is Sophie`.
#
#                    In het volgende level wordt dit probleem opgelost door aanhalingstekens te gebruiken, kijk maar eens!
#                start_code: "{print} Op naar het volgende level!"
#            4:
#                story_text: |
#                    ## Vooruitblik
#                    In de voorgaande levels heb al codes leren maken met `{at} {random}` waardoor je programma's elke keer anders waren als je ze afspeelde.
#                    Toch waren de codes niet echt interactief, je hebt er als speler namelijk geen invloed op.
#
#                    In het volgende level leer je het `{if}` commando waarmee je kunt zorgen voor 2 verschillende reacties in je code.
#                    Zo kun je bijvoorbeeld je computer beveiligen met een wachtwoord. Neem maar een kijkje!
#
#                    ```
#                    wachtwoord {is} {ask} 'Wat is het goede wachtwoord?'
#                    ```
#                start_code: "{print} 'Op naar het volgende level!'"
#            5:
#                story_text: |
#                    ## Vooruitblik
#                    In dit level heb je goed geoefend met de `{if}` en `{ask}`. Je kunt bijvoorbeeld gasten vragen wat ze willen eten.
#                    Wat je alleen nog niet kunt in dit level, is de prijzen optellen.
#
#                    In het volgende level kun je optellen, aftrekken, en vermenigvuldigen in je programma's. Zou het niet leuk zijn om precies te kunnen zeggen hoeveel de klanten moeten betalen, en stiekem een kortingscode toe te voegen voor jou en je vrienden?
#
#                    Vanaf het volgende level kan dit wel, want in level 6 kun je rekenen met Hedy. Je kunt daar ook proberen om een tafelsommen spel te programmeren (voor je broertje of zusje?).
#                    Neem snel een kijkje!
#                start_code: "{print} 'Op naar het volgende level!'"
#                example_code: |
#                    ## Gratis drinken!
#                    ```
#                    {print} 'Welkom bij McHedy'
#                    bestelling {is} {ask} 'Wat wilt u bestellen?'
#                    {print} 'U wilt graag ' bestelling
#                    {if} bestelling {is} hamburger prijs {is} 5
#                    {if} bestelling {is} friet prijs {is} 2
#                    drinken {is} {ask} 'Wat wilt u drinken?'
#                    {print} 'U wilt graag ' drinken
#                    {print} 'Dat wordt dan ' prijs ' euro voor ' bestelling ' alstublieft'
#                    {print} 'Het drinken is gratis in dit level want Hedy kan de prijs nog niet berekenen...'
#                    ```
#            6:
#                story_text: |
#                    ## Vooruitblik
#                    Super! Je bent bij het einde van dit level, dus je hebt inmiddels goed geoefend met `{if}` en `{else}`.
#
#                    Je hebt misschien gemerkt dat je codes steeds maar langer worden. Als je bijvoorbeeld een zin meerdere keren wil herhalen, nemen die allemaal een aparte regel in.
#                    Bijvoorbeeld als je "lang zal ze leven" wil coderen... Gelukkig leren we in het volgende level het `{repeat}` commando, dat zorgt dat je een regel code meerdere keren kunt herhalen.
#                example_code: |
#                    ```
#                    {print} 'lang zal ze leven'
#                    {print} 'lang zal ze leven'
#                    {print} 'lang zal ze leven'
#                    {print} 'in de gloria'
#                    {print} 'in de gloria'
#                    {print} 'in de gloria'
#                    ```
#                start_code: "{print} 'Op naar het volgende level!'"
#            7:
#                story_text: |
#                    ## Vooruitblik
#                    In dit level heb je met `{repeat}` al geleerd hoe je één regel code kunt herhalen. Soms is het wel fijn als je niet maar één regel, maar voor meerdere regels `{repeat}` kunt gebruiken. Want nu moest je wel een hoop knippen en plakken in sommige programma's.
#                    In het volgende level wordt dat mogelijk gemaakt door stukjes code bij elkaar een groepje te maken, door ze te beginnen met een aantal spaties. Zo'n groepje regels kun je dan in één keer herhalen met {repeat}.
#                example_code: |
#                    ```
#                    {repeat} 5 {times} {print} 'Vanaf het volgende level kun je meerdere regels code in een keer herhalen!'
#                    ```
#                start_code: "{print} 'Op naar het volgende level!'"
#            8:
#                story_text: |
#                    ## Vooruitblik
#                    In dit level heb je geleerd hoe je het {repeat}- en het {if}-commando voor meerdere regels kunt laten gelden door in te springen.
#                    Misschien heb je het al geprobeerd, maar in dit level mocht je nog geen {if}-commando ìn een ander {if}-commando stoppen. Dit geldt ook voor {repeat}.
#                    Vanaf het volgende level mag dit wel! Let op: Je moet dan dus wel dubbel inspringen!
#                example_code: |
#                    ```
#                    antwoord = {ask} 'Heb je zin om naar het volgende level te gaan?'
#                    {if} antwoord {is} ja
#                        {print} 'Straks kan ik hier het {repeat} commando gebruiken binnen het {if} commando!'
#                        {print} 'Hoera!'
#                        {print} 'Hoera!'
#                        {print} 'Hoera!'
#                    {else}
#                        {print} 'Blijf dan maar lekker hier!'
#                    ```
#                start_code: "{print} 'Op naar het volgende level!'"
#            9:
#                story_text: |
#                    ## Vooruitblik
#                    Wat ben je goed bezig! In dit level hebben we wel nog een klein probleem. Je kunt al stukken code herhalen, maar wat nou als de code elke keer ietsje anders moet zijn..?
#                    Misschien ken je het Engelse kinderliedje 'if you're happy and you know it clap your hands' wel. In dat liedje komt er steeds een nieuwe actie, eerst 'clap your hands' dan 'stomp your feet' etc. Het eerste couplet van dat liedje kun je zo programmeren:
#
#                    Maar als je het volgende couplet wil maken, zou je het geheel moeten kopiëren en plakken onder deze code. Dat kan makkelijker!
#                    In het volgende level leer je het `{for}` commando, waarmee je een lijstje kan maken en de code steeds een klein beetje kan veranderen!
#                    Kijk maar...
#                example_code: |
#                    ```
#                    {repeat} 2 {times}
#                        {print} 'if youre happy and you know it clap your hands'
#                    {print} 'if youre happy and you know it and you really want to show it'
#                    {print} 'if youre happy and you know it clap your hands'
#                    ```
#                start_code: "{print} 'Op naar het volgende level!'"
#            10:
#                story_text: |
#                    ## Vooruitblik
#                    Je bent alweer aan het einde van dit level, knap hoor! Je staat op het punt om door te gaan naar het volgende level. In de hogere levels gaan we steeds een beetje meer toewerken naar de programmeertaal Python.
#                    In Python bestaat het commando `{repeat}` echter niet, dus gaan we dat vervangen door 'echte' programmeertaal!
#                    Ben je benieuwd hoe dat eruit ziet? Ga dan snel verder.
#                start_code: "{print} 'Op naar het volgende level!'"
#            11:
#                story_text: |
#                    ## Vooruitblik
#                    Misschien heb je in je restaurant opdracht wel eens geprobeerd om prijzen te maken met kommagetallen. Helaas was dit niet toegestaan.
#                    Vanaf het volgende level kun je wel kommagetallen gebruiken!
#                example_code: |
#                    ```
#                    hamburger {is} 5
#                    drinken {is} 2
#                    totaal {is} hamburger + drinken
#                    print 'Je hebt een hamburger en drinken besteld.'
#                    print 'Dat kost ' totaal ' euro.'
#                    ```
#                    De code hierboven werkt, want de hamburger kost 5 euro en het drinken kost 2 euro. Maar als je 50 cent meer rekent, werkt het programma niet meer! Kijk maar in de code hieronder:
#                    ```
#                    hamburger {is} 5.50
#                    drinken {is} 2.30
#                    totaal {is} hamburger + drinken
#                    print 'Je hebt een hamburger en drinken besteld.'
#                    print 'Dat kost ' totaal ' euro.'
#                    ```
#                    In het volgende level ga je leren hoe je kan zorgen dat deze code wél werkt!
#                start_code: "{print} 'Op naar het volgende level!'"
#            12:
#                story_text: |
#                    ## Vooruitblik
#                    In de afgelopen levels kon je meerdere `{if}`-commando's in elkaar stoppen. Hierdoor kon je bijvoorbeeld dit beveiligingssysteem programmeren.
#                    In dit systeem moeten de gebruikersnaam én het wachtwoord goed zijn, maar het zorgt wel voor een lange, onhandige code..
#                    In het volgende level leer je hoe dit veel gemakkelijker kan van het `{and}` commando!
#                example_code: |
#                    ```
#                    gebruikersnaam {is} {ask} 'Wat is je gebruikersnaam?'
#                    wachtwoord {is} {ask} 'Wat is je wachtwoord?'
#                    {if} gebruikersnaam {is} 'Hedy'
#                        {if} wachtwoord {is} 'geheim'
#                            {print} 'Welkom Hedy!'
#                        {else}
#                            {print} 'Jij mag niet op mijn computer'
#                    {else}
#                        {print} 'Jij mag niet op mijn computer!'
#                    ```
#                start_code: "{print} 'Op naar het volgende level!'"
#            13:
#                story_text: |
#                    ## Vooruitblik
#                    Met het onderstaande programma kun je berekenen of je voldoende of onvoldoende staat voor een schoolvak.
#                    Je ziet dat regel 5 ontzettend onhandig is, omdat alle mogelijke opties van 1 tot 5 apart benoemd moeten worden.
#                example_code: |
#                    ```
#                    eerste_cijfer = {ask} 'Welk cijfer had je voor je eerste toets?'
#                    tweede_cijfer = {ask} 'Welk cijfer had je voor je tweede toets?'
#                    samen {is} eerste_cijfer + tweede_cijfer
#                    gemiddelde_cijfer {is} samen / 2
#                    {if} gemiddelde_cijfer = 1 {or} gemiddelde_cijfer = 2 {or} gemiddelde_cijfer = 3 {or} gemiddelde_cijfer = 4 {or} gemiddelde_cijfer = 5
#                        {print} 'Helaas... Onvoldoende!'
#                    {else}
#                        {print} 'Hoera! Voldoende!'
#                    ```
#                start_code: "{print} 'Op naar het volgende level!'"
#            14:
#                story_text: |
#                    ## Vooruitblik
#                    In het spelletje hieronder is een code gemaakt om ervoor te zorgen dat de speler het spelletje kan blijven spelen totdat hij/zij dat niet meer wil.
#                    Maar de code is erg omslachtig en wat nou als de speler 101 keer wil doorspelen? Je kunt niet oneindig spelen...
#                    In het volgende level leer je een commando waarmee dit allemaal veel makkelijker gaat!
#                example_code: |
#                    ```
#                    spel {is} 'aan'
#                    {for} i {in} {range} 1 {to} 100
#                        {if} spel {is} 'aan'
#                            antwoord = {ask} 'Wil je doorspelen?'
#                            {if} antwoord {is} 'nee'
#                                spel {is} 'uit'
#                            {if} antwoord {is} 'ja'
#                                {print} 'Ok we gaan door'
#                    ```
#                start_code: "{print} 'Op naar het volgende level!'"
#            15:
#                story_text: |
#                    ## Vooruitblik
#                    In het volgende level gaan we weer een stapje verder richting Python code. Daar leer je hoe je twee lijstjes aan elkaar kunt linken.
#                    Hierdoor kun je een programma schrijven waarbij je elk dier aan het juiste geluid kunt koppelen.
#                    Want die twee programma's hieronder... Daar klopt natuurlijk niks van!
#                example_code: |
#                    ```
#                    dieren = 'kip', 'paard', 'koe'
#                    geluiden = 'tok', 'hinnik', 'boe'
#                    {for} dier {in} dieren
#                        {print} 'Een ' dier ' zegt ' geluiden {at} {random}
#                    ```
#                    Je zou ook dit kunnen proberen... Maar het klopt nog steeds niet...
#                    ```
#                    dieren = 'kip', 'paard', 'koe'
#                    geluiden = 'tok', 'hinnik', 'boe'
#                    {for} dier {in} dieren
#                        {for} geluid {in} geluiden
#                            {print} 'Een ' dier ' zegt ' geluid
#                    ```
#                start_code: "{print} 'Op naar het volgende level!'"
#            16:
#                story_text: |
#                    ## Vooruitblik
#                    In het volgende level leer je weer een nieuw commando. Je hebt misschien gemerkt dat  je soms niet genoeg hebt aan `{if}` en `{else}`.
#                    Bijvoorbeeld bij deze code:
#                example_code: |
#                    ```
#                    {print} 'Wat eten we vanavond?'
#                    opties = ['pizza', 'broccoli', 'spruitjes']
#                    gekozen = opties {at} {random}
#                    {if} gekozen = 'pizza'
#                        {print} 'Lekker! Pizza!'
#                    {else}
#                        {print} 'Bah...'
#                    ```
#                story_text_2: In deze code zou het fijn zijn als je twee keer een `{else}` kon toevoegen, want misschien vindt je broccoli wel oké en alleen spruitjes 'bah'. In het volgende level kun je meerdere opties toevoegen met het nieuwe commando `{elif}`!
#                start_code: "{print} 'Op naar het volgende level!'"
#            17:
#                story_text: |
#                    ## Vooruitblik
#                    Wow! Wat ben je al ver gekomen! In het volgende level maken we onze code weer een beetje 'echter' door `{print}` nog meer op Python te laten lijken.
#                    Benieuwd...? Klik dan maar verder!
#                start_code: "{print} 'Op naar het volgende level!'"
#            18:
#                story_text: |
#                    ## Vooruitblik
#                    Gefeliciteerd! Je hebt het laatste level van Hedy behaald! De code van level 18 kan je gebruiken in Python-omgevingen zoals replit of PyCharm en daar verder gaan met leren programmeren. Maar Python kan alleen met Engels codes werken, dus geen Nederlandse.
#                start_code: "{print} ('Goed gedaan!')"
    tic:
        name: Boter Kaas en Eieren
        levels:
            14:
                story_text: "## Boter, kaas en eieren\nIn de vorige levels heb je het spel \"boter, kaas en eieren\" kunnen maken. Nu heb je het = teken, het == teken en het != teken geleerd. \nJe kunt deze kennis toepassen in het \"boter, kaas en eieren\" spel op deze manier:\n"
                start_code: '## Schrijf jouw code hier'
                example_code: "```\nteken = 'x'\nopen_plekken = 1, 2, 3, 4, 5, 6, 7, 8, 9\nspel = 'aan'\nplek_1 = '.'\nplek_2 = '.'\nplek_3 = '.'\nplek_4 = '.'\nplek_5 = '.'\nplek_6 = '.'\nplek_7 = '.'\nplek_8 = '.'\nplek_9 = '.'\n{print} 'BOTER KAAS EN EIEREN!'\n{print} plek_1 plek_2 plek_3\n{print} plek_4 plek_5 plek_6\n{print} plek_7 plek_8 plek_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} spel != 'uit'\n        keuze = {ask} 'Speler ' teken ', Welke plek kies jij?'\n        {if} keuze {in} open_plekken\n            {remove} keuze {from} open_plekken\n            {if} keuze == 1\n                plek_1 = teken\n            {if} keuze == 2\n                plek_2 = teken\n            {if} keuze == 3\n                plek_3 = teken\n            {if} keuze == 4\n                plek_4 = teken\n            {if} keuze == 5\n                plek_5 = teken\n            {if} keuze == 6\n                plek_6 = teken\n            {if} keuze == 7\n                plek_7 = teken\n            {if} keuze == 8\n                plek_8 = teken\n            {if} keuze == 9\n                plek_9 = teken\n        {else}\n            {print} 'Die plek was al bezet!'\n        {print} plek_1 plek_2 plek_3\n        {print} plek_4 plek_5 plek_6\n        {print} plek_7 plek_8 plek_9\n        {print} ' '\n        winnaar = {ask} 'Heb je gewonnen?'\n        {if} winnaar == 'ja'\n            {print} 'Goed gedaan, speler ' teken '!'\n            spel = 'uit'\n        {else}\n            {if} teken == 'x'\n                teken = 'o'\n            {else}\n                teken = 'x'\n```\n"
            15:
                start_code: '## schrijf jouw code hier'
                story_text: "## Boter, kaas en eieren\nIn dit level kun je jouw spel nog meer verbeteren door gebruik te maken van de {while} lus. Met deze lus kun je de twee regels `{if} game != 'over'` en `{for} i {in} {range} 1 {to} 9`  combineren tot één simpele regel.\nKijk maar:\n"
                example_code: "```\nteken = 'x'\nopen_plekken = 1, 2, 3, 4, 5, 6, 7, 8, 9\nspel = 'aan'\nplek_1 = '.'\nplek_2 = '.'\nplek_3 = '.'\nplek_4 = '.'\nplek_5 = '.'\nplek_6 = '.'\nplek_7 = '.'\nplek_8 = '.'\nplek_9 = '.'\n{print} 'BOTER KAAS EN EIEREN!'\n{print} plek_1 plek_2 plek_3\n{print} plek_4 plek_5 plek_6\n{print} plek_7 plek_8 plek_9\n{print} ' '\n{while} spel != 'uit'\n    keuze = {ask} 'Speler ' teken ', welke plek kies jij?'\n    {if} keuze {in} open_plekken\n        {remove} keuze {from} open_plekken\n        {if} keuze == 1\n            plek_1 = teken\n        {if} keuze == 2\n            plek_2 = teken\n        {if} keuze == 3\n            plek_3 = teken\n        {if} keuze == 4\n            plek_4 = teken\n        {if} keuze == 5\n            plek_5 = teken\n        {if} keuze == 6\n            plek_6 = teken\n        {if} keuze == 7\n            plek_7 = teken\n        {if} keuze == 8\n            plek_8 = teken\n        {if} keuze == 9\n            plek_9 = teken\n    {else}\n        {print} 'Die plek was al bezet'\n    {print} plek_1 plek_2 plek_3\n    {print} plek_4 plek_5 plek_6\n    {print} plek_7 plek_8 plek_9\n    {print} ' '\n    winnaar = {ask} 'Heb je gewonnen'\n    {if} winnaar == 'ja'\n        {print} 'Goed gedaan, speler' teken '!'\n        spel = 'uit'\n    {else}\n        {if} teken == 'x'\n            teken = 'o'\n        {else}\n            teken = 'x'\n```\n"
            17:
                start_code: '## schrijf jouw code hier'
                story_text: "## Boter Kaas en Eieren\nIn de vorige levels was je boter kaas en eieren spel nog vervelend om te spelen. Na elke x of o die je zette vroeg het spel namelijk of je gewonnen had of niet. \nDit maakte het spel wel speelbaar, maar erg traag. In dit level heb je het `{elif}` commando geleerd, dat dit probleem kan oplossen. \nMet `{elif}` kun je Hedy laten checken of er een speler gewonnen heeft. Hiervoor heb je wel wat extra regels nodig.\n\nIn de voorbeeld code zie je dat we de voorwaarden om te winnen (3 op een rij)hebben toegevoegd. \nJe vindt ze op regel 46 tot 69. Je kunt zien dat elke keer als een speler 3 op een rij heeft, het spel de variabele spel op 'uit' zet. \nDit betekent dat de {while} lus wordt gestopt en dat het spel stopgezet wordt.\n"
                example_code: "```\nteken = 'x'\nopen_plekken = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nspel = 'aan'\nplek_1 = '.'\nplek_2 = '.'\nplek_3 = '.'\nplek_4 = '.'\nplek_5 = '.'\nplek_6 = '.'\nplek_7 = '.'\nplek_8 = '.'\nplek_9 = '.'\n{print} 'BOTER KAAS EN EIEREN!'\n{print} plek_1 plek_2 plek_3\n{print} plek_4 plek_5 plek_6\n{print} plek_7 plek_8 plek_9\n{print} ' '\n{while} spel != 'uit':\n    keuze = {ask} 'Speler ' teken ', welke plek kies jij?'\n    {if} keuze {in} open_plekken:\n        {remove} keuze {from} open_plekken\n        {if} keuze == 1:\n            plek_1 = teken\n        {if} keuze == 2:\n            plek_2 = teken\n        {if} keuze == 3:\n            plek_3 = teken\n        {if} keuze == 4:\n            plek_4 = teken\n        {if} keuze == 5:\n            plek_5 = teken\n        {if} keuze == 6:\n            plek_6 = teken\n        {if} keuze == 7:\n            plek_7 = teken\n        {if} keuze == 8:\n            plek_8 = teken\n        {if} keuze == 9:\n            plek_9 = teken\n    {else}:\n        {print} 'Die plek was al bezet'\n    {print} plek_1 plek_2 plek_3\n    {print} plek_4 plek_5 plek_6\n    {print} plek_7 plek_8 plek_9\n    {print} ' '\n    {if} plek_1 == plek_2 {and} plek_2 == plek_3 {and} plek_1 != '.':\n        {print} 'Speler ' teken ' wint!'\n        spel = 'uit'\n    {elif} plek_4 == plek_5 {and} plek_5 == plek_6 {and} plek_4 != '.':\n        {print} 'Speler ' teken ' wint!'\n        spel = 'uit'\n    {elif} plek_7 == plek_8 {and} plek_8 == plek_9 {and} plek_7 != '.':\n        {print} 'Speler ' teken ' wint!'\n        spel = 'uit'\n    {elif} plek_1 == plek_4 {and} plek_4 == plek_7 {and} plek_1 != '.':\n        {print} 'Speler ' teken ' wint!'\n        spel = 'uit'\n    {elif} plek_2 == plek_5 {and} plek_5 == plek_8 {and} plek_2 != '.':\n        {print} 'Speler ' teken ' wint!'\n        spel = 'uit'\n    {elif} plek_3 == plek_6 {and} plek_6 == plek_9 {and} plek_3 != '.':\n        {print} 'Speler ' teken ' wint!'\n        spel = 'uit'\n    {elif} plek_1 == plek_5 {and} plek_5 == plek_9 {and} plek_1 != '.':\n        {print} 'Speler ' teken ' wint!'\n        spel = 'uit'\n    {elif} plek_3 == plek_5 {and} plek_5 == plek_7 {and} plek_3 != '.':\n        {print} 'Speler ' teken ' wint!'\n        spel = 'uit'\n    {else}:\n        {if} teken == 'x':\n            teken = 'o'\n        {else}:\n            teken = 'x'\n```\n"
            13:
                story_text: "## Boter Kaas en Eieren\nIn dit avontuur kun je het spelletje Boter Kaas en Eieren programmeren. Je kunt spelen met twee personen. Kies om de beurt een plekje op het speelbord (1 - 9) waar je jouw teken op wil zetten (x of o). \nDe speler die als eerst 3 op een rij krijgt (horizontaal, verticaal of diagonaal) wint!\nVeel plezier!\n"
                example_code: "```\nteken = 'x'\nopen_plekken = 1, 2, 3, 4, 5, 6, 7, 8, 9\nspel = 'aan'\nplek_1 = '.'\nplek_2 = '.'\nplek_3 = '.'\nplek_4 = '.'\nplek_5 = '.'\nplek_6 = '.'\nplek_7 = '.'\nplek_8 = '.'\nplek_9 = '.'\n{print} 'BOTER KAAS EN EIEREN!'\n{print} plek_1 plek_2 plek_3\n{print} plek_4 plek_5 plek_6\n{print} plek_7 plek_8 plek_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} spel {is} 'aan'\n        keuze = {ask} 'Speler ' teken ', Welke plek kies jij?'\n        {if} keuze {in} open_plekken\n            {remove} keuze {from} open_plekken\n            {if} keuze {is} 1\n                plek_1 = teken\n            {if} keuze {is} 2\n                plek_2 = teken\n            {if} keuze {is} 3\n                plek_3 = teken\n            {if} keuze {is} 4\n                plek_4 = teken\n            {if} keuze {is} 5\n                plek_5 = teken\n            {if} keuze {is} 6\n                plek_6 = teken\n            {if} keuze {is} 7\n                plek_7 = teken\n            {if} keuze {is} 8\n                plek_8 = teken\n            {if} keuze {is} 9\n                plek_9 = teken\n        {else}\n            {print} 'Die plek was al bezet!'\n        {print} plek_1 plek_2 plek_3\n        {print} plek_4 plek_5 plek_6\n        {print} plek_7 plek_8 plek_9\n        {print} ' '\n        winnaar = {ask} 'Heb je gewonnen?'\n        {if} winnaar {is} 'ja'\n            {print} 'Goed gedaan, speler ' teken '!'\n            spel = 'uit'\n        {else}\n            {if} teken {is} 'x'\n                teken = 'o'\n            {else}\n                teken = 'x'\n```\n"
                start_code: '##  Schrijf jouw code hier'
        description: Speel een potje Boter Kaas en Eieren!
        default_save_name: Boter
    blackjack:
        name: Blackjack
        description: Probeer zo dicht mogelijk bij 21 te komen
        default_save_name: Blackjack
        levels:
            17:
                story_text: "##  Maak het kaartspel Blackjack\nBlackjack is een simpel kaartspelletje waarbij je zo dicht mogelijk bij 21 punten moet komen. Je krijgt twee kaarten. Elke kaart is het getal waard dat erop staat, en de kaarten met plaatjes (Boer, Vrouw, Heer) zijn 10 punten waard.\nDe Aas is 1 of 11 punten waard (dat mag je zelf kiezen). De dealer, jouw tegenstander, krijgt ook twee kaarten.\nAls je wil, mag je een derde kaart pakken en die punten worden bij jouw score opgeteld. De dealer mag ook een extra kaart pakken.\nMaar pas op dat je nooit over de 21 punten heengaat, want dan verlies je!\nDe speler die het dichtst bij de 21 punten komt, zonder eroverheen te gaan, wint! \n\nVeel plezier!\n"
                example_code: "```\n{print} 'BLACKJACK'\nkaarten = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Boer', 'Vrouw','Heer', 'Aas']\npunten = 0\ndealer_punten = 0\nkaart_1 = kaarten[{random}]\nkaart_2 = kaarten[{random}]\nkaart_3 = kaarten[{random}]\ndealer_kaart_1 = kaarten[{random}]\ndealer_kaart_2 = kaarten[{random}]\ndealer_kaart_3 = kaarten[{random}]\n# Punten voor kaart 1\n{if} kaart_1 == 'Boer' {or} kaart_1 == 'Vrouw' {or} kaart_1 == 'Heer':\n    punten = punten + 10\n{elif} kaart_1 == 'Aas':\n    punten = punten + 11\n{else}:\n    punten = punten + kaart_1\n# punten voor kaart 2\n{if} kaart_2 == 'Boer' {or} kaart_2 == 'Vrouw' {or} kaart_2 == 'Heer':\n    punten = punten + 10\n{elif} kaart_2 == 'Aas':\n    punten = punten + 11\n{else}:\n    punten = punten + kaart_2\n# punten voor dealer kaart 1\n{if} dealer_kaart_1 == 'Boer' {or} dealer_kaart_1 == 'Vrouw' {or} dealer_kaart_1 == 'Heer':\n    dealer_punten = dealer_punten + 10\n{elif} dealer_kaart_1 == 'Aas':\n    dealer_punten = dealer_punten + 11\n{else}:\n    dealer_punten = dealer_punten + dealer_kaart_1\n# punten voor dealer kaart 2\n{if} dealer_kaart_2 == 'Boer' {or} dealer_kaart_2 == 'Vrouw' {or} dealer_kaart_2 == 'Heer':\n    dealer_punten = dealer_punten + 10\n{elif} dealer_kaart_2 == 'Aas':\n    dealer_punten = dealer_punten + 11\n{else}:\n    dealer_punten = dealer_punten + dealer_kaart_2\n# Twee Azen\n{if} kaart_1 == 'Aas' {and} kaart_2 == 'Aas':\n    punten = 12\n{if} dealer_kaart_1 == 'Aas' {and} dealer_kaart_2 == 'Aas':\n    dealer_punten = 12\n# Scorebord\n{print} 'Jij hebt een ' kaart_1 ' en een ' kaart_2 ' (' punten ' punten)'\n{print} 'De dealer heeft een ' dealer_kaart_1 ' en een ' dealer_kaart_2 ' (' dealer_punten ' punten)'\n# Extra kaart voor de speler\nhit = {ask} 'Wil je een extra kaart?'\n{if} hit == 'ja':\n    {if} kaart_3 == 'Boer' {or} kaart_3 == 'Vrouw' {or} kaart_3 == 'Heer':\n        punten = punten + 10\n    {elif} kaart_3 == 'Aas':\n        {if} punten > 11:\n            punten = punten + 11\n        {else}:\n            punten = punten + 1\n    {else}:\n        punten = punten + kaart_3\n    {print} 'Je krijgt een extra ' kaart_3 ' (' punten ' punten)'\n{else}:\n    {print} 'Je krijgt geen extra kaarten'\n# Winnaar\n{if} punten > 21 {or} dealer_punten > punten {or} dealer_punten == 21:\n    {print} 'Je verliest'\n{elif} dealer_punten < 17:\n    {print} 'De dealer pakt een extra kaart. Het is een... ' dealer_kaart_3\n    {if} dealer_kaart_3 == 'Boer' {or} dealer_kaart_3 == 'Vrouw' {or} dealer_kaart_3 == 'Heer':\n        dealer_punten = dealer_punten + 10\n    {elif} dealer_kaart_3 == 'Aas':\n        {if} dealer_punten < 11:\n            dealer_punten = dealer_punten + 11\n        {else}:\n            dealer_punten = dealer_punten + 1\n    {else}:\n        dealer_punten = dealer_punten + dealer_kaart_3\n    {print} 'De dealer heeft nu  ' dealer_punten ' punten'\n    {if} dealer_punten < 21 {and} dealer_punten > punten:\n        {print} 'Je verliest'\n    {else}:\n        {print} 'Je wint!'\n{elif} punten > dealer_punten {and} punten < 21:\n    {print} 'Je wint!!'\n```\n"
                start_code: '# Schrijf jouw code hier'
    pressit:
        name: Toetsaanslag
        levels:
            5:
                example_code: "```\n{if} x {is} {pressed} {forward} 50\n```\n"
                story_text_2: "## als anders Ingedrukt\nJe kunt ook een `{else}` commando gebruiken met `{pressed}`. Dat `{else}` commando wordt uitgevoerd wanneer je een andere toets indrukt dan je hebt gekoppeld.\n"
                story_text: "## Toetsaanslag!\nIn de introductie is `{pressed}` als nieuwe code genoemd! \nMet `{pressed}` kun je jouw code interactiever maken. Dat betekent dat je tijdens uitvoeren invloed kunt uitoefenen op wat er wordt uitgevoerd!\nIn deze en volgende levels leer je hoe `{pressed}` werkt en wat je met `{pressed}` kunt doen.\nNaast het printen van tekst, kun je met `{pressed}` ook andere dingen besturen.\nZo kun je bijvoorbeeld ook teken commando's koppelen aan toetsen, probeer maar eens!\n"
                example_code_2: "```\n{if} y {is} {pressed} {print} 'Waanzinnig! Je drukte op de y toets!'\n{else} {print} 'Oh nee! Je miste de y toets.'\n```\n"
                start_code: '# schrijf jouw code hier'
            6:
                example_code: "```\neerste = {ask} 'Wat is jouw eerste nummer?'\ntweede = {ask} 'Wat is jouw tweede nummer?'\n{print} 'druk o voor optellen, a voor aftrekken, d voor delen of, v voor vermenigvuldigen'\n{if} o {is} {pressed} uitkomst = eerste + tweede\n{if} a {is} {pressed} uitkomst = eerste - tweede\n{if} d {is} {pressed} uitkomst = eerste / tweede\n{if} v {is} {pressed} uitkomst = eerste * tweede\n{print}'De uitkomst is ' uitkomst\n```\n"
                start_code: '# schrijf hier jouw code'
                story_text: "Wist jij dat je een rekenmachine kunt maken met `{pressed}`?\nGeef de rekenmachine twee getallen en gebruikt de v voor vermenigvuldigen.\nNu hoef jij jouw eigen rekenmachine niet meer mee te nemen!\nProbeer ook andere toetsen en berekeningen. Krijg je dan een andere uitkomst?\n"
            7:
                story_text: |
                    ## Bestuur de schildpad
                    Nu je `{repeat}` hebt geleerd kunnen we meerdere keren kijken of er een toets is ingedrukt. Dat kan je gebruiken om de schildpad te besturen.

                    ### Opdracht
                    De voorbeeldcode kijkt één keer of er een toets is ingedrukt. Pas de code aan zodat dat vaker gebeurt en maak er dan een mooie tekening meer.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
                start_code: "# schrijf jouw code hier"
            9:
                story_text: |
                    ## Oefenen met blind typen
                    We kunnen nu met `{pressed}` een programma maken om typen te oefenen. 

                    ### Opdracht
                    Maak de code af. Er moet steeds een willekeurige letter worden gekozen. Doe je het goed dan krijg je een punt erbij, bij een foute toets gaan er twee punten af!

                example_code: |
                    ```
                    punten = 1
                    letters = a, b, c, d, e
                    {repeat} 10 {times}
                        letter = _ _ _ 
                        {print} 'Typ de letter ' letter
                        {if} letter {is} {pressed}
                        _
                        _
                        _
                    ```
                start_code: "# schrijf jouw code hier"
            10:
                start_code: '# schrijf jouw code hier'
                story_text: "In dit level kun je de schildpad een figuur laten tekenen, hij staat er klaar voor.\nGeef de schildpad het startsignaal door x of y in te drukken.\nKun jij de schildpad ook een ander figuur laten tekenen?\n"
                example_code: "```\ndistances = 100, 80, 60, 40, 20, 10\n{if} x {is} {pressed}\n    {for} distance {in} distances\n        {forward} distance\n        {turn} -90\n{if} y {is} {pressed}\n    {for} distance {in} distances\n        {forward} distance\n        {turn} 90\n```\n"
            11:
                example_code: "```\nlinks = -90\nrechts = 90\nterug = 180\n{for} teller {in} {range} 1 {to} 15\n    stap = teller * 5\n    {if} w {is} {pressed}\n        {forward} stap\n    {if} s {is} {pressed}\n        {turn} terug\n    {if} a {is} {pressed}\n        {turn} links\n    {if} d {is} {pressed}\n        {turn} rechts\n```\n"
                start_code: '# schrijf jouw code hier'
                story_text: "Nu je bekent bent met `{for} ... {in} {range} ... {to} ...`, kun je dit ook gebruiken voor `{pressed}`!\nAls voorbeeld probeer de schildpad te bewegen! De schildpad groeit iedere keer dat je een gekoppelde toets indrukt.\nOp deze manier kan de schildpad ieder stap iets verder bewegen.\n"
            12:
                story_text: "Ken jij videogames? Je loopt in hoog gras en plotseling komt een heel verdachte muis jou tegemoet.\nWat ga je doen?\nIn dit niveau gaan we een klein menu maken met opties.\nAls je tekst vaker nodig hebt, is het handig om het in een variabel op te slaan.\nOptie, ik koos jou!\n"
                start_code: '# schrijf jouw code hier'
                example_code: "```\nkeuze = 'Jij kiest: '\n{print} 'Een verdachte muis verschijnt!'\n{print} 'Kies een optie door een letter in te drukken: (n)et, (k)at, (z)ak, (r)en'\n{if} n {is} {pressed}\n    {print} keuze + 'net'\n    {print} 'Je probeert de muis te vangen met een net..'\n    {sleep}\n    {print} 'Gefeliciteerd, het is je gelukt!'\n{if} k {is} {pressed}\n    {print} keuze + 'kat'\n    {print} 'Je laat jouw kat los...'\n    {sleep}\n    {print} 'De muis werd bang en rende weg!'\n{if} z {is} {pressed}\n    {print} keuze + 'bag'\n    {print} 'De muis sprong in de zak!'\n{if} r {is} {pressed}\n    {print} keuze + 'run'\n    {print} 'Je bent veilig ontsnapt!'\n```\n"
            13:
                start_code: '# schrijf jouw code hier'
                story_text: "Nu dat we `{and}` en `{or}` kunnen gebruiken, kunnen we dat ook met `{pressed}`!\nStel je voor dat de schildpad een super sprong kan maken door op de `p` te drukken!\n\nMaar, let op, hij kan dit alleen als hij eerst links en rechts heeft gekeken!\n"
                example_code: "```\nstap = 10\nlinks = -90\nrechts = 90\nterug = 180\nkeek_links = 0\nkeek_rechts = 0\n{repeat} 40 {times}\n    {if} w {is} {pressed}\n        {forward} stap\n    {if} s {is} {pressed}\n        {turn} terug\n    {if} a {is} {pressed}\n        {turn} links\n        keek_links = 1\n    {if} d {is} {pressed}\n        {turn} rechts\n        keek_rechts = 1\n    {if} p {is} {pressed}\n        {if} keek_links {is} 1 {and} keek_rechts {is} 1\n            {forward} 40\n            keek_links = 0\n            keek_rechts = 0\n```\n"
            14:
                start_code: '# schrijf jouw code hier'
                story_text: "Nu dat je vergelijkings tekens hebt geleerd, kunnen we die ook gebruiken met `{pressed}`!\nBedenk weer dat de schildpad een super sprong kan maken door op de `p` te drukken! \n\nNu echter alleen om de 5 stappen of om de 4 draaien.\n"
                example_code: "```\nstap = 15\nlinks = -90\nrechts = 90\nterug = 180\nstappen = 5\ndraaien = 4\n{repeat} 40 {times}\n    {if} w {is} {pressed}\n        {forward} stap\n        stappen = stappen - 1\n    {if} s {is} {pressed}\n        {turn} terug\n    {if} a {is} {pressed}\n        {turn} links\n        draaien = draaien - 1\n    {if} d {is} {pressed}\n        {turn} rechts\n        draaien = draaien - 1\n    {if} p {is} {pressed}\n        {if} stappen <= 0 {or} draaien <= 0\n            {forward} stap * 3\n            stappen = 5\n            draaien = 4\n```\n"
            15:
                start_code: '# schrijf jouw code hier'
                example_code: "```\nstap = 15\nlinks = -90\nrechts = 90\nterug = 180\nstappen = 5\ndraaien = 2\nmoe_na = 15\n{while} moe_na > 0\n    {if} w {is} {pressed}\n        {forward} stap\n        stappen = stappen - 1\n    {if} s {is} {pressed}\n        {turn} terug\n    {if} a {is} {pressed}\n        {turn} links\n        draaien = draaien - 1\n    {if} d {is} {pressed}\n        {turn} rechts\n        draaien = draaien - 1\n    {if} p {is} {pressed}\n        {if} stappen <= 0 {or} draaien <= 0\n            {forward} stap * 4\n            stappen = 5\n            draaien = 2\n    moe_na = moe_na - 1\n```\n"
                story_text: "Nu je ook `{while}` lussen kent, gaan we die ook met de schildpad gebruiken!\nDe schildpad kan deze keer maximaal 15 stappen of draaien maken, voordat hij moe wordt. \nProbeer zover mogelijk te komen, voordat de schildpad moe is \nJe kunt super sprongen maken na 2 draaien of 5 stappen.\n"
            17:
                start_code: '# schrijf jouw code hier'
                story_text: "Nu je ook met `{elif}` kunt werken, gaan we die ook met `{pressed}` gebruiken! Let op: `{elif} ... {is} {pressed}` kan niet! Daarom gaan we het `{elif}` commando binnen een `{pressed}` commando gebruiken (dat noemen we nesten). We voegen ook `:` toe om de code te laten werken. Stel je weer voor dat de schildpad een super sprong kan maken als  jij `p` indrukt. Maar dit alleen na 5 stappen of 4 draaien.\n"
                example_code: "```\nstap = 15\nlinks = -90\nrechts = 90\nterug = 180\nstappen = 5\ndraaien = 4\n{repeat} 40 {times}\n    {if} w {is} {pressed}:\n        {forward} stap\n        stappen = stappen - 1\n    {if} s {is} {pressed}:\n        {turn} terug\n    {if} a {is} {pressed}:\n        {turn} links\n        draaien = draaien - 1\n    {if} d {is} {pressed}:\n        {turn} rechts\n        draaien = draaien - 1\n    {if} p {is} {pressed}:\n        {if} stappen <= 0 {or} draaien <= 0:\n            {forward} stap * 3\n            stappen = 5\n            draaien = 4\n        {elif} stappen > 0:\n            {print} \"Je moet nog mee stappen maken, of draaien voordat je een super sprong kunt maken!\"\n```\n"
            16:
                story_text: "Laten we wat gaan bewegen met een spelletje Twister!\nIedereen klaar? Druk op X voor de volgende zet!\n"
                example_code: "```\nledematen = ['Rechter Hand', 'Linker Hand', 'Rechter Voet', 'Linker Voet']\nkleuren = ['Blauw', 'Groen', 'Rood', 'Geel']\n{repeat} 20 {times}\n    l = ledematen[{random}]\n    k = kleuren[{random}]\n    {if} x {is} {pressed}\n        {print} l + ' op ' + k + '!'\n```\n"
                start_code: '# schrijf jouw code hier'
        description: Probeer een knop op het toetsenbord aan een commando te koppelen!
        default_save_name: Toetsaanslag
    years:
        name: "Oud en Nieuw"
        description: "Aftellen naar het nieuwe jaar!"
        default_save_name: "Oud en Nieuw"
        levels:
            11:
                story_text: |
                    ## Oud en Nieuw
                    In this level kan je `{for}` en `{in}` `{range}` gebruiken om af te tellen met Oud en Nieuw.

                    ### Opdracht
                    Maak de code af zodat er wordt afgeteld. Je mag zelf kiezen vanaf welk getal. Voeg ook een pauze toe zodat er steeds een tel voorbij gaat voor er een nieuw getal komt.
                example_code: |
                    ```
                    {for} getal {in} {range} _ {to} _
                        {print} getal
                    {print} 'Gelukkig Nieuwjaar!
                    ```
                start_code: "# Jouw code komt hier"
