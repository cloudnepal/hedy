adventures:
    story:
        levels:
            13:
                story_text: "## Story\nBy using the `{and}` and `{or}` commands, you can shorten your stories. For example, check out the dragon story.\n\n### Excercise\nCan you make your own adventure minigame like this?\n"
                example_code: "```\nsword = 'lost'\ngame = 'on'\n{print} 'Our hero is walking through the forest'\n{print} 'The path splits two ways'\n{for} i {in} {range} 0 {to} 2\n    {if} game {is} 'on'\n        path = {ask} 'Which path should she choose?'\n        {if} path {is} 'left' {and} sword {is} 'found'\n            {print} 'Our hero comes across a dragon!'\n            {print} 'Luckily our hero has a sword to defeat the beast!'\n            game = 'over'\n        {if} path {is} 'left' {and} sword {is} 'lost'\n            {print} 'Our hero finds a dragon, but she doesnt have any weapons!'\n            {print} 'Our hero is beaten by the dragon...'\n            {print} 'Try again'\n            game = 'over'\n        {if} path {is} 'right' {and} sword {is} 'found'\n            {print} 'You have already found the sword. There is nothing left here.'\n            {print} 'She walks back'\n        {if} path {is} 'right' {and} sword {is} 'lost'\n            {print} 'Our hero finds a sword'\n            {print} 'This could come in very handy'\n            sword = 'found'\n```\n"
                start_code: '# place your code here'
            15:
                story_text: "## Story\nUsing the `{while}` loop can make your stories more interesting. For example, you can use `{while} game {is} 'on'` so you can play until the game is over.\nOr you can use `{while} sword {is} 'lost'` so the player can't continu the game until they have found something.\n"
                example_code: "```\nkeys = 'lost'\n{print} 'You are standing in your garden and you have lost your keys.'\n{print} 'Where do you want to look for them?'\n{print} 'You can choose: tree, flowerbed, rock, postbox'\n{while} keys == 'lost'\n    location = {ask} 'Where do you want to look?'\n    {if} location == 'flowerbed'\n        {print} 'Here they are!'\n        keys = 'found'\n    {else}\n        {print} 'Nope they are not at the ' location\n{print} 'Now you can enter the house!'\n```\n"
                start_code: '# place your code here'
            1:
                story_text_2: "### Opgave\nKan du lave din egen historie i Hedy nu og ved at bruge `{print}` , `{ask}` og `{echo}`?\n"
                story_text: "## Lav en historie\nPå niveau 1 kan du lave en historie med en hovedperson du selv indtaster.\n\nPå første linje, brug `{ask}` til at spørge hvem hovedpersonen skal være.\n\nEfter den første linje, start med `{print}` hvis sætningen skal printes.\nBrug `{echo}` hvis du vil have din hovedpersonen i slutningen af sætningen.\n"
                example_code: "```\n{ask} Hovedpersonen i denne historie\n{print} Hovedpersonen går nu ind i skoven\n{echo} Han er en lidt bange,\n{print} Han hører mærkelige lyde alle steder\n{print} Han er bange for at det en hjemsøgt skov\n```\n"
                start_code: '{print} Din historie starter her'
            2:
                start_code: '{print} Din historie'
                story_text: "## Story\nPå niveau 2 kan du gøre din historie sjovere. Din hovedperson kan nu være hvor som helst i sætningen.\n\nDu bliver nødt til at programmere en lille smule mere for at få det til at ske. Du skal nu først give en hovedperson et navn.\n\nSå kan du sætte det navn ind alle steder i en sætning.\n\n### Opgave\nKan du selv lave en historie hvor du bruger en variabel? Kan du tilføje endnu flere variabler?\n"
                example_code: "```\nnavn {is} {ask} Hvad hedder hovedpersonen?\n{print} navn løber nu rundt i skoven\n{print} navn er lidt bange\n{print} Pludselig hører han en mærkelig lyd...\n{sleep}\n{print} navn er bange for at det er en hjemsøgt skov\n```"
                story_text_2: "### Exercise\nNow it's time to add variables to your own story that you've made in the previous level.\nGo to 'My programs', look for your level 1 story adventure and copy the code. Paste the code in your input screen in this level.\n\nThis code won't work in this level, because you have not used variables yet.\nChange the `{ask}` commands and `{echo}` commands in your code to the correct form that you've learned in this level.\n\n**Extra** Add a sleep command to your code to build up tension in your story.\n"
            5:
                start_code: "{print} 'Her begynder din historie!'"
                story_text: "## Historie\nPå dette niveau kan du programmere forskellige slutninger, hvilket vil gøre din historie endnu sjovere.\n\n### Opgave\nFind på to forskellige slutninger til din historie, for eksempel:\n\n- Prinsessen går gennem skoven\n- Hun møder et monster\n\n- Lykkelig slutning: Hun griber sit sværd og monstret løber hurtigt sin vej\n- Ulykkelig slutning: Monstret spiser prinsessen\n\nDu kan også sikre at et navn bliver indtastet igen. Det fungerer ligesom på det forrige niveau. Du kan kombinere det med `{if}`, og så har du allerede lavet et helt program!\n"
                example_code: "```\nnavn {is} {ask} 'Hvem går i skoven?'\n{print} navn ' går gennem skoven'\n{print} navn ' møder et monster'\nslutning {is} {ask} 'Vil du have en lykkelig eller ulykkelig slutning?'\n{if} slutning {is} lykkelig {print} navn ' griber sit sværd og monstret løber hurtigt sin vej'\n{else} {print} 'Monstret æder ' navn\n```\n"
            8:
                start_code: '# place your code here'
                story_text: "## Story\nIn this level you can use multiple lines in your {if} commands, this way you can upgrade your happy or sad ending!\n\n### Excercise\nCan you make your own story with two different endings?\n"
                example_code: "```\n{print} 'OH NO! The T-rex is closing in!'\nend = {ask} 'Do you want a happy or a sad ending?'\n{if} end {is} happy\n    {print} 'Just in time Richard jumps back into the time machine!'\n    {print} 'Michael types in the code and...'\n    {print} '\U0001F4A5ZAP!\U0001F4A5'\n    {print} 'They are back in their garage'\n{else}\n    {print} 'Michael yells COME ON RICHARD! RUN FASTER!'\n    {print} 'But Richard is too slow...'\n    {print} 'The T-rex closes in and eats him in one big bite!\U0001F996'\n```\n"
            9:
                start_code: '# place your code here'
                story_text: "## Story\nIn this level you can use nesting to put `{if}`, `{repeat}` or `{for}` commands inside other `{if}`, `{repeat}` or `{for}` commands. This gives you many options and really helps you to make your story interactive.\n"
                example_code: "```\n{print} 'Robin is walking downtown'\nlocation = {ask} 'Is Robin going into a shop, or does she go home?'\n{if} location {is} shop\n    {print} 'She enters the shop.'\n    {print} 'Robin sees an interesting looking book'\n    book = {ask} 'Does Robin buy the book?'\n    {if} book {is} yes\n        {print} 'Robin buys the book and goes home'\n    {else}\n        {print} 'Robin leaves the shop and goes home'\n{else}\n    {print} 'Robin goes home'\n```\n"
            3:
                story_text: "## Historie\nPå niveau 3 kan du gøre din historie endnu sjovere. Du kan bruge tilfældighed til et monster, dyr eller anden forhindring, sådan her:\n"
                example_code: "```\ndyr {is} \U0001F994, \U0001F43F, \U0001F989, \U0001F987\n{print} Nu hører han lyden af et dyr {at} {random}\n```\n"
                story_text_2: "Kommandoen `{add}` kan også hjælpe dig i din historie.\n"
                example_code_2: "```\n{print} Han hører en lyd\ndyr {is} \U0001F43F, \U0001F994, \U0001F987, \U0001F989\ndyret {is} {ask} Hvad tror du det er?\n{add} dyret {to_list} dyr\n{print} det var et dyr {at} {random}\n```\n"
                story_text_3: "Dette er et eksempel med `{remove}` kommandoen i din historie\n\n### Opgave\nKan du bruge de 3 nye kommandoer `{at} {random}` , `{add} {to}` og `{remove} {from}` i din egen historie?\n"
                example_code_3: "```\n{print} Hans rygsæk blev alt for tung.\n{print} I den var der en flaske med vand, en lommelygte og en mursten.\ntaske {is} vand, lommelygte, mursten\nefterlad {is} {ask} Hvilken ting skal han efterlade?\n{remove} efterlad {from} taske\n```\n"
                start_code: '{print} Din historie'
            4:
                story_text: "## Historie\nDu har måske lagt mærke til at der stadig er et problem i de tidligere niveauer. Prøvede du at printe en sætning med ordet navn? i.e. `{print}` mit navn er navn.\nDette kan du løse på dette niveau. Du skal bruge anførselstegn om alt det du vil printe.\n"
                example_code: "```\nnavn {is} Hans\n{print}  _ Hovedpersonens navn er _ navn\n{print} navn  _ går nu ind i skoven _\n{print} navn _ er en smule bange _\ndyr {is} \U0001F994, \U0001F43F, \U0001F989, \U0001F987\n{print} _ Han hører lyden af _ dyr {at} {random}\n{print} navn _ er bange for at det er en hjemsøgt skov _\n```\n"
                start_code: "{print} 'Din historie vil blive printet her!'"
            7:
                story_text: "## Historie\nI en historie, gentages nogle ord flere gange. For eksempel, når nogen råber på hjælp eller synger en sang.\nDu kan indsætte disse gentagelser i din historie, på dette niveau med `{repeat}`.\n\n### Opgave\nTilføj en gentagelse til din egen historie. Gå tilbage til dine gemte programmer, vælg dit historieprogram fra niveau 6 og\nfind en linje der indeholder {print} og gentag det!\n"
                example_code: "```\n{print} 'The prince kept calling for help'\n{repeat} 5 {times} {print} 'Help!'\n{print} 'Why is nobody helping me?'\n```\n"
                start_code: "{repeat} 5 {times} {print} 'Help!'"
            10:
                story_text: "## Story\nIn this level you can use the {for} command in your story. In this way you could easily program the children's book 'brown bear, brown bear, what do you see'.\n"
                example_code: "```\nanimals = red bird, black sheep, green frog, yellow duck, little child\n{print} 'brown bear'\n{print} 'brown bear'\n{print} 'What do you see?'\n{for} animal {in} animals\n    {print} 'I see a ' animal ' looking at me'\n    {print} animal\n    {print} animal\n    {print} 'What do you see?'\n{print} 'I see all the animals looking at me!'\n```\n"
                start_code: '# place your code here'
            12:
                story_text: "## Story\nIn this level you can use the quotation marks to save multiple words in a variable."
                example_code: "```\nname = 'The Queen of England'\n{print} name ' was eating a piece of cake, when suddenly...'\n```\n"
                start_code: '# place your code here'
        name: Historie
        description: Historie
        default_save_name: Historie
    pressit:
        levels:
            13:
                example_code: "```\nstepsize = 10\nleft = -90\nright = 90\naround = 180\nlooked_left = 0\nlooked_right = 0\n{repeat} 40 {times}\n    {if} w {is} {pressed}\n        {forward} stepsize\n    {if} s {is} {pressed}\n        {turn} around\n    {if} a {is} {pressed}\n        {turn} left\n        looked_left = 1\n    {if} d {is} {pressed}\n        {turn} right\n        looked_right = 1\n    {if} p {is} {pressed}\n        {if} looked_left {is} 1 {and} looked_right {is} 1\n            {forward} 40\n            looked_left = 0\n            looked_right = 0\n```\n"
                story_text: "Now that you learned how to use `{and}` and `{or}`, we can use it with `{pressed}`too!\nImagine the turtle being able to do a superjump forward.\nBy pressing `p` the turtle can make a superjump!\nHowever, the turtle can only do this jump if he turns left and right first!\n"
                start_code: '# place your code here'
            14:
                story_text: "Now that you learned how to use operators, we can use it with `{pressed}` too!\nImagine the turtle being able to do a superjump forward.\nBy pressing `p` the turtle can make a superjump!\nHowever, the turtle can only do this jump every 5 steps or every 4 turns\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 4\n{repeat} 40 {times}\n    {if} w {is} {pressed}\n        {forward} stepsize\n        jumptime = jumptime - 1\n    {if} s {is} {pressed}\n        {turn} around\n    {if} a {is} {pressed}\n        {turn} left\n        spins = spins - 1\n    {if} d {is} {pressed}\n        {turn} right\n        spins = spins - 1\n    {if} p {is} {pressed}\n        {if} jumptime <= 0 {or} spins <= 0\n            {forward} stepsize * 3\n            jumptime = 5\n            spins = 4\n```\n"
                start_code: '# place your code here'
            15:
                story_text: "Now that you have learned about the `{while}` loops, you can start using it on the turtle!\nThe turtle is now only allowed to take only 15 steps or turn 15 times, before he gets tired!\nTry to get as far as possible before the turtle gets tired! You can use your superjump after 2 turns\nor 5 steps.\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 2\ntired_in = 15\n{while} tired_in > 0\n    {if} w {is} {pressed}\n        {forward} stepsize\n        jumptime = jumptime - 1\n    {if} s {is} {pressed}\n        {turn} around\n    {if} a {is} {pressed}\n        {turn} left\n        spins = spins - 1\n    {if} d {is} {pressed}\n        {turn} right\n        spins = spins - 1\n    {if} p {is} {pressed}\n        {if} jumptime <= 0 {or} spins <= 0\n            {forward} stepsize * 4\n            jumptime = 5\n            spins = 2\n    tired_in = tired_in - 1\n```\n"
                start_code: '# place your code here'
            16:
                story_text: "Lets move a little with a game of Twister!\nWhen everyone is ready, press the x key for the next move!\n"
                example_code: "```\nlimbs = ['Right Hand', 'Left Hand', 'Right Foot', 'Left Foot']\ncolours = ['Blue', 'Green', 'Red', 'Yellow']\n{repeat} 20 {times}\n    l = limbs[{random}]\n    c = colours[{random}]\n    {if} x {is} {pressed}\n        {print} l + ' on ' + c + '!'\n```\n"
                start_code: '# place your code here'
            17:
                story_text: "Now that you learned how to use `{elif}`, we can use it with `{pressed}`too! Be aware, `{elif} ... {is} {pressed}` is not possible! That is why we are going to nest some `{elif}` statements into the `{pressed}` options. We also had to add `:` to the code to make everything work! Imagine the turtle being able to do a superjump forward. By pressing `p` the turtle can make a superjump! However, the turtle can only do this jump every 5 steps or every 4 turns\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 4\n{repeat} 40 {times}\n    {if} w {is} {pressed}:\n        {forward} stepsize\n        jumptime = jumptime - 1\n    {if} s {is} {pressed}:\n        {turn} around\n    {if} a {is} {pressed}:\n        {turn} left\n        spins = spins - 1\n    {if} d {is} {pressed}:\n        {turn} right\n        spins = spins - 1\n    {if} p {is} {pressed}:\n        {if} jumptime <= 0 {or} spins <= 0:\n            {forward} stepsize * 3\n            jumptime = 5\n            spins = 4\n        {elif} jumptime > 0:\n            {print} \"you need to take more steps or turns before you can superjump!\"\n```\n"
                start_code: '# place your code here'
            5:
                story_text: "## Press it!\nIn the introduction you were also told about the new keyword `{pressed}`! Using `{pressed}`\ncan make coding much more interactive, and you can have live control of what is executed!\nIn the upcoming levels you will learn how `{pressed}` makes this possible and what uses `{pressed}`\nhas.\nBesides printing text, there is a whole other variety of uses for `{pressed}`\nFor example, you can also link turtle commands to keys! Try it!\n"
                story_text_2: "## If Else Pressed\nYou can also assign an `{else}` statement to `{pressed}`. The `{else}` statement will be executed whenever you press a key other than the key you assigned.\n"
                example_code_2: "```\n{if} y {is} {pressed} {print} 'Amazing! You pressed the y key!'\n{else} {print} 'Oh no! You did not press the y key.'\n```\n"
                start_code: '# place your code here'
                example_code: "```\n{if} x {is} {pressed} {forward} 50\n```\n"
            6:
                story_text: "Did you know you can also make a calculator using `{pressed}`?\nGive the calculator two numbers and press the m key to multiply.\nNow you don't have to bring your own!\nTry other keys and see what happens! Do you get a different result?\n"
                example_code: "```\nfirst = {ask} 'what is your first number?'\nsecond = {ask} 'what is your second number?'\n{print} 'press a to add, s to substract, d to divide, m to multiply'\n{if} a {is} {pressed} result = first + second\n{if} s {is} {pressed} result = first - second\n{if} d {is} {pressed} result = first / second\n{if} m {is} {pressed} result = first * second\n{print} 'The answer is ' result\n```\n"
                start_code: '# place your code here'
            7:
                story_text: "## Controlling the turtle\nNow that you have learned about `{repeat}`, we can press keys multiple times! You can use it to make the turtle walk forward and turn.\n\n### Exercise\nThe example code only checks the key once. Change the code so that you can press the keys many times, and use use code to draw something nice.\n"
                example_code: "```\n{if} x {is} {pressed} {forward} 15 {else} {turn} 90\n```\n"
                start_code: '# place your code here'

            9:
                story_text: "Now that you know how to nest multiple statements, you can also do this with {pressed}!\nBy nesting a pressed in a {repeat} loop, you can repeatedly press buttons and make something happen.\nNow we know you could do this before, but by using the indents you have much more overview!\nTry it counting to 5, for example!\n"
                example_code: "```\ntotal = 1\n{repeat} 5 {times}\n    {if} x {is} {pressed}\n        {print} total\n        {print} 'keep pressing!'\n        total = total + 1\n```\n"
                start_code: '# place your code here'
            10:
                story_text: "In this level you can make the turtle draw you a figure. The turtle is raring to go.\nGive the turtle the starting signal by pressing the x or y key on your keyboard.\nCan you let the turtle draw you another figure?\n"
                example_code: "```\ndistances = 100, 80, 60, 40, 20, 10\n{if} x {is} {pressed}\n    {for} distance {in} distances\n        {forward} distance\n        {turn} -90\n{if} y {is} {pressed}\n    {for} distance {in} distances\n        {forward} distance\n        {turn} 90\n```\n"
                start_code: '# place your code here'
            11:
                story_text: "Now that you have learned of the `{for} ... {in} {range} ... {to} ...` rule, you can use it for `{pressed}`\ntoo! for example, try moving the turtle! The turtle grows everytime you press a linked button.\nThis way the turtle can move further every step!\n"
                example_code: "```\nleft = -90\nright = 90\naround = 180\n{for} counter {in} {range} 1 {to} 15\n    stepsize = counter * 5\n    {if} w {is} {pressed}\n        {forward} stepsize\n    {if} s {is} {pressed}\n        {turn} around\n    {if} a {is} {pressed}\n        {turn} left\n    {if} d {is} {pressed}\n        {turn} right\n```\n"
                start_code: '# place your code here'
            12:
                story_text: "Are you familiar with videogames? You walk into tall grass and are suddenly approached by\na very suspicious mouse. What will you do?\nIn this level we will make a small menu with different kinds of options.\nStoring text into a variable is quite handy for repeated uses.\nOption, I choose you!\n"
                example_code: "```\nchoose = 'You chose option: '\n{print} 'A wild mouse appeared!'\n{print} 'Choose an option and press first letter: (n)et, (c)at, (b)ag, (r)un'\n{if} n {is} {pressed}\n    {print} choose + 'net'\n    {print} 'You attempt to catch the mouse with a net..'\n    {sleep}\n    {print} 'Congratulations you did it!'\n{if} c {is} {pressed}\n    {print} choose + 'cat'\n    {print} 'You send out your cat'\n    {sleep}\n    {print} 'The mouse got scared and ran away!'\n{if} b {is} {pressed}\n    {print} choose + 'bag'\n    {print} 'The mouse jumped into you bag!'\n{if} r {is} {pressed}\n    {print} choose + 'run'\n    {print} 'You got away safely!'\n```\n"
                start_code: '# place your code here'
        name: Key presses
        description: Try linking a keyboard key to a command!
        default_save_name: Pressit
    rock:
        name: Rock, paper, scissors
        description: Make your own rock, paper, scissors game
        default_save_name: Rock
        levels:
            1:
                story_text: "## Rock, paper, scissors\nIn level 1 you can start with a rock, paper, scissors  game.\n\nWith `{ask}` you can make a choice, and with `{echo}` you can repeat that choice.\n"
                example_code: "```\n{print} what do you choose?\n{ask} choose from rock, paper or scissors\n{echo} so your choice was:\n```\n"
                story_text_2: "### Excercise\nInstead of using words, you could also use emojis: ✊✋✌\nCan you create a code using emojis?\n"
                example_code_2: "```\n{print} what do you choose?\n{ask} choose from _\n{echo} so your choice was:\n```\n"
                start_code: "{print} Welcome to your own rock scissors paper!\n{ask} What will you choose?\n"
            2:
                story_text: "## Rock, paper, scissors\nIn this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!\n"
                example_code: "```\n_ {is} {ask} rock, paper, or scissors?\n{print} I choose _\n```\n"
                start_code: '# place your code here'
                story_text_2: "### Exercise\nCopy the example code to your input screen by clicking the yellow button.\nFinish the code by filling in the right commands on the blanks.\n"
            3:
                story_text: "## Rock, paper, scissors\n\nIn this level we can enter lists and choose things from them.\nYou first make a list with `{is}`. Then you can let the computer choose something from the list with `{at} {random}`.\nFor example, you can let the computer pick from rock, paper and scissors.\n"
                example_code: "```\nchoices {is} rock, paper, scissors\n{print} choices {at} {random}\n```\n"
                story_text_2: "### Excercise\nNow you only have one player, so can you add a second player?\nYou can even use variables to name player 1 and player 2.\n"
                example_code_2: "```\nchoices {is} rock, paper, scissors\n{print} player 1 chooses... choices {at} {random}\n{print} player 2 _\n```\n"
                start_code: '{print} Welcome to your own rock scissors paper!'
            4:
                story_text: "## Rock, paper, scissors\nIn this level we can further program rock, paper, scissors. But if you want to add text, you have to use quotation marks here too.\nDo you complete the code by entering the correct commands or characters on the underscores?\n"
                start_code: "{print} 'Welcome to your own rock scissors paper!'"
            5:
                story_text: "## Rock, paper, scissors\nIn this level we can determine who won.\nFor that you need the new `{if}` code.\n\nSave your choice with the name of choice and the choice of computer as computer choice.\nThen you can use `{if}` to see if they are the same or different.\nWill you finish the code?\n"
                example_code: "```\noptions {is} rock, paper, scissors\ncomputer_choice {is} _\nchoice {is} {ask} 'What do you choose?'\n{print} 'you chose ' _\n{print} 'computer chose ' _\n{if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'\n```\n\nFill in the correct code on the blanks to see {if} it is a draw.\n"
                start_code: "{print} 'Welcome to your own rock scissors paper!'"
            9:
                start_code: '# place your code here'
                story_text: "## Rock, paper, scissors\nIn this level you can program the whole rock, paper, scissors game by nesting the `{if}` commands. Can you finish the code?\n"
                example_code: "```\nchoices {is} rock, paper, scissors\nyour_choice {is} {ask} 'What do you choose?'\n{print} 'You choose ' your_choice\ncomputer_choice {is} choices {at} {random}\n{print} 'The computer chooses ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'Tie'\n{if} computer_choice {is} rock\n    {if} your_choice {is} paper\n        {print} 'You win!'\n    {if} your_choice {is} scissors\n        {print} 'You lose!'\n# finish this code\n```\n"
            10:
                story_text: "## Rock, Paper, Scissors\nFeeling too lazy to play the game yourself? Let Hedy play it for you!\nYou only have to fill in the names of the players.\n"
                example_code: "```\nchoices = rock, paper, scissors\nplayers = _\n{for} player {in} players\n     {print} player ' chooses ' choices {at} {random}\n```\n"
                start_code: '# place your code here'
            15:
                example_code: "```\nwon = 'no'\noptions = 'rock', 'paper', 'scissors'\n{while} won == 'no'\n    your_choice = {ask} 'What do you choose?'\n    computer_choice = options {at} {random}\n    {print} 'you chose ' your_choice\n    {print} 'the computer chose ' computer_choice\n    {if} computer_choice == your_choice\n        {print} 'Tie!'\n    {if} computer_choice == 'rock' {and} your_choice == 'scissors'\n        {print} 'You lose!'\n    {if} computer_choice == 'rock' {and} your_choice == 'paper'\n        {print} 'You win!'\n        won = 'yes'\n_\n```\n"
                story_text: "## Rock, Paper, Scissors\nPlay until you beat the computer! But first, finish the example code...\n"
                start_code: '# place your code here'
            13:
                story_text: "## Rock, paper, scissors\nWith the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.\n"
                example_code: "```\noptions = 'rock', 'paper', 'scissors'\nyour_choice = {ask} 'What do you choose?'\ncomputer_choice = options {at} {random}\n{print} 'You choose ' your_choice\n{print} 'The computer chooses ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'Tie'\n{if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'\n    {print} 'You win!'\n{if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'\n    {print} 'The computer wins!'\n_\n```\n"
                start_code: '# place your code here'
    years:
        name: New Year's
        description: Countdown to the new year!
        default_save_name: New Year's Countdown
        levels:
            11:
                story_text: "## Songs\nIn this level you can use the `{for} i {in} {range}` command to countdown to the New Year.\n\n### Excercise\nFill in the blanks and make the code work!\n"
                example_code: "## Countdown\n```\n{for} _ {in} _ 10 {to} 1\n    {print} i\n{print} 'Happy New Year!'\n```\n"
                start_code: '# place your code here'
    parrot:
        name: Parrot
        description: Create your own online pet parrot that will copy you!
        default_save_name: Parrot
        levels:
            1:
                story_text: "## Parrot\nCreate your own online pet parrot that will copy you!\n"
                example_code: "```\n{print} Im Hedy the parrot\n{ask} whats your name?\n{echo}\n{echo}\n```\n"
                story_text_2: "### Excercise\nCan you make the parrot ask a different question? Fill in the blanks in the example!\n"
                example_code_2: "```\n{print} Im Hedy the parrot\n{ask} _\n{echo}\n{echo}\n"
                start_code: "{print} Im Hedy the parrot\n{ask} What is your name?\n{echo}\n{echo}\n"
            2:
                story_text: "## Parrot\nCreate your own online pet parrot that will copy you!\n"
                example_code: "```\n{print} Im Hedy the parrot\nname {is} {ask} whats your name?\n{print} name\n{sleep}\n{print} squawk\n{sleep}\n{print} name\n```\n"
                story_text_2: "### Excercise\nYou can use variables to make the parrot say more than only your name. Can you complete this code?\n"
                example_code_2: "```\n{print} Im Hedy the parrot\nname {is} {ask} whats your name?\n{print} name\n{sleep}\n{print} name\nsurname {is} {ask} whats your surname?\n_\n{sleep}\n_\n```\n"
                start_code: '{print} Im Hedy the parrot!'
            3:
                story_text: "## Parrot\nTeach your parrot a new word with `{add}`.\n### Excercise\nHow can you make your parrot say multiple words?\n"
                example_code: "```\nwords {is} squawk, Hedy\n{print} Train your parrot!\nnew_word {is} {ask} Which word do you want to teach them?\n{add} new_word {to_list} words\n{print} \U0001F9D2 Say new_word, Hedy!\n{print} \U0001F99C words {at} {random}\n```\n"
                start_code: '# place your code here'
            4:
                story_text: "## Parrot\nIn this level we have to use quotation marks with the commands `{ask}` and `{print}`.\nCan you complete the code by adding quotation marks?\n"
                example_code: "```\nwords {is} squawk, Hedy\n{print} _ Train your parrot! _\nnew_word {is} {ask} _ Which word do you want to teach them? _\n{add} new_word {to_list} words\n{print} _ \U0001F9D2 Say _ new_word _, Hedy!_\n{print} _ \U0001F99C _ words {at} {random}\n```\n"
                start_code: '# Write your code here'
            5:
                story_text: "## Parrot\nReward your parrot if it says the correct word!\nFinish the code by filling in the 4 missing commands.\n"
                example_code: "```\nwords {is} squawk, Hedy\n{print} 'Train your parrot!'\nnew_word {is} {ask} 'Which word do you want to teach them?'\n{add} new_word {to_list} words\nsaid_word {is} words {at} {random}\n{print} '\U0001F9D2 Say ' new_word ', Hedy!'\n{print} '\U0001F99C ' said_word\n_ said_word {is} new_word _ '\U0001F9D2 Great job, Hedy! \U0001F36A'\n_ _ '\U0001F9D2 No, Hedy! Say ' new_word\n```\n"
                start_code: '# place your code here'
    songs:
        description: Print a song
        default_save_name: Song
        levels:
            6:
                story_text: "## Songs\nSongs often contain a lot of repetition. Sometimes the repetition is also based on counting.\nFor example, in the well-known song 'Bottles of beer'. You can program that song with a little math.\n\nTip: Use the read aloud function to let Hedy sing the song to you!\n\n### Excercise\nYou can now repeat lines 2 to 7 as many times as you want by copying the lines.\n"
                example_code: "```\nverse = 99\n{print} verse ' bottles of beer on the wall'\n{print} verse ' bottles of beer'\n{print} 'Take one down, pass it around'\nverse = verse - 1\n{print} verse ' bottles of beer on the wall'\n{sleep}\n```\n"
                story_text_2: "## 5 Little Monkeys jumping on the bed\nThis children's song counts down from 5 little monkeys to 1 monkey.\nIf you copy line 2 - 7 and paste it under the the code, you can sing the whole song!\n"
                example_code_2: "```\nnumber = 6\nnumber = number - 1\n{print} number ' little monkeys jumping on the bed'\n{print} 'One fell off and bumped his head'\n{print} 'Mama called the doctor and the doctor said'\n{print} 'NO MORE MONKEYS JUMPING ON THE BED!'\n{sleep}\n```\n"
                start_code: "{print} 'Lets sing!'"
            7:
                story_text: "## Songs\nSongs often contain a lot of repetition. For example... Baby Shark! If you sing it, you keep singing the same thing:\n\nBaby Shark tututudutudu <br>\nBaby Shark tututudutudu <br>\nBaby Shark tututudutudu <br>\nBaby Shark\n\n### Exercise\nYou can print the song Baby Shark with a `{repeat}`? Finish the code by replacing the blanks?\n**Extra** After Baby Shark you can of course also program other songs. There are many songs with repetition!\nCan you think of one more song and print it?\n"
                example_code: "```\n{repeat} _ _ {print} 'Baby Shark tututudutudu'\n{print} 'Baby Shark'\n```\n"
                start_code: "{print} 'Baby Shark'"
            8:
                story_text: "## Songs\nIn a previous level you've programmed the song 'Bottles of beer'. You made one verse and then had to copy the verses 99 times. In this level you can repeat the song 99 times, just by adding one simple line!\nDo you know which line of code to add on the blanks?\n"
                example_code: "```\nverse = 99\n_ _ _\n    {print} verse ' bottles of beer on the wall'\n    {print} verse ' bottles of beer'\n    {print} 'Take one down, pass it around'\n    verse = verse - 1\n    {print} verse ' bottles of beer on the wall'\n```\n"
                start_code: '# place your code here'
            10:
                story_text: "## Songs\nIn this level you can easily make the childrens' song 'Five little monkeys'. Can you make the last chorus?\nYou can also make the whole baby shark song (including all the other sharks in the family) in only 6 lines, using `{for}`!\nOr you can make Old McDonald with all the different animals.\n\n\n\n### Excercises\nCan you add the last verse of the monkeys on the bed, when there is only one monkey left?\n\nCan you make the baby shark code even shorter by using a `{repeat}` command?\n\nCan you add new animals to Old MacDonald's farm?\n"
                example_code: "## 5 Little Monkeys Jumping on the bed\n```\nmonkeys = 5, 4, 3, 2\n{for} monkey {in} monkeys\n    {print} monkey ' little monkeys jumping on the bed'\n    {print} 'One fell off and bumped his head'\n    {print} 'Mama called the doctor and the doctor said'\n    {print} 'NO MORE MONKEYS JUMPING ON THE BED!'\n```\n\n## Baby Shark\n```\nsharks = baby, mommy, daddy, grandma, grandpa\n{for} shark {in} sharks\n    {print} shark ' shark tututututudu'\n    {print} shark ' shark tututututudu'\n    {print} shark ' shark tututututudu'\n    {print} shark ' shark'\n```\n## Old McDonald\n```\nanimals = pig, dog, cow\n{for} animal {in} animals\n    {if} animal {is} pig\n        sound = oink\n    {if} animal {is} dog\n        sound = woof\n    {if} animal {is} cow\n        sound = moo\n    {print} 'Old McDonald had a farm'\n    {print} 'E I E I O!'\n    {print} 'and on that farm he had a ' animal\n    {print} 'E I E I O!'\n    {print} 'with a ' sound sound ' here'\n    {print} 'and a ' sound sound ' there'\n    {print} 'here a ' sound\n    {print} 'there a ' sound\n    {print} 'everywhere a ' sound sound\n```\n"
                start_code: '# place your code here'
                example_code_2: "```\nmonkeys = 5, 4, 3, 2, 1\n```\n"
                story_text_2: "### Exercise 2\nPrint the song Five little moneys jumping on the bed. Look up the text if you don't remember.\n\n**(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.\n"
            11:
                story_text: "## Songs\nIn this level you can use the `{for} i {in} {range}` command to make songs that use counting, like the 5 little monkeys.\n\n### Excercise\nFill in the blanks and make the code work!\n"
                example_code: "## 5 little monkeys\n```\n_ _ _ _ 5 _ 1\n    {print} i ' little monkeys jumping on the bed'\n    {print} 'One fell off and bumped his head'\n    {print} 'Mama called the doctor and the doctor said'\n    {if} i {is} 1\n        {print} 'PUT THOSE MONKEYS RIGHT TO BED!'\n    {else}\n        {print} 'NO MORE MONKEYS JUMPING ON THE BED!'\n```\n"
                start_code: '# place your code here'
            12:
                story_text: "## Sing a song!\nIn this song we can make it even easier to program 'if you're happy and you know it, clap your hands'. Because we can put all of the actions in a variable, check it out:\n\n### Excercise\nCan you add the right amount of indentation to each line to make the song play correctly?\nMind: Not all lines need indentation\n"
                example_code: "```\n_ actions = 'clap your hands', 'stomp your feet', 'shout Hurray!'\n_ {for} action {in} actions\n_ {for} i {in} {range} 1 {to} 2\n_ {print} 'if youre happy and you know it'\n_ {print} action\n_ {print} 'if youre happy and you know it and you really want to show it'\n_ {print} 'if youre happy and you know it'\n_ {print} action\n```\n"
                start_code: '# place your code here'
            16:
                story_text: "## Sing a song!\nIn this level, you can program a song like OldMacDonald even more quickly. You can connect the right animal to the right sound by simply putting them in the same place in the list.\nThe Drunken Sailor is also quickly made in this level. You only need 8 lines for the entire song, check it out!\n"
                example_code: "## Jens Hansen\n```\nalle_dyr = ['gris', 'hund', 'ko']\nlyde = ['øh', 'vuf', 'muh']\n{for} i {in} {range} 1 {to} 3\n    dyr = alle_dyr[i]\n    lyd = lyde[i]\n    {print} 'Jens Hansen havde en bondegård'\n    {print} 'ih ah ih ah oh!'\n    {print} 'og på den gård der var en ' dyr\n    {print} 'ih ah ih ah oh!'\n    {print} 'Der var ' lyd lyd' her'\n    {print} 'og ' lyd lyd' der'\n    {print} lyde ' her'\n    {print} lyde ' der'\n    {print} 'alle steder ' lyde lyde\n```\n\n## Fulde sømand\n```\nlinjer = ['Hvad skal vi gøre med den fulde sømand', 'Smid ham i brummen til han vågner', 'Han skal klynges op i masten']\n{for} linje {in} linjer\n    {for} i {in} {range} 1 {to} 3\n        {print} linje \n    {print} 'Tidligt om morgnen.'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'Hu hej, se hun sejler'\n    {print} 'Tidligt om morgnen.'\n```\n"
                start_code: '# placer din kode her'
        name: Sing a song!
    calculator:
        description: Create a calculator
        default_save_name: Calculator
        levels:
            6:
                story_text: "## Calculator\nNow that you can do maths, you can make a calculator yourself!\n"
                example_code: "```\nnumber_1 {is} {ask} 'Fill in the first number:'\nnumber_2 {is} {ask} 'Fill in the second number:'\ncorrect_answer = number_1 * number_2\n{print} number_1 ' times ' number_2 ' is ' correct_answer\n```\n"
                story_text_2: "### Excercise\nThe calculator above will calculate the answer for you, but you can also make a program to test your own maths skills, like this:\nFill in the blanks to make it complete!\n"
                example_code_2: "```\ncorrect_answer = 11 * 27\nanswer = {ask} 'How much is 11 times 27?'\n{if} answer {is} _ {print} 'good job!'\n{else} {print} 'Wrong! It was ' _\n```\n"
                story_text_3: "## Random numbers\nYou can also let the computer do random sums on its own using random.\nThis is how you choose a number of tables to practice, and from that you always get a different sum:\n"
                example_code_3: "```\ntables = 4, 5, 6, 8\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\ntable = tables {at} {random}\nnumber = numbers {at} {random}\ncorrect_answer = table * number\nanswer = {ask} 'how much is ' table ' times ' number '?'\n{if} answer {is} correct_answer {print} 'okay'\n{else} {print} 'mistake! it was ' correct_answer\n```\n"
                start_code: "{print} 'Welcome to this calculator!'"
            9:
                story_text: "## Calculator\nIn previous levels you've learned how to make a calculator, in this level you can expand that code and make it into a little maths game.\n### Excercise\nCan you finish line 10 to make to program work?\n"
                example_code: "```\nscore = 0\n{repeat} 10 {times}\n    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    number1 = numbers {at} {random}\n    number2 = numbers {at} {random}\n    correct_answer = number1 * number2\n    {print} 'What is ' number1 ' times ' number2 '?'\n    answer = {ask} 'Type your answer here...'\n    {print} 'Your answer is' answer\n    {if} _ {is} _\n        score = score + 1\n{print} 'Great job! Your score is... ' score ' out of 10!'\n```\n"
                start_code: "{print} 'Welcome to this calculator!'"
            10:
                story_text: "## Calculator\nThis calculator game helps you practise your tables of multiplication!\n### Excercise\nCan you add more numbers to the list, so you can practise all the multiplications?\n"
                example_code: "```\nnumbers = 1, 2, 3\n{for} number1 {in} numbers\n    {for} number2 {in} numbers\n        answer = {ask} 'How much is ' number2 ' times ' number1 '?'\n        correct = number1 * number2\n        {if} answer {is} correct\n            {print} 'Great job!'\n        {else}\n            {print} 'Thats wrong. The right answer is ' correct\n```\n"
                start_code: '# place your code here'
            12:
                story_text: "## Calculator\nNow you can make a calculator that works for decimal numbers. Fill in the blanks to get it to work properly!\n"
                example_code: "```\nnumber1 = {ask} 'What is the first number?'\nnumber2 = {ask} 'What is the second number?'\nanswer = _\n{print} number1 ' plus ' number2 ' is ' answer\n```\n"
                start_code: '# place your code here'
            14:
                story_text: "## Guess which number\nIn this level you can programm the game 'Guess which number'\n"
                example_code: "```\n{print} 'Guess which number'\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nnumber = numbers {at} {random}\ngame = 'on'\n{for} i {in} {range} 1 {to} 10\n    {if} game == 'on'\n        guess = {ask} 'Which number do you think it is?'\n        {if} guess > number\n            {print} 'Lower!'\n        {if} guess < number\n            {print} 'Higher!'\n        {if} guess == number\n            {print} 'You win!'\n            game = 'over'\n```\n"
                start_code: '# place your code here'
            15:
                story_text: "## Calculator\nYou can add the `{while}` loop to the calculator game you've learned to make in a previous level.\nThis makes sure the player can't continue to the next question {if} they answer incorrectly.\n"
                example_code: "```\nscore = 0\n{for} i {in} {range} 0 {to} 9\n    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    number1 = numbers {at} {random}\n    number2 = numbers {at} {random}\n    correct = number1 * number2\n    answer = 0\n    {while} answer != correct\n        {print} 'How much is ' number1 ' times ' number2 '?'\n        answer = {ask} 'Fill in your answer:'\n        {print} 'Your answer is ' answer\n    {print} 'Good job!'\n{print} 'You win!'\n```\n"
                start_code: '# place your code here'
            11:
                example_code: "```\nnumber = 10\n{for} i {in} {range} 1 to 10\n    {print} i * number\n```\n"
                story_text: "## Calculator\nWith a `{for}` you can simplify tables of multiplication practise program.\n\n### Exercise 1\nImprove the example code such that it prints a nice multiplication table: <br> \"1 times 10 is 10\", \"2 times 10 is 20\", etc.\n\n### Exercise 2\nGo back to your level 10 multiplication code, and modify it so that it uses a `{for}` and `{range}`.\n"
                start_code: '# place your code here'
        name: Calculator
    restaurant:
        name: Restaurant
        description: Create your own virtual restaurant
        default_save_name: Restaurant
        levels:
            1:
                story_text: "## Restaurant\n In level 1 you can make your own virtual restaurant and take your guests' orders.\n"
                example_code: "```\n{print} Welcome to Hedy's restaurant \U0001F35F\n{ask} What would you like to order?\n{echo} So you would like to order\n{print} Thanks you for your order!\n{print} It's on its way!\n```\n"
                story_text_2: "### Excercise\nCan you think of more lines to add to your restaurant code? For example, can you {ask} the guests what they'd like to drink, tell them the price, or wish them a pleasant meal?\n"
                start_code: '# place your code here'
            2:
                story_text: "## Restaurant\nIn level 2 you could expand your restaurant by using variables. In level 1 Hedy could only {echo} the order once and only remember the last thing that was ordered.\nNow you can use variables and Hedy can remember both the food and the toppings!\n"
                example_code: "```\n{print} Welcome to Hedy's restaurant!\n{print} Today we're serving pizza or lasagna.\nfood {is} {ask} What would you like to eat?\n{print} Great choice! The food is my favorite!\ntopping {is} {ask} Would you like meat or veggies on that?\n{print} food with topping is on its way!\n```\n"
                story_text_2: "### Excercise\nCan you make this code more elaborate? For example by adding drinks to the order? Or...?\n"
                start_code: '# place your code here'
            3:
                story_text: "## Random Restaurant\nHaving trouble to decide what you wanna have for dinner? You can let Hedy choose for you!\nSimply add lists of your favorite (or least favorite) meals and Hedy can randomly choose your dinner.\nYou can also have a bit of fun, by letting Hedy choose the price for your dinner as well! What will you get?\n### Excercise\nCan you make your own version of the random restaurant?\n"
                example_code: "```\n{print} Welcome to Hedy's Random Restaurant!\n{print} The only restaurant that will randomly choose your meal and its price for you!\nstarters {is} salad, soup, carpaccio\nmains {is} pizza, brussels sprouts, spaghetti\ndesserts {is} brownies, ice cream, french cheeses\ndrinks {is} cola, beer, water\nprices {is} 1 dollar, 10 dollars, 100 dollars\n{print} You will start with: starters {at} {random}\n{print} Then we'll serve: mains {at} {random}\n{print} And as dessert: desserts {at} {random}\n{print} You will get a drinks {at} {random} to drink\n{print} That will be: prices {at} {random}\n{print} Thank you and enjoy your meal!\n```\n"
                story_text_2: "## Allergies\nDoes your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.\n"
                example_code_2: "```\n{print} Mystery milkshake\nflavors {is} strawberry, chocolate, vanilla\nallergies {is} {ask} Are you allergic to any falvors?\n_\n{print} You get a flavors {at} {random} milkshake\n```\n"
                start_code: '# place your code here'
                story_text_3: "## Allergies\n**Extra** Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.\n"
                example_code_3: "```\n{print} Mystery milkshake\nflavors {is} strawberry, chocolate, vanilla\nallergies {is} {ask} Are you allergic to any falvors?\n_\n{print} You get a flavors {at} {random} milkshake\n```\n"
            4:
                story_text: "## Restaurant\nIn this level you have to use quotation marks when using the `{print}` or `{ask}` command.\n\n### Excercise\nAdd the quotation marks to this code to make it work! Be careful: variables should not be in quotation marks.\n"
                example_code: "## Example Hedy Restaurant\n```\n_ Add the quotation marks to this code _\n{print} Welcome to Hedys restaurant!\n{print} Today we are serving pizza or lasagna.\nfood {is} {ask} What would you like to eat?\n{print} Great choice! The  food  is my favorite!\ntopping {is} {ask} Would you like meat or veggies on that?\n{print} food  with  topping  is on its way!\ndrinks {is} {ask} What would you like to drink with that?\n{print} Thank you for your order.\n{print} Your  food  and  drinks  will be right there!\n```\n"
                start_code: '# place your code here'
            5:
                story_text: "## Restaurant\nIn this level the `{if}` command allows you to `{ask}` your customers questions and give different responses to the answers.\nIn the example below, you see that you can `{ask}` the customer `{if}` they want to hear the specials and Hedy can respond accordingly.\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\nspecial {is} {ask} 'Would you like to hear our specials today?'\n{if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'\nfood {is} {ask} 'What would you like to eat?'\n{print} 'One ' food ', coming right up!'\ndrink {is} {ask} 'What would you like to drink with that?'\n{if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'\nanything {is} {ask} 'Would you like anything {else}?'\n{print} 'Let me repeat your order...'\n{print} 'One ' food\n{if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink\n{if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything\n{print} 'Thank you for your order and enjoy your meal!'\n```\n"
                story_text_2: "### Excercise\nCan you think of more questions to `{ask}` the customers when they are ordering, and make up different responses to their answers by using the `{if}` command?\n"
                start_code: '# place your code here'
            6:
                story_text: "## Restaurant\nIn this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.\n"
                example_code: "\nYou can make a simple restaurant code, like this:\n```\n{print} 'Welcome to Hedys restaurant'\n{print} 'Here is our menu:'\n{print} 'Our main courses are pizza, lasagne, or spaghetti'\nmain = {ask} 'Which main course would you like?'\nprice = 0\n{if} main {is} pizza price = 10\n{if} main {is} lasagne price = 12\n{if} main {is} spaghetti price = 8\n{print} 'You have ordered ' main\n{print} 'That will be ' price ' dollars, please'\n{print} 'Thank you, enjoy your meal!'\n```\n"
                story_text_2: "But you can also add many more things to your virtual restaurant, for example more courses.\n\n### Excercise\nYou can add many more things to your virtual restaurant. For example, can you...\n- {ask} how many people are coming and multiply the price by that amount?\n- add another course?\n- give people a discount when they enter a (secret) couponcode?\n- add a children's menu?\n- think of other fun things to add?\n"
                start_code: '# place your code here'
                example_code_2: "\nIn this example there are three courses, which requires more code and more additions in calculating the price.\n```\n{print} 'Welcome to Hedys restaurant'\n{print} 'Here is our menu:'\n{print} 'Our starters are salad, soup, or carpaccio'\n{print} 'Our main courses are pizza, lasagne, or spaghetti'\n{print} 'Our desserts are brownie, icecream, or milkshake'\nstarter = {ask} 'Which starter would you like to have?'\nmain = {ask} 'Which main course would you like?'\ndessert = {ask} 'Which dessert do you pick?'\nprice = 0\n{if} starter {is} soup price = price + 6 {else} price = price + 7\n{if} main {is} pizza price = price + 10\n{if} main {is} lasagne price = price + 12\n{if} main {is} spaghetti price = price + 8\n{if} dessert {is} brownie price = price + 7\n{if} dessert {is} icecream price = price + 5\n{if} dessert {is} milkshake price = price + 4\n{print} 'You have ordered ' starter ' , ' main ' and ' dessert\n{print} 'That will be ' price ' dollars, please'\n{print} 'Thank you, enjoy your meal!'\n```\n"
            8:
                start_code: '# place your code here'
                story_text: "## Restaurant\nIn this level you can make your virtual restaurant more elaborate by repeating multiple lines of code. Like this:\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people will be joining us today?'\n{print} 'Great!'\n{repeat} people {times}\n    food = {ask} 'What would you like to order?'\n    {print} food\n{print} 'Thank you for ordering!'\n{print} 'Enjoy your meal!'\n```\n"
                story_text_2: "### Excercise\nOf course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!\n"
            9:
                start_code: '# place your code here'
                story_text: "## Restaurant\nIn this level you can use nesting to make your restaurant more realistic and more fun!\nFor example you would ask for sauce if somebody orders fries, but you wouldn't if someone orders pizza!\n\n### Excercise\nThis is a challenge for the real brainiacs! Each line that needs indentation has been given a blank.\nCan you figure out how much indentation each line needs in order for the code to work propperly?\nGood luck!\nTIP: If the customer orders pizza, Hedy shouldn't ask what sauce the costumer wants.\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people will be joining us today?'\n{print} 'Great!'\nprice = 0\n{repeat} people {times}\n_ food = {ask} 'What would you like to order?'\n_ {print} food\n_ {if} food {is} fries\n_ price = price + 3\n_ sauce = {ask} 'What kind of sauce would you like with your fries?'\n_ {if} sauce {is} no\n_ {print} 'no sauce'\n_ {else}\n_ price = price + 1\n_ {print} 'with ' sauce\n_ {if} food {is} pizza\n_ price = price + 4\n{print} 'That will be ' price ' dollar'\n{print} 'Enjoy your meal!'\n```\n"
            10:
                story_text: "## Restaurant\nIn this level you'll learn how to easily {ask} your guests' orders in a short code.\n"
                example_code: "```\ncourses = appetizer, main course, dessert\n{for} course {in} courses\n    food = {ask} 'What would you like to eat as your ' course '?'\n    {print} food ' will be your ' course\n```\n"
                story_text_2: "### Excercise\nOf course, you could also order for multiple people!\nCan you add the correct amount of indentation before each line to make the code work properly?\nTIP: some lines don't need any indentation at all.\n"
                example_code_2: "```\n_ courses = appetizer, main course, dessert\n_ names = Timon, Onno\n_ {for} name {in} names\n_ {for} course {in} courses\n_ food = {ask} name ', what would you like to eat as your ' course '?'\n_ {print} name ' orders ' food ' as their ' course\n```\n"
                start_code: courses = appetizer, main course, dessert
            11:
                start_code: '# place your code here'
                story_text: "## Restaurant\nWe can use the `{for} i {in} {range} 1 {to} 5` to `{print}` the orders from multiple customers in an orderly manner.\n\n## Challange\nCan you handle another indentation challenge? Get the code to work properly by adding the right amount of indentation before each line!\n"
                example_code: "```\n{print} 'Welcome to Restaurant Hedy!'\npeople = {ask} 'For how many people would you like to order?'\n{for} i {in} {range} 1 {to} people\n_ {print} 'Order number ' i\n_ food = {ask} 'What would you like to eat?'\n_ {print} food\n_ {if} food {is} fries\n_ sauce = {ask} 'What kind of sauce would you like with that?'\n_ {print} sauce\n_ drinks = {ask} 'What would you like to drink?'\n_ {print} drinks\nprice = 4 * people\n{print} 'That will be ' price ' dollars, please!'\n```\n"
            15:
                example_code: "```\n{print} 'Welcome at McHedy'\nmore = 'yes'\n{while} more == 'yes'\n    order = {ask} 'What would you like to order?'\n    {print} order\n    more = {ask} 'Would you like to order anything else?'\n{print} 'Thank you!'\n```\n"
                start_code: '# place your code here'
                story_text: "## Restaurant\nWith the `{while}` you can make sure your costumers can keep adding orders until they are done.\n"
            7:
                story_text: "## Restaurant\nIn this level you've learned how to use the `{repeat}` command to repeat a line of code a certain amount of times.\nYou can use that in your restaurant to `{ask}` multiple people what they'd like to eat.\n\n### Excercise\nCan you complete the code? Hedy needs to repeat this question as many times as there are people. So if there are 5 people, the question needs to be asked 5 times.\n**(extra)** Expand your code with more questions, for example about drinks or sauce.\n"
                start_code: '# place your code here'
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people are joining us today?'\n```\n"
            12:
                start_code: '# place your code here'
                story_text: "## Restaurant\nFrom this level on you can use decimal numbers to make you menu more realistic.\n\n## Challange\nCan you think of a code to give your friends and family a 15% discount?\n"
                example_code: "```\nprice = 0\nfood = {ask} 'What would you like to order?'\ndrink = {ask} 'What would you like to drink?'\n{if} food {is} 'hamburger'\n    price = price + 6.50\n{if} food {is} 'pizza'\n    price = price + 5.75\n{if} drink {is} 'water'\n    price = price + 1.20\n{if} drink {is} 'soda'\n    price = price + 2.35\n{print} 'That will be ' price ' dollar, please'\n```\n"
            13:
                story_text: "## Restaurant\nIn this level we can use the new commands to upgrade our restaurant.\nWe use `{and}` to see {if} two things are both the case.\n"
                example_code: "```\nprice = 10\nfood = {ask} 'What would you like to eat?'\ndrinks = {ask} 'What would you like to drink?'\n{if} food {is} 'sandwich' {and} drinks {is} 'juice'\n    {print} 'Thats our discount menu'\n    price = price - 3\n{print} 'That will be ' price ' dollars'\n```\n"
                start_code: '# place your code here'
    turtle:
        default_save_name: Skildpadde
        levels:
            1:
                story_text: "## Lad os tegne\nDu kan også bruge Hedy til at tegne. Ved at kombinere hjørner og streger, kan du lave et kvadrat eller trapper!\n\nVed at bruge `{forward}` tegner du en streg fremad. Tallet bagefter bestemmer hvor langt skildpadden vil gå. `{turn} {right}` drejer en kvart omgang med uret, `{turn} {left}` drejer mod uret.\n\nHvis du vil baglæns, bruger du `{forward}` kommandoen sammen med et negativt tal. For eksempel `{forward} -100`\n\n### Opgave\nDette er starten på en lille trappe. Kan du lave den med 5 trin?\n"
                example_code: "```\n{forward} 50\n{turn} {right}\n{forward} 50\n{turn} {left}\n{forward} 50\n```\n"
                start_code: "{forward} 50\n{turn} {left}"
            2:
                story_text: "## Skildpadde\nPå dette niveau kan du bruge variabler. For eksempel kan du spørge hvor mange skridt skildpadden skal tage.\n"
                example_code: "```\nsvar {is} {ask} Hvor mange skridt skal skildpadden tage?\n{forward} svar\n```\n"
                story_text_2: "På niveau 1 kunne skildpadden også kun dreje til højre eller venstre. Det er en smule kedeligt!\nPå niveau 2 kan den se i alle retninger.\n\nBrug 90 til at dreje en kvart omgang. Det kalder vi grader. En hel omgang er 360 grader.\n\n### Opgave\nKan du lave en figur med denne kode? Måske en trekant eller cirkel?\n"
                example_code_2: "```\n{print} Tegner figurer\nvinkel {is} 90\n{turn} vinkel\n{forward} 25\n{turn} vinkel\n{forward} 25\n```\n"
                start_code: "{print} Skildpaddeløb!\nvinkel {is} 90\n{turn} vinkel\n{forward} 25"
            3:
                story_text: "## Ledende skildpadde\nPå dette niveau kan du bruge `{at} {random}` med tegneskildpadden. Et tilfældigt valg får skildpadden til at gå en ny vej hver gang.\nBrug `{at} {random}` for at vælge et element fra en liste.\n### Opgave\nKan du lave den tilfældige sti længere ved at copy-paste linje 2 og 3?\n"
                example_code: "```\nvinkler {is} 10, 50, 90, 150, 250\n{turn} vinkler {at} {random}\n{forward} 25\n```\n"
                start_code: "vinkler {is} 10, 50, 90, 150, 250\n{turn} vinkler {at} {random}\n{forward} 25"
            4:
                story_text: "## Lad os tegne\nPå niveau 4 skal du bruge anførselstegn sammen med `{print}` og `{ask}`. Også når du tegner!\n"
                story_text_2: "## Farver\nDu kan også skifte farve på stregerne med kommandoen `{color}`. Se eksemplet.\nDu kan også bruge kommandoen `{color} {white}` til at lave 'usynlige' streger. Du kan bruge de hvide streger til at flytte skildpadden hvor som helst på skærmen før du begynder at tegne.\n"
                start_code: "{print} 'Tegner figurer'\nvinkel {is} 90\n{turn} vinkel\n{forward} 25"
                example_code: "```\n{print} _ Tegner figurer _\nvinkel {is} 90\n{turn} vinkel\n{forward} 25\n{turn} vinkel\n{forward} 25\n```\n"
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
            5:
                story_text: "## Lad os tegne\nPå niveau 5 kan du lave et valg med `{if}`. For eksempel mellem forskellige typer figurer.\n"
                example_code: "```\n{print} 'Tegner figurer'\nfigur {is} {ask} 'Vil du have en firkant eller en trekant?'\n{if} figur {is} trekant vinkel {is} 120\n{else} vinkel {is} 90\n{turn} vinkel\n{forward} 25\n{turn} vinkel\n{forward} 25\n{turn} vinkel\n{forward} 25\n{turn} vinkel\n{forward} 25\n```\n"
                start_code: "{print} 'Tegner figurer'\nfigur {is} {ask} 'Vil du tegne en firkant eller en trekant?'\n{if} figur {is} trekant vinkel {is} 120 {else} vinkel {is} 90\n{turn} vinkel\n{forward} 25"
            6:
                story_text: "## Lad os tegne\nPå dette niveau kan du bruge beregninger til at tegne forskellige figurer.\nDu kan måske lært i skolen at dreje en hel omgang er 360 grader. Hvis ikke, ved du det nu!\nDet er også derfor du bruger 90 grader til en firkant. 360 divideret med 4 er 90.\nNu hvor vi kan lave matematik med Hedy kan vi tegne alle de figurer vi ønsker!\n"
                example_code: "```\nhjørner = {ask} 'Hvor mange hjørne kunne du tænke dig?'\nvinkel = 360 / hjørner\n{forward} 50\n{turn} vinkel\n{forward} 50\n{turn} vinkel\n{forward} 50\n{turn} vinkel\n{forward} 50\n{turn} vinkel\n{forward} 50\n{turn} vinkel\n{forward} 50\n{turn} vinkel\n```\n"
                start_code: "{print} 'Tegner figurer'"
            8:
                story_text: "## Lad os tegne\nNu hvor vi kan gentage flere streger, kan vi lave lettere lave figurer.\nVi skal kun sætte vinklen en gang og så bruge den variabel i `{repeat}` kommandoen.\n\n### Opgave 1\nKoden i eksemplet skaber et kvadrat. Ændrer koden så den skaber en anden figur, så som en trekant eller sekskant. \nDette kræver at du ændrer to linjer i koden.\nTip: En hel omgang er 360 grader.\n\n### Opgave 2\nLav nu en tegning der består af mindst på polygoner.\n"
                example_code: "```\nvinkel = 90\n{repeat} 4 {times}\n    {turn} vinkel\n    {forward} 50\n```\n"
                story_text_2: "## Interaktion\nVi kan nu forbedre programmet der tegner forskellige figurer\nKan du regne ud hvor meget skildpadden skal dreje til højre her? Færdiggør koden og du kan tegne hvilken som helst polygon du kunne tænke dig!\n"
                example_code_2: "```\nkanter = {ask} 'Hvor mange kanter skal jeg tegne?'\nvinkel = 360 / hjørner\n{repeat} kanter {times}\n    {turn} _\n    {forward} _\n```\n"
                start_code: kanter = {ask} 'Hvor mange kanter skal jeg tegne?'
            9:
                story_text: "## Skildpadde\nNu hvor vi kan bruge `{repeat}` inden i en `{repeat}`, kan vi lave mere komplekse figurer.\n\n### Opgave 1\nDenne kode skaber tre sorte trekanter og fem lyserøde firkanter.\n\n **(ekstra)** Lav en figur du selv vælger bestående af mindst to forskellige former.\n"
                example_code: "```\n{color} {black}\n{repeat} 3 {times}\n    {repeat} 3 {times}\n        {forward} 10\n        {turn} 120\n    {color} {white}\n    {forward} 50\n    {color} {black}\n```\n"
                story_text_2: "## Skildpaddestyring\nDu kan også bevæge skildpadden på mange andre måder end frem og tilbage!\n### Opgave 2\nFærdiggør koden så du kan styre skildpadden med taster. w til fremad, s til baglæns, a til venstre og d til højre. \nTip: Til højre og venstre, får du brug for 3 linjer kode!\n"
                example_code_2: "```\n{repeat} 40 {times}\n    {if} w {is} {pressed}\n        {forward} 10\n    {if} a {is} {pressed}\n        _ _\n```\n"
                start_code: '# placer din kode her'
        name: Skildpadde
        description: Lav din egen tegning
    dishes:
        name: Opvask?
        levels:
            3:
                story_text: "## Opvask\nEr i altid uenige om hvem der skal tage opvasken eller tømme kattebakken derhjemme?\nSå kan du lade computeren vælge retfærdigt. Du kan programmere det på dette niveau!\nFørst laver du en liste med alle medlemmerne af din familie. Derefter tag fra listen med `{at} {random}`.\n"
                story_text_2: "## Hack opvaskeprogrammet!\nHar du ikke lyst til at tage opvasken? Hack programmet ved at fjerne dit navn fra listen med `{remove}` `{from}` kommandoen.\n"
                example_code: "```\npersoner {is} mor, far, Emma, Sophie\n{print} personer {at} {random}\n```\n"
                start_code: '{print} Hvem tager opvasken?'
            4:
                story_text: "## Opvask\nMed anførselstegn kan du lave din opvaskeplan pænere.\nDenne gang er eksemplet ikke helt færdig.\n\nKan du færdiggøre koden ved at udfylde de tomme felter? Hvert af de tomme felter skal erstattes med et ord eller symbol.\n\nTip: Glem ikke anførselstegn!\n"
                example_code: "```\npersoner {is} mor, far, Emma, Sophie\n{print} _ opvasken tages af _\n{sleep}\n{print} personer {at} _\n```\n"
                start_code: "{print} 'Hvem tager opvasken?'"
            5:
                story_text: "## Opvasken\nMed `{if}` kan du nu have endnu mere sjov med valg i dit program. Du kan få dit program til at reagere på et valg lavet af computeren.\n\nKan du færdigøre koden så den printer 'ærgerligt' når det er din tur og ellers 'sådan!'?\nGlem ikke anførselstegn!\n"
                example_code: "```\npersoner {is} mor, far, Emma, Sophie\nopvasker {is} personer {at} {random}\n{if} opvasker {is} Sophie {print} _ ærgerligt jeg skal tage opvasken _ \n{else} {print} 'heldigvis ingen opvask for ' _ ' er allerede i gang'\n```\n"
                start_code: "{print} 'Hvem tager opvasken?'"
            6:
                story_text: "## Opvask\nHvor ofte skal alle tage opvasken? Er det retfærdigt? Du kan tælle det på dette niveau.\n"
                example_code: "```\npersoner = mor, far, Emma, Sophie\nemma_tager_den = 0\nopvasker = personer {at} {random}\n{print} 'Opvaskeren er ' opvasker\n{if} opvasker {is} Emma emma_tager_den = emma_tager_den + 1\n{print} 'Emma tager opvasken ' emma_tager_den ' gange denne uge'\n```\n\nDu kan nu kopiere linje 3 til 5 nogle gange (e.g. 7 gange for en hel uge) for at beregne en hel uge igen.\nLaver du koden for hele ugen?\n"
                story_text_2: "## Gør det retfærdigt\nHvis du er ekstremt uheldig vil det forrige program måske vælge dig til at tage opvasken hele ugen! Det er ikke retfærdigt!\nFor at lave et mere retfærdigt system can du bruge `{remove}` kommandoen til at fjerne den valgte person fra listen. På den måde skal du ikke tage opvasken igen før alle har taget deres tur.\n\nMandag og tirsdag er klar til dig! Kan du tilføje resten af ugen?\nOg... kan du finde på en løsning til når listen er tom?\n"
                example_code_2: "```\npersoner = mor, far, Emma, Sophie\nopvasker = personer {at} {random}\n{print} 'Mandag tages opvasken af: ' opvasker\n{remove} opvasker {from} personer\nopvasker = personer {at} {random}\n{print} 'Tirsdag tages opvasken af: ' opvasker\n{remove} opvasker {from} personer\nopvasker = personer {at} {random}\n```\n"
                start_code: "{print} 'Hvem tager opvasken?'"
            7:
                story_text: "## Opvask\nMed `{repeat}` kan du gentage stykker af kode. Du kan bruge dette til at beregne hvem der skal tage opvasken i flere dage!\n### Opgave\nBrug `{repeat}` kommandoen til at beslutte hvem der skal tage opvasken en hel uge. Hver blanke felt skal udskiftes med en kommando eller et tal!\n**(ekstra)** Kan du finde på flere opgaver i huset? Ret koden så den beslutter hvem der klarer tre husholdningsopgaver. Glem ikke at printe hvilken opgave det handler om!\n"
                start_code: "{print} 'Hvem tager opvasken?'"
                example_code: "```\npersoner = mor, far, Emma, Sophie\n{repeat} _ _ {print} 'Opvasken tages af ' _ _ _\n```\n"
            10:
                story_text: "## Opvask\nPå dette niveau kan du lave et endnu bedre opvaske skema.\n"
                example_code: "```\ndage = mandag, tirsdag, onsdag, torsdag, fredag, lørdag, søndag\nnavne = mor, far, Emma, Sophie\n_ dag _ dage\n    {print} navne {at} {random} ' tager opvasken på ' day\n```\n"
                start_code: '# placer din kode her'
        description: Brug computeren til at se hvem der tager opvasken
        default_save_name: Opvask
    dice:
        default_save_name: Terninger
        levels:
            5:
                example_code: "```\nchoices {is} 1, 2, 3, 4, 5, earthworm\nthrow {is} _\n{print} 'you have' _ 'thrown'\n{if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'\n```\n"
                start_code: "{print} 'What will the die indicate this time?'"
                story_text: "## Terninger\nDu kan også lave en terning igen på dette niveau ved at bruge `{if}`.\nFærdiggør kodeeksemplet så programmet siger \"Du kan stoppe med at kaste\" når du har slået en regnorm.\n\nMen måske du gerne vil genskabe en terning fra et helt andet spil. Det er også helt fint! Så find på din egen reaktion, f.eks. 'jubii' ved en 6'er og 'ærgerligt' ved noget andet.\n"
            6:
                story_text: "## Dice\nYou can also make an Earthworm die again in this, but now you can also calculate how many points have been rolled.\nYou may know that the worm counts 5 points for Earthworms. Now after a roll you can immediately calculate how many points you have thrown.\nThis is the code to calculate points for one die:\n\n### Excercise\nCan you make the code so that you get the total score for 8 dice? To do that, you have to cut and paste some lines of the code.\n"
                example_code: "```\nchoices = 1, 2, 3, 4, 5, earthworm\npoints = 0\nthrow = choices {at} {random}\n{print} 'you threw' throw\n{if} throw {is} earthworm points = points + 5 {else} points = points + throw\n{print} 'those are' points ' point'\n```\n"
                example_code_2: "## Looking forward\n\nDid you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!\n"
                start_code: "{print} 'What will the die indicate this time?'"
            7:
                story_text: "## Dice\nYou can also make a dice again in level 5. With the `{repeat}` code you can easily roll a whole hand of dice.\n\n### Exercise\nTry to finish the sample code!  **(extra)** Think of a game you know that involves a dice and program that using a `{repeat}.`\n"
                example_code: "```\nchoices = 1, 2, 3, 4, 5, 6\n_ _ _ _ _ _ _\n```\n"
                start_code: "{print} 'What will the dice indicate this time?'"
            10:
                story_text: "## Dice\nIs everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!\nCan you fill in the correct line of code on the blanks?\n"
                example_code: "```\nplayers = Ann, John, Jesse\nchoices = 1, 2, 3, 4, 5, 6\n_\n    {print} player ' throws ' choices {at} {random}\n    {sleep}\n```\n"
                start_code: '# place your code here'
            15:
                story_text: "## Dice\nIn this game you have to throw 6 in as little tries as possible.\n"
                example_code: "```\noptions = 1, 2, 3, 4, 5, 6\n{print} 'Throw 6 as fast as you can!'\nthrown = 0\ntries = 0\n{while} thrown != 6\n    thrown = options {at} {random}\n    {print} 'You threw ' thrown\n    tries = tries + 1\n{print} 'Yes! You have thrown 6 in ' tries ' tries.'\n```\n"
                start_code: '# place your code here'
            3:
                story_text: "## Terninger\nPå dette niveau kan vi vælge fra en liste. På denne måde kan vi lade computeren vælge en side på en terning.\nSe på de brætspil du har i skabet derhjemme.\nEr der spil med en (speciel) terning? Du kan også lave sådan en med denne kode.\nFor eksempel, terningerne til spillet Earthworms med tallene 1 til 5 og en regnorm på.\n\n![Terning fra Earthworms med 1 til 5 og en regnorm på](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)\n"
                example_code: "```\nmuligheder {is} 1, 2, 3, 4, 5, regnorm\n{print} muligheder {at} {random}\n```\n"
                story_text_2: "### Opgave\nTerningerne fra eksemplet ovenfor er terninger til et specifikt spil. Kan du lave en normal terning?\nEller en anden speciel terning fra et andet spil?\n"
                example_code_2: "```\nmuligheder {is} _\n```\n"
                start_code: '{print} Hvad vil terningen vise denne gang?'
            4:
                story_text: "## Ternigner\nPå dette niveau kan vi lave sætninger med terningeværdien i en sætning, med anførselstegn selvfølgelig.\nDenne gang er kodeeksemplet ikke helt færdigt. Kan du færdiggøre den?\n"
                start_code: "{print} 'Hvad vil terningen vise denne gang?'"
        name: Terninger
        description: Lav din egen terning
    default:
        name: Introduktion
        levels:
            3:
                start_code: '{print} hej verden!'
                example_code_2: "```\ndyr {is} hund, kat, kænguru\n{add} pingvin {to_list} dyr\n{remove} kat {from} dyr\n{print} dyr {at} {random}\n```\n"
                story_text: "## Lav en liste!\nPå niveau 3 kan du lave en liste. Du kan lade computeren vælge noget tilfældigt fra listen. Det kan du gøre med `{at} {random}`.\n"
                example_code: "```\ndyr {is} hund, kat, kænguru\n{print} dyr {at} {random}\n```\n"
                story_text_2: Du kan også tilføje elementer til listen med `{add}` og fjerne elementer med `{remove}`.
            4:
                example_code: "```\n{print} 'Du skal bruge anførselstegn fra nu af!'\nsvar {is} {ask} 'Hvad er det du skal bruge fra nu af?'\n{print} 'Vi har brug for at bruge ' svar\n```\n"
                start_code: "{print} 'Hej verden'"
                story_text_2: "## Eventyrerne bliver sværere og sværere\nEventyrerne bliver nu sværere og sværere i de følgende faner.\nSå det er bedst at starte fra venstre og arbejde sig mod højre for at blive udfordret mere og mere.\n"
                story_text: "## 'Anførselstegn'\nPå niveau 4 har `{ask}` og `{print}` ændret sig.\n\nDu skal den tekst du vil printe i anførselstegn.\n\nDette er nyttigt, for nu kan du printe alle de ord du har lyst til. Du kan også printe de ord du har brugt til at gemme med `{is}`.\n\nDe fleste programmeringssprog bruger også anførselstegn til at printe, så vi kommer også tættere på rigtig programmering!\n"
                example_code_2: "```\n_ This is the wrong way of using apostrophes _\n{print} 'I'm babysitting my sister's kids'\n{print} 'What's more fun than that?'\n```\n"
            16:
                start_code: "frugt = ['æble', 'banan', 'kirsebær']\n{print} frugt"
                story_text: "## Mere og mere som ægte kode!\nVi skal lave lister på som i Python, med firkantede parenteser rundt om! Vi beholder også anførselstegn rund om hvert element som vi har lært på et tidlige niveau.\nDu kan også bruge firkantede parenteser til at udpege et sted i en liste."
                example_code: "```\nvenner = ['Ahmed', 'Bente', 'Claus']\nlykke_tal = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'Lykketallet til ' venner[i]\n    {print} 'er ' lykke_tal[i]\n```\n"
            17:
                start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Klar eller ej, her kommer jeg!'"
                example_code: "```\npræmier = ['1 million kroner', 'en æbletærte', 'ingenting']\ndin_præmie = præmier [{random}]\n{print} 'Du vandt ' din_præmie\n{if} din_præmie == '1 million kroner' :\n    {print} 'Fedt! Du er rig!'\n{elif} din_præmie == 'en æbletærte' :\n    {print} 'Dejligt, en æbletærte!'\n{else}:\n    {print} 'Bedre held næste gang..'\n```\n"
                story_text: "## Elif\nNu skal vi ændre indrykning en lille smule. Hver gang vi har brug for indrykning, skal vi bruge `:` på linjen før indrykningen.\n\nPå dette niveau kan du også bruge en ny kommando: `{elif}`. `{elif}` er en forkortelse for {else} {if} når du vil lave 3 (eller flere!) muligheder.\nSe en gang!"
            18:
                start_code: "navn = 'Hedy'\n{print}('Jeg hedder ', navn)"
                story_text_2: Hvis du vil printe mere end en ting, skal du adskille dem med kommaer.
                story_text: "## Det sidste niveau!\nVi er nået til ægte Python kode! Det betyder at vi er nødt til at bruge parenteser til {print} og {range} fra nu af."
                example_code: "```\n{print}('Hej!')\n{for} i {in} {range}(1, 10):\n    {print}('Dette er linje ', i)\n```\n"
                example_code_2: "```\ntemperatur = 25\n{print}('Det er ', temperatur, ' grader udenfor')\n```\n"
                story_text_3: "## Input\nDen sidste ændring vi er nødt til at lave for at få Python kode er at ændre `{ask}` til `{input}`."
                example_code_3: "```\n{print}('Jeg hedder Hedy!')\nnavn = {input}('Hvad hedder du?')\n{print}('Så du hedder ', navn)\n```\n"
            1:
                example_code: "```\n{print} Hej!\n{print} Velkommen til Hedy!\n```\n"
                story_text_2: "Du kan også spørge efter input med `{ask}` og gentage det med en `{echo}` kommando.\n"
                story_text: "## Velkommen til Hedy!\nPå niveau 1 kan do bruge kommandoerne `{print}`, `{ask}` og `{echo}`.\nSkriv din programkode i programmeringsfeltet. Eller tryk på den grønne knap i kodeeksemplet, og koden vil blive skrevet for dig!\nPrøv selv koden med den grønne 'Kør koden' knappen under programmeringsfeltet.\n\nDu kan printe tekst på skærmen ved at bruge `{print}` kommandoen.     \n"
                example_code_2: "```\n{ask} Hvad er dit navn?\n{echo} hej\n```\n"
                start_code: '{print} hej verden!'
                story_text_3: "Lad os komme igang! Ved du ikke hvad du vil lave? I de følgende faner kan du finde idéer til programmer du kan lave.\n"
            2:
                story_text: "## Variables\nPå niveau 2 lærer vi to nye kommandoer: `{is}` og `{sleep}`.\nDu kan navngive et ord med `{is}`. Dette kaldes en variabel. I dette eksempel lavede vi en variabel der hedder navn og en variabel der hedder alder. Du kan bruge ordet navn i din kode og det vil blive erstattet af Hedy, som her:\n\nPå denne måde har du ikke længere brug for `{echo}` kommandoen!\n"
                example_code: "```\nnavn {is} Hedy\nalder {is} 15\n{print} navn er alder år gammel\n```\n"
                story_text_2: "`{print}` virker stadig på samme måde, men `{ask}` kommandoen har ændret sig. Du skal bruge en variabel sammen med `{ask}` kommandoen. Det ser sådan ud:\n"
                example_code_2: "```\nsvar {is} {ask} Hvad er dit navn?\n{print} Hej svar\n```\n"
                story_text_3: "En anden ny kommando på dette niveau er `{sleep}`, som standser dit program i et sekund. Hvis du skriver et tal efter {sleep} kommandoen, standser programmet i det antal sekunder.\n"
                example_code_3: "```\n{print} Min yndlingsfarve er...\n{sleep} 2\n{print} grøn!\n```\n"
                start_code: '{print} hej verden!'
            5:
                start_code: "navn {is} {ask} 'hvad er dit navn?'\n{if} navn {is} Hedy {print} 'fedt!' {else} {print} 'kedeligt'"
                example_code_3: "```\nflotte_farver {is} grøn, gul\nyndlingsfarve {is} {ask} 'Hvad er din yndlingsfarve?'\n{if} yndlingsfarve {in} flotte_farver {print} 'flot!'\n{else} {print} 'kedeligt'\n```\n"
                story_text: "## If... else....\nPå niveau 5 er der noget nyt, `{if}`! Med `{if}` kan du vælge mellem 2 forskellige muligheder.\nDenne kode printer lækkert hvis du taster Hedy som navn, and bøh! hvis du skriver noget andet.\n`{ask}` og `{print}` virker stadig som de gjorde på niveau 4.\n"
                example_code: "```\nnavn {is} {ask} 'hvad er dit navn?'\n{if} navn {is} Hedy {print} 'lækkert' {else} {print} 'buh!'\n```\n"
                story_text_3: "## Lists\nNår vi vil tjekke om noget er i en liste, kan vi nu bruge `{in}` kommandoen.\nDenne kode printer flot! hvis du vælger grøn eller gul, og ellers kedeligt.\n"
                story_text_2: "Nogle gang kan kode med `{if}` blive virkelig lang og ikke passe på en linie. <br> Du må gerne dele koden over to linjer, og begynde anden linje med `{else}` sådan her:\n"
                example_code_2: "```\nnavn {is} {ask} 'hvad hedder du?'\n{if} navn {is} Hedy {print} 'lækkert'\n{else} {print} 'buh!'\n```\n"
                story_text_4: "Noget andet der virker med `{if}` er `{pressed}`! Med `{pressed}` kan du forbinde et hvert bogstav i alfabetet og enhver taltast på dit tastatur til en kommando. Hvis du forbinder den, og trykker på tasten, vil noget ske. Prøv det!\n"
                example_code_4: "```\n{if} x {is} {pressed} {print} 'det virkede!'\n```\n"
            6:
                story_text: "## 1 + 1\nPå dette niveau lærer du noget nyt: du kan nu også regne.\n\n Plus er nemt, du skriver det som i matematik: `5 + 5` for eksempel. Minus virker også fint, det er `5 - 5`.\n\n Gange er en smule anderledes, for der er ikke noget gange symbol på dit tastatur. Prøv at lede, den er der virkelig ikke!\n Der for ganger vi med stjernen ved siden af ø: `5 * 5`. Læs det som \"5 gange 5\" det hjælper dig med at huske det.\n"
                example_code: "```\n{print} '5 plus 5 er ' 5 + 5\n{print} '5 minus 5 er ' 5 - 5\n{print} '5 gange 5 er ' 5 * 5\n```\n"
                story_text_2: "Vi ændrer også hvordan vi gemmer et ord i en variabel! Vi skal nu bruge `=` i stedet for `{is}` når vi gemmer et navn eller tal i en variabel, sådan her:\n"
                example_code_2: "```\nnavn = Hedy\nsvar = 20 + 4\n```\n"
                start_code: "{print} '5 gange 5 er ' 5 * 5"
            7:
                start_code: "{repeat} 3 {times} {print} 'Hedy er sjovt!'"
                story_text: "## Niveau 7! Niveau 7!\nNiveau 7 tilføjer `{repeat}` kommandoen.  `{repeat}` kan bruges til at udføre en kodelinje flere gange.\n"
                example_code: "```\n{repeat} 3 {times} {print} 'Hedy er sjovt!'\n```\n"
            11:
                story_text: "## Loops!\n`{print}` virker på samme måde men vi tilføjer en ny slags `{for}`. Du kan nu skrive `{for} counter {in} {range} 1 {to} 5` i stedet for `{repeat} 5 {times}` og bruge `counter` i dit program.\nPrøv og se hvad der sker! Husk at bruge indrykning efter `{for}` og `{if}` kommandoen (De betyder at linjen starter med fire mellemrum)."
                start_code: "{for} tæller {in} {range} 1 {to} 5\n    {print} tæller"
                example_code: "```\n{for} tæller {in} {range} 1 {to} 5\n    {print} tæller\n```\n"
            8:
                start_code: "{repeat} 5 {times}\n    {print} 'Hej folkens'\n    {print} 'Dette vil blive printet 5 gange'"
                story_text: "## Indrykning\n`{ask}` og`{print}` virker stadig som du kender dem. Men `{if}`, `{else}`, {pressed} og `{repeat}` har ændret sig!\nDu kan nu udføre en gruppe kode sammen, men du skal *indrykke* koden.\nDet betyder at sætte fire mellemrum i begyndelsen af linjen. Du skal også indrykke når du blot vil lave en gruppe med en enkelt linje.\n"
                example_code: "Sådan virker `{repeat}` kommandoen nu:\n```\n{repeat} 5 {times}\n    {print} 'Hej alle'\n    {print} 'Dette gentages 5 gange'\n```\nSådan virker `{if}` og `{else}` kommandoerne nu:\n\n```\nnavn {is} {ask} 'Hvad hedder du?'\n{if} navn {is} Hedy\n    {print} 'Velkommen Hedy'\n    {print} 'Du må spille på din computer!'\n{else}\n    {print} 'ADVARSEL!'\n    {print} 'Du må ikke bruge denne computer!'\n```\n"
            9:
                start_code: "{repeat} 3 {times}\n    mad = {ask} 'Hvad kunne do tænke dig?'\n    {if} mad {is} pizza\n        {print} 'lækkert!'\n    {else}\n        {print} 'pizza er bedre'"
                story_text: "## Det hele sat sammen!\nPå dette niveau må du kun bruge flere linjer med `{if}` og`{repeat}`, men du kan også sætte dem sammen!\nI eksemplet kan du se en `{if}` kommando inde i en `{repeat}` kommando. Det er også tilladt den anden vej rundt, og en `{if}` er også tilladt i en anden `{if}` og en `{repeat}` i en `{repeat}`.\nGiv det et forsøg!\n"
                example_code: "```\n{repeat} 3 {times}\n    mad = {ask} 'Hvad kunne du tænke dig?'\n    {if} mad {is} pizza\n        {print} 'lækkert!'\n    {else}\n        {print} 'pizza er bedre'\n```\n"
            10:
                start_code: "alle_dyr {is} hunde, katte, fisk\n{for} dyr {in} alle_dyr\n  {print} 'Jeg elsker ' dyr"
                story_text: "## For hvert element i min liste...\nPå dette niveau lærer vi en ny kommando der hedder `{for}`. Med `{for}` kan du lave en liste og bruge alle elementerne.\n`{for}` skaber en blok, ligesom `{repeat}` og `{if}` så alle linjer i blokken skal starte med mellemrum (indrykning)."
                example_code: "```\nalle_dyr {is} hunde, katte, fisk\n{for} dyr {in} alle_dyr\n  {print} 'Jeg elsker ' dyr\n```\n"
            12:
                start_code: "{print} 'kommatal skal nu bruge et punktum'\n{print} 2.5 + 2.5"
                example_code: "```\n{print} 'To og en halv plus to og en halv er..'\n{print} 2.5 + 2.5\n```\n"
                story_text_2: "**Al tekst skal være i anførselstegn**\nFra dette niveau og frem skal du også bruge anførselstegn om tekst når den gemmes med `=`:\n"
                example_code_2: "```\nnavn = 'Robotten Hedy'\n{print} 'Hej ' navn\n```\n"
                story_text_3: "**Alle elementer i lister skal også have anførselstegn**\nLister er tekst, så de skal også have anførselstegn. Bemærk at hvert element i listen har anførselstegn.\nDette gør det muligt at gemme ord som samme element i listen, for eksempel 'Iron Man'.\n"
                story_text: "## Tal og tekst\n**Kommatal**\nIndtil nu, har Hedy ikke tilladt kommatal som 1,5, men nu tillader vi det. Bemærk at computere bruger `.` i kommatal."
                example_code_3: "```\nsuperhelte = 'Spiderman', 'Batman', 'Iron Man'\n{print} superhelte {at} {random}\n```\n"
                story_text_4: "**Al tekst efter `{if}` sammenligninger skal også have anførselstegn**\n"
                example_code_4: "```\nnavn= {ask} 'Hvad hedder du?'\n{if} navn = 'Robotten Hedy'\n    {print} 'Hej med dig!'\n```\n"
                story_text_5: "**Tal har ikke brug for anførselstegn**\nMed tal, behøver du ikke at bruge anførselstegn efter `=`:\n"
                example_code_5: "```\npoint = 25\n{print} 'Du fik ' point\n```\n"
                story_text_6: "**Matematik med ord** \nPå dette niveau er det også tilladt at bruge + symbolet tekst. For eksempel:"
                example_code_6: "```\na = 'Hej '\nb = 'verden!'\n{print} a + b\n```\n"
            14:
                example_code_3: "```\nnavn = {ask} 'Hvad hedder du?'\n{if} navn != 'Hedy'\n    {print} 'Du er ikke Hedy'\n```\n"
                start_code: "alder = {ask} 'Hvor gammel er du?'\n{if} alder < 13\n    {print} 'Du er yngre end mig!'\n{else}\n    {print} 'Du er ældre end mig!'"
                story_text: "## Stor, Større, Størst!\nVi skal lære flere nye ting. Du kender dem måske allerede fra matematik,  `<` og `>`.\n`<` tjekker om det første tal er mindre end det andet, for eksempel alder `<` 12 tjekker om alder er mindre end 12.\nHvis du gerne vil tjekke om det første tale er mindre end eller lig med, kan du bruge `<=`, for eksempel alder `<=` 11.\n`>` tjekker  om det første tal er større end det andet, for eksempel point `>` 10 tjekker om point er større end 10.\nHvis du vil tjekke om det første tal er større end eller lig med det andet, kan du bruge `>=`, for eksempel point `>=` 11.\nDu kan bruge disse sammenligninger i en `{if}`, sådan her:\n"
                example_code: "```\nalder = {ask} 'Hvor gammel er du?'\n{if} alder > 12\n    {print} 'Du er ældre end mig!'\n```\n"
                story_text_2: "Fra dette niveau og opefter, hvis du vil tjekke præcist lig med, skal du bruge to lig med tegn. Det er sådan man gør i de fleste programmingssprog:\n"
                example_code_2: "```\nnavn = {ask} 'Hvad hedder du?'\n{if} navn == 'Hedy'\n    {print} 'Du er sej!'\n```\n"
                story_text_3: "Du kan også sammenligne om noget *ikke* lig med noget andet ved at bruge `!=` sådan her:\n"
            13:
                start_code: "navn = {ask} 'hvad hedder du?'\nalder = {ask} 'hvor gammel er du?'\n{if} navn {is} 'Hedy' {and} alder {is} 2\n    {print} 'Du er virkelig Hedy!'"
                story_text: "## Og... Eller..?\nVi skal nu lære `{and}` og `{or}`! Hvis du vil tjekke to udsagn, behøver du ikke bruge to {if} kommandoer men kan blot bruge `{and}` og `{or}`. Hvis du bruger `{and}`, skal begge udsagn, til højre og venstre for `{and}` være sande. Vi kan også bruge `{or}`. Så behøver kun et enkelt udsagn være sandt."
                example_code: "```\nnavn = {ask} 'hvad hedder du?'\nalder = {ask} 'hvor gammel er du?'\n{if} navn {is} 'Hedy' {and} alder {is} 2\n    {print} 'Du er virkelig Hedy!'\n```\n"
            15:
                start_code: "svar = 0\n{while} svar != 25\n    svar = {ask} 'Hvad er 5 gange 5?'\n{print} 'Det er rigtigt'"
                story_text: "## Flere loops!\nNu skal vi lære et nyt loop, et `{while}` loop! Vi fortsætter loop'et så længe udsagnet er sandt.\nSå glem ikke at ændre værdien inde i loop'et.\n\nI eksemplet, fortsætter vi indtil der er blevet givet det rigtige svar.\nHvis det rigtige svar ikke bliver givet, slutter loop'et aldrig!"
                example_code: "```\nsvar = 0\n{while} svar != 25\n    svar = {ask} 'Hvad er 5 gange 5?'\n{print} 'Det er rigtigt'\n```\n"
        description: Niveau forklaring
        default_save_name: intro
    fortune:
        name: Fortune teller
        levels:
            3:
                story_text_2: "### Excercise\nNow, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or 'ask again'.\n"
                story_text: "## Fortune Teller\nIn the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.\nIn this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:\n"
                example_code: "\nIn this example the player can {ask} Hedy a yes-no question and Hedy will pick a random answer for you.\n```\n{print} I’m Hedy the fortune teller!\nquestion {is} {ask} What do you want to know?\n{print} This is what you want to know: question\nanswers {is} yes, no, maybe\n{print} My crystal ball says...\n{sleep} 2\n{print} answers {at} {random}\n```\n"
                start_code: '# place your code here'
            4:
                example_code: "```\n_ Add the quotation marks to this code _\n{print} Im Hedy the fortune teller!\nquestion {is} {ask} What do you want to know?\n{print} This is your question:  question\nanswers {is} yes, no, maybe\n{print} My crystal ball says...\n{sleep} 2\n{print} answers {at} {random}\n```\n"
                start_code: '# place your code here'
                story_text: "## Fortune Teller\nThis level has no new functions, but allows you to practice with using the quotation marks.\nYou can remake your level 3 code, and make sure to add the quotation marks in the right places!\n\nMind that in level 3, we couldn't use the word 'question' as both the name of the variable and a normal word that could be printed.\nThe quotation marks in level 3 make this possible!\n\nImportant! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.\nMake sure to remove those apostrophes and change the spelling to Im or Whats.\n\n### Excercise\nWe have removed all the quotation marks from this example code, can you add them in all the right places?\n"
            5:
                start_code: '# place your code here'
                story_text_3: "### Excercises\nThis concept can be used to make may different programs, just be creative! For example you could create a machine that predicts that your favorite sports team will beat all the competitors!\nOr you could make  Snow White's magic mirror on the wall, to tell everyone you are the fairest of them all!\nLet your imagination do the work!\n"
                story_text: "## Fortune Teller\nIn this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!\nBy using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.\nCheck out this example to find out how.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'I can predict if youll win the lottery tomorrow!'\nperson {is} {ask} 'Who are you?'\n{if} person {is} Hedy {print} 'You will definitely win!\U0001F929' {else} {print} 'Bad luck! Someone else will win!\U0001F62D'\n```\n"
                story_text_2: "## Hack the program\nReplace Hedy with your own name in the last line, and Hedy will always predict that you will win the lottery and others won't!\nOf course this might raise some suspicion with the other players... To avoid that, you can make sure that Hedy does give different answers every time you run the code.\nBut of course, still gives you a positive answer and the other players a negative one.\n"
                example_code_2: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'I can predict if you will win the lottery tomorrow!'\nperson {is} {ask} 'Who are you?'\ngoodanswer {is} Hurray! You win!, You will definitely win!, We have a winner!\nbadanswer {is} Bad luck! Try again!, Another person will win, You lose!\n{if} person {is} Hedy {print} goodanswer {at} {random} {else} {print} badanswer {at} {random}\n```\n"
            6:
                story_text: "## Fortune Teller\nIn this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.\nFor example you could calculate how rich you'll get or how many kids you will have when you grow up.\n\n\n\n### Excercise\nCan you think of your own (silly) fortune telling machine?\n"
                example_code: "```\n{print} 'I am Hedy the fortune teller!'\n{print} 'I can predict how many kids youll get when you grow up!'\nage = {ask} 'How old are you?'\nsiblings = {ask} 'How many siblings do you have?'\nlength = {ask} 'How tall are you in centimetres?'\nkids = length / age\nkids = kids - siblings\n{print} 'You will get ...'\n{sleep}\n{print} kids ' kids!'\n```\n\n## Example Silly Fortune Teller\nIf the previous example wasn't silly enough for you, take a look at this one!\n```\n{print} 'Im Hedy the silly fortune teller!'\n{print} 'I will predict how smart you are!'\nfootball = {ask} 'On a scale 1-10 how much do you love football?'\nbananas = {ask} 'How many bananas did you eat this week?'\nhygiene = {ask} 'How many times did you wash your hands today?'\nresult = bananas + hygiene\nresult = result * football\n{print} 'You are ' result ' percent smart.'\n```\n"
                start_code: '# place your code here'
            1:
                story_text_2: "### Excercise\nHedy now only tells you your name. Can you expand the code so that Hedy can predict more things about you?\nObviously, Hedy isn't a very good fortune teller yet, as she can only repeat the answers that were given by the players!\nTake a look in level 2 to improve your fortune teller.\n"
                start_code: '# place your code here'
                story_text: "## Fortune Teller\nHave you ever been to a carnival and had your future predicted by a fortune teller? Or have you ever played with a magic eight ball?\nThen you probably know that they can't really predict your future, but it's still fun to play!\n\nIn the upcoming levels you can learn how to create your own fortune telling machine!\nIn level 1 you can start off easy by letting Hedy introduce herself as a fortune teller and let her {echo} the players' answers.\nLike this:\n"
                example_code: "```\n{print} Hello, I'm Hedy the fortune teller!\n{ask} Who are you?\n{print} Let me take a look in my crystal ball\n{print} I see... I see...\n{echo} Your name is\n```\n"
            10:
                story_text: "## Fortune Teller\nIn this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.\n"
                example_code: "```\nhouses = mansion, apartment, shack, house\nloves = nobody, a royal, their neighbour, their true love\npets = dog, cat, elephant\nnames = Jenna, Ryan, Jim\n{for} name {in} names\n    {print} name ' lives in a ' houses {at} {random}\n    {print} name ' will marry ' loves {at} {random}\n    {print} name ' will get a ' pets {at} {random} ' as their pet.'\n    {sleep}\n```\n"
                story_text_2: "### Excercise\nWe can also make a Harry Potter themed fortune teller. Fill in the correct line of code in line 5 and add the correct indentation to line 6 - 8 and this program will act like the sorting hat!\n"
                example_code_2: "```\nhouses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw\nsubjects = potions, defence against the dark arts, charms, transfiguration\nfears = Voldemort, spiders, failing your OWL test\nnames = Harry, Ron, Hermione\n_\n_ {print} name ' is placed in ' houses {at} {random}\n_ {print} name ' is great at ' subjects {at} {random}\n_ {print} name 's greatest fear is ' fears {at} {random}\n```\n"
                start_code: '# place your code here'
            7:
                story_text: "## Fortune Teller\nIn this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'You can ask 3 questions!'\n{repeat} 3 {times} question = {ask} 'What do you want to know?'\nanswer = yes, no, maybe\n{repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}\n```\n"
                story_text_2: "### Excercise\nThe example program asks three questions but... Does not give three answers.\nMake a list of answers and print a random one, three times. Think of fun answers yourself.\n\nSadly we cannot yet show the answers pairwise. In the upcoming levels the layout of `{repeat}` command will change, soving that problem.\n"
                start_code: '# place your code here'
            8:
                story_text: "## Fortune Teller\nIn the previous levels you've learned how to use `{repeat}` to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.\nNow that problem is solved, because of the new way of using the `{repeat}` command.\nIn the next example you can have your fortune teller ask 3 questions and also print them!\n\n### Excercise\nCan you fill in the `{repeat}` command correctly on the blanks?\n"
                example_code: "```\n{print} 'I am Hedy the fortune teller!'\n{print} 'You can ask me 3 questions.'\nanswers = yes, no, maybe\n_ _ _\n   question = {ask} 'What do you want to know?'\n   {print} question\n   {sleep}\n   {print} 'My crystal ball says...' answers {at} {random}\n```\n"
                start_code: '# place your code here'
            12:
                story_text: "## Fortune Teller\nIn this level you can make your fortunes multiple words. Can you add more different fortunes to the list?\n"
                example_code: "```\nfortunes = 'you will slip on a banana peel', _\n{print} 'I will take a look in my crystall ball for your future.'\n{print} 'I see... I see...'\n{sleep}\n{print} fortunes {at} {random}\n```\n"
                start_code: '# place your code here'
        description: Let Hedy predict the future
        default_save_name: Fortune Teller
    haunted:
        levels:
            3:
                example_code_3: "```\n{print} The big gameshow!\n{print} There are 3 suitcases in front of you...\n{print} One of them contains _\n_\n```\n"
                story_text: "## Haunted house game\nIn the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.\nIn this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!\nLet Hedy decide randomly!\n"
                story_text_2: "### Excercise\nThis story is pretty straight forward, maybe you can spook it up a bit by adding a more exciting story.\nAlso you have very limited outcomes right now, there are only 3 options of what's behind the doors. Maybe you can think of more monsters to add to the list!\n"
                story_text_3: "## Change the game into a tv gameshow!\nLastly, we'd like to challenge you to change this game into a gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!\nCan you do it?\n"
                start_code: '# place your code here'
                example_code_2: "```\n_ Escape from the haunted house!\n_ There are 3 doors in front of you...\n_ _ _ Which door do you choose?\n_ You picked door ... choice\nmonsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED\n_ You see...\n{sleep}\n_ _ _ _\n```\n"
            5:
                example_code: "```\n{print} 'Escape from the haunted house!'\n{print} 'There are 3 doors in front of you...'\ndoors {is} 1, 2, 3\nmonsters {is} werewolf, mummy, vampire, zombie\nchosen_door {is} {ask} 'Which door do you choose?'\n{print} 'You chose door...' chosen_door\n{sleep}\ncorrect_door {is} doors {at} {random}\n_ _ _ _ {print} 'Great! Youve escaped!'\n{else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}\n```\n"
                start_code: '# place your code here'
                story_text: "## Haunted House\nUp until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.\nIf the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).\nIn this level you can only win the game by picking the same door Hedy picked randomly.\n\n### Excercise\nCan you find the 4 missing words to complete the code?\n"
            11:
                story_text: "## Haunted House\nIn this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.\n\n### Excercise\nFinish the program with the correct line of code. Mind: There are 3 rooms that the player needs to survive before they win!\n"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nplayer {is} alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n_\n    {if} player {is} alive\n        correct_door = doors {at} {random}\n        {print} 'Room ' i\n        {print} 'There are 3 doors in front of you...'\n        chosendoor = {ask} 'Which door do you choose?'\n        {if} chosendoor {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n"
                start_code: "{print} 'Escape from the haunted house!'"
            14:
                start_code: '# place your code here'
                story_text: "## Haunted House\nIn this level you can use the `<` and `>` symbol to introduce lives to your game.\n"
                example_code: "```\n{print} 'Escape from the haunted house'\nlives = 3\ndoors = 1, 2, 3\nmonsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'\n{for} i {in} {range} 1 {to} 10\n    {if} lives > 0\n        good_door = doors {at} {random}\n        monster = monsters {at} {random}\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} good_door == chosen_door\n            {print} 'You have chosen the correct door'\n        {else}\n            {print} 'You see...' monster\n            {if} monster == 'a sleeping 3 headed dog'\n                {print} 'Pffieuw.... Its asleep'\n            {else}\n                {print} 'You lose one life'\n                lives = lives -1\n    {else}\n        {print} 'GAME OVER'\n```\n"
            16:
                start_code: '# place your code here'
                story_text: "## Haunted House Game\nThis haunted house game uses the connection between the lists you can use in this level.\nFor example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.\nCheck out the code!\n"
                example_code: "```\nnumbers = [1, 2, 3]\ni = numbers[{random}]\nhint = ['growling', 'a cackling laugh', 'fluttering batwings']\nmonsters = ['zombie', 'witch', 'vampire']\nbad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']\ngood_fate = ['You throw the ham. The zombie is distracted and starts etaing it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']\nweapons = ['ham', 'lighter', 'garlic']\n{print} 'You are standing in front of an old mansion'\n{print} 'Something is not right here'\n{print} 'You hear ' hint[i]\n{print} 'You are going to explore it'\n{print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'\nyour_weapon = {ask} 'What do you bring with you?'\n{print} 'With your ' your_weapon ' you enter the living room'\n{print} 'There you find a ' monsters[i]\nneeded_weapon = weapons[i]\n{if} your_weapon == needed_weapon\n    {print} 'You use your ' your_weapon\n    {print} good_fate[i]\n    {print} 'YOU WIN!'\n{else}\n    {print} 'You have chosen the wrong weapon...'\n    {print} bad_fate[i]\n    {print} 'GAME OVER'\n```\n"
            1:
                story_text: "## Haunted house\nIn this adventure you are working towards making a game in which you have to escape from a haunted house by picking the correct door.\nIf you pick the right door you'll survive, but if not a terrible monster might...\n\nIn level 1 we start our haunted house game by making up a scary story and ask the player what monster they'll see in the haunted house.\n"
                example_code: "```\n{print} How did I get here?\n{print} I remember my friend telling me to go into the old mansion...\n{print} and suddenly everything went black.\n{print} But how did I end up on the floor...?\n{print} My head hurts like Ive been hit by a baseball bat!\n{print} What's that sound?\n{print} Oh no! I feel like Im not alone in this house!\n{print} I need to get out of here!\n{print} There are 3 doors in front of me..\n{ask} Which door should i pick?\n{echo} I choose door\n{print} ...?\n```\n"
                story_text_2: "### Excercise\nCan you finish the scary story? Or make up your own haunted house story?\n"
                start_code: '{print} How did I get here?'
            2:
                story_text: "## Haunted House\nIn this haunted house you can choose your monsters with emojis. Of course you could also use words.\n"
                example_code: "```\nmonster_1 {is} \U0001F47B\nmonster_2 {is} \U0001F921\nmonster_3 {is} \U0001F476\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
                story_text_2: "### Excercise\nIn the example above the monsters are predetermined. So each time you run your code, the output is the same.\nCan you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?\n"
                example_code_2: "```\nmonster_1 {is} _\nmonster_2 {is} _\nmonster_3 {is} _\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
                start_code: monster1 {is} _
            4:
                start_code: '# place your code here'
                story_text: "## Haunted house\nIn this level you learn how to use quotation marks in your games.\nCan you make your Haunted House level 4 proof?\n"
                example_code: "```\n{print} _ Escape from the haunted house! _\n{print} _ There are 3 doors in front of you... _\nchoice {is} {ask} _ Which door do you choose? _\n{print} _ You picked door ... _ choice\nmonsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED\n{print} _ You see... _\n{sleep}\n{print} monsters {at} {random}\n ```\n"
            9:
                story_text: "## Haunted House\nIn this level you can use nesting, which allows you to make the haunted house even more interactive!\n\n### Excercise\nNow it's very hard to win this game, can you make it easier to win?\nFor example by only having 1 wrong door and 2 correct doors instead of 1 correct door and 2 wrong ones?\n"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nplayer = alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{repeat} 3 {times}\n    {if} player {is} alive\n        correct_door {is} doors {at} {random}\n        {print} 'There are 3 doors in front of you...'\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} chosen_door {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n"
                start_code: "{print} 'Escape from the haunted house!'"
        name: Haunted House
        description: Escape from the haunted house
        default_save_name: Haunted House
    piggybank:
        levels:
            12:
                start_code: '# place your code here'
                example_code: "```\n{print} 'The digital piggy bank'\nwish = {ask} 'What would you like to buy?'\nprice = {ask} 'How much does that cost?'\nsaved = {ask} 'How much money have you saved already?'\nallowance = {ask} 'How much pocket money do you get per week?'\nto_save = price - saved\nweeks = to_save / allowance\n{print} 'You can buy a ' _ ' in ' _ ' weeks.'\n```\n"
                story_text: "## Piggy Bank\nIn this adventure you learn how to make a digital piggy bank.\nFinish the code to calculate how much money you have and how long you need to save up to buy what you want!\n"
            14:
                start_code: '# place your code here'
                story_text: "## Piggybank\nIn this level you can let Hedy tell you if you have saved up enough money!\n"
                example_code: "```\nmoney = {ask} 'How much money have you saved?'\nwish = {ask} 'How much money do you need?'\nallowance = {ask} 'How much pocket money do you get each week?'\nto_save = wish - money\nweeks = to_save / allowance\n{if} wish > money\n    {print} 'You need to save up some more!'\n    {print} 'Youll need ' weeks ' more weeks.'\n{else}\n    {print} 'Great! You have enough'\n    {print} 'Lets go shopping!'\n```\n"
        name: Piggy Bank
        description: Count your pocketmoney!
        default_save_name: Piggy Bank
    language:
        levels:
            16:
                start_code: '# place your code here'
                story_text: "## Learn a new language\nMake your own program to practice your vocabulary in a new language.\n"
                example_code: "```\nfrench_words = ['bonjour', 'ordinateur', 'pomme de terre']\ntranslation = ['hello', 'computer', 'potato']\nscore = 0\n{for} i {in} {range} 1 {to} 3\n    answer = {ask} 'What does ' french_words[i] ' mean?'\n    correct = translation[i]\n    {if} answer == correct\n        {print} 'Correct!'\n        score = score + 1\n    {else}\n        {print} 'Wrong, ' french_words[i] ' means ' translation[i]\n{print} 'You gave ' score ' correct answers.'\n```\n"
            5:
                story_text: "## Learn a new language\nMake your own program to practice your vocabulary in a new language.\n\n### Excercise\nCan you make this program for a different language? Or can you add more words to the French one?\n"
                example_code: "```\n{print} 'Learn French!'\ncat {is} {ask} '\U0001F431'\n{if} cat {is} chat {print} 'Terrific!'\n{else} {print} 'No, cat is chat'\nfrog {is} {ask} '\U0001F438'\n{if} frog {is} grenouille {print} 'Super!'\n{else} {print} 'No, frog is grenouille'\n```\n"
                start_code: '# place your code here'
        name: Language
        description: Practice words in a foreign language
        default_save_name: Language
    secret:
        name: SuperSpy
        description: Make your own spy code
        default_save_name: SuperSpy
        levels:
            12:
                story_text: "## Make a secret code like a super spy\nIn this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.\nIf the enemy tries to crack the code, they will get some false info to waste their time.\n\n### Excercise\nMake your own secret code for your superspy. Can you make it consist of even more variables?\n"
                example_code: "```\nname {is} {ask} 'What is your name?'\nif name {is} 'Agent007'\n    a {is} 'Go to the airport '\n{else}\n    a {is} 'Go to the trainstation '\npassword {is} {ask} 'What is the password?'\n{if} password {is} 'TOPSECRET'\n    b {is} 'tomorrow at 02.00'\n{else}\n    b {is} 'today at 10.00'\n{print} a + b\n```\n"
                start_code: '## place your code here'
            13:
                story_text: "## Superspy\nCan you fill in the right command on the blank? Mind: The superspy has to answer BOTH questions correctly, before they get the confidential information!\n"
                example_code: "```\nname {is} {ask} 'What is your name?'\npassword {is} {ask} 'What is your password?'\n{if} name {is} 'Agent007' _ password {is} 'TOPSECRET'\n    {print} 'Go to the airport at 02.00'\n{else}\n    {print} 'Go to the trainstation at 10.00'\n ```\n"
                start_code: '## place your code here'
    tic:
        default_save_name: Tic
        levels:
            17:
                start_code: '## place your code here'
                story_text: "## Tic Tac Toe\nIn the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.\nThis made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.\nTo use the {elif} to let Hedy check whether or not a player has won is fun, but it also requires a fair amount of extra lines.\n\nIn the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).\nYou can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.\nThis means that the {while} loop will be stopped and the game ends.\n"
                example_code: "```\nsign = 'x'\nopen_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over':\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots:\n        {remove} choice {from} open_spots\n        {if} choice == 1:\n            spot_1 = sign\n        {if} choice == 2:\n            spot_2 = sign\n        {if} choice == 3:\n            spot_3 = sign\n        {if} choice == 4:\n            spot_4 = sign\n        {if} choice == 5:\n            spot_5 = sign\n        {if} choice == 6:\n            spot_6 = sign\n        {if} choice == 7:\n            spot_7 = sign\n        {if} choice == 8:\n            spot_8 = sign\n        {if} choice == 9:\n            spot_9 = sign\n    {else}:\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {else}:\n        {if} sign == 'x':\n            sign = 'o'\n        {else}:\n            sign = 'x'\n```\n"
            13:
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game {is} 'on'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice {is} 1\n                spot_1 = sign\n            {if} choice {is} 2\n                spot_2 = sign\n            {if} choice {is} 3\n                spot_3 = sign\n            {if} choice {is} 4\n                spot_4 = sign\n            {if} choice {is} 5\n                spot_5 = sign\n            {if} choice {is} 6\n                spot_6 = sign\n            {if} choice {is} 7\n                spot_7 = sign\n            {if} choice {is} 8\n                spot_8 = sign\n            {if} choice {is} 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner {is} 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign {is} 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
                start_code: '## place your code here'
                story_text: "## Tic Tac Toe\nIn this adventure you can program a game of Tic Tac Toe. You can play with two people. Taking turns, you pick a number of the spot (1 - 9) you want to put your sign (x or o) on.\nThe first player that gets 3 in a row (horizontally, vertically or diagonally) wins!\n"
            14:
                story_text: "## Tic Tac Toe\nIn the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.\nYou can use this knowledge in your new Tic Tac Toe game, like this:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game != 'over'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice == 1\n                spot_1 = sign\n            {if} choice == 2\n                spot_2 = sign\n            {if} choice == 3\n                spot_3 = sign\n            {if} choice == 4\n                spot_4 = sign\n            {if} choice == 5\n                spot_5 = sign\n            {if} choice == 6\n                spot_6 = sign\n            {if} choice == 7\n                spot_7 = sign\n            {if} choice == 8\n                spot_8 = sign\n            {if} choice == 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner == 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign == 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
                start_code: '## place your code here'
            15:
                story_text: "## Tic Tac Toe\nIn this level you can improve your Tic Tac Toe game with the {while} loop. With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 {to} 9` into one simple line.\nCheck it out:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over'\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots\n        {remove} choice {from} open_spots\n        {if} choice == 1\n            spot_1 = sign\n        {if} choice == 2\n            spot_2 = sign\n        {if} choice == 3\n            spot_3 = sign\n        {if} choice == 4\n            spot_4 = sign\n        {if} choice == 5\n            spot_5 = sign\n        {if} choice == 6\n            spot_6 = sign\n        {if} choice == 7\n            spot_7 = sign\n        {if} choice == 8\n            spot_8 = sign\n        {if} choice == 9\n            spot_9 = sign\n    {else}\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    winner = {ask} 'Did you win?'\n    {if} winner == 'yes'\n        {print} 'Good job, player ' sign '!'\n        game = 'over'\n    {else}\n        {if} sign == 'x'\n            sign = 'o'\n        {else}\n            sign = 'x'\n```\n"
                start_code: '## place your code here'
        name: Tic Tac Toe
        description: Play a game of Tic Tac Toe!
    quizmaster:
        name: Quizmaster
        description: Make your own quiz!
        default_save_name: Quizmaster
        levels:
            14:
                story_text: "## Make your own quiz\nIn this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!\nYou can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!\n"
                example_code: "```\n{print} 'Make your own quiz'\npoints_a = 0\npoints_b = 0\n{print} 'Question'\n{print} 'Answer option A'\n{print} 'Answer option B'\nanswer = {ask} 'Which answer?'\n{if} answer == 'A'\n    points_a = points_a + 1\n{if} answer == 'B'\n    points_b = points_b + 1\n{print} 'End of the quiz!'\n{print} 'Lets see the results!'\n{if} points_a > points_b\n    {print} 'You belong to the A club'\n{if} points_b > points_a\n    {print} 'You belong to the B club'\n```\n"
                start_code: '# place your code here'
    blackjack:
        levels:
            17:
                story_text: "## Create a game of Blackjack\nBlackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.\nThe Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.\nIf you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.\nBut be careful not to get more than 21 points, because if you do, you lose!\nThe player who gets closest to 21, without going over it, wins!\n\nHave fun!\n"
                example_code: "```\n{print} 'BLACKJACK'\ncards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']\npoints = 0\ndealer_points = 0\ncard_1 = cards[{random}]\ncard_2 = cards[{random}]\ncard_3 = cards [{random}]\ndealer_card_1 = cards[{random}]\ndealer_card_2 = cards[{random}]\ndealer_card_3 = cards[{random}]\n# Points for card 1\n{if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':\n    points = points + 10\n{elif} card_1 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_1\n# Points for card 2\n{if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':\n    points = points + 10\n{elif} card_2 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_2\n# Points for dealer card 1\n{if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_1 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_1\n# Points for dealer card 2\n{if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_2 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_2\n# Two Aces\n{if} card_1 == 'Ace' {and} card_2 == 'Ace':\n    points = 12\n{if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':\n    dealer_points = 12\n# Scoreboard\n{print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'\n{print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'\n# Extra card for the player\nhit = {ask} 'Do you want an extra card?'\n{if} hit == 'yes':\n    {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':\n        points = points + 10\n    {elif} card_3 == 'Ace':\n        {if} points > 11:\n            points = points + 11\n        {else}:\n            points = points + 1\n    {else}:\n        points = points + card_3\n    print 'You get an extra ' card_3 ' (' points ' points)'\n{else}:\n    print 'No extra cards'\n# Winner\n{if} points > 21 {or} dealer_points > points {or} dealer_points == 21:\n    {print} 'You lose'\n{elif} dealer_points < 17:\n    {print} 'The dealer takes an extra card. It is a... ' dealer_card_3\n    {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':\n        dealer_points = dealer_points + 10\n    {elif} dealer_card_3 == 'Ace':\n        {if} dealer_points < 11:\n            dealer_points = dealer_points + 11\n        {else}:\n            dealer_points = dealer_points + 1\n    {else}:\n        dealer_points = dealer_points + dealer_card_3\n    {print} 'The dealer has ' dealer_points ' points now'\n    {if} dealer_points < 21 {and} dealer_points > points:\n        {print} 'You lose'\n    {else}:\n        {print} 'You win'\n{elif} points > dealer_points {and} points < 21:\n    {print} 'You win!'\n```\n"
                start_code: '# place your code here'
        name: Blackjack
        description: Try to get as close to 21 as you can
        default_save_name: Blackjack
