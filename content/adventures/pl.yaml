adventures:
    default:
        name: "Pierwsze kroki"
        description: "Wyjaśnienie poziomu"
        default_save_name: "wstęp"
        levels:
            1:
                start_code: '{print} witaj świecie!'
                story_text: "## Witaj w Hedy!\nNa Poziomie 1 nauczysz się używać komend `{print}`, `{ask}` i `{echo}`.\nWpisz swój kod w polu programowania. Lub naciśnij zielony przycisk w przykładowym bloku kodu, a kod zostanie wpisany za Ciebie!\nWypróbuj kod samodzielnie za pomocą zielonego przycisku „Uruchom kod” pod polem programowania.\n\nMożesz wypisać tekst na ekran przy użyciu komendy `{print}`.     \n"
                example_code: "```\n{print} Hej!\n{print} Witaj w Hedy!\n```\n"
                story_text_2: "Możesz również zapytać o dane za pomocą `{ask}` oraz powtórzyć je z powrotem za pomocą komendy `{echo}`.\n"
                story_text_3: "Zacznijmy! Nie wiesz co stworzyć? Na następnych zakładkach znajdziesz pomysły na programy do stworzenia.\n"
                example_code_2: "```\n{ask} Jak masz na imię?\n{echo} Hej\n```\n"
            2:
                story_text: "## Zmienne\nW poziomie 2 nauczymy się 2 nowych komend: `{is}` oraz `{sleep}`.\nMożesz nazwać słowo za pomocą `{is}`. Takie słowo nazywamy zmienną. W tym przykładzie stworzyliśmy zmienną nazwaną imię oraz zmienną nazwaną wiek. Możesz użyć słowa imię w dowolnym miejscu w swoim kodzie i zostanie ono zamienione przez Hedy w taki sposób:\n\nDzięki temu nie potrzebujesz już więcej komendy `{echo}`!\n"
                example_code: "```\nimię {is} Hedy\nwiek {is} 15\n{print} imię ma wiek lat\n```\n"
                story_text_2: "`{print}` wciąż działa tak samo, ale komenda `{ask}` zmieniła się. Musisz użyć zmiennej również w komendzie `{ask}`. Wygląda to tak:\n"
                example_code_2: "```\nodpowiedź {is} {ask} Jak masz na imię?\n{print} Cześć odpowiedź\n```\n"
                story_text_3: "Inną nową komendą w tym poziomie jest `{sleep}`, która zatrzymuje twój program na sekundę. Jeżeli wpiszesz numer za komendą {sleep}, program zatrzyma się na podaną liczbę sekund.\n"
                example_code_3: "```\n{print} Moim ulubionym kolorem jest...\n{sleep} 2\n{print} zielony!\n```\n"
                start_code: '{print} witaj świecie!'
            3:
                story_text: "## Stwórz listę!\nW poziomie 3 możesz stworzyć listę. Możesz pozwolić komputerowi wybrać coś losowo z tej listy. Możesz to zrobić za pomocą `{at} {random}`.\n"
                example_code: "```\nzwierzęta {is} pies, kot, kangur\n{print} zwierzęta {at} {random}\n```\n"
                story_text_2: Możesz również dodać elementy do listy za pomocą `{add}` lub usunąć elementy za pomocą `{remove}`.
                example_code_2: "```\nzwierzęta {is} pies, kot, kangur\n{add} pingwin {to_list} zwierzęta\n{remove} kot {from} zwierzęta\n{print} zwierzęta {at} {random}\n```\n"
                start_code: '{print} witaj świecie!'
            4:
                start_code: "{print} 'Witaj świecie'"
                example_code: "```\n{print} 'Od teraz musisz używać cudzysłowów!'\nodpowiedź {is} {ask} 'Czego od teraz musimy używać?'\n{print} 'Musimy używać ' odpowiedź\n```\n"
                story_text: "## 'Cuzdzysłowy'\nW poziomie 4 `{ask}` i `{print}` zmieniły się.\n\nMusisz umieścić w cudzysłowach tekst, który chcesz wyświetlić.\n\nJest to przydatne, ponieważ teraz możesz wyświetlić na ekranie wszystkie słowa, które chcesz. Również słowa, których użyłeś, aby przechować coś za pomocą `{is}`.\n\nWiększość języków programowania również używa cudzysłowów podczas wyświetlania tekstu, a więc jesteśmy o jeden krok bliżej prawdziwego programowania!\n"
                story_text_2: "## Przygody stają się coraz trudniejsze\nOd teraz przygody w kolejnych zakładkach stają się coraz trudniejsze.\nNajlepiej zacząć od lewej strony i rozwiązywać je w prawą stronę tak, aby przechodzić do coraz trudniejszych wyzwań.\n"
                example_code_2: "```\n_ This is the wrong way of using apostrophes _\n{print} 'I'm babysitting my sister's kids'\n{print} 'What's more fun than that?'\n```\n"
            5:
                start_code: "imię {is} {ask} 'Jak masz na imię?'\n{if} imię {is} Hedy {print} 'super!' {else} {print} 'eh'"
                story_text: "## Jeżeli... w przeciwnym razie...\nW poziomie 5 pojawia się coś nowego `{if}`! Za pomocą `{if}` możesz wybrać pomiędzy dwoma opcjami.\nTen kod wyświetla „to miło”, jeśli wprowadzisz imię Hedy, w przeciwnym wypadku wyświetli „bu!”.\n`{ask}` i `{print}` działają w dalszym ciągu tak jak w poziomie 4.\n"
                example_code: "```\nimię {is} {ask} 'jak masz na imię?'\n{if} imię {is} Hedy {print} 'to miło' {else} {print} 'bu!'\n```\n"
                story_text_3: "## Listy\nJeśli chcemy sprawdzić czy coś znajduje się wewnątrz listy, możemy od teraz użyć komendy`{in}`.\nTen kod wyświetla „śliczny!” jeśli wy ierzesz zielony lub żółty, w przeciwnym razie wyświetli „eh”.\n"
                example_code_3: "```\nładne_kolory {is} zielony, żółty\nkolor {is} {ask} 'Jaki jest twój ulubiony kolor?'\n{if} kolor {in} ładne_kolory {print} 'śliczny!'\n{else} {print} 'eh'\n```\n"
                story_text_2: "Czasami kod z `{if}` robi się bardzo długi i nie mieści się w linii.<br> Możesz podzielić kod na dwie linie, zaczynając drugą linię od `{else}` w taki sposób:\n"
                example_code_2: "```\nimię {is} {ask} 'jak masz na imię?'\n{if} imię {is} Hedy {print} 'to miło'\n{else} {print} 'bu!'\n```\n"
                story_text_4: "Coś innego co działa z poleceniem `{if}` jest polecenie `{pressed}`! Przy użyciu `{pressed}` możesz przypisać dowolną literę alfabetu lub liczbę ze swojej klawiatury do dowolnego polecenia. Coś się stanie jeżeli je przypiszesz i naciśniesz ten klawisz. Spróbuj teraz!\n"
                example_code_4: "```\n{if} x {is} {pressed} {print} 'Udało się!'\n```\n"
            6:
                start_code: "{print} '5 razy 5 to' 5 * 5"
                story_text: "## 1 + 1\n W tym poziomie nauczysz się czegoś nowego: od teraz możesz również liczyć.\n \n Dodawanie jest proste, możesz je zapisać tak jak w matematyce: na przykład `5 + 5`. Odejmowanie też jest proste, to po prostu `5 - 5`.\n \n Mnożenie jest trochę inne, ponieważ nie ma znaku mnożenia na twojej klawiaturze. Poszukaj, naprawdę go nie ma!\n Z tego powodu mnożymy za pomocą gwiazdki nad 8: `5 * 5`. Czytaj to jako „5 razy 5”, tak lepiej zapamiętasz.\n"
                example_code: "```\n{print} '5 plus 5 to ' 5 + 5\n{print} '5 minus 5 to ' 5 - 5\n{print} '5 razy 5 to ' 5 * 5\n```\n"
                story_text_2: "Zrobiliśmy również zmianę w przypisywaniu słów do zmiennej! Od teraz możesz użyć `=` zamiast `{is}` kiedy przypisujesz nazwę lub liczbę do zmiennej, jak tutaj:\n"
                example_code_2: "```\nimię = Hedy\nodpowiedź = 20 + 4\n```\n"
            7:
                start_code: "{repeat} 3 {times} {print} 'Hedy to zabawa!'"
                story_text: "## Poziom 7! Poziom 7!\nPoziom 7 dodaje komendę `{repeat}`. `{repeat}` może być użyte po to, aby tę samą linie kodu wykonać wiele razy.\n"
                example_code: "```\n{repeat} 3 {times} {print} 'Hedy to zabawa!'\n```\n"
            8:
                start_code: "{repeat} 5 {times}\n    {print} 'Siema ludziska'\n    {print} 'To zostanie wypisane 5 razy'"
                story_text: "## Wcięcia\n`{ask}` i `{print}` wciąż działają tak jak je poznałeś do tej pory. Ale `{if}`, `{else}`, `{pressed}` i `{repeat}` zmieniły się!\nOd teraz możesz zgrupować kilka linii kodu, ale musisz wtedy *wciąć* ten kod.\nTo znaczy dodać cztery spacje na początku linii. Będziesz musiał również wciąć kod, kiedy będziesz chciał utworzyć blok złożony z tylko 1 linii.\n"
                example_code: "Zobacz jak działa polecenie `{repeat}`:\n```\n{repeat} 5 {times}\n    {print} 'Cześć wszystkim'\n    {print} 'Całość powtórzona 5 razy'\n```\nZobacz jak działa polecenie `{if}` oraz `{else}`:\n\n```\nimie {is} {ask} 'Jak masz na imię?'\n{if} imie {is} Karol\n    {print} 'Cześć Karol'\n    {print} 'Możesz pograć na swoim komputerze!'\n{else}\n    {print} 'INTRUZ!'\n    {print} 'Nie możesz używać tego komputera!'\n```\n"
            9:
                start_code: "{repeat} 3 {times}\n    jedzenie = {ask} 'Co byś zjadł?'\n    {if} jedzenie {is} pizza\n        {print} 'super!'\n    {else}\n        {print} 'pizza jest lepsza'"
                story_text: "## Teraz wszystko razem!\nNa tym poziomie możesz używać nie tylko wielu linii z poleceniem `{if}` oraz `{repeat}`, ale możesz używać ich łącznie!\nW tym przykładzie możesz zobaczyć polecenie `{if}` wewnątrz pętli/polecenia `{repeat}`. Można też odwrotnie. Dodatkowo polecenie `{if}` jest dozwolone w innym poleceniu `{if}`. Możesz też wykorzystać pętle/polecenie `{repeat}` w innej pętli/poleceniu `{repeat}`.\nSpróbuj samemu!\n"
                example_code: "```\n{repeat} 3 {times}\n    jedzenie= {ask} 'Co byś zjadła?'\n    {if} jedzenie {is} pizza\n        {print} 'super!'\n    {else}\n        {print} 'pizza jest lepsza'\n```\n"
            10:
                start_code: "zwierzęta {is} pies, kot, blobfish\n{for} zwierzę {in} zwierzęta\n    {print} 'Moim ulubionym zwierzakiem jest ' zwierzę"
                story_text: "## Dla każdego elementu z mojej listy...\nW tym poziomie nauczysz się nowego polecenia/pętli `{for}`. Z poleceniem/pętlą `{for}`możesz tworzyć listy i możesz używać wszystkich elementów listy. \n`{for}` tworzy blok kodu, jak `{repeat}` i `{if}`  więc wszystkie linie w bloku muszą być wcięte, a więc zaczynać się spacjami."
                example_code: "```\nzwierzęta {is} pies, kot, blobfish\n{for} zwierzę {in} zwierzęta\n  {print} 'Moim ulubionym zwierzakiem jest ' zwierzę\n```\n"
            11:
                start_code: "{for} licznik {in} {range} 1 {to} 5\n    {print} licznik"
                story_text: "## Pętle!\nNa tym poziomie dodajemy nową formę `{for}`. Na wcześniejszych poziomach używaliśmy `{for}` z listą, ale możemy też używać `{for}` z liczbami.\nRobimy to, dodając nazwę zmiennej, następnie `{in}` `{range}`. Następnie wpisujemy liczbę, od której rozpoczniemy, `{to}` i liczbę, na której zakończymy.\n\nWypróbuj przykład, aby zobaczyć, co się stanie! Pamiętaj, na tym poziomie będziesz musiał użyć wcięć w wierszach poniżej instrukcji `{for}`."
                example_code: "```\n{for} licznik {in} {range} 1 {to} 5\n    {print} licznik\n```\n"
            12:
                start_code: "{print} 'Teraz zapisując ułamki dziesiętne musisz wykorzystać kropkę do oddzielenia części ułamkowej od części całkowitych'\n{print} 2.5 + 2.5"
                story_text: "## Liczby i teksty\n**Ułamki dziesiętne**\nDo tej pory Hedy nie pozwalał na zapisywanie ułamków dziesiętnych np. 1.5, ale od tej pory możesz już wykorzystać ułamki dziesiętne w swoich kodach. Pamiętaj że w komputerze wykorzystujemy  `.` do oddzielenia części ułamkowej od całkowitej."
                example_code: "```\n{print} 'Dwa i pół plus dwa i pół to...'\n{print} 2.5 + 2.5\n```\n"
                story_text_2: "**Wszystkie teksty muszą być w cudzysłowach**\nNa tym poziomie, musisz także wykorzystywać cudzysłowy kiedy przypisujesz tekst za pomocą `=`:\n"
                example_code_2: "```\nimię = 'Robocie Hedy'\n{print} 'Cześć ' imię\n```\n"
                story_text_3: "**Wszystkie elementy listy także wymagają cudzysłowów**\nListy są teksami, a więc także wymagają cudzysłowów. Pamiętaj że każdy element listy powinien być ujęty w cudzysłowy.\nPozwala ci to na zapisanie dwóch słów jako jeden element listy na przykład 'Iron Man'.\n"
                example_code_3: "```\nsuperbohaterowie = 'Spiderman', 'Batman', 'Iron Man'\n{print} superbohaterowie {at} {random}\n```\n"
                story_text_4: "**Cały tekst po `{if}` także wymaga cudzysłowów**\n"
                example_code_4: "```\nimię = {ask} 'Jak masz na imię?'\n{if} imię = 'Robot Hedy'\n    {print} 'Cześć!'\n```\n"
                story_text_5: "**Liczby nie wymagają cudzysłówów**\nPrzypisanie liczby za pomocą `=` nie wymaga cudzysłówów:\n"
                example_code_5: "```\npunkty = 25\n{print} 'Zdobyłeś ' punkty\n```\n"
            13:
                start_code: "imię = {ask} 'Jak masz na imię?'\nwiek = {ask} 'Ile masz lat?'\n{if} imię {is} 'Hedy' {and} wiek {is} 2\n    {print} 'Naprawdę jesteś Hedy!'"
                example_code: "```\nimię = {ask} 'Jak masz na imię?'\nwiek = {ask} 'Ile masz lat?'\n{if} imię {is} 'Hedy' {and} wiek {is} 2\n    {print} 'Naprawdę jesteś Hedy!'\n```\n"
                story_text: "## I... Lub..?\nNauczysz się teraz o `{and}` i `{or}`! Jeśli chcesz sprawdzić dwa wyrażenia, nie musisz używać dwóch poleceń {if}, w zamian możesz użyć `{and}` i `{or}`. Jeśli użyjesz `{and}`, oba wyrażenia, przed i po `{and}` muszą być prawdziwie. Można też użyć `{or}`. W takim przypadku wystarczy że jedno z wyrażeń będzie prawdziwe."
            14:
                start_code: "wiek = {ask} 'Ile masz lat?'\n{if} wiek < 13\n    {print} 'Jesteś młodszy niż ja!'\n{else}\n    {print} 'Jesteś starszy niż ja!'"
                story_text: "## Duży, Większy, Największy\nW tej lekcji nauczymy się zastosowania nowych operatorów logicznych, które możesz pamiętać z lekcji matematyki: operatory `<` i `>`.\nOperator `<` sprawdza czy pierwsza liczba jest mniejsza od drugiej liczby, na przykład wiek `<` 12 sprawdza czy wiek jest mniejszy niż 12.\nJeżeli chcesz sprawdzić czy pierwsza liczba jest mniejsza lub równa drugiej liczbie możesz użyć operator `<=`, na przykład wiek `<=` 11, który sprawdza czy wiek jest mniejszy lub równy 11.\nOperator `>` sprawdza czy pierwsza liczba jest większa od drugiej liczby, na przykład punkty `>` 10 sprawdza czy punkty są większe od 10.\nJeżeli chcesz sprawdzić, czy pierwsza liczba jest większa lub równa drugiej liczbie możesz użyć `>=`, na przykład punkty `>=` 11, który sprawdza czy punkty są większe lub równe 11.\nMożesz użyć tych operatorów logicznych w `{if}`, na przykład:\n"
                example_code: "```\nwiek = {ask} 'Ile masz lat?'\n{if} wiek > 12\n    {print} 'Masz więcej lat niż ja!'\n```\n"
                story_text_2: "Od tego poziomu, jeśli chcesz dokładnie porównać, możesz użyć dwóch znaków równości. Tak właśnie robi większość języków programowania:\n"
                example_code_2: "```\nimię = {ask} 'Jak masz na imię?'\n{if} imię == 'Hedy'\n    {print} 'Jesteś wspaniały!'\n```\n"
                story_text_3: "Możesz również porównać, czy coś jest *nie* równe czemuś innemu, używając `!=` jak to:\n"
                example_code_3: "```\nimię = {ask} 'Jak masz na imię?'\n{if} imię != 'Hedy'\n    {print} 'Nie jesteś Hedy'\n```\n"
            15:
                start_code: "odpowiedź = 0\n{while} odpowiedź != 25\n    odpowiedź = {ask} 'Ile jest 5 razy 5?'\n{print} 'Dobra odpowiedź'"
                story_text: "## Więcej pętli!\nTym razem nauczymy się nowego typu pętli - pętla `{while}`! Ta pętla będzie działać tak długo, jak warunek w pętli jest prawdziwy, \nwięc nie zapomnij zmienić wartości warunku w pętli.\n\nPętla kodzie przykładowym będzie działać aż poprawna odpowiedź zostanie podana.\nPętla nigdy się nie skończy, gdy poprawna odpowiedź nie zostanie podana!"
                example_code: "```\nodpowiedź = 0\n{while} odpowiedź != 25\n    odpowiedź = {ask} 'Ile jest 5 razy 5?'\n{print} 'Dobra odpowiedź'\n```\n"
            16:
                example_code: "```\nprzyjaciele = ['Ahmed', 'Bogdan', 'Cayden']\nszczęśliwe_liczby = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'szczęśliwa liczba ' przyjaciele[i]\n    {print} 'to ' szczęśliwe_liczby[i]\n```\n"
                start_code: "owoce = ['jabłko', 'banan', 'czereśnia']\n{print} owoce"
                story_text: "## Coraz bliżej prawdziwego kodu!\nTym razem stworzymy listy w sposób podobny do Pythona. Te listy mają kwadratowe nawiasy dookoła listy! Dodatkowo, zostawimy też cudzysłowie dookoła każdego elementu listy tak jak się nauczyliśmy w poprzednich poziomach.\nMożesz również użyć kwadratowych nawiasów żeby wybrać konkretny element z listy."
            17:
                start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Szukam!'"
                story_text: "## Elif\nTeraz zmienimy trochę wcięcie. Za każdym razem, gdy potrzebujemy wcięcia, potrzebujemy `:` w linii przed wcięciem.\n\nNa tym poziomie możesz też użyć nowej komendy: `{elif}`. `{elif}` (elif) to skrót od {else} {if} (else if) i potrzebujesz go, gdy chcesz zrobić 3 (lub więcej!) opcji.\nSprawdź to!"
                example_code: "```\nnagrody = ['milion złotch', 'szarlotkę', 'nic']\ntwoja_nagraoda = nagrody[{random}]\n{print} 'Wygrywasz ' twoja_nagraoda\n{if} twoja_nagraoda == 'milion złotch' :\n    {print} 'O tak! Jesteś bogaty!'\n{elif} twoja_nagraoda == 'szarlotkę' :\n    {print} 'Pyszna szarlotka!'\n{else}:\n    {print} 'Powodzenia następnym razem ...'\n```\n"
            18:
                start_code: |-
                    imię = 'Hedy'
                    {print}('Mam na imię ', imię)
                story_text: |-
                    ## Ostatni poziom!
                    Dotarliśmy do prawdziwego kodu Pythona! Oznacza to, że od teraz musimy używać nawiasów z {print} i {range}.
                    Oznacza to również, że jeśli używasz angielskich wersji poleceń możesz używać kodu Hedy z tego poziomu w dowolnym środowisku Pythona. Jeśli jeszcze tego nie zrobiłeś, możesz przełączyć język w menu poleceń, aby to zrobić. 

                example_code: |
                    ```
                    {print}('Witaj!')
                    {for} i {in} {range}(1, 10):
                        {print}('To jest linijka numer ', i, '.')
                    ```

                story_text_2: |-
                    Jeżeli chcesz wypisać kilka rzeczy w jednej linii to oddziel je przecinkami.

                example_code_2: |
                    ```
                    temperatura = 25
                    {print}('Na zewnątrz jest ', temperatura, ' stopni')
                    ```

                story_text_3: |-
                    ## Czytanie danych
                    Ostatnią zmianą jaką musisz zrobić w kodzie, żeby otrzymać poprawny kod Python jest zmiana `{ask}` na `{input}`.

                example_code_3: |
                    ```
                    {print}('Mam na imię Hedy!')
                    imię = {input}('A jak Ty masz na imię?')
                    {print}('Twoje imię to ', imię)
                    ```

    songs:
        name: Zaśpiewaj piosenkę!
        description: Wyświetl piosenkę
        default_save_name: Piosenka
        levels:
            12:
                story_text: "## Zaśpiewaj piosenkę\nW tej piosence jeszcze prościej zaprogramujemy 'jeśli jesteś dziś szczęśliwy w dłonie klaszcz'. To wszystko dzięki temu, że wszystkie akcjie możemy przypisać do zmiennej. Na przykład:\n\n### Ćwiczenie\nCzy potrafisz dodać odpowiednią długość wcięcia do każdej linii kodu żeby ta piosenka była zaśpiewana poprawnie?\nZwróć uwagę, że nie wszystkie linie kodu wymagają wcięcia.\n"
                example_code: "```\nakcje = 'w dłonie klaszcz', 'tupnij tak', 'klepnij się'\n{for} akcja {in} akcje\n    {for} i {in} {range} 1 {to} 2\n        {print} 'jeśli jesteś dziś szczęśliwy'\n        {print} akcja\n    {print} 'jeśli jesteś dziś szczęśliwy, w sercu pokój masz prawdziwy'\n    {print} 'jeśli jesteś dziś szczęśliwy'\n    {print} akcja\n```\n"
                start_code: '# umieść tutaj swój kod'
            11:
                story_text: "## Piosenki\nNa tym poziomie możesz użyć `{for}` z `{range}`, aby tworzyć piosenki, które wykorzystują liczenie, takie jak 5 małych małpek.\n\n### Ćwiczenie 1\nWypełnij puste pola i spraw, aby kod działał! Jeśli nie pamiętasz tekstu piosenki, poszukaj go sam.\n\n### Ćwiczenie 2\nOstatnia linijka piosenki różni się od pozostałych. Wydrukuj ten wiersz wewnątrz `{for}` i użyj `{if}`, aby działał poprawnie.\n"
                example_code: "```\n_ małpki _ _ 5 _ 1\n    {print} małpki 'małe małpki skaczące po łóżku'\n```\n"
                start_code: '# umieść swój kod tutaj'
            10:
                story_text: "## Piosenki\nDzięki `{for}` możesz wydrukować całą piosenkę „Baby Shark” (w tym wszystkie inne rekiny w rodzinie) w zaledwie 6 liniach!\n\n### Ćwiczenie 1\nCzy możesz jeszcze bardziej skrócić kod „Baby Shark” za pomocą polecenia `{for}`? Dokończ przykładowy kod.\n"
                example_code: "```\nrodzina = dziecko, mamusia, tatuś, babcia, dziadek\n_ _ _ _ \n  {print} _\n```\n"
                start_code: '# umieść tutaj swój kod'
                example_code_2: "```\nmałpki = 5, 4, 3, 2, 1\n```\n"
                story_text_2: "### Ćwiczenie 2\nWypisz piosenkę „Pięć Małych Małpek skaczących po łóżku”. Wyszukaj tekst, jeśli go nie pamiętasz.\n\n**Dodatkowo** Wydrukuj piosenkę „Stary MacDonald farmę miał” i upewnij się, że wszystkie zwierzęta wydają inny dźwięk, używając `{if}`.\n"
            8:
                story_text: "## Piosenki\nW poprzednich poziomach programowałeś piosenkę \"Butelki Piwa\" (ang. Bottles of Beer). Bez użycia polecenia `{repeat}` musiałeś wiele razy skopiować wersy piosenki.\nNa tym poziomie możesz powtórzyć ten wers 99 razy poprzez dodanie jednej prostej linii kodu.\n\n### Ćwiczenie\nDodaj odpowiednie polecenia w puste miejsca i upewnij się, że kod ma poprawne wcięcia.\n"
                example_code: "```\nwers = 99\n_ 99 {times}\n    {print} wers ' butelek piwa na ścianie'\n    {print} wers ' butelek piwa'\n    {print} 'Weź jedną i przekaż ją dalej'\n    wers = wers - 1\n    {print} wers ' butelek piwa na ścianie'\n```\n"
                start_code: '# umieść tutaj swój kod'
            7:
                story_text: "## Piosenki\nPiosenki często zawierają dużo powtórzeń, na przykład: Dziecko Rekin (ang. Baby Shark)! Jeżeli ją zaśpiewasz to będziesz śpiewać ten w kółko ten sam tekst:\n\nBaby Shark dududududududu <br>\nBaby Shark dududududududu <br>\nBaby Shark dududududududu <br>\nBaby Shark\n\n### Ćwiczenie\nMożesz napisać piosenkę Dziecko Rekin przy użyciu polecenia `{repeat}`. Dokończ kod uzupełniając puste miejsca.\n**Dodatkowe ćwiczenie** Po napisaniu piosenki Dziecko rekin możesz zaprogramować inne piosenki. Jest dużo piosenek z powtarzającym się tekstem.\nCzy pamiętasz przynajmniej o jednej takiej piosence, i czy potrafisz ją zaprogramować?\n"
                example_code: "```\n{repeat} _ _ {print} 'Dziecko Rekin tututudutudu'\n{print} 'Dziecko Rekin'\n```\n"
                start_code: "{print} 'Dziecko Rekin'"
            6:
                story_text: "## Piosenki\nPiosenki często zawierają dużo powtórzeń. Czasami te powtórzenia opierają się na liczeniu. \nPrzykładem jest dobrze znana angielska piosenka \"Butelki Piwa\" (ang. bottles of beer). Możesz zaprogramować tą piosenkę z odrobiną matematyki.\n\nWskazówka: Użyj funkcji \"czytaj na głos\" żeby Hedy zaśpiewał tą piosenkę!\n\n### Ćwiczenie\nMożesz teraz powtórzyć linie od 2 do 7 ile razy chcesz poprzez skopiowanie tych linii.\n"
                example_code: "```\nwers = 99\n{print} wers ' butelek piwa na ścianie'\n{print} wers ' butelek piwa'\n{print} 'Weź jedną i przekaż ją dalej'\nwers = wers - 1\n{print} wers ' butelek piwa na ścianie'\n{sleep}\n```\n"
                start_code: "{print} 'Zacznijmy śpiewać!'"
                story_text_2: "## 5 Małych małpek skaczących po łóżku\nTa piosenka dla dzieci odlicza od 5 małych małpek do 1 małpki.\nMożesz zaśpiewać całą piosenkę jeżeli skopiujesz linie od 2 do 7 i wkleisz je poniżej kodu.\n"
                example_code_2: "```\nnumer = 6\nnumer = numer - 1\n{print} 'Skakało na łóżku małych małpek ' numer\n{print} 'Nagle jedna spadła i potłukła się'\n{print} 'Mama do doktora dzwoni i słyszy, że'\n{print} 'SKAKAĆ NA ŁÓŻKU ZABRONIONE JEST!'\n{sleep}\n```\n"
            16:
                story_text: "## Zaśpiewaj piosenkę!\nNa tym poziomie możesz jeszcze szybciej zaprogramować utwór taki jak „Dziadek Fajną Farmę Miał”. Możesz połączyć odpowiednie zwierzę z odpowiednim dźwiękiem, po prostu umieszczając je w tym samym miejscu na liście.\n„Morskie Opowieści” (ang.: Drunken Sailor) jest również szybko tworzony na tym poziomie. Potrzebujesz tylko 8 linii do całej piosenki, sprawdź to!\n"
                example_code: "## Dziadek Fajną Farmę Miał.\n```\nzwierzęta = ['Kurki', 'Krówki', 'Świnkę']\ndźwięki = ['ko', 'muu', 'chrum']\n{for} i {in} {range} 1 {to} 3\n    zwierzę = zwierzęta[i]\n    dźwięk = dźwięki[i]\n    {print} 'Dziadek fajną farmę miał'\n    {print} 'ija ija oo!'\n    {print} zwierzę ' na niej hodował'\n    {print} 'ija ija oo!'\n    {print} zwierzę ' ' dźwięk dźwięk ' tu i ' dźwięk dźwięk ' tam'\n    {print} dźwięk 'tu, ' dźwięk ' tam, ciągle tylko ' dźwięk dźwięk\n```\n\n## Pijany marynarz\n```\nwersy = ['Co zrobimy z pijanym marynarzem?', 'Zgolim mu brzuch żyletką tępą,', 'Wsadzim go w łódź aż wytrzeźwieje,']\n{for} wers {in} wersy\n    {for} i {in} {range} 1 {to} 3\n        {print} wers\n    {print} 'Wcześnie o poranku!'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'Hej ho i już się wznosi,'\n    {print} 'Wcześnie o poranku!'\n```\n"
                start_code: '# umieść tutaj swój kod'
    dishes:
        levels:
            5:
                start_code: "{print} 'Kto zmywa naczynia?'"
                story_text: "## Mycie naczyń\nDzięki poleceniu `{if}` możesz mieć teraz trochę więcej zabawy z wyborami w twoich programach. Możesz teraz zrobić, żeby twój program reagował na odpowiedzi.\n\nCzy potrafisz dokończyć program który wyświetla \"o, nie...\" gdy jest Twoja tura, oraz który wyświetla \"tak!\" gdy to nie jest Twoja tura?\nNie zapomnij cudzysłowów!\n"
                example_code: "```\nludzie {is} mama, tata, Agnieszka, ty\nkto_zmywa {is} ludzie {at} {random}\n{if} kto_zmywa {is} ty {print} _ o, nie... Twoja kolej zmywania naczyń _\n{else} {print} 'całe szczęście ' _ ' myje naczynia'\n````\n"
            10:
                story_text: "## Zmywanie naczyń\nNa tym poziomie w prosty sposób ułożysz plan na cały tydzień!\n\n### Ćwiczenie\nDodaj drugie zadanie, takie jak odkurzanie lub sprzątanie, i upewnij się, że jest ono również podzielone na cały tydzień.\n<br> **Dodatkowo** Program nie jest sprawiedliwy, można mieć pecha i zmywać cały tydzień. Jak uczynić program bardziej sprawiedliwym?\n"
                example_code: "```\ndni = Poniedziałek, Wtorek, Środa, Czwartek, Piątek, Sobota, Niedziela\nimiona = mama, tata, Agnieszka, ty\n{for} dzień {in} dni\n    {print} imiona {at} {random} ' myje naczynia w ' dzień\n```\n"
                start_code: '# umieść tutaj swój kod'
            7:
                story_text: "## Zmywanie naczyń\nPrzy użyciu komendy `{repeat}` możesz powtórzyć fragmenty kodu. Możesz to wykorzystać do ustalenia kto będzie zmywał naczynia przez kilka dni!\n### Ćwiczenie\nUżyj komendy `{repeat}` aby wylosować kto będzie mył naczynia przez cały tydzień. Każde puste miejsce musi być wypełnione jedną komendą lub liczbą!\n**(dodatkowe ćwiczenie)** Czy możesz wymyślić inne prace domowe? Przygotuj kod, który wylosuje trzy prace domowe. Nie zapomnij napisać, o co chodzi!\n"
                example_code: "```\nludzie = mamy, taty, Emmy, Sophie\n{repeat} _ _ {print} 'Zmywanie naczyń jest zadaniem ' _ _ _\n```\n"
                start_code: "{print} 'Kto myje naczynia?'"
            6:
                story_text: "## Zmywanie naczyń\nJak często wszyscy będą zmywać naczynia? Czy to jest sprawiedliwe? Możesz to policzyć na tym poziomie.\n"
                example_code: "```\nludzie = mama, tata, Emma, Sophie\nemma_myła = 0\nzmywa = ludzie {at} {random}\n{print} 'Teraz zmywa ' zmywa\n{if} zmywa {is} Emma emma_myła = emma_myła + 1\n{print} 'Emma będzie zmywać naczynia w tym tygodniu ' emma_myła ' razy'\n```\n\nTeraz możesz skopiować linie od 3 do 5 kilka razy (np. 7 razy dla całego tygodnia), aby ponownie obliczyć dla całego tygodnia.\nCzy robisz kod dla całego tygodnia?\n"
                story_text_2: "## Zrób to sprawiedliwe\nW poprzednim programie jakbyś był bardzo pechowy to program mógłby Cię wybrać do mycia naczyń przez cały tydzien, a to nie jest sprawiedliwe!\nŻeby stworzyć bardziej sprawiedliwy system możesz użyc polecenia `{remove}` żeby usunąć osobę z listy zaraz po wybraniu jej do mycia naczyń. Ty sposobem ta osoba już nie zostanie wybrana do mycia naczyń zanim wszyscy nie mieli okazji umyć naczyń.\n\nPoniedziałek i wtorek zostały przygotowane dla Ciebie. Czy potrafisz dodać resztę tygodnia?\nCzy potrafisz również wymyślić co zrobić gdy lista jest pusta?\n"
                example_code_2: "```\nludzie = mama, tata, Agnieszka, ty\nkto_zmywa = ludzie {at} {random}\n{print} 'Naczynia w poniedziałek myje: ' kto_zmywa\n{remove} kto_zmywa {from} ludzie\nkto_zmywa = ludzie {at} {random}\n{print} 'Naczynia we wtorek myje: ' kto_zmywa\n{remove} kto_zmywa {from} ludzie\nkto_zmywa = ludzie {at} {random}\n```\n"
                start_code: "{print} 'Kto zmywa naczynia?'"
            4:
                story_text: "## Mycie naczyń\nŻeby upiększyć swój plan mycia naczyń możesz użyć cudzysłowów.\nTym razem Twój przykładowy kod nie jest w pełni ukończony.\n\nCzy potrafisz dokończyć ten kod uzupełniając puste miejsca? Każde puste miejsce musi być zastąpione przy użyciu jednego słowa lub symbolu.\n\nWskazówka: Nie zapomnij cudzysłowów!\n"
                example_code: "```\nludzie {is} mama, tata, Emma, Sophie\n{print} _ naczynia są myte przez _\n{sleep}\n{print} ludzie {at} _\n```\n"
                start_code: "{print} 'Kto zmywa naczynia?'"
            3:
                story_text: "## Zmywanie naczyń\nCzy często w domu kłócisz się o to, kto powinien dziś umyć naczynia lub wyczyścić kuwetę?\nMożesz pozwolić komputerowi dokonać bardzo sprawiedliwego wyboru. Możesz to zaprogramować na tym poziomie!\n"
                example_code: "```\nludzie {is} mama, tata, Emma, Sofia\n{print} ludzie {at} {random} muszą zmywać naczynia\n```\n"
                story_text_2: "### Ćwiczenie\nStwórz własną wersję programu zmywarki. Najpierw sporządź listę członków swojej rodziny.\nNastępnie pomyśl o zadaniu do wykonania i pozwól komputerowi zdecydować, kto ma wykonać zadanie za pomocą polecenia `{at} {random}`.\n\n**Dodatkowo** Nie masz ochoty samodzielnie zmywać naczyń? Zhakuj program, usuwając swoją nazwę z listy za pomocą polecenia `{remove}` `{from}`.\n"
                start_code: '{print} Kto dziś zmywa naczynia?'
        name: Zmywanie?
        description: Użyj komputera, aby sprawdzić, kto zmywa naczynia
        default_save_name: Zmywanie
    dice:
        levels:
            4:
                start_code: "{print} 'Jaka wartość tym razem wypadnie na kostce?'"
                story_text: "## Kostki do gry\nNa tym poziomie możemy tworzyć zdania z wartością kostki w zdaniu, oczywiście w cudzysłowach.\nTym razem kod przykładowy nie jest do końca kompletny. Czy możesz uzupełnić kod?\n"
            10:
                story_text: "## Kości\nCzy wszyscy zbyt długo rzucają kostką? Na tym poziomie możesz pozwolić Hedy rzucić wszystkimi kośćmi naraz!\n\n### Ćwiczenie\nZmień imiona na imiona swoich przyjaciół lub rodziny i dokończ kod, aby każdy z nich rzucił.\n"
                example_code: "```\ngracze = Ania, Jasiek, Kasia\nwybory = 1, 2, 3, 4, 5, 6\n_ _ _ _\n    {print} gracz ' wyrzucił ' wybory {at} {random}\n    {sleep}\n```\n"
                start_code: '# umieść tutaj swój kod'
            7:
                story_text: "## Kości\nNa poziomie 5 już mogłeś zrobić kostkę do gry. Przy pomocy polecenia `{repeat}` możesz łatwo rzucić ręką pełną kostek.\n\n### Ćwiczenie\nSpróbuj ukończyć przykładowy kod! **Dodatkowo** Zastanów się nad grą, którą znasz, i która wymaga kostki i zaprogramuj ją przy pomocy polecenia `{repeat}`\n"
                example_code: "```\nwybory = 1, 2, 3, 4, 5, 6\n_ _ _ _ _ _ _\n```\n"
                start_code: "{print} 'Jaka wartość tym razem wypadnie na kostce?'"
            6:
                story_text: "## Kostka do gry\nNa tym poziomie możesz zrobić kostkę do gry z Gąsienicą i nawet policzyć ile punktów wyrzuciłaś w sumie.\nWiedząc, że Gąsienica jest warta 5 punktów możesz teraz policzyć ile punktów wyrzuciłaś w sumie.\nTen kod policzy ilość punktów jednek kostki:\n\n### Ćwiczenie\nCzy potrafisz napisać kod, który policzy sumę punkt na 8 kostkach? Aby to zrobić musisz skopiować kilka linijek kodu.\n"
                example_code: "```\nwybory = 1, 2, 3, 4, 5, gąsienica\npunkty = 0\nrzut = wybory {at} {random}\n{print} 'wyrzuciłeś' rzut\n{if} rzut {is} gąsienica punkty = punkty + 5 {else} punkty = punkty + rzut\n{print} 'suma punktów to ' punkty\n```\n"
                example_code_2: "## Wgląd w przyszłość\n\nCzy udało ci się policzyć wynik dla 8 kostek? Wymagało to sporo kopiowania i wklejania, prawda? W poziomie 7 ułatwimy to!\n"
                start_code: "{print} 'Jaka wartość tym razem wypadnie na kostce?'"
            5:
                story_text: "## Kostki do gry\nW tym poziomie możesz stworzyć kostkę do gry używając polecenia `{if}`.\nUzupełnij kod przykładowy tak, aby kod mówił \"Możesz przestać rzucać\" gdy wyrzuciłeś gąsienicę.\n\nMoże chcesz stworzyć kostkę do gry z całkowicie innej gry? To też jest w porządku! W takim razie wymyśl swoją własną reakcję. Na przykład \"tak\" dla 6 i \"szkoda\" dla czegoś innego.\n"
                example_code: "```\nwybory {is} 1, 2, 3, 4, 5, dżdżownica\nrzut {is} _.\n{print} 'rzuciłeś ' _ \n{if} _ {is} dżdżownica {print} 'Możesz przestać rzucać' _ {print} 'Musisz to usłyszeć jeszcze raz!'\n```\n"
                start_code: "{print} 'Jaka wartość tym razem wypadnie na kostce?'"
            3:
                story_text: "## Kostka do gry\nNa tym poziomie posiadamy możliwość wyboru z listy. Dzięki temu możemy pozwolić komputerowi wybrać jedną ze stron kostki.\nZerknij na gry, które masz w swojej szafie w domu.\nCzy są tam gry z (specjalną) kostką? Możesz ją również skopiować przy pomocy tego kodu.\nNa przykład kostka do gry Gąsienice z liczbami od 1 do 5 i wężem na niej.\n\n![Kostka do gry Gąsienice z liczbami od 1 do 5 i gąsienicą na niej](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)\n"
                example_code: "```\nwybory {is} 1, 2, 3, 4, 5, dżdżownica\n{print} wybory {at} {random}\n```\n"
                start_code: '{print} Jaka wartość wypadnie na kostce tym razem?'
                example_code_2: "```\nwybór {is} _\n```\n"
                story_text_2: "### Ćwiczenie\nKości w przykładzie powyżej są kośćmi do specjalnej gry. Czy możesz zrobić normalną kość do gry?\nLub inne specjalne kości z innej gry?\n"
            15:
                story_text: "## Kości do gry\nW tej grze musisz wyrzucić 6 w jak najmniejszej liczbie prób.\n"
                example_code: "```\noptions = 1, 2, 3, 4, 5, 6\n{print} 'Throw 6 as fast as you can!'\nthrown = 0\ntries = 0\n{while} thrown != 6\n    thrown = options {at} {random}\n    {print} 'You threw ' thrown\n    tries = tries + 1\n{print} 'Yes! You have thrown 6 in ' tries ' tries.'\n```\n"
                start_code: '# umieść swój kod tutaj'
        name: Kostka do gry
        description: Stwórz własną kostkę do gry
        default_save_name: Kostka do gry
    rock:
        default_save_name: Kamień
        levels:
            1:
                story_text: "##  Papier, kamień, nożyce\nNa poziomie 1 możesz zacząć tworzyć grę papier, kamień, nożyce.\n\nZa pomocą  `{ask}` możesz zapytać a za pomocą `{echo}` możesz powtórzyć co zostało wybrane.\n"
                example_code: "```\n{print} Co wybierasz?\n{ask} wybierz: papier, kamień lub nożyce\n{echo} a więc wybrałeś:\n```\n"
                start_code: '{print} Witaj w swoim własnym programie kamień, papier, nożyce!

                    {ask} Co wybierzesz?

                    '
                story_text_2: "### Wyzwanie\nZamiast używać słów, możesz również użyć emotikonów: ✊✋✌\nCzy możesz poprawić kod, aby używać emotikonów?\n"
                example_code_2: "```\n{print} co wybierasz?\n{ask} wybierz z _\n{echo} a więć wybrałeś:\n```\n"
            10:
                story_text: "## Kamień, papier, nożyce\nCzujesz się zbyt leniwy, by samemu zagrać w grę? Pozwól Hedy zagrać w nią za Ciebie!\nWystarczy, że wypełnisz imiona graczy, a oni dostaną losowy wybór.\n\n### Ćwiczenie 1\nZakończ program, wypełniając listę nazwisk.\n\n### Ćwiczenie 2\nDodaj gracza komputerowego, który wybiera z każdym graczem.\n\n**Dodatkowo** Wróć do swojego kodu i zdecyduj, kto wygrywa w każdej rundzie: komputer czy wymieniona osoba.\n"
                example_code: "```\nwybory = kamień, papier, nożyce\ngracze = _\n{for} gracz {in} gracze\n     {print} gracz ' wybiera ' wybory {at} {random}\n```\n"
                start_code: '# umieść tutaj swój kod'
            9:
                story_text: "## Kamień, papier, nożyce\nW tym poziomie można zaprogramować całą grę kamień, papier, nożyce poprzez zagnieżdżanie poleceń `{if}`. \n\n### Ćwiczenie\nCzy potrafisz dokończyć kod? Program musi powiedzieć, kto wygrał dla każdej kombinacji.\n\n**Dodatkowo** Chcesz zagrać w więcej niż jedną grę? Rozwiń kod tak, aby można było rozegrać wiele rund. Możesz nawet użyć `{ask}`, aby zapytać użytkownika, ile rund chce zagrać.\n"
                example_code: "```\nopcje {is} papier, kamień, nożyce\ntwój_wybór {is} {ask} 'Co wybierasz?'\n{print} 'Wybrałeś ' twój_wybór \nwybór_komputera {is} opcje {at} {random}\n{print} 'Komputer wybrał ' wybór_komputera \n{if} wybór_komputera {is} twój_wybór \n    {print} 'remis'\n{if} wybór_komputera {is} kamień\n    {if} twój_wybór  {is} papier\n        {print} 'Wygrałeś!'\n    {if} twój_wybór  {is} nożyce\n        {print} 'Przegrałeś!'\n#dokończ program\n```\n"
                start_code: '# umieść tutaj swój kod'
            5:
                story_text: "## Kamień, papier, nożyce\nNa tym poziomie możemy ustalić, kto wygrał.\nDo tego potrzebny jest nowy kod `{if}`.\n\nZapisz swój wybór pod wybraną nazwą i wybór komputera jako wybór komputera.\nNastępnie możesz użyć `{if}`, aby sprawdzić, czy są takie same, czy różne.\nDokończysz kod?\n"
                example_code: "```\noptions {is} rock, paper, scissors\ncomputer_choice {is} _\nchoice {is} {ask} 'What do you choose?'\n{print} 'you chose ' _\n{print} 'computer chose ' _\n{if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'\n```\n\nFill in the correct code on the blanks to see {if} it is a draw.\n"
                start_code: "{print} 'Witamy w twoim własnym programie kamień, papier, nożyce!'"
            4:
                story_text: "## Kamień, papier, nożyce\nNa tym poziomie możemy dodatkowo zaprogramować kamień, papier, nożyce. Jeśli chcesz dodać tekst, tutaj również musisz użyć cudzysłowów.\nCzy uzupełnisz kod, wprowadzając poprawne polecenia lub znaki w podkreśleniach?\n"
                start_code: "{print} 'Witamy w twoim własnym programie kamień, papier, nożyce!'"
            3:
                story_text: "## Papier, kamień, nożyce\n\nNa tym poziomie możemy wprowadzać listy i wybierać z nich rzeczy.\nNajpierw tworzysz listę za pomocą `{is}`. Następnie możesz pozwolić komputerowi wybrać coś z listy za pomocą `{at} {random}`.\nNa przykład, możesz pozwolić komputerowi wybrać z listy papier, kamień lub nożyce.\n"
                example_code: "```\nmożliwości {is} papier, kamień, nożyce\n{print} możliwości  {at} {random}\n```\n"
                start_code: '{print} Witamy, w twojej własnej grze w papier, kamień, nożyce!'
                story_text_2: "### Ćwiczenie\nSkopiuj przykładowy kod i wypełnij puste pola, aby dodać dodatkowego gracza do tej gry.\n\n**Dodatkowo** Teraz gracze nazywają się po prostu gracz 1 i gracz 2. Czy możesz dodać polecenia pytania (oczywiście ze zmiennymi), aby zapytać graczy o imiona?\nW ten sposób możesz stworzyć taki wynik, na przykład: Jacek wybiera... papier\n"
                example_code_2: "```\nmożliwości {is} papier, kamień, nożyce\n{print} gracz 1 wybiera... możliwości  {at} {random}\n{print} gracz 2 _\n```\n"
            2:
                story_text: "## Papier, kamień, nożyce\nNa tym poziomie możesz poćwiczyć używanie zmiennych, dzięki będziesz mógł stworzyć grę w papier, kamień, nożyce w następnym poziomie!\n"
                example_code: "```\n_ {is} {ask} papier, kamień czy nożyce?\n{print} Ja wybrałam _\n```\n"
                start_code: '# umieść swój kod tutaj'
                story_text_2: "### Ćwiczenie\nSkopiuj przykładowy kod na ekran wprowadzania, klikając żółty przycisk.\nZakończ kod, wypełniając odpowiednie polecenia w pustych miejscach.\n"
            15:
                story_text: "## Kamień, papier, nożyce\nGraj, aż pokonasz komputer! Najpierw dokończ przykładowy kod...\n"
                example_code: "```\nwygrana = 'nie'\nwybory = 'kamień', 'papier', 'nożyce'\n{while} wygrana == 'nie'\n    twój_wybór = {ask} 'Co wybierasz?'\n    wybór_komputera = wybory {at} {random}\n    {print} 'Ty wybrałeś' twój_wybór \n    {print} 'komputer wybrał ' wybór_komputera\n    {if}  wybór_komputera == twój_wybór\n        {print} 'Remis!'\n    {if} wybór_komputera == 'kamień' {and} twój_wybór == 'nożyce'\n        {print} 'Przegrywasz!'\n    {if} wybór_komputera == 'kamień' {and} twój_wybór == 'papier'\n        {print} 'Wygrywasz!'\n        wygrana = 'tak'\n_\n```\n"
                start_code: '# umieść tutaj swój kod'
            13:
                story_text: "## Kamień, papier, nożyce\nDzięki poleceniu `{and}` możesz skrócić swój kod kamień, papier, nożyce! Sprawdź poniższy przykładowy kod i spróbuj go dokończyć.\n"
                example_code: "```\nopcje = 'kamień', 'papier', 'nożyczki'\ntwój_wybór = {ask} 'Co wybierasz?'\nwybór_komputera = opcje {at} {random}\n{print} 'Ty wybrałeś ' twój_wybór\n{print} 'Komputer wybrał ' wybór_komputera\n{if} wybór_komputera {is} twój_wybór\n    {print} 'Remis'\n{if} wybór_komputera {is} 'kamień' {and} twój_wybór {is} 'papier'\n    {print} 'Ty wygrałeś!'\n{if} wybór_komputera {is} 'kamień' {and} twój_wybór {is} 'nożyczki'\n    {print} 'Komputer wygrał!'\n_\n```\n"
                start_code: '# umieść tutaj swój kod'
        name: Papier, kamień, nożyce
        description: Zrób własną grę w papier, kamień, nożyce
    calculator:
        name: Kalkulator
        levels:
            9:
                start_code: "{print} 'Witamy w tym kalkulatorze!'"
                story_text: "## Kalkulator\nW poziomie 6 stworzyłeś kalkulator, w tym poziomie możesz rozbudować ten kod tak, aby zadawał wiele pytań.\n\n### Ćwiczenie 1\nCzy potrafisz dokończyć linię 10, aby program działał?\n\n### Ćwiczenie 2\nDaj graczom informację zwrotną, gdy wprowadzą dobrą lub złą odpowiedź. Aby to osiągnąć, rozszerz swój program o `{else}`.\n"
                example_code: "```\nwynik = 0\n{repeat} 10 {times}\n    liczby = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    liczba1= liczby {at} {random}\n    liczba2 = liczby {at} {random}\n    poprawna_odpowiedź = liczba1* liczba2 \n    {print} 'Ile jest ' liczba1 ' razy ' liczba2 '?'\n    odpowiedź = {ask} 'Wpisz tutaj swoją odpowiedź...'\n    {print} 'Twoja odpowiedź to'  odpowiedź\n    {if} _ {is} _\n        wynik = wynik + 1\n{print} 'Świetna robota! Twój wynik to... ' wynik ' na 10!\n```\n"
            12:
                start_code: '# umieść tutaj swój kod'
                story_text: "## Kalkulator\nTeraz możesz zrobić kalkulator, który działa dla liczb dziesiętnych. Wypełnij puste miejsca, aby działał poprawnie!\n"
                example_code: "```\nliczba1 = {ask} 'Jaka jest pierwsza liczba?'\nliczba2 = {ask} 'Jaka jest druga liczba?'\nodpowiedź = _\n{print} liczba1 ' plus ' liczba2 ' to ' odpowiedź\n```\n"
            14:
                story_text: "## Zgadnij, która to liczba.\nW tym poziomie możesz zaprogramować grę „Zgadnij, która liczba”.\n"
                example_code: "```\n{print} 'Guess which number'\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nnumber = numbers {at} {random}\ngame = 'on'\n{for} i {in} {range} 1 {to} 10\n    {if} game == 'on'\n        guess = {ask} 'Which number do you think it is?'\n        {if} guess > number\n            {print} 'Lower!'\n        {if} guess < number\n            {print} 'Higher!'\n        {if} guess == number\n            {print} 'You win!'\n            game = 'over'\n```\n"
                start_code: '# umieść tutaj swój kod'
            10:
                story_text: "## Kalkulator\nTa gra w kalkulator pomoże Ci przećwiczyć tabliczkę mnożenia!\n### Ćwiczenie\nCzy możesz dodać więcej liczb do listy, aby ćwiczyć tabliczkę mnożenia do 10?\n"
                example_code: "```\nliczby = 1, 2, 3\n{for} liczba1 {in} liczby\n    {for} liczba2 {in} liczby\n        odpowiedź = {ask} 'Ile wynosi ' liczba2 ' razy ' liczba1 '?'\n        poprawna_odpowiedź = liczba1 * liczba2\n        {if} odpowiedź {is} poprawna_odpowiedź\n            {print} 'Świetna robota!'\n        {else}\n            {print} 'To nieprawidłowa odpowiedź. Prawidłowa odpowiedź to ' poprawna_odpowiedź  \n```\n"
                start_code: '# umieść tutaj swój kod'
            6:
                story_text: "## Kalkulator\nTeraz gdy umiesz już matematykę, możesz sam zrobić kalkulator!\n"
                example_code: "```\nliczba_1 {is} {ask} 'Wpisz pierwszą liczbę:'\nliczba_2 {is} {ask} 'Wpisz drugą liczbę:'\npoprawna_odpowiedź = liczba_1 * liczba_2 \n{print} liczba_1 ' razy ' liczba_2 ' to ' poprawna_odpowiedź \n```\n"
                story_text_2: "### Ćwiczenie\nPowyższy kalkulator obliczy odpowiedź za Ciebie, ale możesz również stworzyć program, aby sprawdzić swoje umiejętności matematyczne, jak ten:\nWypełnij puste miejsca, aby go dokończyć!\n"
                example_code_2: "```\npoprawna_odpowiedź = 11 * 27\nodpowiedź = {ask} 'Ile to jest 11 razy 27?'\n{if} odpowiedź {is} _ {print} 'good job!'\n{else} {print} 'Źle! To było ' _.\n```\n"
                start_code: "{print} 'Witamy w tym kalkulatorze!'"
                story_text_3: "## Liczby losowe\nMożesz też pozwolić komputerowi na samodzielne wykonywanie losowych sum za pomocą {random}.\nW ten sposób wybierasz pewną liczbę tabel do ćwiczenia i z tego zawsze otrzymujesz inną sumę:\n"
                example_code_3: "```\ntabele = 4, 5, 6, 8\nliczby = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\ntabela = tabele {at} {random}\nliczba = liczby {at} {random}\npoprawna_odpowiedź = tabela* liczba \nodpowiedź = {ask} 'ile wynosi ' tabela ' razy ' liczba '?'\n{if} odpowiedź {is} poprawna_odpowiedź {print} 'dobrze'\n{else} {print} 'Błąd! to było ' poprawna_odpowiedź \n```\n"
            15:
                story_text: "## Kalkulator\nMożesz dodać pętlę `{while}` do gry w kalkulator, którą nauczyłeś się robić na poprzednim poziomie.\nDzięki temu gracz nie będzie mógł przejść do następnego pytania {if} udzielił błędnej odpowiedzi.\n"
                example_code: "```\nscore = 0\n{for} i {in} {range} 0 {to} 9\n    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    number1 = numbers {at} {random}\n    number2 = numbers {at} {random}\n    correct = number1 * number2\n    answer = 0\n    {while} answer != correct\n        {print} 'How much is ' number1 ' times ' number2 '?'\n        answer = {ask} 'Fill in your answer:'\n        {print} 'Your answer is ' answer\n    {print} 'Good job!'\n{print} 'You win!'\n```\n"
                start_code: '# umieść tutaj swój kod'
            11:
                example_code: "```\nliczba = 10\n{for} i {in} {range} 1 do 10\n    {print} i * liczba\n```\n"
                story_text: "## Kalkulator\nDzięki `{for}` można uprościć program ćwiczeniowy tabliczki mnożenia.\n\n### Ćwiczenie 1\nPopraw przykładowy kod tak, aby drukował ładną tabliczkę mnożenia: <br> \"1 razy 10 to 10\", \"2 razy 10 to 20\" itd.\n\n### Ćwiczenie 2\nWróć do swojego kodu mnożenia na poziomie 10 i zmodyfikuj go tak, aby używał `{for}` i `{range}`.\n"
                start_code: '# umieść tutaj swój kod'
            13:
                story_text: "## Calculator\n\n### Exercise 1\nLet's make the practice program a bit harder. The player now has to answers two questions correctly. Fill out the blanks to complete the program.\n\n### Exercise 2 (extra)\nSometimes, calculations have multiple correct answers. For example, 10 can be divided by 5 and by 2. So the question 'What number divides 10?' can be answered by 2 and by 5.\nAsk for a calculation that has multiple correct answers, ask the player to answer it, and determine if it is correct using `{or}`.\nEmpty the programming field and create your own solution.\n"
                example_code: "```\nanswer1 = {ask} 'What is 10 times 7?'\nanswer2 = {ask} 'What is 6 times 7?'\n{if} _ _ _ _ _ _ _\n    {print} _\n```\n"
                start_code: '# Schrijf jouw code hier'
        description: Stwórz kalkulator
        default_save_name: Kalkulator
    restaurant:
        levels:
            3:
                start_code: '# umieść swój kod tutaj'
                story_text: "## Losowa restauracja\nMasz problem z podjęciem decyzji, co chcesz zjeść na obiad? Możesz pozwolić Hedy wybrać za Ciebie!\nPo prostu dodaj listę swoich ulubionych (lub najmniej ulubionych) potraw, a Hedy może losowo wybrać Twój obiad.\nMożesz się też trochę zabawić, pozwalając Hedy wybrać także cenę za Twój obiad! Co dostaniesz?\n"
                example_code: "```\ndania {is} spaghetti, brukselka, hamburgery\n{print} Dziś wieczorem będziesz miał dania {at} {random}!\nceny {is} 1 złoty, 10 złotych, 100 złotych\n{print} To będzie ceny {at} {random} proszę.\n```\n"
                story_text_2: "### Ćwiczenie\nTeraz stwórz własną wersję losowej restauracji.\nZrób sam listę przystawek, dań głównych, deserów, napojów i cen.\nNastępnie użyj komend `{print}` i `{at} {random}`, aby powiedzieć klientowi, co będzie w jego menu dziś wieczorem.\n"
                example_code_2: "```\n{print} Witaj w swojej własnej, losowej restauracji!\nprzystawki {is} _\ndania główne {is} _\ndesery {is} _\nnapoje {is} _\nceny {is} _\n_\n```\n"
                story_text_3: "## Alergie\n**Dodatkowo** Czy Twój klient ma jakieś alergie lub nie lubi pewnych potraw? Wtedy możesz użyć polecenia `{remove}`, aby usunąć je ze swojego menu.\n"
                example_code_3: "```\n{print} Tajemniczy milkshake\nsmaki {is} truskawkowy, czekoladowy, waniliowy\nalergie {is} {ask} Czy jesteś uczulony na jakieś składniki?\n_\n{print} Dostaniesz milkshake smaki {at} {random} .\n```\n"
            15:
                start_code: '# umieść tutaj swój kod'
                story_text: "## Restauracja\nDzięki `{while}` możesz mieć pewność, że Twoi klienci będą mogli dodawać zamówienia, dopóki ich nie skończą.\n"
                example_code: "```\n{print} 'Witamy w McHedy'\nwięcej = 'tak'\n{while} więcej == 'tak'\n    zamówienie = {ask} 'Co chcesz zamówić?'\n    {print} zamówienie \n    więcej = {ask} 'Czy chciałby Pan/Pani zamówić coś jeszcze?'\n{print} 'Dziękuję!'\n```\n"
            1:
                story_text: "## Restauracja\n Na poziomie 1 możesz stworzyć swoją własną wirtualną restaurację i przyjmować zamówienia gości.\n"
                example_code: "``` \n{print} Witaj w restauracji Hedy \U0001F35F\n_ Co chcesz zamówić?\n{echo} A więc chcesz zamówić\n{print} Dziękuje za zamówienie!\n{print} Zaraz podamy!\n```\n"
                story_text_2: "### Ćwiczenie\nSkopiuj przykładowy kod na ekran wejściowy, klikając żółty przycisk.\nNajpierw wpisz w puste miejsca właściwe polecenia, aby kod działał poprawnie.\nNastępnie dodaj co najmniej 4 kolejne linie kodu do programu restauracji.\nZapytaj klienta, co chciałby wypić i czy chce zapłacić gotówką, czy kartą.\nNa koniec wymyśl jakiś miły sposób pożegnania się z klientem.\n"
                start_code: '# umieść swój kod tutaj'
            2:
                story_text: "## Restauracja\nNa poziomie 2 możesz rozbudować swoją restaurację za pomocą zmiennych. Na poziomie 1 Hedy mogła wyświetlić {echo} zamówienie tylko raz i pamiętała tylko ostatnią zamówioną rzecz.\nTeraz możesz używać zmiennych, a Hedy może zapamiętać zarówno co zamówiłeś do jedzenie, jak i do picia!\n"
                example_code: "```\n{print} Witamy w restauracji Hedy!\n{print} Dziś serwujemy pizzę lub lasagne.\njedzenie {is} {ask} Co chciałbyś zjeść?\n{print} Świetny wybór! Uwielbiam jedzenie!\ndodatki {is} {ask} Chciałbyś do tego mięso czy warzywa?\n{print} Juz przygotowuje jedzenie z dodatki!\n```\n"
                start_code: '# umieść swój tutaj'
                story_text_2: "### Ćwiczenie\nSkopiuj swój własny kod restauracji z poprzedniego poziomu do ekranu wejściowego poniżej.\nPopraw kod zastępując komendy `{ask}` i `{echo}` i używając zmiennych, tak jak nauczyłeś się w tym poziomie.\n\nTeraz gdy Twój kod znów działa, czas dodać coś jeszcze.\nSpójrz na ostatnią linię przykładowego kodu: `{print} jedzenie z polewa jest w drodze!`.\nW tej jednej linii zostały użyte 2 zmienne do stworzenia podsumowania zamówienia.\nTeraz dodaj własne podsumowanie zamówionego przez klienta jedzenia i napojów.\n\n**Dodatkowo** Teraz gdy nauczyłeś się używać zmiennych, możesz użyć tylu zmiennych w jednej linii, ile tylko zechcesz. Czy możesz dodać więcej zmiennych do swojego kodu, jak np. zjeść w lokalu lub na wynos, gotówką lub kartą, ze słomką lub bez itp?\n"
            12:
                story_text: "## Restauracja\nOd tego poziomu możesz używać liczb dziesiętnych, aby menu było bardziej realistyczne.\n\n### Ćwiczenie\nCzy możesz wymyślić kod, aby dać znajomym i rodzinie 15% zniżki?\n"
                example_code: "```\nprice = 0\nfood = {ask} 'What would you like to order?'\ndrink = {ask} 'What would you like to drink?'\n{if} food {is} 'hamburger'\n    price = price + 6.50\n{if} food {is} 'pizza'\n    price = price + 5.75\n{if} drink {is} 'water'\n    price = price + 1.20\n{if} drink {is} 'soda'\n    price = price + 2.35\n{print} 'That will be ' price ' dollar, please'\n```\n"
                start_code: '# umieść tutaj swój kod'
            11:
                story_text: "## Restauracja\nMożemy użyć `{for}` z `{range}` do wypisania zamówień od wielu klientów w uporządkowany sposób.\n\n### Ćwiczenie\nDokończ kod restauracji, aby móc poprosić o zamówienie wielu osób. Za każdym razem drukuj numer zamówienia: 'Zamówienie 1', 'Zamówienie 2' itd.\nNie jesteś pewien, jak się do tego zabrać? Zerknij na swój kod poziomu 8.\n\n**Dodatkowo** Na poziomie 9 restauracja stosowała również ceny. Tutaj też możesz to dodać!\n"
                example_code: "```\n{print} 'Witamy w Restauracji Hedy!'\nosoby = {ask} 'Dla ilu osób chciałbyś zamówić?'\n{print} 'Więc chcesz zamówić dla ' osoby ' osób.'\n{print} 'Chodźmy!'\n```\n"
                start_code: '# umieść tutaj swój kod'
            10:
                story_text: "## Restauracja\nNa tym poziomie nauczysz się, jak łatwo pytać o zamówienia na różne dania.\n\n### Ćwiczenie 1\nZakończ kod za pomocą `{ask}` w pustych miejscach, tak aby klient był pytany, co chce zjeść w ramach każdego dania.\n"
                example_code: "```\ndania = przystawka, danie główne, deser\n{for} danie {in} dania \n    {print} 'Jakie jest Państwa zamówienie na ' danie '?'\n    _ \n    _\n```\n"
                story_text_2: "### Ćwiczenie\nOczywiście można też zamówić dla wielu osób!\nCzy możesz dodać odpowiednią ilość wcięć przed każdą linią, aby kod działał poprawnie?\nWskazówka: niektóre wiersze w ogóle nie wymagają wcięcia.\n"
                example_code_2: "```\n_ dania = przystawka, danie główne, deser\n_ imiona = Szymon, Anna\n_ {for} imię {in} imiona \n_ {for} danie {in} dania \n_ jedzenie = {ask} imię ', co chcesz zjeść jako swoje ' danie '?'\n_ {print} imię ' zamawia ' jedzenie ' jako ich ' danie\n```\n"
                start_code: dania = przystawka, danie główne, deser
            9:
                story_text: "## Restauracja\nNa tym poziomie możesz użyć wcięć, aby Twoja restauracja była bardziej realistyczna i zabawniejsza!\n\n### Ćwiczenie\nWcięcie zostało usunięte z przykładowego kodu.\nCzy potrafisz określić, ile wcięć potrzebuje każda linia, aby kod działał poprawnie?\nJeśli klient zamawia pizzę, Hedy nie powinna pytać, jakiego sosu chce klient.\n\n**Dodatkowo** Restauracja nie posiada wszystkich sosów. Sporządź listę dostępnych sosów i przy każdym zamówieniu napisz, czy je sprzedajesz. <br>\n**Dodatkowo** Pizze mają dodatki. Zapytaj klientów, czego chcą.<br>\n**Dodatkowo** Czy klienci chcą drinka? Zapytaj ich też! <br>                    \n"
                example_code: "```\n{print} 'Witamy w Restauracji Chez Hedy!'\nosoby = {ask} 'Ile osób dzisiaj do nas dołączy?'\n{print} 'Świetnie!'\ncena = 0\n{repeat} osoby {times}\n_ jedzenie = {ask} 'Co chciałbyś zamówić?'\n_ {print} jedzenie \n_ {if} jedzenie {is} frytki\n_ cena = cena + 3\n_ sos = {ask} 'Jaki sos chciałbyś mieć do swoich frytek?'\n_ {if} sos {is} nie\n_ {print} 'bez sosu'\n_ {else}\n_ cena = cena + 1\n_ {print} 'z ' sos\n_ {if} jedzenie {is} pizza\n_ cena = cena + 4\n{print} 'To będzie ' cena ' złotych.'\n{print} 'Smacznego!'\n```\n"
                start_code: '# umieść tutaj swój kod'
            8:
                story_text: "## Restauracja\nNa tym poziomie możesz rozbudować swoją wirtualną restaurację, powtarzając wiele linii kodu. W ten sposób:\n"
                example_code: "```\n{print} 'Witamy w Restauracji Chez Hedy!'\nosoby = {ask} 'Ile osób dzisiaj do nas dołączy?'\n{print} 'Świetnie!'\n{repeat} osoby {times}\n    jedzenie = {ask} 'Co chcieliby Państwo zamówić?'\n    {print} jedzenie\n{print} 'Dziękuję za zamówienie!'\n{print} 'Smacznego!'\n```\n"
                story_text_2: "### Ćwiczenie\nTen kod można rozszerzyć o więcej pozycji w menu, na przykład oferując napoje i/lub wiele dań, lub deserów. Dodaj jeszcze co najmniej jeden element.\n**Dodatkowo** Dodaj jeszcze więcej elementów, tyle opcji, ile chcesz!\n"
                start_code: '# umieść tutaj swój kod'
            7:
                story_text: "## Restauracja\nNa tym poziomie nauczyłeś się używać polecenia `{repeat}` do powtórzenia linii kodu określoną ilość razy.\nMożesz użyć tego w swojej restauracji do `{ask}` wielu osób, co chcą zjeść.\n\n### Ćwiczenie\nCzy możesz uzupełnić kod? Hedy musi powtarzać to pytanie tyle razy, ilu jest ludzi. Więc jeśli jest 5 osób, pytanie należy zadać 5 razy.\n**Dodatkowo** Rozszerz swój kod o więcej pytań, na przykład o napoje lub sos.\n"
                example_code: "```\n{print} 'Witamy w restauracji Chez Hedy'\nosoby = {ask} 'Ile osób dzisiaj do nas dołącza?'\n```\n"
                start_code: '# umieść tutaj swój kod'
            6:
                story_text: "## Restauracja\nNa tym poziomie możesz użyć matematyki do obliczenia całkowitej ceny zamówienia klienta, co może sprawić, że Twoja wirtualna restauracja będzie bardziej realistyczna.\n"
                example_code: "\nMożesz utworzyć prosty kod restauracji, taki jak ten:\n```\n{print} 'Witamy w restauracji Chez Hedy'\n{print} 'Oto nasze menu:'\n{print} 'Nasze dania główne to pizza, lasagne lub spaghetti'\ngłówne = {ask} 'Które danie główne chcesz?'\ncena = 0\n{if} główne {is} pizza cena = 10\n{if} główne {is} lasagne cena = 12\n{if} główne {is} spaghetti cena = 8\n{print} 'Zamówiłeś ' główne\n{print} 'To będzie ' cena ' złotych.'\n{print} 'Dziękuję, smacznego!'\n```\n"
                story_text_2: "Możesz też dodać wiele innych rzeczy do swojej wirtualnej restauracji, na przykład więcej kursów.\n\n### Ćwiczenie\nMożesz dodać wiele innych rzeczy do swojej wirtualnej restauracji. Na przykład, czy możesz...\n- zapytać, ile osób przyjdzie i pomnóż cenę przez tę kwotę?\n- dodać kolejne danie?\n- dać ludziom zniżkę, gdy wprowadzą (tajny) kod kuponu?\n- dodać menu dla dzieci?\n- pomyśl o innych zabawnych rzeczach do dodania?\n"
                example_code_2: "\nW tym przykładzie są trzy dania, co wymaga więcej kodu i więcej kodu w obliczaniu ceny.\n```\n{print} 'Witamy w restauracji Chez Hedy'\n{print} 'Oto nasze menu:'\n{print} 'Nasze startery to sałatka, zupa lub carpaccio'\n{print} 'Nasze dania główne to pizza, lasagne lub spaghetti'\n{print} 'Nasze desery to brownie, lody lub koktajl mleczny'\nstarter = {ask} 'Który starter chciałbyś?'\ngłówne = {ask} 'Które danie główne chcesz?'\ndeser = {ask} 'Który deser wybierasz?'\ncena = 0\n{if} starter {is} zupa cena = cena + 6 {else} cena = cena + 7\n{if} główne {is}pizza cena = cena + 10\n{if} główne {is} lasagne cena = cena + 12\n{if} główne {is} spaghetti cena = cena + 8\n{if} deser {is} brownie cena = cena + 7\n{if} deser {is} lody cena = cena + 5\n{if} deser {is} koktajl cena = cena + 4\n{print} 'Zamówiłeś ' starter ', ' główne ' i ' deser\n{print} 'To będzie ' cena 'złotych.'\n{print} 'Dziękuję, smacznego!'\n```\n"
                start_code: '# umieść tutaj swój kod'
            5:
                story_text: "## Restauracja\nNa tym poziomie polecenie `{if}` pozwala Ci na `{ask}` (zapytanie) klientów i udzielanie różnych odpowiedzi.\nW poniższym przykładzie widać, że można `{ask}` klienta `{if}` chce usłyszeć specjały, a Hedy może odpowiednio odpowiedzieć.\n"
                example_code: "```\n{print} 'Witamy w restauracji Chez Hedy!'\nspecjał {is} {ask} 'Czy chciałbyś usłyszeć nasze dzisiejsze specjały?'\n{if} specjał {is} tak {print} 'Dzisiaj specjalnością jest kurczak piri piri i ryż.' {else} {print} 'Nie ma problemu.'\njedzenie {is} {ask} 'Co chciałbyś zjeść?'\n{print} 'Jedno ' jedzenie ', zaraz się pojawi!'\nnapój {is} {ask} 'Co chciałbyś do tego pić?'\n{if} napój {is} cola {print} 'Przepraszam, skończyła nam się cola!' {else} {print} 'Świetny wybór!'\ncokolwiek {is} {ask} 'Czy chciałbyś coś jeszcze?'\n{print} 'Pozwól, że powtórzę twoje zamówienie…'\n{print} 'Jedno ' jedzenie\n{if} napój {is} cola {print} 'i…' {else} {print} 'jeden ' napój\n{if} cokolwiek {is} nie {print} 'To wszystko!' {else} {print} 'jeden ' cokolwiek\n{print} 'Dziękujemy za zamówienie i smacznego!'\n```\n"
                story_text_2: "### Ćwiczenie\nCzy możesz wymyślić więcej pytań do klientów, `{ask}` podczas składania zamówienia i wymyśl różne odpowiedzi na ich odpowiedzi za pomocą polecenia `{if}`?\n"
                start_code: '# umieść tutaj swój kod'
            4:
                story_text: "## Restauracja\nW tym poziomie musisz używać cudzysłowu, gdy używasz polecenia `{print}` lub `{ask}`.\n\n### Ćwiczenie\nDodaj cudzysłów do tego kodu, aby działał! Uważaj: zmienne nie powinny być wewnątrz cudzysłowu.\n"
                example_code: "## Przykładowa restauracja Hedy\n```\n_ Dodaj cudzysłów do tego kodu _\n{print} Witamy w restauracji Chez Hedy!\n{print} Dzisiaj serwujemy pizzę lub lasagnę.\njedzenie {is} {ask} Co chciałbyś zjeść?\n{print} Świetny wybór! Uwielbiam jedzenie!\npolewa {is} {ask} Czy chciałbyś na tym mięso lub warzywa?\n{print} jedzenie z polewa jest w drodze!\nnapoje {is} {ask} Co chciałbyś do tego wypić?\n{print} Dziękujemy za zamówienie.\n{print} Twoje jedzenie i napoje będą na miejscu!\n```\n"
                start_code: '# umieść tutaj swój kod'
            13:
                story_text: "## Restauracja\nNa tym poziomie możemy wykorzystać nowe komendy do ulepszenia naszej restauracji.\nUżywamy `{and}`, aby zobaczyć {if} dwie rzeczy są w obu przypadkach.\n"
                example_code: "```\nprice = 10\nfood = {ask} 'What would you like to eat?'\ndrinks = {ask} 'What would you like to drink?'\n{if} food {is} 'sandwich' {and} drinks {is} 'juice'\n    {print} 'Thats our discount menu'\n    price = price - 3\n{print} 'That will be ' price ' dollars'\n```\n"
                start_code: '# umieść tutaj swój kod'
        name: Restauracja
        description: Stwórz swoją własną wirtualną restaurację
        default_save_name: Restauracja
    fortune:
        levels:
            8:
                start_code: '# umieść tutaj swój kod'
                story_text: "## Wróżka\nNa poprzednich poziomach nauczyłeś się, jak użyć `{repeat}`, aby wróżka odpowiedziała na 3 pytania z rzędu, ale mieliśmy problem z wydrukowaniem pytań.\nTeraz ten problem został rozwiązany dzięki nowemu sposobowi używania polecenia `{repeat}`.\nW następnym przykładzie możesz poprosić wróżkę, aby zadała 3 pytania, a także je wydrukowała!\n\n### Ćwiczenie\nCzy potrafisz wpisać odpowiednie polecenie w puste miejsca?\n"
                example_code: "```\n{print} 'Jestem Hedy - wróżka!'\n{print} 'Możesz zadać mi 3 pytania'\nodpowiedzi = tak, nie, może\n_ _ _\n   pytanie = {ask} 'Co chcesz wiedzieć?'\n   {print} pytanie\n   {sleep}\n   {print} 'Moja kryształowa kula mówi...' odpowiedzi {at} {random}\n```\n"
            7:
                story_text: "## Wróżka\nNa tym poziomie możesz użyć komendy `{repeat}`, aby twoja maszyna przepowiedziała kilka losów jednocześnie.\n"
                example_code: "```\n{print} 'Jestem Hedy - wróżka!'\n{print} 'Możesz zadać 3 pytania!'\n{repeat} 3 {times} pytanie = {ask} 'Co chcesz wiedzieć?'\nodpowiedź = tak, nie, może\n{repeat} 3 {times} {print} 'Moja kryształowa kula mówi...' odpowiedź {at} {random}\n```\n"
                story_text_2: "### Ćwiczenie\nPrzykładowy program zadaje trzy pytania, ale... Nie daje trzech odpowiedzi.\nZrób listę odpowiedzi i trzykrotnie wydrukuj losową. Pomyśl o zabawnych odpowiedziach.\n\nNiestety nie możemy jeszcze pokazać odpowiedzi parami. W nadchodzących poziomach układ polecenia `{repeat}` ulegnie zmianie, rozwiązując ten problem.\n"
                start_code: '# umieść tutaj swój kod'
            4:
                start_code: '# umieść tutaj swój kod'
                story_text: "## Wróżka\nTen poziom nie ma żadnych nowych funkcji, ale pozwala poćwiczyć używanie cudzysłowów.\nMożesz przerobić swój kod poziomu 3 i pamiętaj o dodaniu cudzysłowów we właściwych miejscach!\n\nPamiętaj, że na poziomie 3 nie mogliśmy użyć słowa „pytanie” zarówno jako nazwy zmiennej, jak i zwykłego słowa, które można wydrukować.\nUmożliwiają to cudzysłowy na poziomie 3!\n\nWażny! Pamiętaj, że teraz, gdy używamy cudzysłowów, Hedy będzie zdezorientowana, gdy użyjesz apostrofu do skrótów typu I'm lub What's.\nPamiętaj, aby usunąć te apostrofy i zmienić pisownię na Im lub Whats.\n\n### Ćwiczenie\nUsunęliśmy wszystkie cudzysłowy z tego przykładowego kodu, czy możesz dodać je we wszystkich właściwych miejscach?\n"
                example_code: "```\n_ Dodaj cudzysłów do tego kodu _\n{print} Jestem Hedy - wróżka!\npytanie {is} {ask} Co chcesz wiedzieć?\n{print} To jest twoje pytanie: pytanie\nodpowiedzi {is} tak, nie, może\n{print} Moja kryształowa kula mówi...\n{sleep} 2\n{print} odpowiedzi {at} {random}\n```\n"
            1:
                story_text: "## Wróżka\nCzy byłeś kiedyś w wesołym miasteczku i wróżka przepowiedziała Ci przyszłość? Albo czy kiedykolwiek grałeś magiczną ósemką?\nWtedy prawdopodobnie wiesz, że tak naprawdę nie mogą one przewidzieć twojej przyszłości, ale nadal jest to zabawne!\n\nW najbliższych poziomach możesz nauczyć się jak stworzyć własną maszynę do wróżenia!\nW poziomie 1 możesz zacząć łatwo, pozwalając Hedy przedstawić się jako wróżka i pozwolić jej odpowiedzieć {echo} odpowiedziami graczy.\nNa przykład tak:\n"
                example_code: "```\n_ Witam, jestem Hedy, wróżka!\n_ Kim jesteś?\n_ Pozwól mi spojrzeć w moją kryształową kulę\n_ Widzę... Widzę...\n_ Twoje imię to\n```\n"
                story_text_2: "### Ćwiczenie\nSkopiuj przykładowy kod na ekran wprowadzania i wypełnij puste pola, aby kod działał.\n**Dodatkowo** Zmień kod i pozwól wróżbitce nie tylko przewidzieć Twoje imię, ale także wiek, ulubioną drużynę sportową lub coś innego o sobie.\n"
                start_code: '# umieść swój kod tu'
            12:
                story_text: "## Wróżka\nNa tym poziomie możesz tworzyć los wieloma słowami. Czy możesz dodać więcej różnych fortun do listy?\n"
                example_code: "```\nlosy = 'poślizgniesz się na skórce od banana', _\n{print} 'Zajrzę do mojej kryształowej kuli w poszukiwaniu twojej przyszłości.'\n{print} 'Widzę... Widzę...'\n{sleep}\n{print} losy {at} {random}\n```\n"
                start_code: '# umieść tutaj swój kod'
            10:
                story_text: "## Wróżka\nNa tym poziomie nauczysz się programować grę MASH (dwór, mieszkanie, chałupa, dom). W tej grze możesz przewidzieć  jak będzie wyglądać przyszłość dla wszystkich graczy jednocześnie.\n\n### Ćwiczenie 1\nDodaj dwie nazwy do listy i zobacz, jak zmienia się wynik działania programu po jego uruchomieniu.\n"
                example_code: "```\nhouses = mansion, apartment, shack, house\nloves = nobody, a royal, their neighbour, their true love\npets = dog, cat, elephant\nnames = Jenna, Ryan, Jim\n{for} name {in} names\n    {print} name ' lives in a ' houses {at} {random}\n    {print} name ' will marry ' loves {at} {random}\n    {print} name ' will get a ' pets {at} {random} ' as their pet.'\n    {sleep}\n```\n"
                story_text_2: "### Ćwiczenie 2\nMożemy również zrobić wróżkę z motywem Harry'ego Pottera. Wypełnij puste miejsca tak, aby wydrukować 9 wierszy.\n**Dodatkowo** Zmień motyw wróżki na coś innego, na przykład ulubioną książkę, film lub program telewizyjny.\n"
                example_code_2: "```\ndomy = Gryffindor, Slytherin, Hufflepuff, Ravenclaw\nprzedmioty = eliksiry, obrona przed czarną magią, uroki, transfiguracja\nlęki = Voldemort, pająki, niezdany test OWL\nimiona = Harry, Ron, Hermiona\n_\n_ {print} imię ' jest umieszczone w ' domy {at} {random}\n_ {print} imię ' jest świetne w ' przedmioty {at} {random}\n_ {print} imię ' najbardziej boi się ' lęki {at} {random}\n```\n"
                start_code: '# umieść tutaj swój kod'
            6:
                story_text: "## Wróżka\nNa tym poziomie możesz używać matematyki w swoich przewidywaniach jako wróżbita. Pozwala to na tworzenie (zwariowanych) formuł do obliczania przyszłości.\nNa przykład możesz obliczyć, w jaki sposób zdobędziesz bogactwo lub ile będziesz mieć dzieci, gdy dorośniesz.\n\n\n\n### Ćwiczenie\nCzy możesz wymyślić własną (zwariowaną) maszynę do wróżenia?\n"
                example_code: "```\n{print} 'Jestem Hedy - wróżka!'\n{print} 'Mogę przewidzieć, ile dzieci będziesz miał, gdy dorośniesz!'\nwiek = {ask} 'Ile masz lat?'\nrodzeństwo = {ask} 'Ile masz rodzeństwa?'\nwzrost = {ask} 'Ile masz wzrostu w centymetrach?'\nliczba_dzieci = wzrost / wiek\nliczba_dzieci = liczba_dzieci - rodzeństwo\n{print} 'Będziesz miał...'\n{sleep}\n{print} liczba_dzieci ' dzieci!'\n```\n\n## Przykładowy głupi wróżbita\nJeśli poprzedni przykład nie był dla Ciebie wystarczająco zwariowany, spójrz na ten!\n```\n{print} 'Jestem Hedy - zwariowany wróżbita!'\n{print} 'Przewiduję, jak mądry jesteś!'\nnożna = {ask} 'W skali 1-10 jak bardzo kochasz piłkę nożną?'\nbanany = {ask} 'Ile bananów zjadłeś w tym tygodniu?'\nhigiena = {ask} 'Ile razy dzisiaj umyłaś ręce?'\nwynik = banany + higiena\nwynik = wynik * nożna \n{print} 'Jesteś ' nożna ' procentowo inteligentny.'\n```\n"
                start_code: '# umieść tutaj swój kod'
            5:
                start_code: '# umieść tutaj swój kod'
                story_text: "## Fortune Teller\nIn this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!\nBy using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.\nCheck out this example to find out how.\n"
                example_code: "```\n{print} 'Jestem wróżka Hedy'\n{print} 'Mogę przewidzie czy jutro wygrasz loterię!'\nosoba {is} {ask} 'Kim jesteś?'\n{if} osoba {is} Hedy {print} 'Zdecydowanie wygrasz!\U0001F929' {else} {print} 'Złe wieści! Ktoś inny wygra!\U0001F62D'\n```\n"
                story_text_2: "## Zhakuj program\nZastąp Hedy własnym imieniem w ostatnim wierszu, a Hedy zawsze przewidzi, że wygrasz na loterii, a inni nie!\nOczywiście może to wzbudzić podejrzenia innych graczy... Aby tego uniknąć, możesz upewnić się, że Hedy udziela różnych odpowiedzi za każdym razem, gdy uruchamiasz kod.\nOczywiście tobie nadal daje pozytywną odpowiedź, a innym graczom negatywną.\n"
                example_code_2: "```\n{print} 'Jestem Hedy - wróżka!'\n{print} 'Mogę przewidzieć, czy jutro wygrasz na loterii!'\nosoba {is} {ask} 'Kim jesteś?'\ndobraodpowiedź {is} Hurra! Wygrałeś!, Na pewno wygrasz!, Mamy zwycięzcę!\nzłaodpowiedź {is} Pech! Spróbuj jeszcze raz!, Inna osoba wygra, Ty przegrasz!\n{if} osoba {is} Hedy {print} dobraodpowiedź {at} {random} {else} {print} złaodpowiedź {at} {random}\n```\n"
                story_text_3: "### Ćwiczenia\nTa koncepcja może być wykorzystana do tworzenia wielu różnych programów, po prostu bądź kreatywny! Na przykład możesz stworzyć maszynę, która przewiduje, że twoja ulubiona drużyna sportowa pokona wszystkich konkurentów!\nMożesz też powiesić na ścianie magiczne lustro Królewny Śnieżki, aby powiedzieć wszystkim, że jesteś najpiękniejsza ze wszystkich!\nDaj się ponieść wyobraźni!\n"
            3:
                story_text: "## Wróżka\nNa poprzednich poziomach stworzyłeś swoją pierwszą maszynę do wróżenia, ale Hedy nie mogła niczego przewidzieć, tylko wykonać {echo}.\nNa tym poziomie możesz użyć zmiennej i polecenia `{at} {random}`, aby Hedy naprawdę wybrała odpowiedź. Zobacz ten kod dla przykładu:\n"
                example_code: "\nW tym przykładzie gracz może {ask} Hedy pytanie typu \"tak-nie\", a Hedy wybierze losowo odpowiedź za ciebie.\n```\n{print} Jestem wróżka Hedy!\npytanie {is} {ask} Co chcesz wiedzieć?\n{print} A więc chcesz wiedzieć czy: pytanie \nodpowiedzi {is} tak, nie, może\n{print} Moja szklana kula mówi że...\n{sleep} 2\n{print} odpowiedzi  {at} {random}\n```\n"
                story_text_2: "### Ćwiczenie\nTeraz Hedy może odpowiedzieć tylko tak, nie lub może. Czy możesz dać Hedy więcej opcji odpowiedzi, np. 'zdecydowanie' lub 'zapytaj ponownie'.\n"
                start_code: '# umieść tutaj swój kod'
        name: Wróżka
        description: Niech Hedy przewidzi przyszłość
        default_save_name: Wróżka
    haunted:
        levels:
            11:
                start_code: "{print} 'Ucieknij z nawiedzonego domu!'"
                story_text: "## Nawiedzony dom\nNa tym poziomie zmieniliśmy polecenie `{for}`, abyśmy mogli powiedzieć graczowi, gdzie się znajduje.\n\n### Ćwiczenie 1\nZakończ program, aby gracz wiedział, w którym pokoju się znajduje.\n\n### Ćwiczenie 2\nZmień program w przygodę, wykonując następujące kroki:\n\n1. Zrób listę wyborów (takich jak: walcz lub uciekaj)\n2. Upewnij się, że gracz może wybrać opcję za pomocą `{ask}`\n3. Czy odpowiedź jest poprawna? Następnie mogą przejść do następnego potwora. Czy dali złą odpowiedź? Poinformuj gracza za pomocą `{print}`.\n\n**Dodatkowo** Jeśli dokonasz złego wyboru, potwór nadal będzie widoczny! Jak mógłbyś to zmienić?\n"
                example_code: "```\n{print} 'Ucieknij z nawiedzonego domu!'\npotwory = zombie, wampir, gigantyczny pająk\n_\n    {print} 'Pokój ' i\n    potwór = potwory {at} {random}\n```\n"
            9:
                story_text: "## Nawiedzony dom\nNa tym poziomie możesz skorzystać ze wcięć, dzięki czemu nawiedzony dom stanie się jeszcze bardziej interaktywny!\n\n### Ćwiczenie\nTeraz bardzo trudno jest wygrać tę grę, czy możesz ułatwić wygraną?\nZmień kod tak, aby zawierał tylko jedne błędne drzwi i dwoje prawidłowych drzwi zamiast jednych prawidłowych drzwi i dwóch niewłaściwych?\nWskazówka: oznacza to zmianę zmiennej poprawne_drzwi na niepoprawne_drzwi i zamianę kodu `{if}` i `{else}`.\nI oczywiście możesz także zmienić historię i uczynić ją własną. Zmień potwory lub spraw, by był to wesoły teleturniej, w którym otrzymasz prezent!\n"
                start_code: "{print} 'Ucieknij z nawiedzonego domu!'"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nplayer = alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{repeat} 3 {times}\n    {if} player {is} alive\n        correct_door {is} doors {at} {random}\n        {print} 'There are 3 doors in front of you...'\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} chosen_door {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n"
            16:
                start_code: '# umieść tutaj swój kod'
                story_text: "## Gra Nawiedzony Dom\nTa gra w nawiedzonym domu wykorzystuje połączenie między listami, których możesz użyć na tym poziomie.\nNa przykład: wszystkie właściwości należące do zombie są na pierwszym miejscu na wszystkich listach, na drugim miejscu jest czarownica, a na trzecim wampir.\nZobacz kod!\n"
                example_code: "```\nliczby = [1, 2, 3]\ni = liczby [random]\npodpowiedz = ['growling', 'a cackling laugh', 'trzepotanie skrzydeł']\nmonsters = ['zombie', 'wiedźma', 'wampir']\nbad_fate = ['Twój mózg został zjedzony', 'Zostałeś przeklęty', 'Zostałeś ugryziony']\ngood_fate = ['You throw the ham. The zombie is distracted and starts etaing it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']\nweapons = ['ham', 'lighter', 'garlic']\n{print} 'You are standing in front of an old mension'\n{print} 'Something is not right here'\n{print} 'Słyszysz ' podpowiedz [i]\n{print} 'You are going to explore it'\n{print} 'You enter the kitchen en see a lighter, a raw ham and a garlic.'\nyour_weapon = {ask} 'What do you bring with you?'\n{print} 'With your ' your_weapon ' you enter the living room'\n{print} 'There you find a ' monsters[i]\nneeded_weapon = weapons[i]\n{if} your_weapon == needed_weapon\n    {print} 'You use your ' your_weapon\n    {print} good_fate[i]\n    {print} 'YOU WIN!'\n{else}\n    {print} 'You have chosen the wrong weapon...'\n    {print} bad_fate[i]\n    {print} 'KONIEC GRY'\n```\n"
            1:
                story_text: "## Nawiedzony dom\nW tej przygodzie pracujesz nad stworzeniem gry, w której musisz uciec z nawiedzonego domu wybierając właściwe drzwi.\nJeśli wybierzesz właściwe drzwi, przeżyjesz, ale jeśli nie, straszny potwór może...\n\nW poziomie 1 zaczynamy naszą grę w nawiedzony dom przez wymyślenie strasznej historii i zapytania gracza jakiego potwora zobaczą w nawiedzonym domu.\n"
                example_code: "```\n{print} Jak się tu dostałem?\n{print} Pamiętam, jak przyjaciel powiedział mi, że mam wejść do starej rezydencji...\n{print} i nagle wszystko stało się czarne.\n{print}  Ale jak wylądowałem na podłodze...?\n{print} Strasznie boli mnie głowa, jakby ktoś walnął mnie kijem!\n{print} Co to za dźwięk?\n{print} O nie! Chyba nie jestem sam w tym domu!\n{print} Muszę się stąd wydostać!\n{print} Przede mną są 3 drzwi...\n{ask} Które drzwi powinienem wybrać?\n{echo} Wybieram drzwi\n{print} ...?\n```\n"
                story_text_2: "### Ćwiczenie\nSkopiuj przykładowy kod na ekran wprowadzania, klikając żółty przycisk.\nTeraz zakończ historię, dodając co najmniej 5 linii kodu.\nPamiętaj, aby każdą linię kodów rozpocząć od komendy `{print}`.\n"
                start_code: '{print} Jak się tu znalazłem?'
            2:
                story_text: "## Nawiedzony dom\nW tym nawiedzonym domu możesz wybierać swoje potwory za pomocą emotikonów. Oczywiście możesz też użyć słów.\n"
                example_code: "```\npotwór_1 {is} \U0001F47B\npotwór_2 {is} \U0001F921\npotwór_3 {is} \U0001F476\n{print} Wchodzisz do nawiedzonego domu..\n{print} Nagle widzisz potwór_1\n{print} Uciekasz do innego pokoju, ale potwór_2 czeka na ciebie!\n{print} O nie! Szybko idź do kuchni.\n{print} Ale jak wchodzisz zaatakował ciebie potwór_3!\n```\n"
                start_code: potwór1 {is} _
                story_text_2: "### Ćwiczenie\nW powyższym przykładzie potwory są z góry określone. Więc za każdym razem, gdy uruchamiasz swój kod, dane wyjściowe są takie same.\nCzy możesz dodać polecenia `{ask}`, aby uczynić nawiedzony dom interaktywnym i sprawić, by gracze wybierali napotkane potwory?\n"
                example_code_2: "```\npotwór_1 {is} _\npotwór_2 {is} _\npotwór_3 {is} _\n{print} Wchodzisz do nawiedzonego domu..\n{print} Nagle widzisz potwór_1\n{print} Uciekasz do innego pokoju, ale potwór_2 czeka na ciebie!\n{print} O nie! Szybko idź do kuchni.\n{print} Ale jak wchodzisz zaatakował ciebie potwór_3!\n```\n"
            14:
                story_text: "## Nawiedzony dom\nNa tym poziomie możesz użyć symboli `<` i `>`, aby wprowadzić życie do swojej gry.\n"
                example_code: "```\n{print} 'Escape from the haunted house'\nlives = 3\ndoors = 1, 2, 3\nmonsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'\n{for} i {in} {range} 1 {to} 10\n    {if} lives > 0\n        good_door = doors {at} {random}\n        monster = monsters {at} {random}\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} good_door == chosen_door\n            {print} 'You have chosen the correct door'\n        {else}\n            {print} 'You see...' monster\n            {if} monster == 'a sleeping 3 headed dog'\n                {print} 'Pffieuw.... Its asleep'\n            {else}\n                {print} 'You lose one life'\n                lives = lives -1\n    {else}\n        {print} 'GAME OVER'\n```\n"
                start_code: '# umieść tutaj swój kod'
            5:
                story_text: "## Nawiedzony dom\nAż do tego poziomu gra w nawiedzonym domu zawsze prosiła gracza o wybranie drzwi, ale jak zapewne zauważyłeś, tak naprawdę nie musieli odpowiadać poprawnie.\nJeśli gracz podał całkowicie losową odpowiedź, gra nadal działała, a gracz mógł nawet wygrać (mimo że nie wybrał drzwi).\nNa tym poziomie możesz wygrać grę tylko wybierając te same drzwi, które losowo wybrała Hedy.\n\n### Ćwiczenie\nCzy potrafisz znaleźć 4 brakujące słowa, aby uzupełnić kod?\n"
                example_code: "```\n{print} 'Uciekaj z nawiedzonego domu!'\n{print} 'Przed tobą znajdują się 3 drzwi...'\ndrzwi {is} 1, 2, 3\npotwory {is} wilkołak, mumia, wampir, zombie\nwybrane_drzwi {is} {ask} 'Które drzwi wybierasz?'\n{print} 'Wybrałeś drzwi...' wybrane_drzwi \n{sleep}\npoprawne_drzwi {is} drzwi {at} {random}\n_ _ _ {print} 'Fantastycznie! Uciekłeś!'\n{else} {print} 'O nie! Zostałeś zjedzony przez...' potwory. {at} {random}\n```\n"
                start_code: '# umieść tutaj swój kod'
            4:
                story_text: "## Nawiedzony dom\nNa tym poziomie nauczysz się używać cudzysłowów w swoich grach.\nCzy potrafisz zmienić swój Nawiedzony Dom, aby był zgodny z poziomem 4?\n"
                example_code: "```\n{print} _ Uciekaj z nawiedzonego domu! _\n{print} _ Przed tobą znajduje się 3 drzwi... _\nwybór {is} {ask} _ Które drzwi wybierzesz? _\n{print} Wybrałeś drzwi ... _ wybór\npotwory {is} zombie, wampir, UCIEKŁEŚ\n{print} Widzisz... _\n{sleep}\n{print} potwory {at} {random}\n ```\n"
                start_code: '# umieść tutaj swój kod'
            3:
                story_text: "## Gra w nawiedzony dom\nNa poprzednich poziomach zrobiłeś wprowadzenie do gry w nawiedzony dom, ale jak mogłeś zauważyć, historia zawsze miała straszny koniec.\nNa tym poziomie możesz uczynić swoją historię bardziej interaktywną, zmieniając wynik gry; czasami zostaniesz zjedzony, czasami uciekniesz!\nNiech Hedy decyduje losowo!\n"
                story_text_2: "### Ćwiczenie\nSkopiuj przykładowe kody i wypełnij puste miejsca, aby zadziałało!\n\n**Dodatkowo** Ta historia jest dość prosta, może możesz ją trochę wystraszyć, dodając bardziej ekscytującą historię.\nRównież masz teraz bardzo ograniczone wyniki, są tylko 3 opcje tego, co jest za drzwiami. Może możesz wymyślić więcej potworów, aby dodać je do listy!\n"
                start_code: '# umieść tutaj swój kod'
                story_text_3: "## Zmień grę w teleturniej!\n### Ćwiczenie\nNa koniec chcielibyśmy rzucić ci wyzwanie, abyś zmienił tę grę w teleturniej (taki jak w telewizji), w którym wybierasz drzwi lub walizkę, która zawiera dużą cenę!\nMożesz to zrobić? Umieściliśmy już pierwsze linie w przykładowym kodzie.\n"
                example_code_3: "```\n{print} Wielkie show!\n{print} Przed tobą stoją 3 walizki...\n{print} W jednej z nich znajduje się _\n_\n```\n"
                example_code_2: "```\n_ Uciekaj z nawiedzonego domu!\n_ Przed tobą znajduje się 3 drzwi...\n_ _ _ Które drzwi wybierasz?\n_ Wybrałeś drzwi ... wybór\npotwory _ zombie, wampir, NIC UDAŁO CI SIĘ UCIEC\n_ Widzisz...\n{sleep}\n_ _ _ _\n```\n"
        name: Nawiedzony dom
        description: Ucieknij z nawiedzonego domu
        default_save_name: Nawiedzony dom
    story:
        levels:
            10:
                example_code: "```\nanimals = _ , _ , _ \n{print} 'Brown bear, Brown bear'\n{print} 'What do you see?'\n```\n"
                story_text: "## Opowieść\nW tym poziomie możesz użyć polecenia {for} w swojej opowieści. Dzięki tej komendzie możesz bardzo prosto zaprogramować część wierszyka \"Sroczka kaszkę warzyła\".\n\n### Ćwiczenie\n\nSpójrz na <a href=\"https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf\"> opowiadanie</a> jeśli go nie znasz i upewnij się, że jest wydrukowane tak jak w książce.\n"
                start_code: '# tutaj umieść swój kod'
            1:
                story_text: "## Stwórz opowieść\nNa poziomie 1 możesz stworzyć opowieść z różnymi postaciami które stworzysz samodzielnie.\n\nW pierwszej linii użyj polecenia `{ask}` i zapytaj kto będzie głównym bohaterem twojej opowieści.\n\nKolejne linie zacznij od polecenia `{print}` jeżeli chcesz wyświetlić tekst.\nUżyj polecenia `{echo}` jeżeli chcesz aby imię twojego bohatera znalazło się na końcu wypowiedzi.\n"

                example_code: "```\n{ask} Głównym bohaterem historii jest\n{print} Główny bohater idzie przez las\n{echo} Jest troszkę przestraszony,\n{print} Wszędzie słyszy jakieś dziwnie odgłosy\n{print} Obawia się że to jest nawiedzony las\n```\n"
                start_code: '{print} Historyjka zaczyna się tutaj'
                story_text_2: "### Ćwiczenie\nTeraz stwórz własną historię z co najmniej sześciu (6) linii kodu.\nTwoja historia nie może być taka sama jak przykładowy kod.\nUżyj co najmniej jednego polecenia `{ask}` i jednego `{echo}`.\nMożesz zrobić to na dowolny temat.\nJeśli nie możesz wymyślić tematu, skorzystaj z jednej z naszych opcji: wyjście do kina, mecz sportowy lub dzień w zoo.\n"
            2:
                story_text: "## Historyjka\nNa poziomie 2 twoja opowieść może być znacznie zabawniejsza. Imię głównego bohatera może pojawić się w dowolnym miejscu w zdaniu.\n\nTrzeba będzie napisać nieco więcej kodu. Musisz zapytać o imię głównego bohatera, zanim będziesz mógł wykorzystać je w zdaniu.\n\nPotem będziesz mógł użyć imienia w dowolnym miejscu w zdaniu.\n"
                example_code: "```\nimię {is} {ask} Jak nazywa się główny bohater?\n{print} imię biega teraz po lesie\n{print} imię trochę się boi\n{print} Nagle imię usłyszał dziwny dźwięk...\n{sleep}\n{print} imię obawia się, że las może być nawiedzony\n```"
                start_code: '{print} Twoja historyjka'
                story_text_2: "### Ćwiczenie\nTeraz nadszedł czas, aby dodać zmienne do opowieści, którą stworzyłeś na poprzednim poziomie. \nPrzejdź do „Moje programy”, poszukaj przygody fabularnej poziomu 1 i skopiuj kod. Wklej kod na ekranie wprowadzania na tym poziomie. \n\nTen kod nie zadziała na tym poziomie, ponieważ nie używałeś jeszcze zmiennych. \nZmień polecenia `{ask}` i `{echo}` w swoim kodzie na poprawną formę, której nauczyłeś się na tym poziomie. \n\n**Dodatkowo** Dodaj polecenie uśpienia do swojego kodu, aby zbudować napięcie w swojej historii.\n"
            12:
                story_text: "## Opowieść\nW tym poziomie możesz użyć cudzysłowy, żeby przypisac wiele słów do jednej zmiennej."
                example_code: "```\nimię = 'Królowa Anglii'\n{print} imię ' jadła kawałek ciasta, gdy nagle...'\n```\n"
                start_code: '# tutaj umieść swój kod'
            9:
                story_text: "## Opowieść\nW tym poziomie możesz użyć poleceń `{if}` and `{repeat}` wewnątrz innych poleceń `{if}` oraz `{repeat}`.\nDzięki temu możesz jeszcze bardziej urozmaicić swoją opowieść.\n\n### Cwiczenie 1\nUzupełnij kod tak, aby polecenie `{if}` działało poprawnie.\n\n### Cwiczenie 2\nDodaj polecenie `{if}` oraz `{else}` do części opowiadania, gdzie Robin wraca do domu.\n\n### Cwiczenie 3\nWróć do swojej opowiadania z poziomu 8 i użyj co najmniej dwóch poleceń `{if}` wewnątrz innego polecenia `{if}`.\n"
                example_code: "```\n{print} 'Robin idzie wzdłuż ulicy'\nlokalizacja = {ask} 'Czy Robin idzie do sklepu, czy wraca do domu?'\n{if} lokalizacja {is} sklep\n    {print} 'Wchodzi do sklepu.'\n    {print} 'Robin widzi ciekawą książkę'\n    książka = {ask} 'Czy Robin kupuje książkę?'\n    {if} książka {is} tak\n    _ {print} 'Robin kupuje książkę i wraca do domu'\n    _ {else}\n    _ {print} 'Robin opuszcza sklep i wraca do domu'\n{else}\n    {print} 'Robin wraca do domu'\n```\n"
                start_code: '# tutaj umieść swój kod'
            8:
                story_text: "## Opowieść\nW tym poziomie masz możliwość napisania wielu lini kodu wewnątrz polecenia {if}. Dzięki temu możesz urozmaicić szczęśliwe i tragiczne zakończenia Twojej opowieści.\n\n## Ćwiczenie 1\nPrzykładowy kod pokazuje dwa różne zakończenia; jedno, w którym bohaterowie skaczą w czasie przy użyciu maszyny czasu, a drugie, w którym tego nie robią.\nUzupełnij puste miejsca co najmniej jednym zdaniem na każde zakończenie.\n**(dodatkowe)** Utwórz dłuższą opowieść. Co się w niej dzieje? Możesz także dodać drugie polecenie `{ask}` z innymi opcjami.\n\n## Ćwiczenie 2\nWróć do swoich zapisanych programów, wybierz program z opowieścią z poziomu 5. Napisz w nich dobre oraz złe zakończenia, każde z co najmniej trzema liniami kodu! \n"
                example_code: "```\n{print} 'O, nie! Tyranozaur Rex zbliża się!'\nzakończenie = {ask} 'Czy chcesz zakończenie szczęśliwe czy smutne?'\n{if} zakończenie {is} szczęśliwe\n    {print} 'W ostatnim momencie Richard wraca do maszyny czasu!'\n    {print} _\n{else}\n    {print} 'O, nie! Richard jest zbyt wolny...'\n    {print} _\n```\n"
                start_code: '# tutaj umieść swój kod'
            7:
                story_text: "## Opowieść\nW niektórych opowieściach, bohaterowie czasem powtarzają wybrany zwrot kilka razy. Przykładem tego jest bohater wołający o pomoc lub też śpiewający piosenkę.\nMożesz stworzyć takie powtórzenia w swojej opowieści przy użyciu polecenia `{repeat}`.\n\n## Ćwiczenie\nDodaj powtórzenia do Twojej opowieści. Wróć do swoich zapisanych programów i wybierz Twój program z opowieścią z poziomu 6 i \nznajdź linię zawierającą polecenie `{print}` i powtórz ją!\n"
                example_code: "```\n{print} 'Książę wciąż wołał o pomoc'\n{repeat} 5 {times} {print} 'Pomocy!'\n{print} 'Dlaczego nikt mi nie pomaga?'\n```\n"
                start_code: "{repeat} 5 {times} {print} 'Pomocy!'"
            5:
                story_text: "## Opowieść\nW tym poziomie możesz zaprogramować różne zakończenia, które sprawią, że Twoja opowieść jest bardziej interestująca.\n\n## Ćwiczenie\nWymyśl dwa różne zakonczenia dla swojej opowieści, na przykład:\n\n- Księżniczka przechadza się przez las\n- Napotyka potwora\n\n- Szczęśliwe zakończenie: Księżniczka wyciąga swój miecz i potwór ucieka\n- Tragiczne zakończenie: Potwór zjada księżniczkę\n\nMożesz też dodać możliwość podania nowego imienia. Działa to tak samo jak w poprzednich poziomach. Mozesz też to połączyć z poleceniem `{if}` i dzięki temu otrzymasz pełny program.\n"
                example_code: "```\nimię {is} {ask} 'Kto idzie przez las?'\n{print} imię ' idzie przez las'\n{print} imię ' spotyka potwora'\nzakończenie {is} {ask} 'Czy chciałbyś dobre czy złe zakończenie?'\n{if} zakończenie {is} dobre {print} imię ' wyciąga miecz i potwór ucieka'\n{else} {print} 'Potwór zjada ' imię\n```\n"
                start_code: "{print} 'Tutaj jest początek Twojej opowieści!'"
            4:
                story_text: "## Opowieść\nMogłeś zauważyć, że w poprzednich poziomach ciągle jest pewnie problem. Czy próbowałeś napisać zdanie które zawierało słowo “imię”? Na przykład: `{print}` moje imię to imię.\nW tym poziomie możesz rozwiązać ten problem. Wystarczy, że użyjesz cudzysłowia dookoła tekstu, który chciałbyś wyświetlić.\n"
                example_code: "```\nimię {is} Hans\n{print} _ Główny bohater ma na imię _ imię\n{print} imię _ idzie na spacer do lasu _\n{print} imię _ jest strachliwy _\nzwierzęta {is} \U0001F994, \U0001F43F, \U0001F989, \U0001F987\n{print} _ Słyszy dźwięk _ zwierzęta {at} {random}\n{print} name _ obawia się, że jest w nawiedzonym lesie _\n```\n"
                start_code: "{print} 'Twoja opowieść będzie tutaj napisana!'"
            3:
                story_text: "## Historyjka\nNa poziomie 3. Twoja historyjka może być jeszcze zabawniejsza. Możesz wybrać losowo potwora, zwierzę oraz inne utrudnienia, tak jak w przykładzie:\n"
                example_code: "```\nzwierzęta {is} \U0001F994, \U0001F43F, \U0001F989, \U0001F987\n{print} Teraz słyszy odgłos zwierzęta {at} {random}\n```\n"
                story_text_2: "Komenda `{add}` może się przydać w historyjce.\n"
                example_code_2: "```\n{print} On słyszy odgłos\nzwierzęta {is} \U0001F43F, \U0001F994, \U0001F987, \U0001F989\nzwierzę {is} {ask} Co to było?\n{add} zwierzę {to_list} zwierzęta\n{print} To był odgłos zwierzęta {at} {random}\n```\n"
                story_text_3: "To jest przykład polecenia `{remove}` w twojej opowieści.\n\n### Ćwiczenie\nSkopiuj swoją opowieść z poprzednich poziomów na ten poziom.\nNa tym poziomie nauczyłeś się 3 nowych komend `{at} {random}`, `{add} {to}` i `{remove} {from}`.\nDodaj nowe wiersze kodu do swojej historii, aby wszystkie nowe polecenia znalazły się w niej przynajmniej raz.\n"
                example_code_3: "```\n{print} Jego plecak stał się zbyt ciężki.\n{print} W środku była butelka wody, latarka i cegła.\nplecak {is} woda, latarka, cegła\nwyrzuc {is} {ask} Który przedmiot powinien wyrzucić?\n{remove} wyrzuc {from} plecak\n```\n"
                start_code: '{print} Twoja histora'
            15:
                story_text: "## Opowieść\nPrzy użyciu pętli `{while}` możesz stworzyć jeszcze bardziej wciągające opowieści. Na przykład, możesz użyć `{while} gra {is} 'działa'` żeby kontynuować grę aż się zakończy.\nAlternatywnie możesz napisać `{while} miecz {is} 'zagubiony'` żeby nie pozwolić graczowi kontynuować zanim znajdą miecz.\n"
                example_code: "```\nklucze = 'zgubione'\n{print} 'Stoisz w ogrodzie i zgubiłeś swoje klucze.' \n{print} 'Gdzie chcesz ich poszukać?'\n{print} 'Możesz wybrać: drzewo, doniczka, kamień, skrzynka na listy'\n{while} klucze == 'zgubione'\n    miejsce = {ask} 'Gdzie chcesz popatrzeć?'\n    {if} miejsce == 'doniczka'\n        {print} 'Tutaj są!'\n        klucze = 'znalezione'\n    {else}\n        {print} 'Nie, nie ma ich w ' miejsce\n{print} 'Teraz możesz wejść do domu!'\n```\n"
                start_code: '# tutaj umieść swój kod'
            13:
                story_text: "## Opowieść\nUżywając poleceń `{and}` oraz `{or}` możesz skrócić swoje opowieści. Na przykład, zobacz opowieść o smoku.\n\n### Ćwiczenie\nCzy potrafisz zrobić podobną grę przygodową?\n"
                example_code: "```\nmiecz = 'zgubiony'\ngra = 'w trakcie'\n{print} 'Nasz bohater idzie przez las'\n{print} 'Ścieżka rozdziela się na dwie strony'\n{for} i {in} {range} 0 {to} 2\n    {if} gra {is} 'w trakcie'\n        ścieżka = {ask} 'Którą ścieżkę powinien wybrać?'\n        {if} ścieżka {is} 'lewo' {and} miecz {is} 'znaleziony'\n            {print} 'Nasz bohater natrafia na smoka!'\n            {print} 'Na szczęście nasz bohater ma miecz, którym pokona bestię!'\n            game = 'skończona'\n        {if} ścieżka {is} 'lewo' {and} miecz {is} 'zgubiony'\n            {print} 'Nasz bohater znajduje smoka, ale nie ma żadnej broni!'\n            {print} 'Nasz bohater zostaje pokonany przez smoka...'\n            {print} 'Spróbuj jeszcze raz'\n            game = 'skończona'\n        {if} ścieżka {is} 'praow' {and} miecz {is} 'znaleziony'\n            {print} 'Znalazłeś już miecz. Nic tu już nie zostało.'\n            {print} 'She walks back'\n        {if} ścieżka {is} 'right' {and} miecz {is} 'zgubiony'\n            {print} 'Nasz bohater znalazł miecz.'\n            {print} 'To może się bardzo przydać'\n            miecz = 'znaleziony'\n```\n"
                start_code: '# tutaj umieść swój kod'
        name: Historyjka
        description: Stwórz krótką historyjkę
        default_save_name: Historyjka
    parrot:
        name: Papuga
        description: Stwórz swoja własną cyfrową papugę która powtórzy wszystko co powiesz!
        default_save_name: Papuga
        levels:
            1:
                story_text: "## Papuga\nStwórz swoją własną cyfrową papugę która powtórzy wszystko co powiesz!\n"
                example_code: "```\n{print} Jestem papuga Hedy\n{ask} Jak masz na imię?\n{echo}\n{echo}\n```\n"
                start_code: '{print} Jestem papuga Hedy

                    {ask} Jak masz na imię?

                    {echo}

                    {echo}'
                story_text_2: "### Ćwiczenie\nSkopiuj przykładowy kod na ekran wprowadzania, klikając żółty przycisk.\nSpraw, aby papuga zadała inne pytanie. Uzupełnij puste miejsca w przykładzie!\n**Dodatkowo** Możesz także pozwolić papudze zadawać wiele pytań. Wpisz więcej wierszy kodu pod własnym kodem.\n"
                example_code_2: "```\n{print} Jestem papuga Hedy\n{ask} _\n{echo}\n{echo}\n```"
            2:
                story_text: "## Papuga\nStwórz swoją własną cyfrową papugę, która będzie po tobie powtarzać cokolwiek powiesz!\n"
                example_code: "```\n{print} Jestem papuga Hedy\nimię {is} {ask} jak masz na imię?\n{print} imię\n{sleep}\n{print} ara\n{sleep}\n{print} imię\n```\n"
                start_code: '{print} Jestem papuga Hedy!'
                story_text_2: "### Ćwiczenie\nMożesz użyć zmiennych, aby papuga powiedziała więcej niż tylko twoje imię. Czy możesz uzupełnić kod?\n"
                example_code_2: "```\n{print} Jestem papuga Hedy\nimię {is} {ask} Jak masz na imię?\n{print} imię\n{sleep}\n{print} imię\nnazwisko {is} {ask} Jak masz na nazwisko?\n_\n{sleep}\n_\n```\n"
            3:
                story_text: "## Papuga\nNaucz swoją papugę nowego słowa z poleceniem `{add}`.\n### Ćwiczenie\nCzy potrafisz sprawić, żeby papuga powiedziała kilka słów?\n"
                example_code: "```\nsłowa {is} ara, Hedy\n{print} Naucz twoją papugę!\nnowe_słowo {is} {ask} Jakiego słowa chcesz ja nauczyć?\n{add} nowe_słowo {to_list} słowa\n{print} \U0001F9D2 Powiedz nowe_słowo , Hedy!\n{print} \U0001F99C słowa {at} {random}\n```\n"
                start_code: '# tutaj umieść swój kod'
            5:
                story_text: "## Papuga\nPamiętaj, żeby wynagrodzić swoją papugę jeżeli powie poprawne słowo.\nUzupełnij brakujące 4 polecenia żeby dokończyć kod.\n"
                example_code: "```\nsłowa {is} kra, Hedy\n{print} 'Wytresuj swoją papugę!'\nnowe_słowo {is} {ask} 'Jakie słowo chciałbyś ją nauczyć?'\n{add} nowe_słowo {to_list} słowa\npowiedziane_słowo {is} słowa {at} {random}\n{print} '\U0001F9D2 Powiedz ' nowe_słowo ', Hedy!'\n{print} '\U0001F99C ' powiedziane_słowo\n_ powiedziane_słowo {is} nowe_słowo _ '\U0001F9D2 Świetnie, Hedy! \U0001F36A'\n_ _ '\U0001F9D2 Nie, Hedy! Powiedz ' nowe_słowo\n```\n"
                start_code: '# tutaj umieść swój kod'
            4:
                story_text: "## Papuga\nW tym poziomie musimy użyć cudzysłowy z poleceniami `{ask}` and `{print}`.\nCzy potrafisz dokończyć kod poprzez dodanie cudzysłowów?\n"
                example_code: "```\nsłowa {is} kra, Hedy\n{print} _ Wytresuj swoją papugę! _\nnowe_słowo {is} {ask} _ Jakie słowo chciałbyś ją nauczyć? _\n{add} nowe_słowo {to_list} słowa\n{print} _ \U0001F9D2 Powiedz _ nowe_słowo _, Hedy!_\n{print} _ \U0001F99C _ słowa {at} {random}\n```\n"
                start_code: '# tutaj umieść swój kod'
    turtle:
        name: Żółw
        description: Stwórz swoje własne obrazki
        default_save_name: Żółw
        levels:
            1:
                story_text: "## Narysujmy coś\nMożesz wykorzystać Hedy także do rysowania.  Rysując linie i obracając żółwia, możesz narysować kwadrat lub gwiazdę!\n\nPisząć `{forward}` możesz narysować linie. Liczba zaraz po komendzie mówi o tym ile ma przejść żółw rysując linie..`{turn} {right}` obraca żółwia o ćwierć obrotu w prawo (zgodnie z ruchem wskazówek zegara), `{turn} {left}` obraca w lewo (przeciwnie do ruchu wskazówek zegara).\n\nJeśli chcesz przesunąć żółwia do tył, możesz wykorzystać komendę `{forward}` ale z ujemną liczba. Na przykład `{forward} -100`\n\n### Ćwiczenie\nTo jest początek schodków. Możesz sprawić aby miały 5 stopni?\n"
                example_code: "```\n{forward} 50\n{turn} {right}\n{forward} 50\n{turn} {left}\n{forward} 50\n```\n"
                start_code: "{forward} 50\n{turn} {left}"
            2:
                story_text: "## Żółw\nNa tym poziomie możesz używać zmiennych aby uczynić żółwia interaktywnym. Na przykład możesz zapytać użytkownika ile kroków ma zrobić twój żółw.\n"
                example_code: "```\nkroki {is} {ask} Ile kroków ma wykonać żółw?\n{forward} kroki\n```\n"
                start_code: "{print} Wyścig żółwi!\nkąt {is} 90\n{turn} kąt\n{forward} 25"
                story_text_2: "Również na poziomie 1 żółw mógł skręcać tylko w lewo lub w prawo. To trochę nudne!\nNa poziomie 2 może obracać się we wszystkich kierunkach.\n\nUżyj liczby 90, aby obrócić o żółwia o ćwierć obrotu. Wielkość obrotu liczby w stopniach. Pełny obrót to 360 stopni.\n\n### Ćwiczenie\nCzy możesz zrobić figurę za pomocą tego kodu? Może trójkąt lub okrąg?\n"
                example_code_2: "```\n{print} Rysowanie kształtu\nkąt {is} 90\n{turn} kąt\n{forward} 25\n{turn} kąt\n{forward} 25\n```\n"
            3:
                story_text: "## Poszukujący żółw\nNa tym poziomie możesz użyć `{at} {random}` podczas rysowania żółwiem. Losowy wybór sprawia, że żółw za każdym razem idzie inną ścieżką.\nUżyj `{at} {random}`, aby wybrać wartość z listy.\n### Ćwiczenie\nCzy możesz skopiować i wkleić linie 2 i 3, żeby stwożyć dłuższą losową ścieżkę?\n"
                example_code: "```\nkąty {is} 10, 50, 90, 150, 250\n{turn} kąty {at} {random}\n{forward} 25\n```\n"
                start_code: "kąty {is} 10, 50, 90, 150, 250\n{turn} kąty {at} {random}\n{forward} 25"
            4:
                story_text: "## Rysujmy\nNa poziomie 4 musisz użyć cudzysłowów z poleceniami `{print}` oraz `{ask}`. To samo się dotyczy rysowania!\n"
                example_code: "```\n{print} _ Rysujemy figury _\nkąt {is} 90\n{turn} kąt\n{forward} 25\n{turn} kąt\n{forward} 25\n```\n"
                start_code: "{print} 'Rysujemy figury'\nkąt {is} 90\n{turn} kąt\n{forward} 25"
                story_text_2: "## Kolory\nMożesz również zmienić kolor rysowanych linii przy użyciu polecenia `{color}`. Sprawdź przykładowy program.\nMożesz również użyc polecenia `{color} {white}` żeby zrobić \"niewidoczne\" linie. Możesz użyć tych \"niewidocznych\" linii, żeby przesunąć żółwia w inne miejsce na ekranie zanim zaczniesz rysować.\n"
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
            5:
                story_text: "## Rysujmy\nNa poziomie 5 możesz dokonywać wyboru przy użyciu polecenia `{if}`. Przykładem takiego wyboru byłby wybór pomiędzy różnymi typami figur do narysowania.\n"
                example_code: "```\n{print} 'Rysowanie Figur'\nfigura {is} {ask} 'Chcesz kwadrat czy trójkąt?'\n{if} figura {is} trójkąt kąt {is} 120\n{else} kąt {is} 90\n{turn} kąt\n{forward} 25\n{turn} kąt\n{forward} 25\n{turn} kąt\n{forward} 25\n{turn} kąt\n{forward} 25\n```\n"
                start_code: "{print} 'Rysujemy figury'\nfigura {is} {ask} 'Czy chciałbyś narysować kwadrat czy też trójkąt?'\n{if} figura {is} trójkąt kąt {is} 120 {else} kąt {is} 90\n{turn} kąt\n{forward} 25"
            8:
                story_text: "## Rysujemy\nDzięki naszej nowo nabytej umiejętności powtarzania wielu linii kodu możemy rysować figury w jeszcze prostszy sposób.\nWystarczy, że ustawimy kąt tylko raz i potem użyjemy go jako zmienną wewnątrz polecenia `{repeat}`.\n\n### Ćwiczenie 1\nPrzykładowy kod tworzy kwadrat. Zmień kod tak, aby tworzył inną figurę, np. trójkąt lub sześciokąt.\nWymaga to zmiany w dwóch liniach kodu.\nPodpowiedź: Całe koło to 360 stopni.\n\n### Ćwiczenie 2\nTeraz stwórz rysunek składający się z co najmniej dwóch wielokątów.\n"
                example_code: "```\nkąt = 90\n{repeat} 4 {times}\n    {turn} kąt\n    {forward} 50\n```\n"
                story_text_2: "**(dodatkowe zadanie)** Możemy teraz ulepszyć program, który rysuje różne figury. Donończ kod i możesz narysować dowolny wielokąt, który chcesz!\n"
                example_code_2: "```\nfigura = {ask} 'Ile kątów mam narysować?'\nkąt = 360 / figura\n{repeat} figura {times}\n    {turn} _\n    {forward} _\n```\n"
                start_code: "figura = {ask} 'Ile kątów mam narysować?'"
            6:
                story_text: "## Rysujemy\nNa tym poziomie możesz użyć matematyki żeby narysować różne figury.\nByć może pamiętasz ze szkoły, że obrócenie się dookoła jest tym samym co obrócenie się o 360 stopni. Jeżeli tego nie wiedziałeś to teraz już wiesz!\nZ tego też powodu już wiesz dlaczego gdy rysujemy kwadrat to obracamy się o 90 stopni. Jako, że kwadrat ma cztery boki pod kątem prostym to znaczy że kąt pomiędzy nimi to 90 stopni - 360 stopni podzielone przez 4 (boki) to 90 stopni.\nDzięki temu, że w Hedy możesz przeprowadzać obliczenia matematyczne, możesz tez rysować wszystkie figury jakie tylko chcesz!\n"
                example_code: "```\nkątów = {ask} 'Ile chcesz kątów?'\nkąt = 360 / kątów\n{forward} 50\n{turn} kąt\n{forward} 50\n{turn} kąt\n{forward} 50\n{turn} kąt\n{forward} 50\n{turn} kąt\n{forward} 50\n{turn} kąt\n{forward} 50 \n{turn} kąt\n```\n"
                start_code: "{print} 'Rysujemy figury'"
            9:
                story_text_2: "## Kontrola żółwia\nMożesz teraz kontrolować żółwia na wiele innych sposobów niż tylko do przodu lub do tyłu!\n### Ćwiczenie 2\nUzupełnij kod, aby móc kontrolować żółwia za pomocą klawiszy. \"w\" do przodu, \"s\" do tyłu, \"a\" w lewo i \"d\"  w prawo.\nWskazówka:  Do poruszania w lewo i prawo, potrzebujesz tylko trzech linii kodu!\n"
                example_code_2: "```\n{repeat} 40 {times}\n    {if} w {is} {pressed}\n        {forward} 10\n    {if} a {is} {pressed}\n        _ _\n```\n"
                start_code: '# umieść tutaj swój kod'
                story_text: "## Żółw\nSkoro potrafimy używać `{repeat}` wewnątrz `{repeat}`, możemy tworzyć bardziej złożone figury.\n\n### Ćwiczenie 1\nTen kod tworzy trzy czarne trójkąty, zmień to na pięć różowych kwadratów.\n\n**(dodatkowe zadanie)** Stwórz własną figurę składającą się z co najmniej dwóch różnych kształtów.\n"
                example_code: "```\n{color} {black}\n{repeat} 3 {times}\n    {repeat} 3 {times}\n        {forward} 10\n        {turn} 120\n    {color} {white}\n    {forward} 50\n    {color} {black}\n```\n"
    piggybank:
        name: Skarbonka
        description: Policz swoje kieszonkowe!
        default_save_name: Skarbonka
        levels:
            14:
                story_text: "## Skarbonka\nNa tym poziomie możesz pozwolić Hedy powiedzieć ci, czy zaoszczędziłeś wystarczająco dużo pieniędzy!\n"
                example_code: "```\nmoney = {ask} 'How much money have you saved?'\nwish = {ask} 'How much money do you need?'\nallowance = {ask} 'How much pocket money do you get each week?'\nto_save = wish - money\nweeks = to_save / allowance\n{if} wish > money\n    {print} 'You need to save up some more!'\n    {print} 'Youll need ' weeks ' more weeks.'\n{else}\n    {print} 'Great! You have enough'\n    {print} 'Lets go shopping!'\n```\n"
                start_code: '# umieść tutaj swój kod'
            12:
                story_text: "## Skarbonka\nW tej przygodzie nauczysz się, jak zrobić cyfrową skarbonkę.\nDokończ kod, aby obliczyć, ile masz pieniędzy i jak długo musisz oszczędzać, aby kupić to, co chcesz!\n"
                example_code: "```\n{print} 'Cyfrowa skarbonka'\nżyczenie = {ask} 'Co chciałbyś kupić?'\ncena = {ask} 'Ile to kosztuje?'\nzaoszczędzone = {ask} 'Ile pieniędzy już zaoszczędziłeś?'\nkieszonkowe = {ask} 'Ile kieszonkowego dostajesz na tydzień?'\ndo_zaoszczędzenia = cena - zaoszczędzone\ntygodnie = do_zaoszczędzenia / kieszonkowe \n{print} 'Możesz kupić ' _ ' za ' _ ' tygodni.'\n```\n"
                start_code: '# umieść tutaj swój kod'
    quizmaster:
        name: Mistrz Quizu
        description: Stwórz własny quiz!
        default_save_name: Mistrz Quizu
        levels:
            14:
                story_text: "## Stwórz własny quiz\nW tej przygodzie możesz stworzyć własny quiz! Wypełnij puste pola, dodaj więcej pytań i ciesz się własnym quizem!\nMożesz zrobić quiz o wszystkim, co lubisz: swoim hobby, ulubionym zwierzęciu, ulubionej książce lub w ogóle o czymkolwiek!\n"
                example_code: "```\n{print} 'Make your own quiz'\npoints_a = 0\npoints_b = 0\n{print} 'Question'\n{print} 'Answer option A'\n{print} 'Answer option B'\nanswer = {ask} 'Which answer?'\n{if} answer == 'A'\n    points_a = points_a + 1\n{if} answer == 'B'\n    points_b = points_b + 1\n{print} 'End of the quiz!'\n{print} 'Lets see the results!'\n{if} points_a > points_b\n    {print} 'You belong to the A club'\n{if} points_b > points_a\n    {print} 'You belong to the B club'\n```\n"
                start_code: '# umieść tutaj swój kod'
    language:
        name: Język
        description: Ćwicz słowa w języku obcym
        default_save_name: language
        levels:
            5:
                story_text: "## Naucz się nowego języka\nStwórz własny program do ćwiczenia słownictwa w nowym języku.\n\n### Ćwiczenie\nCzy możesz zrobić ten program dla innego języka? A może możesz dodać więcej słów do francuskiego?\n"
                example_code: "```\n{print} 'Learn French!'\ncat {is} {ask} '\U0001F431'\n{if} cat {is} chat {print} 'Terrific!'\n{else} {print} 'No, cat is chat'\nfrog {is} {ask} '\U0001F438'\n{if} frog {is} grenouille {print} 'Super!'\n{else} {print} 'No, frog is grenouille'\n```\n"
                start_code: '# umieść tutaj swój kod'
            16:
                story_text: "## Naucz się nowego języka\nStwórz własny program do ćwiczenia słownictwa w nowym języku.\n"
                example_code: "```\nfrench_words = ['bonjour', 'ordinateur', 'pomme de terre']\ntranslation = ['hello', 'computer', 'potato']\nscore = 0\n{for} i {in} {range} 1 {to} 3\n    answer = {ask} 'What does ' french_words[i] ' mean?'\n    correct = translation[i]\n    {if} answer == correct\n        {print} 'Correct!'\n        score = score + 1\n    {else}\n        {print} 'Wrong, ' french_words[i] ' means ' translation[i]\n{print} 'You gave ' score ' correct answers.'\n```\n"
                start_code: '# umieść tutaj swój kod'
    secret:
        name: Super Szpieg
        description: Stwórz swój kod szpiegowski
        default_save_name: language
        levels:
            12:
                story_text: "## Utwórz tajny kod jak superszpieg\nW tej przygodzie możesz stworzyć swój własny kod superszpiegowski. Zaszyfruj wiadomość, którą może rozszyfrować tylko właściwy agent.\nJeśli wróg spróbuje złamać kod, otrzyma fałszywe informacje, aby zmarnować swój czas.\n\n### Ćwiczenie\nUtwórz własny tajny kod dla swojego superszpiega. Czy możesz sprawić, by składał się z jeszcze większej liczby zmiennych?\n"
                example_code: "```\nimię {is} {ask} 'Jak masz na imię?'\nif imię {is} 'Agent007'\n    a {is} 'Jedź na lotnisko '\n{else}\n    a {is} 'Idź na dworzec kolejowy'\nhasło {is} {ask} 'Jakie jest hasło?'\n{if} hasło {is} 'TOPSECRET'\n    b {is} 'jutro o 02.00'\n{else}\n    b {is} 'dziś o 10.00'\n{print} a + b\n```\n"
                start_code: '## umieść tutaj swój kod'
            13:
                story_text: "## Superszpieg\nCzy potrafisz wpisać właściwe polecenie w pustym miejscu? Mózg: Superszpieg musi poprawnie odpowiedzieć na OBA pytania, zanim zdobędzie poufne informacje!\n"
                example_code: "```\nimię {is} {ask} 'Jak masz na imię?'\nhasło {is} {ask} 'Jakie jest twoje hasło?'\n{if} imię {is} 'Agent007' _ hasło {is} 'TOPSECRET'\n    {print} 'Jedź na lotnisko o 02.00'\n{else}\n    {print} 'Idź na dworzec o 10.00'\n ```\n"
                start_code: '## umieść tutaj swój kod'
#    next:
#        name: Co dalej?
#        description: Co dalej?
#        default_save_name: Dalej
#        levels:
#            1:
#                story_text: "## Co dalej?\nGratulacje!!! Dotarłeś do końca poziomu 1. Mam nadzieję, że udało Ci się już stworzyć kilka niesamowitych programów, ale Hedy ma jeszcze wiele do odkrycia. \n\nNa pierwszym poziomie mogłeś zauważyć, że komenda `{echo}` może zapisać tylko jedną informację na raz. \nNa przykład w przygodzie z restauracją, mógłbyś wyświetlić za pomocą polecenia {echo} co chciał zjeść klient, lub co chciał wypić, ale nie oba w jednym zdaniu.\n"
#                example_code: "```\n{print} Witamy u Hedy\n{ask} Co chciałbyś zjeść?\n{echo} Więc chcesz \n{ask} Co chciałbyś wypić?\n{echo} Więc chcesz \n```\n"
#                story_text_2: "Jeśli gracz wpisze hamburger i cola, to nie możesz powiedzieć \"więc chciałbyś hamburgera i colę\",  a musisz wykorzystać dwie osobne linijki kodu. \nRównież komenda `{echo}` powoduje tylko pojawienie się słowa na końcu zdania. Nie możesz więc powiedzieć \"Twój hamburger zaraz będzie!\".\n\nTo się zmieni na poziomie 2. Na poziomie 2 nauczysz się pracować ze zmiennymi, które pozwalają na zapisanie wielu informacji i wypisanie ich w dowolnym miejscu.\nPrzejdźmy więc do następnego poziomu!\n"
#                start_code: "{print} Chodźmy!"
#            2:
#                story_text: "## Co dalej?\nNa tym poziomie nauczyłeś się, czym jest zmienna i jak możesz jej użyć, aby uczynić swoje przygody bardziej interaktywnymi.\nAle... to nie jedyna rzecz, którą możesz zrobić ze zmiennymi! Możesz także używać zmiennych do tworzenia list.\nMożesz nawet pozwolić Hedy wybrać losowe słowo z listy, co pozwoli ci tworzyć prawdziwe gry!\nRzuć okiem na następny poziom!\n"
#                start_code: "{print} Przejdźmy na następny poziom!"
#            3:
#                story_text: "## What's next?\nIn this level you've been practising with variables, but maybe you've come across this mistake.\n\nTry to run this code:\n```\nname {is} Sophie\n{print} My name is name\n```\nOf course you wanted to print `My name is Sophie` but Hedy prints `My Sophie is Sophie`.\nIn the next level this problem is fixed by using quotation marks.\n"
#                start_code: "{print} Przejdźmy do następnego poziomu!"
#            4:
#                story_text: "## What's next?\nIn the previous levels you've already learned to use `{at} {random}` which made your games different every time you ran the code.\nBut it's not really interactive, the player doesn't have any influence on what happens in the game.\n\nIn the next level you'll learn the `{if}` command, that allows you to give different responses in your program. This way you can program a secret password for your computer for example.\nSo let's take a peak!\n\n```\npassword {is} {ask} 'What is the correct password?'\n```\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            5:
#                story_text: "## What's next?\nNow you've reached the end of this level, so you have learned `{ask}` and `{if}`. For example you can {ask} guests what they would like to eat.\nWhat you can't yet do though, is calculate the price for everyone's dinner.\n\nThe next level makes it possible to use addition, subtraction and multiplication in your programs. This way you can calculate the prices in your restaurant, but you could also add a secret code to give your friends and family a discount.\nAnother option in the next level is programming your own maths game, for your little brother or sister to practice their multiplications.\nGo see for yourself in the next level!\n"
#                example_code: "## Free drinks!\n```\n{print} 'Welcome at McHedy'\norder {is} {ask} 'What would you like to eat?'\n{print} 'You would like ' order\n{if} order {is} hamburger price {is} 5\n{if} order {is} fries price {is} 2\ndrinks {is} {ask} 'What would you like to drink?'\n{print} 'You would like ' drinks\n{print} 'That will be ' price ' dollars for your ' order ' please'\n{print} 'The drinks are free in this level because Hedy cant calculate the price yet...'\n```\n"
#                start_code: "{print} 'On to the next level!'"
#            8:
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#                story_text: "## What's next?\nGreat job! You've reached the end of another level! In this level you've learned to use multiple lines of code in an {if} or {repeat} command. But you can't yet combine the two...\nGood news! In the next level you will be allowed to put an {if} inside an {if}, or inside a {repeat} command.\n"
#                example_code: "```\nanswer = {ask} 'Would you like to go to the next level?'\n{if} answer {is} yes\n    {print} 'Great! You can use the {repeat} commando in the {if} command!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n{else}\n    {print} 'Okay, you can stay here for a little longer!'\n```\n"
#            6:
#                story_text: "## What's next?\n Great job! You've reached the end of this level, which means you have practiced with `{if}` and `{else}`. You have probably noticed that your codes are getting longer and longer.\n For example {if} you want to program 'Happy Birthday'.\n\nThat's a lot of code for mainly the same words over and over again. Luckily in the next level has a solution with the `{repeat}` command, that allows you to repeat a line of code multiple times.\n"
#                example_code: " ```\n {print} 'happy birthday to you'\n {print} 'happy birthday to you'\n {print} 'happy birthday dear Hedy'\n {print} 'happy birthday to you'\n ```\n"
#                start_code: "{print} 'On to the next level!'"
#            7:
#                story_text: "## What's next?\nNow you've learned how to repeat one single line of code. This comes in handy, but it's not always enough. Sometimes you want to repeat multiple lines at once.\nthe next level allows you to group a couple of lines of code, and repeat that little group of lines all at once!\n"
#                example_code: "```\n{repeat} 5 {times} {print} 'In the next level you can repeat multiple lines of code at once!'\n```\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            9:
#                story_text: "## What's next?\nYou're doing great! In this level we still face a small problem. You have learned to repeat lines, but what if you'd want to slightly change the line.\nFor example if you want to sing the song '{if} you're happy and you know it'. It would look like this:\n\nIf you'd also want the next verse 'stomp your feet', and the next one, and the next one, you'd have to change the code completely.\nIn the next level you'll learn the `{for}` command, which allows you to make a list of actions and repeat the code with another action each time!\nPlease take a look!\n"
#                example_code: "```\n{repeat} 2 {times}\n    {print} '{if} youre happy and you know it clap your hands'\n{print} '{if} youre happy and you know it and you really want to show it'\n{print} '{if} youre happy and you know it clap your hands'\n```\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            10:
#                story_text: "## What's next?\nYou have reached the end of this level, you're doing great! You are about to go to the next level. In the higher levels, Hedy is focussing more and more on teaching you the programming language Python.\nIn Python there is no `{repeat}` command, but there is a command that works like {repeat}. Are you curious to find out how to say `{repeat}` in Python language? Quickly go on to find out!\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            11:
#                story_text: "## What's next?\nMaybe you have tried using decimal numbers in your restaurant adventure. If you did, you probably noticed that Hedy didn't understand them yet and always rounded off.\nFrom the next level on you can use decimal numbers.\n\nAnother cool feauture in the next level is that you can use mulitiple words in a variable.\nFor intance, you could already do this...\n"
#                example_code: "```\nname = {ask} 'Who is your favorite cartoon character?'\n{print} 'I love watching ' name\n```\nBut you couldn't use multiple words in a variable like the example below. This program does not work yet in this level!\n```\nshow = SpongeBob SquarePants\n{print} show 'is my favorite show!'\n```\nGo to the next level to make this code work!\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            12:
#                story_text: "## What's next?\nIn the previous levels you learned how to put two `{if}`commands inside each other. This works fine, but it does give you very long and unhandy codes like this one:\n\nIn this system you have to give both the correct username and the correct password.\nIn the next level you will learn the `{and}` command that will make this code a ot shorter and more understandable!\nCheck it out!\n"
#                example_code: "```\nusername {is} {ask} 'What is your username?'\npassword {is} {ask} 'What is your password?'\n{if} username {is} 'Hedy'\n    {if} password {is} 'secret'\n        {print} 'Welcome Hedy!'\n    {else}\n        {print} 'Access denied'\n{else}\n    {print} 'Access denied!'\n```\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            13:
#                story_text: "## What's next?\nWith the program below you can calulate {if} you've passed a subject at school (so, a grade of six or higher).\nYou can see this code is extremely inefficient, du to the very long code in line 5.\nAll the different grades from 1 to 5 had to be programmed seperately. Lucky for you, in the next level you'll learn how to do this without this extremely long code!\n"
#                example_code: "```\nfirst_grade = {ask} 'What score did you get on your first test?'\nsecond_grade = {ask} 'What score did you get on your second test?'\nadded {is} first_grade + second_grade\nmean_grade {is} added / 2\n{if} mean_grade = 1 {or} mean_grade = 2 {or} mean_grade = 3 {or} mean_grade = 4 {or} mean_grade = 5\n    {print} 'Oh no! You have failed the subject...'\n{else}\n    {print} 'Great! You have passed the subject!'\n```\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            14:
#                story_text: "## What's next?\nIn this game below a code has been made to make sure the player can play on as long as he/she wants...\nBut the code is ineffective and way too long. Also, what {if} the player wants to play 101 games instead of 100?\nYou can't play to infinity?\nIn the next level you will learn a command that makes all of this a lot easier!\n"
#                example_code: "```\ngame {is} 'on'\n{for} i {in} {range} 1 {to} 100\n    {if} game {is} 'on'\n        answer = {ask} 'Do you want to continue?'\n        {if} answer {is} 'no'\n            game {is} 'over'\n        {if} answer {is} 'yes'\n            {print} 'Ok we will continue'\n```\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            15:
#                story_text: "## What's next?\nIn the next level we will grow a bit more towards real Python code. thon code. You will also learn how to match two lists together.\nThis way you can program a code in which the correct animal is matched to the right sound.\nBecause the two codes below... Are obviously nonsense!\n"
#                example_code: "```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {print} 'A ' animal ' says ' sounds {at} {random}\n```\nYou could also try to make it work this way, but....\n```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {for} sound {in} sounds\n        {print} 'A ' animal ' says ' sound\n```\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            16:
#                story_text: "## What's next?\nIn the next level it's time for a new command. You might have noticed in the previous levels that `{if}` and `{else}` sometimes aren't enough.\nFor example in this code:\n"
#                example_code: "```\n{print} 'What is for dinner tonight?'\noptions = ['pizza', 'broccoli', 'green beans']\nchosen = options {at} {random}\n{if} chosen = 'pizza'\n    {print} 'Yummy! Pizza!'\n{else}\n    {print} 'Yikes...'\n```\n"
#                story_text_2: In this code it would be great to have 2x an `{else}` so you could have one option for the broccoli and one for the green beans. The next level comes with the new command `{elif}` that makes this possible! So check out the next level now!
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            17:
#                story_text: "## What's next?\nIn the next level you will learn a real Python way to use `{print}`.\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            18:
#                story_text: "## What's next?\nCongratulations! You have reached the last level of Hedy! But no worries, we are working very hard to create more levels and new adventures. So please come back later to check out the newest levels!\n"
#                start_code: "{print} ('Gratulacje!!!')"
    tic:
        name: Kółko i Krzyżyk
        description: Zagrajmy w kółko i krzyżyk!
        levels:
            13:
                start_code: '## umieść tutaj swój kod'
                story_text: "## Kółko i krzyżyk\nW tej przygodzie możesz zaprogramować grę w kółko i krzyżyk. Możesz grać w dwie osoby. Na zmianę wybierasz numer miejsca (1 - 9), na którym chcesz umieścić swój znak (x lub o).\nPierwszy gracz, który ułoży 3 w rzędzie (poziomo, pionowo lub ukośnie) wygrywa!\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game {is} 'on'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice {is} 1\n                spot_1 = sign\n            {if} choice {is} 2\n                spot_2 = sign\n            {if} choice {is} 3\n                spot_3 = sign\n            {if} choice {is} 4\n                spot_4 = sign\n            {if} choice {is} 5\n                spot_5 = sign\n            {if} choice {is} 6\n                spot_6 = sign\n            {if} choice {is} 7\n                spot_7 = sign\n            {if} choice {is} 8\n                spot_8 = sign\n            {if} choice {is} 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner {is} 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign {is} 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
            14:
                start_code: '## umieść tutaj swój kod'
                story_text: "## Kółko i krzyżyk\nNa poprzednich poziomach stworzyłeś grę w kółko i krzyżyk. Teraz nauczyłeś się używać znaku =, znaku == i znaku !=.\nMożesz wykorzystać tę wiedzę w swojej nowej grze w kółko i krzyżyk, na przykład:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game != 'over'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice == 1\n                spot_1 = sign\n            {if} choice == 2\n                spot_2 = sign\n            {if} choice == 3\n                spot_3 = sign\n            {if} choice == 4\n                spot_4 = sign\n            {if} choice == 5\n                spot_5 = sign\n            {if} choice == 6\n                spot_6 = sign\n            {if} choice == 7\n                spot_7 = sign\n            {if} choice == 8\n                spot_8 = sign\n            {if} choice == 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner == 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign == 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
            15:
                start_code: '## umieść tutaj swój kod'
                story_text: "## Kółko i krzyżyk\nNa tym poziomie możesz poprawić swoją grę w kółko i krzyżyk za pomocą pętli {while}. Za pomocą tej pętli możesz połączyć `{if} game != 'over'` i `{for} i {in} {range} 1 {to} 9` w jedną prostą linię.\nZobacz:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over'\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots\n        {remove} choice {from} open_spots\n        {if} choice == 1\n            spot_1 = sign\n        {if} choice == 2\n            spot_2 = sign\n        {if} choice == 3\n            spot_3 = sign\n        {if} choice == 4\n            spot_4 = sign\n        {if} choice == 5\n            spot_5 = sign\n        {if} choice == 6\n            spot_6 = sign\n        {if} choice == 7\n            spot_7 = sign\n        {if} choice == 8\n            spot_8 = sign\n        {if} choice == 9\n            spot_9 = sign\n    {else}\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    winner = {ask} 'Did you win?'\n    {if} winner == 'yes'\n        {print} 'Good job, player ' sign '!'\n        game = 'over'\n    {else}\n        {if} sign == 'x'\n            sign = 'o'\n        {else}\n            sign = 'x'\n```\n"
            17:
                start_code: '## umieść tutaj swój kod'
                story_text: "## Kółko i krzyżyk\nNa poprzednich poziomach gra w kółko i krzyżyk miała irytującą cechę. Po każdym ruchu musiałeś się wpisać, czy wygrałeś, czy nie.\nTo sprawiło, że gra była grywalna, ale także dość powolna. Na tym poziomie poznaliśmy komendę `{elif}`, która może rozwiązać ten problem.\nUżywanie {elif}, aby Hedy mogła sprawdzić, czy gracz wygrał, czy nie, jest zabawne, ale wymaga również sporej liczby dodatkowych linii.\n\nW przykładowym kodzie widać, że dodaliśmy wymagania do wygranej (3 miejsca w rzędzie poziomo, pionowo lub po przekątnej).\nMożesz je znaleźć w liniach od 46 do 69. Możesz zobaczyć, że za każdym razem, gdy warunek jest spełniony (a więc jeśli gracz wygrał), zmienna gra jest ustawiona na „ponad”.\nOznacza to, że pętla {while} zostanie zatrzymana i gra się zakończy.\n"
                example_code: "```\nsign = 'x'\nopen_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over':\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots:\n        {remove} choice {from} open_spots\n        {if} choice == 1:\n            spot_1 = sign\n        {if} choice == 2:\n            spot_2 = sign\n        {if} choice == 3:\n            spot_3 = sign\n        {if} choice == 4:\n            spot_4 = sign\n        {if} choice == 5:\n            spot_5 = sign\n        {if} choice == 6:\n            spot_6 = sign\n        {if} choice == 7:\n            spot_7 = sign\n        {if} choice == 8:\n            spot_8 = sign\n        {if} choice == 9:\n            spot_9 = sign\n    {else}:\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {else}:\n        {if} sign == 'x':\n            sign = 'o'\n        {else}:\n            sign = 'x'\n```\n"
        default_save_name: Tic
    blackjack:
        name: Blackjack
        description: Spróbuj zdobyć jak największą ilość punktów ale mniejszą lub równą 21
        levels:
            17:
                start_code: '# umieść tutaj swój kod'
                story_text: "## Stwórz grę w blackjacka\nBlackjack to prosta gra karciana, w której musisz zdobyć jak najwięcej 21 punktów. Dostajesz dwie karty. Każda karta ma swoją wartość liczbową, a figury (walet, królowa i król) są warte 10 punktów.\nAs jest wart 1 lub 11 punktów (do wyboru). Rozdający, twój przeciwnik, również otrzymuje dwie karty.\nJeśli chcesz, możesz zdobyć kolejną kartę, a jej punkty zostaną dodane do Twojej sumy. Rozdający może również wybrać inną kartę.\nUważaj, aby nie zdobyć więcej niż 21 punktów, ponieważ jeśli to zrobisz, przegrywasz!\nGracz, który zbliży się do liczby 21, nie przekraczając jej, wygrywa!\n\nBaw się dobrze!\n"
                example_code: "```\n{print} 'BLACKJACK'\nkarty = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Walet', 'Królowa','Król', 'As']\npunkty = 0\npunkty_krupiera = 0\nkarta_1 = karty[{random}]\nkarta_2 = karty[{random}]\nkarta_3 = karty [{random}]\nkarta_krupiera_1 = karty[{random}]\nkarta_krupiera_2 = karty[{random}]\nkarta_krupiera_3 = karty[{random}]\n# Punkty za kartę 1\n{if} karta_1 == 'Walet' {or} karta_1 == 'Królowa' {or} karta_1 == 'Król':\n    punkty = punkty + 10\n{elif} karta_1 == 'As':\n    punkty = punkty + 11\n{else}:\n    punkty = punkty + karta_1\n# Punkty za kartę 2\n{if} karta_2 == 'Walet' {or} karta_2 == 'Królowa' {or} karta_2 == 'Król':\n    punkty = punkty + 10\n{elif} karta_2 == 'As':\n    punkty = punkty + 11\n{else}:\n    punkty = punkty + karta_2\n# Punkty za kartę krupiera 1\n{if} karta_krupiera_1 == 'Walet' {or} karta_krupiera_1 == 'Królowa' {or} karta_krupiera_1 == 'Król':\n    punkty_krupiera = punkty_krupiera + 10\n{elif} karta_krupiera_1 == 'As':\n    punkty_krupiera = punkty_krupiera + 11\n{else}:\n    punkty_krupiera = punkty_krupiera + karta_krupiera_1\n# Punkty za kartę krupiera 2\n{if} karta_krupiera_2 == 'Walet' {or} karta_krupiera_2 == 'Królowa' {or} karta_krupiera_2 == 'Król':\n    punkty_krupiera = punkty_krupiera + 10\n{elif} karta_krupiera_2 == 'As':\n    punkty_krupiera = punkty_krupiera + 11\n{else}:\n    punkty_krupiera = punkty_krupiera + karta_krupiera_2\n# Dwa Asy\n{if} karta_1 == 'As' {and} karta_2 == 'As':\n    punkty = 12\n{if} karta_krupiera_1 == 'As' {and} karta_krupiera_2 == 'As':\n    punkty_krupiera = 12\n# Tablica wyników\n{print} 'Trzymasz karty ' karta_1 ' i ' karta_2 ' (' punkty ' punktów)'\n{print} 'Krupier trzyma ' karta_krupiera_1 ' i ' karta_krupiera_2 ' (' punkty_krupiera ' punktów)'\n# Dodatkowa karta dla gracza\nhit = {ask} 'Czy chcesz dobrać kartę?'\n{if} hit == 'tak':\n    {if} karta_3 == 'Walet' {or} karta_3 == 'Królowa' {or} karta_3 == 'Król':\n        punkty = punkty + 10\n    {elif} karta_3 == 'As':\n        {if} punkty > 11:\n            punkty = punkty + 11\n        {else}:\n            punkty = punkty + 1\n    {else}:\n        punkty = punkty + karta_3\n    {print} 'Dostajesz dodatkowo ' karta_3 ' (' punkty ' punktów)'\n{else}:\n    {print} 'Bez dodatkowych kart'\n# Zwycięzca\n{if} punkty > 21 {or} punkty_krupiera > punkty {or} punkty_krupiera == 21:\n    {print} 'Przegrywasz'\n{elif} punkty_krupiera < 17:\n    {print} 'Krupier dobiera dodatkową kartę. Jest to... ' karta_krupiera_3\n    {if} karta_krupiera_3 == 'Walet' {or} karta_krupiera_3 == 'Królowa' {or} karta_krupiera_3 == 'Król':\n        punkty_krupiera = punkty_krupiera + 10\n    {elif} karta_krupiera_3 == 'As':\n        {if} punkty_krupiera < 11:\n            punkty_krupiera = punkty_krupiera + 11\n        {else}:\n            punkty_krupiera = punkty_krupiera + 1\n    {else}:\n        punkty_krupiera = punkty_krupiera + karta_krupiera_3\n    {print} 'Krupier ma ' punkty_krupiera ' punktów teraz'\n    {if} punkty_krupiera < 21 {and} punkty_krupiera > punkty:\n        {print} 'Przegrywasz'\n    {else}:\n        {print} 'Wygrywasz'\n{elif} punkty > punkty_krupiera {and} punkty < 21:\n    {print} 'Wygrywasz!'\n```\n"
        default_save_name: Blackjack
    pressit:
        name: Naciśnięcia klawiszy
        description: Spróbuj przypisać przycisk klawiatury do polecenia!
        default_save_name: Naciśnij
        levels:
            5:
                example_code: "```\n{if} x {is} {pressed} {forward} 50\n```\n"
                story_text: "## Naciśnij!\nWe wprowadzeniu wspomnieliśmy również o nowym poleceniu `{pressed}`. \nWykorzystanie `{pressed}` pozwala na stworzenie interaktywnego kodu, który możesz kontrolować w czasie rzeczywistym. \nW kolejnych poziomach dowiesz się jak korzystać z `{pressed}` i do czego wykorzystać `{pressed}`.\nOprócz wyświetlania tekstu istnieje wiele innych możliwości wykorzystania `{pressed}`.\nNa przykład możesz również powiązać polecenia żółwia z klawiszami! Spróbuj!\n"
                story_text_2: "## Naciśnięcie klawiszu innego niż przypisany\nMożesz również użyć polecenia `{else}` w poleceniu `{pressed}`. Polecenie `{else}` zostanie wykonane gdy naciśniesz klawisz inny niż ten, który przypisałeś.\n"
                example_code_2: "```\n{if} y {is} {pressed} {print} 'Amazing! You pressed the y key!'\n{else} {print} 'Oh no! You did not press the y key.'\n```\n"
                start_code: '# umieść tutaj swój kod'
            6:
                example_code: "```\nfirst = {ask} 'what is your first number?'\nsecond = {ask} 'what is your second number?'\n{print} 'press a to add, s to substract, d to divide, m to multiply'\n{if} a {is} {pressed} result = first + second\n{if} s {is} {pressed} result = first - second\n{if} d {is} {pressed} result = first / second\n{if} m {is} {pressed} result = first * second\n{print}'The answer is ' result\n```\n"
                start_code: '# umieść tutaj swój kod'
                story_text: "Czy wiesz, że możesz również stworzyć kalkulator używając polecenia `{pressed}`?\nWprowadź do kalkulatora dwa liczby i naciśnij klawisz m, aby pomnożyć.\nTeraz nie musisz zabierać własnego kalkulatora!\nSpróbuj innych klawiszy i zobacz, co się stanie! Czy otrzymałeś inny wynik?\n"
            7:
                example_code: "```\n{if} x {is} {pressed} {forward} 15 {else} {turn} 90\n```\n"
                story_text: "## Kontrola żółwia\nSkoro już nauczyłeś się polecenia `{repeat}` możesz naciskać klawisze wiele razy! Dzięki temu możesz sprawić, że żółw będzie chodził do przodu i obracał się.\n\n### Ćwiczenie\nPrzykładowy kod sprawdza tylko raz, czy klawisz jest naciśnięty. Zmień kod tak, aby można było naciskać klawisze wiele razy i użyj kodu, aby narysować coś ładnego.\n"
                start_code: '# umieść tutaj swój kod'
            9:
                start_code: '# umieść tutaj swój kod'
                story_text: "## Gra w bezwzrokowe pisanie.\nTeraz gdy wiesz, jak łączyć instrukcje, możesz utworzyć narzędzie pisania bezwzrokowego za pomocą `{pressed}`.\n\n### Ćwiczenie\nDokończ kod. Za każdym razem program ma wybrać losową literę, którą należy nacisnąć. Otrzymujesz punkt za prawidłowy klawisz i odjęcie dwóch punktów za niewłaściwy klawisz.\n"
                example_code: "```\npunkty = 1\nlitery = a, b, c, d, e\n{repeat} 10 {times}\n    litera = _ _ _\n    {print} 'Naciśnij literę ' litera \n    {if} litera {is} {pressed}\n    _\n    _\n    _\n```\n"
            10:
                story_text: "W tym poziomie możesz narysować figurę przy użyciu żółwia. Żółw nie może się doczekać żeby sie ruszyć.\nDaj żółwiowi sygnał startowy poprzez naciśnięcie przycisku x lub y na klawiaturze.\nCzy możesz zrobić, żeby żółw narysował inną figurę?\n"
                start_code: '# umieść tutaj swój kod'
                example_code: "```\ndistances = 100, 80, 60, 40, 20, 10\n{if} x {is} {pressed}\n    {for} distance {in} distances\n        {forward} distance\n        {turn} -90\n{if} y {is} {pressed}\n    {for} distance {in} distances\n        {forward} distance\n        {turn} 90\n```\n"
            11:
                start_code: '# umieść tutaj swój kod'
                story_text: "Skoro już się nauczyłeś polecenia `{for} ... {in} {range} ... {to} ...`, możesz teraz go wykorzystać z poleceniem `{pressed}`.\nNa przykład, spróbuj ruszyć żółwiem. Żółw rośnie każdym razem gdy naciśniesz przypisany klawisz.\nW ten sposób żółw może ruszać się coraz dalej z każdym krokiem.\n"
                example_code: "```\nlewo = -90\nprawo = 90\nzwrot = 180\n{for} licznik {in} {range} 1 {to} 15\n    krok = licznik * 5\n    {if} w {is} {pressed}\n        {forward} krok\n    {if} s {is} {pressed}\n        {turn} zwrot\n    {if} a {is} {pressed}\n        {turn} lewo\n    {if} d {is} {pressed}\n        {turn} prawo\n```\n"
            12:
                start_code: '# umieść tutaj swój kod'
                story_text: "Czy znasz się na grach komputerowych? W jednej z nich gdy wejdziesz w trawę zostajesz napadnięty przez \nbardzo podejrzaną mysz. Co wtedy robisz?\nNa tym poziomie zrobimy małe menu gry z różnymi opcjami.\nPrzypisanie tekstu do zmiennej może być bardzo przydatne gdy chce się ten tekst użyć wielokrotnie.\nOpcja, wybieram Ciebie!\n"
                example_code: "```\nchoose = 'You chose option: '\n{print} 'A wild mouse appeared!'\n{print} 'Choose an option and press first letter: (n)et, (c)at, (b)ag, (r)un'\n{if} n {is} {pressed}\n    {print} choose + 'net'\n    {print} 'You attempt to catch the mouse with a net..'\n    {sleep}\n    {print} 'Congratulations you did it!'\n{if} c {is} {pressed}\n    {print} choose + 'cat'\n    {print} 'You send out your cat'\n    {sleep}\n    {print} 'The mouse got scared and ran away!'\n{if} b {is} {pressed}\n    {print} choose + 'bag'\n    {print} 'The mouse jumped into you bag!'\n{if} r {is} {pressed}\n    {print} choose + 'run'\n    {print} 'You got away safely!'\n```\n"
            13:
                start_code: '# umieść tutaj swój kod'
                story_text: "Skoro potrafisz już użyć poleceń `{and}` oraz `{or}` możesz też użyć je razem z poleceniem `{pressed}`.\nWyobraź sobie, że żółw potrafi zrobić bardzo długi skok w przód\npo przyciśnięciu przycisku `p`.\nZanim żółw może wykonać taki bardzo długi skok, żółw musi najpierw skręcić w lewo i w prawo.\n"
                example_code: "```\nstepsize = 10\nleft = -90\nright = 90\naround = 180\nlooked_left = 0\nlooked_right = 0\n{repeat} 40 {times}\n    {if} w {is} {pressed}\n        {forward} stepsize\n    {if} s {is} {pressed}\n        {turn} around\n    {if} a {is} {pressed}\n        {turn} left\n        looked_left = 1\n    {if} d {is} {pressed}\n        {turn} right\n        looked_right = 1\n    {if} p {is} {pressed}\n        {if} looked_left {is} 1 {and} looked_right {is} 1\n            {forward} 40\n            looked_left = 0\n            looked_right = 0\n```\n"
            15:
                start_code: '# umieść tutaj swój kod'
                story_text: "Skoro nauczyłeś się o pętlach `{while}`, możesz ich zacząć używać ich na żółwiu!\nŻółw może teraz wykonać tylko 15 kroków lub obrócić się 15 razy zanim się zmęczy!\nSpróbuj dotrzeć jak najdalej zanim żółw się zmęczy! Możesz użyć swojego super skoku po 2 obrotach \nlub po 5 krokach.\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 2\ntired_in = 15\n{while} tired_in > 0\n    {if} w {is} {pressed}\n        {forward} stepsize\n        jumptime = jumptime - 1\n    {if} s {is} {pressed}\n        {turn} around\n    {if} a {is} {pressed}\n        {turn} left\n        spins = spins - 1\n    {if} d {is} {pressed}\n        {turn} right\n        spins = spins - 1\n    {if} p {is} {pressed}\n        {if} jumptime <= 0 {or} spins <= 0\n            {forward} stepsize * 4\n            jumptime = 5\n            spins = 2\n    tired_in = tired_in - 1\n```\n"
            16:
                start_code: '# umieść tutaj swój kod'
                story_text: "Spróbujmy się trochę poruszyć z grą w Twister!\nGdy wszyscy będą gotowi, naciśnij klawisz x, aby przejść do następnego ruchu!\n"
                example_code: "```\nlimbs = ['Right Hand', 'Left Hand', 'Right Foot', 'Left Foot']\ncolours = ['Blue', 'Green', 'Red', 'Yellow']\n{repeat} 20 {times}\n    l = limbs[{random}]\n    c = colours[{random}]\n    {if} x {is} {pressed}\n        {print} l + ' on ' + c + '!'\n```\n"
            17:
                start_code: '# umieść tutaj swój kod'
                story_text: "Teraz gdy nauczyłeś się korzystać z `{elif}`, możemy używać go również z `{pressed}`! Pamiętaj, `{elif} ... {is} {pressed}` nie jest możliwe! Dlatego zamierzamy zagnieździć niektóre instrukcje `{elif}` w opcjach `{pressed}`. Musieliśmy również dodać `:` do kodu, aby wszystko działało! Wyobraź sobie, że żółw jest w stanie wykonać super skok do przodu. Naciskając `p` żółw może wykonać super skok! Jednak żółw może wykonać ten skok tylko co 5 kroków lub co 4 tury.\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 4\n{repeat} 40 {times}\n    {if} w {is} {pressed}:\n        {forward} stepsize\n        jumptime = jumptime - 1\n    {if} s {is} {pressed}:\n        {turn} around\n    {if} a {is} {pressed}:\n        {turn} left\n        spins = spins - 1\n    {if} d {is} {pressed}:\n        {turn} right\n        spins = spins - 1\n    {if} p {is} {pressed}:\n        {if} jumptime <= 0 {or} spins <= 0:\n            {forward} stepsize * 3\n            jumptime = 5\n            spins = 4\n        {elif} jumptime > 0:\n            {print} \"you need to take more steps or turns before you can superjump!\"\n```\n"
            14:
                story_text: "Skoro już nauczyłeś się używać operatorów, możesz użyć również ich z poleceniem `{pressed}`!\nWyobraź sobie żółwia, który może skakać do przodu.\nPrzytrzymując klawisz `p` żółw może wykonać skok do przodu!\nJednakże żółw może wykonać ten skok tylko co 5 kroków lub co 4 obroty.\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 4\n{repeat} 40 {times}\n    {if} w {is} {pressed}\n        {forward} stepsize\n        jumptime = jumptime - 1\n    {if} s {is} {pressed}\n        {turn} around\n    {if} a {is} {pressed}\n        {turn} left\n        spins = spins - 1\n    {if} d {is} {pressed}\n        {turn} right\n        spins = spins - 1\n    {if} p {is} {pressed}\n        {if} jumptime <= 0 {or} spins <= 0\n            {forward} stepsize * 3\n            jumptime = 5\n            spins = 4\n```\n"
                start_code: '# umieść tutaj swój kod'
    years:
        name: Nowy Rok
        description: Odliczanie do Nowego Roku!
        default_save_name: Odliczanie do Nowego Roku
        levels:
            11:
                story_text: "## Szczęśliwego Nowego Roku\nNa tym poziomie możesz użyć komendy `{for}` liczba `{in}` `{range}`, aby odliczać czas do Nowego Roku.\n\n### Ćwiczenie\nWypełnij puste pola i spraw, aby kod działał!\n"
                example_code: "```\n{for} liczba {in} {range} _ {to} _\n    {print} liczba\n{print} 'Szczęśliwego Nowego Roku!'\n```\n"
                start_code: '# tutaj umieść swój kod'
