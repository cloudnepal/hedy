adventures:
    default:
        name: "Pierwsze kroki"
        description: "Wyjaśnienie poziomu"
        default_save_name: "wstęp"
        levels:
            1:
                start_code: '{print} witaj świecie!'
                story_text: "## Witaj w Hedy!\nNa Poziomie 1 nauczysz się używać komend `{print}`, `{ask}` i `{echo}`.\nWpisz swój kod w polu programowania. Lub naciśnij zielony przycisk w przykładowym bloku kodu, a kod zostanie wpisany za Ciebie!\nWypróbuj kod samodzielnie za pomocą zielonego przycisku „Uruchom kod” pod polem programowania.\n\nMożesz wypisać tekst na ekran przy użyciu komendy `{print}`.     \n"
                example_code: "```\n{print} Hej!\n{print} Witaj w Hedy!\n```\n"
                story_text_2: "Możesz również zapytać o dane za pomocą `{ask}` oraz powtórzyć je z powrotem za pomocą komendy `{echo}`.\n"
                story_text_3: "Zacznijmy! Nie wiesz co stworzyć? Na następnych zakładkach znajdziesz pomysły na programy do stworzenia.\n"
                example_code_2: "```\n{ask} Jak masz na imię?\n{echo} Hej\n```\n"
            2:
                story_text: "## Zmienne\nW poziomie 2 nauczymy się 2 nowych komend: `{is}` oraz `{sleep}`.\nMożesz nazwać słowo za pomocą `{is}`. Takie słowo nazywamy zmienną. W tym przykładzie stworzyliśmy zmienną nazwaną imię oraz zmienną nazwaną wiek. Możesz użyć słowa imię w dowolnym miejscu w swoim kodzie i zostanie ono zamienione przez Hedy w taki sposób:\n\nDzięki temu nie potrzebujesz już więcej komendy `{echo}`!\n"
                example_code: "```\nimię {is} Hedy\nwiek {is} 15\n{print} imię ma wiek lat\n```\n"
                story_text_2: "`{print}` wciąż działa tak samo, ale komenda `{ask}` zmieniła się. Musisz użyć zmiennej również w komendzie `{ask}`. Wygląda to tak:\n"
                example_code_2: "```\nodpowiedź {is} {ask} Jak masz na imię?\n{print} Cześć odpowiedź\n```\n"
                story_text_3: "Inną nową komendą w tym poziomie jest `{sleep}`, która zatrzymuje twój program na sekundę. Jeżeli wpiszesz numer za komendą {sleep}, program zatrzyma się na podaną liczbę sekund.\n"
                example_code_3: "```\n{print} Moim ulubionym kolorem jest...\n{sleep} 2\n{print} zielony!\n```\n"
                start_code: '{print} witaj świecie!'
            3:
                story_text: "## Stwórz listę!\nW poziomie 3 możesz stworzyć listę. Możesz pozwolić komputerowi wybrać coś losowo z tej listy. Możesz to zrobić za pomocą `{at} {random}`.\n"
                example_code: "```\nzwierzęta {is} pies, kot, kangur\n{print} zwierzęta {at} {random}\n```\n"
                story_text_2: Możesz również dodać elementy do listy za pomocą `{add}` lub usunąć elementy za pomocą `{remove}`.
                example_code_2: "```\nzwierzęta {is} pies, kot, kangur\n{add} pingwin {to_list} zwierzęta\n{remove} kot {from} zwierzęta\n{print} zwierzęta {at} {random}\n```\n"
                start_code: '{print} witaj świecie!'
            4:
                start_code: "{print} 'Witaj świecie'"
                example_code: "```\n{print} 'Od teraz musisz używać cudzysłowów!'\nodpowiedź {is} {ask} 'Czego od teraz musimy używać?'\n{print} 'Musimy używać ' odpowiedź\n```\n"
                story_text: "## 'Cuzdzysłowy'\nW poziomie 4 `{ask}` i `{print}` zmieniły się.\n\nMusisz umieścić w cudzysłowach tekst, który chcesz wyświetlić.\n\nJest to przydatne, ponieważ teraz możesz wyświetlić na ekranie wszystkie słowa, które chcesz. Również słowa, których użyłeś, aby przechować coś za pomocą `{is}`.\n\nWiększość języków programowania również używa cudzysłowów podczas wyświetlania tekstu, a więc jesteśmy o jeden krok bliżej prawdziwego programowania!\n"
                story_text_2: "## Przygody stają się coraz trudniejsze\nOd teraz przygody w kolejnych zakładkach stają się coraz trudniejsze.\nNajlepiej zacząć od lewej strony i rozwiązywać je w prawą stronę tak, aby przechodzić do coraz trudniejszych wyzwań.\n"
            5:
                start_code: "imię {is} {ask} 'Jak masz na imię?'\n{if} imię {is} Hedy {print} 'super!' {else} {print} 'eh'"
                story_text: "## Jeżeli... w przeciwnym razie...\nW poziomie 5 pojawia się coś nowego `{if}`! Za pomocą `{if}` możesz wybrać pomiędzy dwoma opcjami.\nTen kod wyświetla „to miło”, jeśli wprowadzisz imię Hedy, w przeciwnym wypadku wyświetli „bu!”.\n`{ask}` i `{print}` działają w dalszym ciągu tak jak w poziomie 4.\n"
                example_code: "```\nimię {is} {ask} 'jak masz na imię?'\n{if} imię {is} Hedy {print} 'to miło' {else} {print} 'bu!'\n```\n"
                story_text_3: "## Listy\nJeśli chcemy sprawdzić czy coś znajduje się wewnątrz listy, możemy od teraz użyć komendy`{in}`.\nTen kod wyświetla „śliczny!” jeśli wy ierzesz zielony lub żółty, w przeciwnym razie wyświetli „eh”.\n"
                example_code_3: "```\nładne_kolory {is} zielony, żółty\nkolor {is} {ask} 'Jaki jest twój ulubiony kolor?'\n{if} kolor {in} ładne_kolory {print} 'śliczny!'\n{else} {print} 'eh'\n```\n"
                story_text_2: "Czasami kod z `{if}` robi się bardzo długi i nie mieści się w linii.<br> Możesz podzielić kod na dwie linie, zaczynając drugą linię od `{else}` w taki sposób:\n"
                example_code_2: "```\nimię {is} {ask} 'jak masz na imię?'\n{if} imię {is} Hedy {print} 'to miło'\n{else} {print} 'bu!'\n```\n"
                story_text_4: "Coś innego co działa z poleceniem `{if}` jest polecenie `{pressed}`! Przy użyciu `{pressed}` możesz przypisać dowolną literę alfabetu lub liczbę ze swojej klawiatury do dowolnego polecenia. Coś się stanie jeżeli je przypiszesz i naciśniesz ten klawisz. Spróbuj teraz!\n"
                example_code_4: "```\n{if} x {is} {pressed} {print} 'it worked!'\n```\n"
            6:
                start_code: "{print} '5 razy 5 to' 5 * 5"
                story_text: "## 1 + 1\n W tym poziomie nauczysz się czegoś nowego: od teraz możesz również liczyć.\n \n Dodawanie jest proste, możesz je zapisać tak jak w matematyce: na przykład `5 + 5`. Odejmowanie też jest proste, to po prostu `5 - 5`.\n \n Mnożenie jest trochę inne, ponieważ nie ma znaku mnożenia na twojej klawiaturze. Poszukaj, naprawdę go nie ma!\n Z tego powodu mnożymy za pomocą gwiazdki nad 8: `5 * 5`. Czytaj to jako „5 razy 5”, tak lepiej zapamiętasz.\n"
                example_code: "```\n{print} '5 plus 5 is ' 5 + 5\n{print} '5 minus 5 is ' 5 - 5\n{print} '5 {times} 5 is ' 5 * 5\n```\n"
                story_text_2: "Zrobiliśmy również zmianę w przypisywaniu słów do zmiennej! Od teraz możesz użyć `=` zamiast `{is}` kiedy przypisujesz nazwę lub liczbę do zmiennej, jak tutaj:\n"
                example_code_2: "```\nimię = Hedy\nodpowiedź = 20 + 4\n```\n"
            7:
                start_code: "{repeat} 3 {times} {print} 'Hedy to zabawa!'"
                story_text: "## Poziom 7! Poziom 7!\nPoziom 7 dodaje komendę `{repeat}`. `{repeat}` może być użyte po to, aby tę samą linie kodu wykonać wiele razy.\n"
                example_code: "```\n{repeat} 3 {times} {print} 'Hedy is fun!'\n```\n"
            8:
                start_code: "{repeat} 5 {times}\n    {print} 'Siema ludziska'\n    {print} 'To zostanie wypisane 5 razy'"
                story_text: "## Wcięcia\n`{ask}` i `{print}` wciąż działają tak jak je poznałeś do tej pory. Ale `{if}`, `{else}`, `{pressed}` i `{repeat}` zmieniły się!\nOd teraz możesz zgrupować kilka linii kodu, ale musisz wtedy *wciąć* ten kod.\nTo znaczy dodać cztery spacje na początku linii. Będziesz musiał również wciąć kod, kiedy będziesz chciał utworzyć blok złożony z tylko 1 linii.\n"
                example_code: "Zobacz jak działa polecenie `{repeat}`:\n```\n{repeat} 5 {times}\n    {print} 'Cześć wszystkim'\n    {print} 'Całość powtórzona 5 razy'\n```\nZobacz jak działa polecenie `{if}` oraz `{else}`:\n\n```\nimie {is} {ask} 'Jak masz na imię?'\n{if} imie {is} Karol\n    {print} 'Cześć Karol'\n    {print} 'Możesz pograć na swoim komputerze!'\n{else}\n    {print} 'INTRUZ!'\n    {print} 'Nie możesz używać tego komputera!'\n```\n"
            9:
                start_code: "{repeat} 3 {times}\n    jedzenie = {ask} 'Co byś zjadł?'\n    {if} jedzenie {is} pizza\n        {print} 'super!'\n    {else}\n        {print} 'pizza jest lepsza'"
                story_text: "## Teraz wszystko razem!\nNa tym poziomie możesz używać nie tylko wielu linii z poleceniem `{if}` oraz `{repeat}`, ale możesz używać ich łącznie!\nW tym przykładzie możesz zobaczyć polecenie `{if}` wewnątrz pętli/polecenia `{repeat}`. Można też odwrotnie. Dodatkowo polecenie `{if}` jest dozwolone w innym poleceniu `{if}`. Możesz też wykorzystać pętle/polecenie `{repeat}` w innej pętli/poleceniu `{repeat}`.\nSpróbuj samemu!\n"
                example_code: "```\n{repeat} 3 {times}\n    food = {ask} 'What do you want?'\n    {if} food {is} pizza\n        {print} 'nice!'\n    else\n        {print} 'pizza is better'\n```\n"
            10:
                start_code: "zwierzęta {is} pies, kot, chomik\n{for} zwierzę {in} zwierzęta\n  {print} 'Moim ulubionym zwierzakiem jest zwierzę'"
                story_text: "## For each item in my list...\nW tym poziomie nauczysz się nowego polecenia/pętli `{for}`. Z poleceniem/pętlą `{for}` możesz tworzyć listy i możesz używać wszystkich elementów listy.\n`{for}` tworzy blok kodu, jak `{repeat}` i `{if}` więc wszystkie linie w bloku muszą być *wcięte* a więc zaczynać się spacjami."
                example_code: "```\nanimals {is} dog, cat, blobfish\n{for} animal {in} animals\n  {print} 'I love ' animal\n```\n"
            11:
                start_code: "{for} licznik {in} {range} 1 {to} 5\n    {print} licznik"
                story_text: "## Pętle!\n`{print}` działa dokłada tak samo jak dotychczas, ale dodaliśmy nową formę pętli/polecenia `{for}`. Teraz możesz napisać `{for} licznik {in} {range} 1 {to} 5` zamiast `{repeat} 5 {times}` i użyć zmiennej `licznik` w swoim programie.\nSpróbuj samemu i zobacz co się stanie! Pamiętaj użyć \"wcięcia\" w liniach po poleceniach `{for}` i`{if}` (Pamiętaj aby zaczynać \"wcięte\" linie od czterech spacji)"
                example_code: "```\nfor counter in range 1 to 5\n    print counter\n```\n"
            12:
                start_code: "{print} 'Teraz zapisując ułamki dziesiętne musisz wykorzystać kropkę do oddzielenia części ułamkowej od części całkowitych'\n{print} 2.5 + 2.5"
                story_text: "## Liczby i teksty\n**Ułamki dziesiętne**\nDo tej pory Hedy nie pozwalał na zapisywanie ułamków dziesiętnych np. 1.5, ale od tej pory możesz już wykorzystać ułamki dziesiętne w swoich kodach. Pamiętaj że w komputerze wykorzystujemy  `.` do oddzielenia części ułamkowej od całkowitej."
                example_code: "```\n{print} 'Two and a half plus two and a half is...'\n{print} 2.5 + 2.5\n```\n"
                story_text_2: "**Wszystkie teksty muszą być w cudzysłowach**\nNa tym poziomie, musisz także wykorzystywać cudzysłowy kiedy przypisujesz tekst za pomocą `=`:\n"
                example_code_2: "```\nimię= 'Robocie Hedy'\n{print} 'Cześć ' imię\n```\n"
                story_text_3: "**Wszystkie elementy listy także wymagają cudzysłowów**\nListy są teksami, a więc także wymagają cudzysłowów. Pamiętaj że każdy element listy powinien być ujęty w cudzysłowy.\nPozwala ci to na zapisanie dwóch słów jako jeden element listy na przykład 'Iron Man'.\n"
                example_code_3: "```\nsuperbohaterowie = 'Spiderman', 'Batman', 'Iron Man'\n{print} superbohaterowie {at} {random}\n```\n"
                story_text_4: "**Cały tekst po `{if}` także wymaga cudzysłowów**\n"
                example_code_4: "```\nimię = {ask} 'Jak masz na imię?'\n{if} imię = 'Robot Hedy'\n    {print} 'Cześć!'\n```\n"
                story_text_5: "**Liczby nie wymagają cudzysłówów**\nPrzypisanie liczby za pomocą `=` nie wymaga cudzysłówów:\n"
                example_code_5: "```\npunkty = 25\n{print} 'Zdobyłeś ' punkty\n```\n"
                story_text_6: "**Matematyka słów**\nNa tym poziomie możesz używać znaku + w tekście. Na przykład:"
                example_code_6: "```\na = 'Część '\nb = 'świecie!'\n{print} a + b\n```\n"
            13:
                start_code: "imię = {ask} 'Jak masz na imię?'\nwiek = {ask} 'Ile masz lat?'\n{if} imię {is} 'Hedy' {and} wiek {is} 2\n    {print} 'Naprawdę jesteś Hedy!'"
                example_code: "```\nimię = {ask} 'Jak masz na imię?'\nwiek = {ask} 'Ile masz lat?'\n{if} imię {is} 'Hedy' {and} wiek {is} 2\n    {print} 'Naprawdę jesteś Hedy!'\n```\n"
                story_text: "## I... Lub..?\nNauczysz się teraz o `{and}` i `{or}`! Jeśli chcesz sprawdzić dwa wyrażenia, nie musisz używać dwóch poleceń {if}, w zamian możesz użyć `{and}` i `{or}`. Jeśli użyjesz `{and}`, oba wyrażenia, przed i po `{and}` muszą być prawdziwie. Można też użyć `{or}`. W takim przypadku wystarczy że jedno z wyrażeń będzie prawdziwe."
            14:
                start_code: "wiek = {ask} 'Ile masz lat?'\n{if} wiek < 13\n    {print} 'Jesteś młodszy niż ja!'\n{else}\n    {print} 'Jesteś starszy niż ja!'"
                story_text: "## Duży, Większy, Największy\nW tej lekcji nauczymy się zastosowania nowych operatorów logicznych, które możesz pamiętać z lekcji matematyki: operatory `<` i `>`.\nOperator `<` sprawdza czy pierwsza liczba jest mniejsza od drugiej liczby, na przykład wiek `<` 12 sprawdza czy wiek jest mniejszy niż 12.\nJeżeli chcesz sprawdzić czy pierwsza liczba jest mniejsza lub równa drugiej liczbie możesz użyć operator `<=`, na przykład wiek `<=` 11, który sprawdza czy wiek jest mniejszy lub równy 11.\nOperator `>` sprawdza czy pierwsza liczba jest większa od drugiej liczby, na przykład punkty `>` 10 sprawdza czy punkty są większe od 10.\nJeżeli chcesz sprawdzić, czy pierwsza liczba jest większa lub równa drugiej liczbie możesz użyć `>=`, na przykład punkty `>=` 11, który sprawdza czy punkty są większe lub równe 11.\nMożesz użyć tych operatorów logicznych w `{if}`, na przykład:\n"
                example_code: "```\nage = {ask} 'How old are you?'\n{if} age > 12\n    {print} 'You are older than I am!'\n```\n"
                story_text_2: "Od tego poziomu, jeśli chcesz dokładnie porównać, możesz użyć dwóch znaków równości. Tak właśnie robi większość języków programowania:\n"
                example_code_2: "```\nimię = {ask} 'Jak masz na imię?'\n{if} imię == 'Hedy'\n    {print} 'Jesteś wspaniały!'\n```\n"
                story_text_3: "Możesz również porównać, czy coś jest *nie* równe czemuś innemu, używając `!=` jak to:\n"
                example_code_3: "```\nimię = {ask} 'Jak masz na imię?'\n{if} imię != 'Hedy'\n    {print} 'Nie jesteś Hedy'\n```\n"
            15:
                start_code: "odpowiedź = 0\n{while} odpowiedź != 25\n    odpowiedź = {ask} 'Ile jest 5 razy 5?'\n{print} 'Dobra odpowiedź'"
                story_text: "## Więcej pętli!\nTym razem nauczymy się nowego typu pętli - pętla `{while}`! Ta pętla będzie działać tak dlugo jak warunek w pętli jest prawdziwy, więc nie zapomnij zmienić wartosci warunku w pętli.\n\nPętla kodzie przykładowym będzie działać aż poprawna odpowiedź zostanie podana.\nPętla nigdy się nie skonczy gdy poprawna odpowiedź nie zostanie podana!"
                example_code: "```\nanswer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n```\n"
            16:
                example_code: "```\nfriends = ['Ahmed', 'Ben', 'Cayden']\nlucky_numbers = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'the lucky number of ' friends[i]\n    {print} 'is ' lucky_numbers[i]\n```\n"
                start_code: "owoce = ['jabłko', 'banan', 'czereśnia']\n{print} owoce"
                story_text: "## Coraz bliżej prawdziwego kodu!\nTym razem stworzymy listy w sposób podobny do Pythona. Te listy mają kwadratowe nawiasy dookoła listy! Dodatkowo, zostawimy też cudzysłowie dookoła każdego elementu listy tak jak się nauczyliśmy w poprzednich poziomach.\nMożesz również użyć kwadratowych nawiasów żeby wybrać konkretny element z listy."
            17:
                start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Szukam!'"
                story_text: "Now we are going to change indentation a little bit. Every time that we need an indentation, we need `:` at the line before the indentation.\n\nIn this level you can also use a new command: `{elif}`. `{elif}` is short for {else} {if} and you need it when you you want to make 3 (or more!) options.\nCheck it out!"
                example_code: "```\nnagrody = ['milion złotch', 'szarlotkę', 'nic']\ntwoja_nagraoda = nagrody[{random}]\n{print} 'Wygrywasz ' twoja_nagraoda\n{if} twoja_nagraoda == 'milion złotch' :\n    {print} 'O tak! Jesteś bogaty!'\n{elif} twoja_nagraoda == 'szarlotkę' :\n    {print} 'Pyszna szarlotka!'\n{else}:\n    {print} 'Powodzenia następnym razem ...'\n```\n"
            18:
                start_code: |-
                    imię = 'Hedy'
                    {print}('Mam na imię ', imię)
                story_text: |-
                    ## The last level!
                    We arrived at real Python code! That means we need to use parentheses with {print} and {range} from now on.

                example_code: |
                    ```
                    {print}('Witaj!')
                    {for} i {in} {range}(1, 10):
                        {print}('To jest linijka numer ', i, '.')
                    ```

                story_text_2: |-
                    Jeżeli chcesz wypisać kilka rzeczy w jednej linii to oddziel je przecinkami.

                example_code_2: |
                    ```
                    temperatura = 25
                    {print}('Na zewnątrz jest ', temperatura, ' stopni')
                    ```

                story_text_3: |-
                    ## Czytanie danych
                    Ostatnią zmianą jaką musisz zrobić w kodzie, żeby otrzymać poprawny kod Python jest zmiana `{ask}` na `{input}`.

                example_code_3: |
                    ```
                    {print}('Mam na imię Hedy!')
                    imię = {input}('A jak Ty masz na imię?')
                    {print}('Twoje imię to ', imię)
                    ```

    songs:
        name: Zaśpiewaj piosenkę!
        description: Wyświetl piosenkę
        default_save_name: Piosenka
        levels:
            12:
                story_text: "## Zaśpiewaj piosenkę\nW tej piosence jeszcze prościej zaprogramujemy 'jeśli jesteś dziś szczęśliwy w dłonie klaszcz'. To wszystko dzięki temu, że wszystkie akcjie możemy przypisać do zmiennej. Na przykład:\n\n### Ćwiczenie\nCzy potrafisz dodać odpowiednią długość wcięcia do każdej linii kodu żeby ta piosenka była zaśpiewana poprawnie?\nZwróć uwagę, że nie wszystkie linie kodu wymagają wcięcia.\n"
                example_code: "```\nakcje = 'w dłonie klaszcz', 'tupnij tak', 'klepnij się'\n{for} akcja {in} akcje\n    {for} i {in} {range} 1 {to} 2\n        {print} 'jeśli jesteś dziś szczęśliwy'\n        {print} akcja\n    {print} 'jeśli jesteś dziś szczęśliwy, w sercu pokój masz prawdziwy'\n    {print} 'jeśli jesteś dziś szczęśliwy'\n    {print} akcja\n```\n"
                start_code: '# umieść tutaj swój kod'
            11:
                story_text: "## Piosenki\nNa tym poziomie możesz użyć polecenia `{for} i {in} {range}`, żeby zrobić piosenki które używają liczenia, na przykład \"5 Małych Małpek\".\n\n### Ćwiczenie\nDokończ program uzupełniając puste miejsca.\n"
                example_code: "## 5 Małych Małpek\n```\n_ _ _ _ 5 _ 1\n    {print} 'Skakało na łóżku małych małpek ' małpka\n    {print} 'Nagle jedna spadłą i potłukła się'\n    {print} 'Mama do doktora dzwoni i słyszy, że'\n    {if} i {is} 1\n        {print} 'SKAKAĆ NA ŁÓŻKU NIE POZWALA SIĘ!'\n    {else}\n        {print} 'SKAKAĆ NA ŁÓŻKU ZABRONIONE JEST!'\n```\n"
                start_code: '# umieść swój kod tutaj'
            10:
                story_text: "## Piosenki\nNa tym poziomie bardzo łatwo potrafisz zrobić piosenkę dla dzieci \"Pięć małych małpek\". Czy potrafisz zrobic ostatni refren tej piosenki?\nPotrafisz również zrobić całą \"Dziecko Rekin\" piosenkę (włącznie z wszystkimi innymi rekinami z rodziny) w 6 liniach kodu przy użyciu polecenia `{for}`!\nNie zapominajmy również o tym, że potrafisz też zrobić piosenkę \"Dziadek fajną farmę miał\" razem z wszystkimi zwierzątkami.\n\n\n### Ćwiczenia\nCzy potrafisz dodać ostatni wers piosenki o małpkach gdzie została tylko jedna małpka?\n\nCzy potrafisz jeszcze bardziej skrócić piosenkę \"Dziecko Rekin\" przy użyciu polecenia `{repeat}`?\n\nCzy potrafisz dodać nowe zwierzątka do \"Dziadek fajną farmę miał\"?\n"
                example_code: "## 5 Małych Małpek\n```\nmałpki = 5, 4, 3, 2\n{for} małpka {in} małpki\n    {print} 'Skakało na łóżku małych małpek ' małpka\n    {print} 'Nagle jedna spadłą i potłukła się'\n    {print} 'Mama do doktora dzwoni i słyszy, że'\n    {print} 'SKAKAĆ NA ŁÓŻKU ZABRONIONE JEST!'\n```\n\n## Dziecko Rekin\n```\nrekiny = Dziecko, Mama, Tata, Babcia, Dziadek\n{for} rekin {in} rekiny\n    {print} rekin ' Rekin tututututudu'\n    {print} rekin ' Rekin tututututudu'\n    {print} rekin ' Rekin tututututudu'\n    {print} rekin ' Rekin'\n```\n\n## Dziadek Fajną Farmę Miał\n```\nzwierzęta = Kurki, Krówki, Świnkę\n{for} zwierzę {in} zwierzęta\n    {if} zwierzę {is} Kurki\n        dźwięk = ko\n    {if} zwierzę {is} Krówki\n        dźwięk = muu\n    {if} zwierzę {is} Świnkę\n        dźwięk = chrum\n    {print} 'Dziadek fajną farmę miał'\n    {print} 'ija ija oo!'\n    {print} zwierzę ' na niej hodował'\n    {print} 'ija ija oo!'\n    {print} zwierzę ' ' dźwięk dźwięk ' tu i ' dźwięk dźwięk ' tam'\n    {print} dźwięk 'tu, ' dźwięk ' tam, ciągle tylko ' dźwięk dźwięk\n```\n"
                start_code: '# umieść tutaj swój kod'
            8:
                story_text: "## Piosenki\nW poprzednich poziomach programowałeś piosenkę \"Butelki Piwa\" (ang. Bottles of Beer). Bez użycia polecenia `{repeat}` musiałeś wiele razy skopiować wersy piosenki.\nNa tym poziomie możesz powtórzyć ten wers 99 razy poprzez dodanie jednej prostej linii kodu.\n\n### Ćwiczenie\nDodaj odpowiednie polecenia w puste miejsca i upewnij się, że kod ma poprawne wcięcia.\n"
                example_code: "```\nwers = 99\n_ 99 {times}\n    {print} wers ' butelek piwa na ścianie'\n    {print} wers ' butelek piwa'\n    {print} 'Weź jedną i przekaż ją dalej'\n    wers = wers - 1\n    {print} wers ' butelek piwa na ścianie'\n```\n"
                start_code: '# umieść tutaj swój kod'
            7:
                story_text: "## Piosenki\nPiosenki często zawierają dużo powtórzeń, na przykład: Dziecko Rekin! Jeżeli ją zaśpiewasz to zaczniesz śpiewać ten sam tekst:\n\nDziecko Rekin dududududududu <br>\nDziecko Rekin dududududududu <br>\nDziecko Rekin dududududududu <br>\nDziecko Rekin\n\nMożesz skrócić tekst tej piosenki przy użyciu polecenia `{repeat}`! Potrafisz dończyć ten kod?\n\n### Ćwiczenie\nMożesz napisać piosenkę Dziecko Rekin przy użyciu polecenia `{repeat}`. Dokończ kod uzupełniając puste miejsca.\n**Dodatkowe ćwiczenie** Po napisaniu piosenki Dziecko rekin możesz zaprogramować inne piosenki. Jest dużo piosenek z powtarzającym sie tekstem.\nCzy pamiętasz przynajmniej o jednej takiej piosence, i czy potrafisz ją zaprogramować?\n"
                example_code: "```\n{repeat} _ _ {print} 'Dziecko Rekin tututudutudu'\n{print} 'Dziecko Rekin'\n```\n"
                start_code: "{print} 'Dziecko Rekin'"
            6:
                story_text: "## Piosenki\nPiosenki często zawierają dużo powtórzeń. Czasami te powtórzenia opierają się na liczeniu. Przykładem jest dobrze znana angielska piosenka \"Butelki Piwa\" (ang. bottles of beer). Możesz zaprogramować tą piosenkę z odrobiną matematyki.\n\nWskazówka: Użyj funkcji \"czytaj na głos\" żeby Hedy zaśpiewał tą piosenkę!\n\n### Ćwiczenie\nMożesz teraz powtórzyć linie od 2 do 7 ile razy chcesz poprzez skopiowanie tych linii.\n"
                example_code: "```\nwers = 99\n{print} wers ' butelek piwa na ścianie'\n{print} wers ' butelek piwa'\n{print} 'Weź jedną i przekaż ją dalej'\nwers = wers - 1\n{print} wers ' butelek piwa na ścianie'\n{sleep}\n```\n"
                start_code: "{print} 'Zacznijmy śpiewać!'"
                story_text_2: "## 5 Małych małpek skaczących po łóżku\nTa piosenka dla dzieci odlicza od 5 małych małpek do 1 małpki.\nMożesz zaśpiewać całą piosenkę jeżeli skopiujesz linie od 2 do 7 i wkleisz je poniżej kodu.\n"
                example_code_2: "```\nnumer = 6\nnumer = numer - 1\n{print} 'Skakało na łóżku małych małpek ' numer\n{print} 'Nagle jedna spadła i potłukła się'\n{print} 'Mama do doktora dzwoni i słyszy, że'\n{print} 'SKAKAĆ NA ŁÓŻKU ZABRONIONE JEST!'\n{sleep}\n```\n"
            16:
                story_text: "## Zaśpiewaj piosenkę\nNa tym poziomie możesz zaprogramować piosenkę \"Dziadek Fajną Farmę Miał\". Możesz połączyć odpowiednie zwierzę z jego odgłosem poprzez dodanie ich w to samo miejsce na liście.\nThe Drunken Sailor is also quickly made in this level. You only need 8 lines for the entire song, check it out!\n"
                example_code: "## Dziadek Fajną Farmę Miał\n```\nzwierzęta = ['Kurki', 'Krówki', 'Świnkę']\ndźwięki = ['ko', 'muu', 'chrum']\n{for} i {in} {range} 1 {to} 3\n    zwierzę = zwierzęta[i]\n    dźwięk = dźwięki[i]\n    {print} 'Dziadek fajną farmę miał'\n    {print} 'ija ija oo!'\n    {print} zwierzę ' na niej hodował'\n    {print} 'ija ija oo!'\n    {print} zwierzę ' ' dźwięk dźwięk ' tu i ' dźwięk dźwięk ' tam'\n    {print} dźwięk 'tu, ' dźwięk ' tam, ciągle tylko ' dźwięk dźwięk\n```\n\n## Drunken Sailor\n```\nlines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']\n{for} line {in} lines\n    {for} i {in} {range} 1 {to} 3\n        {print} line\n    {print} 'early in the morning'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'way hay and up she rises'\n    {print} 'early in the morning'\n```\n"
                start_code: '# umieść tutaj swój kod'
    dishes:
        levels:
            5:
                start_code: "{print} 'Kto zmywa naczynia?'"
                story_text: "## Mycie naczyń\nDzięki poleceniu `{if}` możesz mieć teraz trochę więcej zabawy z wyborami w twoich programach. Możesz teraz zrobić, żeby twój program reagował na odpowiedzi.\n\nCzy potrafisz dokończyć program który wyświetla \"o, nie...\" gdy jest Twoja tura, oraz który wyświetla \"tak!\" gdy to nie jest Twoja tura?\nNie zapomnij cudzysłowów!\n"
                example_code: "```\nludzie {is} mama, tata, Agnieszka, ty\nkto_zmywa {is} ludzie {at} {random}\n{if} kto_zmywa {is} ty {print} _ o, nie... Twoja kolej zmywania naczyń _\n{else} {print} 'całe szczęście ' _ ' myje naczynia'\n````\n"
            10:
                story_text: "## Zmywanie naczyń\nNa tym poziomie możesz zrobić jeszcze lepszy harmonogram mycia naczyń.\n"
                example_code: "```\ndni = Poniedziałek, Wtorek, Środa, Czwartek, Piątek, Sobota, Niedziela\nimiona = mama, tata, Agnieszka, ty\n_ dzień _ dni\n    {print} imiona {at} {random} ' myje naczynia w ' dzień\n```\n"
                start_code: '# umieść tutaj swój kod'
            7:
                story_text: "## Zmywanie naczyń\nPrzy użyciu komendy `{repeat}` możesz powtórzyć fragmenty kodu. Możesz to wykorzystać do ustalenia kto będzie zmywał naczynia przez kilka dni!\n### Ćwiczenie\nUżyj komendy `{repeat}` aby wylosować kto będzie mył naczynia przez cały tydzień. Każde puste miejsce musi być wypełnione jedną komendą lub liczbą!\n**(dodatkowe ćwiczenie)** Czy możesz wymyślić inne prace domowe? Przygotuj kod, który wylosuje trzy prace domowe. Nie zapomnij napisać, o co chodzi!\n"
                example_code: "```\nludzie = mamy, taty, Emmy, Sophie\n{repeat} _ _ {print} 'Zmywanie naczyń jest zadaniem ' _ _ _\n```\n"
                start_code: "{print} 'Kto myje naczynia?'"
            6:
                story_text: "## Zmywanie naczyń\nJak często wszyscy będą zmywać naczynia? Czy to jest sprawiedliwe? Możesz to policzyć na tym poziomie.\n"
                example_code: "```\npeople = mom, dad, Emma, Sophie\nemma_washes = 0\ndishwasher = people {at} {random}\n{print} 'The dishwasher is' dishwasher\n{if} dishwasher {is} Emma emma_washes = emma_washes + 1\n{print} 'Emma will do the dishes this week' emma_washes 'times'\n```\n\nNow you can copy lines 3 to 5 a few times (e.g. 7 times for a whole week) to calculate for a whole week again.\nDo you make the code for the whole week?\n"
                story_text_2: "## Zrób to sprawiedliwe\nW poprzednim programie jakbyś był bardzo pechowy to program mógłby Cię wybrać do mycia naczyń przez cały tydzien, a to nie jest sprawiedliwe!\nŻeby stworzyć bardziej sprawiedliwy system możesz użyc polecenia `{remove}` żeby usunąć osobę z listy zaraz po wybraniu jej do mycia naczyń. Ty sposobem ta osoba już nie zostanie wybrana do mycia naczyń zanim wszyscy nie mieli okazji umyć naczyń.\n\nPoniedziałek i wtorek zostały przygotowane dla Ciebie. Czy potrafisz dodać resztę tygodnia?\nCzy potrafisz również wymyślić co zrobić gdy lista jest pusta?\n"
                example_code_2: "```\nludzie = mama, tata, Agnieszka, ty\nkto_zmywa = ludzie {at} {random}\n{print} 'Naczynia w poniedziałek myje: ' kto_zmywa\n{remove} kto_zmywa {from} ludzie\nkto_zmywa = ludzie {at} {random}\n{print} 'Naczynia we wtorek myje: ' kto_zmywa\n{remove} kto_zmywa {from} ludzie\nkto_zmywa = ludzie {at} {random}\n```\n"
                start_code: "{print} 'Kto zmywa naczynia?'"
            4:
                story_text: "## Mycie naczyń\nŻeby upiększyć swój plan mycia naczyń możesz użyć cudzysłowów.\nTym razem Twój przykładowy kod nie jest w pełni ukończony.\n\nCzy potrafisz dokończyć ten kod uzupełniając puste miejsca? Każde puste miejsce musi być zastąpione przy użyciu jednego słowa lub symbolu.\n\nWskazówka: Nie zapomnij cudzysłowów!\n"
                example_code: "```\npeople {is} mom, dad, Emma, Sophie\n{print} _ the dishes are done by _\n{sleep}\n{print} people {at} _\n```\n"
                start_code: "{print} 'Kto zmywa naczynia?'"
            3:
                story_text: "## Zmywarka\nCzy w domu nie zawsze zgadzasz  się z tym, kto powinien umyć naczynia lub zmienić kuwetę dzisiaj?\nW takich przypadkach możesz użyć komputera aby wybrać sprawiedliwie. Możesz zaprogramować to na tym poziomie!\nNajpierw przygotuj listę członków swojej rodziny. Następnie wybierz z listy `{at} {random}`.\n"
                example_code: "```\nosoby {is} mama, tata, Ewa, Sofia\n{print} osoby  {at} {random}\n```\n"
                story_text_2: "## Zhakuj program zmywarki!\nNie masz ochoty samemu zmywać naczyń? Zhakuj program usuwając swoje imię z listy za pomocą komendy `{remove}` `{from}`.\n"
                example_code_2: "```\nosoby {is} mama, tata, Ewa, Sofia\ntwoje_imie {is} {ask} Jak masz na imię?\n_ twoje_imie  _ osoby\n{print} _ _ _ dziś zmywa\n```\n"
                start_code: '{print} Kto dziś zmywa naczynia?'
        name: Zmywanie?
        description: Użyj komputera, aby sprawdzić, kto zmywa naczynia
        default_save_name: Zmywanie
    dice:
        levels:
            4:
                start_code: "{print} 'Jaka wartość tym razem wypadnie na kostce?'"
                story_text: "## Kostki do gry\nNa tym poziomie możemy tworzyć zdania z wartością kostki w zdaniu, oczywiście w cudzysłowach.\nTym razem kod przykładowy nie jest do końca kompletny. Czy możesz uzupełnić kod?\n"
                example_code: "```\nchoices {is} 1, 2, 3, 4, 5, earthworm\n{print} _ you threw _\n{print} _ _ _ <- here you have to program the choice\n```\n"
            10:
                story_text: "## Kostki do gry\nCzy wszystkie osoby biorą zbyt dużo czasu na rzucanie kostkami? W tym poziomie możesz pozwolić Hedy na rzucanie wszystkimi kostkami na raz!\nCzy możesz wypełnić poprawne linie kodu na pustych miejscach?\n"
                example_code: "```\ngracze = Ania, Jasiek, Kasia\nwybory = 1, 2, 3, 4, 5, 6\n_\n    {print} gracz ' wurzycił ' wybory {at} {random}\n    {sleep}\n```\n"
                start_code: '# umieść tutaj swój kod'
            7:
                story_text: "## Kości\nNa poziomie 5 już mogłeść zrobić kostkę do gry. Przy pomocy polecenia `{repeat}` możesz łatwo rzucić ręką pełną kostek.\n\n### Ćwiczenie\nSpróbuj ukończyć przykładowy kod!\n**(dodatkowe ćwiczenie)** Zastanów się nad grą, którą znasz, i która wymaga kostki i zaprogramuj ją przy pomocy polecenia `{repeat}.`\n"
                example_code: "```\nwybory = 1, 2, 3, 4, 5, 6\n_ _ _ _ _ _ _\n```\n"
                start_code: "{print} 'Jaka wartość tym razem wypadnie na kostce?'"
            6:
                story_text: "## Kostka do gry\nNa tym poziomie możesz zrobić kostkę do gry z Gąsienicą i nawet policzyć ile punktów wyrzuciłaś w sumie.\nWiedząc, że Gąsienica jest warta 5 punktów możesz teraz policzyć ile punktów wyrzuciłaś w sumie.\nTen kod policzy ilość punktów jednek kostki:\n\n### Ćwiczenie\nCzy potrafisz napisać kod, który policzy sumę punkt na 8 kostkach? Aby to zrobić musisz skopiować kilka linijek kodu.\n"
                example_code: "```\nwybory = 1, 2, 3, 4, 5, gąsienica\npunkty = 0\nrzut = wybory {at} {random}\n{print} 'wyrzuciłeś' rzut\n{if} rzut {is} gąsienica punkty = punkty + 5 {else} punkty = punkty + rzut\n{print} 'suma punktów to ' punkty\n```\n"
                example_code_2: "## Wgląd w przyszłość\n\nCzy udało ci się policzyć wynik dla 8 kostek? Wymagało to sporo kopiowania i wklejania, prawda? W poziomie 7 ułatwimy to!\n"
                start_code: "{print} 'Jaka wartość tym razem wypadnie na kostce?'"
            5:
                story_text: "## Kostki do gry\nW tym poziomie możesz stworzyć kostkę do gry używając polecenia `{if}`.\nUzupełnij kod przykładowy tak, aby kod mówił \"Możesz przestać rzucać\" gdy wyrzuciłeś gąsienicę.\n\nMoże chcesz stworzyć kostkę do gry z całkowicie innej gry? To też jest w porządku! W takim razie wymyśl swoją własną reakcję. Na przykład \"tak\" dla 6 i \"szkoda\" dla czegoś innego.\n"
                example_code: "```\nchoices {is} 1, 2, 3, 4, 5, earthworm\nthrow {is} _\n{print} 'you have' _ 'thrown'\n{if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'\n```\n"
                start_code: "{print} 'Jaka wartość tym razem wypadnie na kostce?'"
            3:
                story_text: "## Kostka do gry\nNa tym poziomie posiadamy możliwość wyboru z listy. Dzięki temu możemy pozwolić komputerowi wybrać jedną ze stron kostki.\nZerknij na gry, które masz w swojej szafie w domu.\nCzy są tam gry z (specjalną) kostką? Możesz ją również skopiować przy pomocy tego kodu.\nNa przykład kostka do gry Gąsienice z liczbami od 1 do 5 i wężem na niej.\n\n![Kostka do gry Gąsienice z liczbami od 1 do 5 i gąsienicą na niej](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)\n"
                example_code: "```\nchoices {is} 1, 2, 3, 4, 5, earthworm\n{print} choices {at} {random}\n```\n"
                start_code: '{print} Jaka wartość wypadnie na kostce tym razem?'
                example_code_2: "```\nwybór {is} _\n```\n"
                story_text_2: "### Ćwiczenie\nKości w przykładzie powyżej są kośćmi do specjalnej gry. Czy możesz zrobić normalną kość do gry?\nLub inne specjalne kości z innej gry?\n"
            15:
                story_text: "## Kości do gry\nW tej grze musisz wyrzucić 6 w jak najmniejszej liczbie prób.\n"
                example_code: "```\noptions = 1, 2, 3, 4, 5, 6\n{print} 'Throw 6 as fast as you can!'\nthrown = 0\ntries = 0\n{while} thrown != 6\n    thrown = options {at} {random}\n    {print} 'You threw ' thrown\n    tries = tries + 1\n{print} 'Yes! You have thrown 6 in ' tries ' tries.'\n```\n"
                start_code: '# umieść swój kod tutaj'
        name: Kostka do gry
        description: Stwórz własną kostkę do gry
        default_save_name: Kostka do gry
    rock:
        default_save_name: Kamień
        levels:
            1:
                story_text: "##  Papier, kamień, nożyce\nNa poziomie 1 możesz zacząć tworzyć grę papier, kamień, nożyce.\n\nZa pomocą  `{ask}` możesz zapytać a za pomocą `{echo}` możesz powtórzyć co zostało wybrane.\n"
                example_code: "```\n{print} Co wybierasz?\n{ask} wybierz: papier, kamień lub nożyce\n{echo} a więc wybrałeś:\n```\n"
                start_code: '{print} Witaj w twojej własnej grze papier, kamień, nożyce!'
                story_text_2: "## Wyzwanie\nZamiast używać słów, możesz również użyć emotikonów: ✊✋✌\nCzy możesz poprawić kod aby używać emotikonów?\n"
                example_code_2: "```\n{print} co wybierasz?\n{ask} wybierz z _\n{echo} a więć wybrałeś:\n```\n"
            10:
                story_text: "## Rock, Paper, Scissors\nFeeling too lazy to play the game yourself? Let Hedy play it for you!\n"
                example_code: "```\nchoices = rock, paper, scissors\nplayers = Marleen, Michael\n{for} player {in} players\n     {print} player ' chooses ' choices {at} {random}\n```\n"
                start_code: '# umieść tutaj swój kod'
            9:
                story_text: "## Rock, paper, scissors\nIn this level you can program the whole rock, paper, scissors game by nesting the {if}-commands. Can you finish the code?\n"
                example_code: "```\nchoices {is} rock, paper, scissors\nyour_choice {is} {ask} 'What do you choose?'\n{print} 'You choose ' your_choice\ncomputer_choice {is} choices {at} {random}\n{print} 'The computer chooses ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'Tie'\n{if} computer_choice {is} rock\n    {if} your_choice {is} paper\n        {print} 'You win!'\n    {if} your_choice {is} scissors\n        {print} 'You lose!'\n```\n"
                start_code: '# umieść tutaj swój kod'
            5:
                story_text: "## Rock, paper, scissors\nIn this level we can determine who won.\nFor that you need the new `{if}` code.\n\nSave your choice with the name of choice and the choice of computer as computer choice.\nThen you can use `{if}` to see {if} they are the same or different.\nWill you finish the code?\n"
                example_code: "```\noptions {is} rock, paper, scissors\ncomputer_choice {is} _\nchoice {is} {ask} 'What do you choose?'\n{print} 'you chose ' _\n{print} 'computer chose ' _\n{if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'\n```\n\nFill in the correct code on the blanks to see {if} it is a draw.\n"
                start_code: "{print} 'Welcome to your own rock scissors paper!'"
            4:
                story_text: "## Rock, paper, scissors\nIn this level we can further program rock, paper, scissors. But {if} you want to add text, you have to use quotation marks here too.\nDo you complete the code by entering the correct commands or characters on the underscores?\n"
                example_code: "```\nchoices {is} rock, paper, scissors\n{print} _ The computer chose: _ _ {at} _\n```\n"
                start_code: "{print} 'Welcome to your own rock scissors paper!'"
            3:
                story_text: "## Papier, kamień, nożyce\n\nNa tym poziomie możemy wprowadzać listy i wybierać z nich rzeczy.\nNajpierw tworzysz listę za pomocą `{is}`. Następnie możesz pozwolić komputerowi wybrać coś z listy za pomocą `{at} {random}`.\nNa przykład, możesz pozwolić komputerowi wybrać z listy papier, kamień lub nożyce.\n"
                example_code: "```\nmożliwości {is} papier, kamień, nożyce\n{print} możliwości  {at} {random}\n```\n"
                start_code: '{print} Witamy, w twojej własnej grze w papier, kamień, nożyce!'
                story_text_2: "## Wyzwanie\nObecnie masz tylko jednego gracza, czy możesz dodać drugiego?\nMożesz nawet użyć zmiennych, aby nazwać gracza 1 i gracza 2.\n"
                example_code_2: "```\nmożliwości {is} papier, kamień, nożyce\n{print} gracz 1 wybiera... możliwości  {at} {random}\n{print} gracz 2 _\n```\n"
            2:
                story_text: "## Papier, kamień, nożyce\nNa tym poziomie możesz poćwiczyć używanie zmiennych, dzięki będziesz mógł stworzyć grę w papier, kamień, nożyce w następnym poziomie!\n"
                example_code: "```\n_ {is} {ask} papier, kamień czy nożyce?\n{print} Ja wybrałam _\n```\n"
                start_code: '# umieść swój kod tutaj'
            15:
                story_text: "## Rock, Paper, Scissors\nPlay until you beat the computer! But first, finish the example code...\n"
                example_code: "```\nwon = 'no'\noptions = 'rock', 'paper', 'scissors'\n{while} won == 'no'\n    your_choice = {ask} 'What do you choose?'\n    computer_choice = options {at} {random}\n    {print} 'you chose ' your_choice\n    {print} 'the computer chose ' computer_choice\n    {if} computer_choice == your_choice\n        {print} 'Tie!'\n    {if} computer_choice == 'rock' {and} your_choice == 'scissors'\n        {print} 'You lose!'\n    {if} computer_choice == 'rock' {and} your_choice == 'paper'\n        {print} 'You win!'\n        won = 'yes'\n```\n"
                start_code: '# umieść tutaj swój kod'
            13:
                story_text: "## Rock, paper, scissors\nWith the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.\n"
                example_code: "```\nopcje = 'kamień', 'papier', 'nożyczki'\ntwój_wybór = {ask} 'Co wybierasz?'\nwybór_komputera = opcje {at} {random}\n{print} 'Ty wybrałeś ' twój_wybór\n{print} 'Komputer wybrał ' wybór_komputera\n{if} wybór_komputera {is} twój_wybór\n    {print} 'Remis'\n{if} wybór_komputera {is} 'kamień' {and} twój_wybór {is} 'papier'\n    {print} 'Ty wygrałeś!'\n{if} wybór_komputera {is} 'kamień' {and} twój_wybór {is} 'nożyczki'\n    {print} 'Komputer wygrał!'\n_\n```\n"
                start_code: '# umieść tutaj swój kod'
        name: Papier, kamień, nożyce
        description: Zrób własną grę w papier, kamień, nożyce
    calculator:
        name: Kalkulator
        levels:
            9:
                start_code: "{print} 'Welcome to this calculator!'"
                story_text: "## Calculator\nIn previous levels you've learned how to make a calculator, in this level you can expand that code and make it into a little maths game. Like this...\n"
                example_code: "```\nscore = 0\n{repeat} 10 {times}\n    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    number1 = numbers {at} {random}\n    number2 = numbers {at} {random}\n    correct_answer = number1 * number2\n    {print} 'What is ' number1 ' times ' number2 '?'\n    answer = {ask} 'Type your answer here...'\n    {print} 'Your answer is' answer\n    {if} answer {is} correct_answer\n        score = score + 1\n{print} 'Great job! Your score is... ' score ' out of 10!'\n```\n"
            12:
                start_code: '# umieść tutaj swój kod'
                story_text: "## Calculator\nNow you can make a calculator that works for decimal numbers.\n"
                example_code: "```\nnumber1 = {ask} 'What is the first number?'\nnumber2 = {ask} 'What is the second number?'\nanswer = number1 + number2\n{print} number1 ' plus ' number2 ' is ' answer\n```\n"
            14:
                story_text: "## Guess which number\nIn this level you can programm the game 'Guess which number'\n"
                example_code: "```\n{print} 'Guess which number'\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nnumber = numbers {at} {random}\ngame = 'on'\n{for} i {in} {range} 1 {to} 10\n    {if} game == 'on'\n        guess = {ask} 'Which number do you think it is?'\n        {if} guess > number\n            {print} 'Lower!'\n        {if} guess < number\n            {print} 'Higher!'\n        {if} guess == number\n            {print} 'You win!'\n            game = 'over'\n```\n"
                start_code: '# umieść tutaj swój kod'
            10:
                story_text: "## Calculator\nThis calculator game helps you practise your tables of multiplication!\nIf you add more numbers to the list, you can practise all the multiplications.\n"
                example_code: "```\nnumbers = 1, 2, 3\n{for} number1 {in} numbers\n    {for} number2 {in} numbers\n        answer = {ask} 'How much is ' number2 ' times ' number1 '?'\n        correct = number1 * number2\n        {if} answer {is} correct\n            {print} 'Great job!'\n        {else}\n            {print} 'Thats wrong. The right answer is ' correct\n```\n"
                start_code: '# umieść tutaj swój kod'
            6:
                story_text: "## Calculator\nNow that you can calculate, you can also create a program to practice maths calculations. You can make up the calculations yourself, for example:\n"
                example_code: "```\ncorrect_answer = 11 * 27\nanswer = {ask} 'How much is 11 times 27?'\n{if} answer {is} correct_answer {print} 'good job!'\n{else} {print} 'Wrong! It was ' correct_answer\n```\n"
                story_text_2: "## Random numbers\nYou can also let the computer do random sums on its own using random.\nThis is how you choose a number of tables to practice, and from that you always get a different sum:\n"
                example_code_2: "```\ntables = 4, 5, 6, 8\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\ntable = tables {at} {random}\nnumber = numbers {at} {random}\ncorrect_answer = table * number\nanswer = {ask} 'how much is ' table ' times ' number '?'\n{if} answer {is} correct_answer {print} 'okay'\n{else} {print} 'mistake! it was ' correct_answer\n```\n"
                start_code: "{print} 'Welcome to this calculator!'"
                story_text_3: "## Random numbers\nYou can also let the computer do random sums on its own using random.\nThis is how you choose a number of tables to practice, and from that you always get a different sum:\n"
                example_code_3: "```\ntables = 4, 5, 6, 8\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\ntable = tables {at} {random}\nnumber = numbers {at} {random}\ncorrect_answer = table * number\nanswer = {ask} 'how much is ' table ' times ' number '?'\n{if} answer {is} correct_answer {print} 'okay'\n{else} {print} 'mistake! it was ' correct_answer\n```\n"
            15:
                story_text: "## Calculator\nYou can add the `{while}` loop to the calculator game you've learned to make in a previous level.\nThis makes sure the player can't continue to the next question {if} they answer incorrectly.\n"
                example_code: "```\nscore = 0\n{for} i {in} {range} 0 {to} 9\n    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    number1 = numbers {at} {random}\n    number2 = numbers {at} {random}\n    correct = number1 * number2\n    answer = 0\n    {while} answer != correct\n        {print} 'How much is ' number1 ' times ' number2 '?'\n        answer = {ask} 'Fill in your answer:'\n        {print} 'Your answer is ' answer\n    {print} 'Good job!'\n{print} 'You win!'\n```\n"
                start_code: '# umieść tutaj swój kod'
        description: Stwórz kalkulator
        default_save_name: Kalkulator
    restaurant:
        levels:
            3:
                start_code: '# umieść swój kod tutaj'
                story_text: "# Losowa Restauracja\nMasz problem z podjęciem decyzji, co chcesz zjeść na obiad? Możesz pozwolić Hedy wybrać za Ciebie!\nPo prostu dodaj listę swoich ulubionych (lub najmniej ulubionych) potraw, a Hedy może losowo wybrać Twój obiad.\nMożesz się też trochę zabawić, pozwalając Hedy wybrać także cenę za obiad! Co dostaniesz?\n## Wyzwanie\nCzy potrafisz stworzyć własną wersję losowej restauracji?\n"
                example_code: "```\n{print} Witamy w Losowej Restauracji Hedy!\n{print} Jedyna taka restauracja w której wybierzemy twój obiad i jego cenę za ciebie całkowicie losowo!\nstarters {is} salad, soup, carpaccio\nmains {is} pizza, brussels sprouts, spaghetti\ndesserts {is} brownies, ice cream, french cheeses\ndrinks {is} cola, beer, water\nprices {is} 1 dollar, 10 dollars, 100 dollars\n{print} Rozpoczniesz od: starters {at} {random}\n{print} Następnie podamy: mains {at} {random}\n{print} A na deser: desserts {at} {random}\n{print} Do picia dosteniesz  drinks {at} {random} \n{print} Całość kosztuje: prices {at} {random}\n{print} Smacznego!\n```\n"
                story_text_2: "## Alergeny\nCzy Twój klient ma jakieś alergie lub nie lubi pewnych potraw? Wtedy możesz użyć komendy `{remove}`, aby usunąć je ze swojego menu.\n"
                example_code_2: "```\n{print} Tajemniczny shake\nsmaki {is} truskawkowy, czekoladowy, waniliowy\nalergie {is} {ask} Czy jesteś na coś uczulony?\n_\n{print} Dostaniesz  {at} {random} smami\n```\n"
            15:
                start_code: '# umieść tutaj swój kod'
                story_text: "## Restaurant\nWith the `{while}` you can make sure your costumers can keep adding orders until they are done.\n"
                example_code: "```\n{print} 'Welcome at McHedy'\nmore = 'yes'\n{while} more == 'yes'\n    order = {ask} 'What would you like to order?'\n    {print} order\n    more = {ask} 'Would you like to order anything {else}?'\n{print} 'Thank you!'\n```\n"
            1:
                story_text: "## Restauracja\n Na poziomie 1 możesz stworzyć swoją własną wirtualną restaurację i przyjmować zamówienia gości.\n"
                example_code: "``` \n{print} Witaj w restauracji Hedy \U0001F35F\n{ask} Co chcesz zamówić?\n{echo} A więc chcesz zamówić\n{print} Dziękuje za zamówienie!\n{print} Zaraz podamy!\n```\n"
                story_text_2: "## Wyzwanie\nCzy możesz wymyślić co jeszcze dodać do swojego kodu restauracji? Czy możesz na przykład zapytać  {ask} gości, co chcieliby wypić, podać cenę lub życzyć przyjemnego posiłku?\n"
                start_code: '# umieść swój kod tutaj'
            2:
                story_text: "## Restauracja\nNa poziomie 2 możesz rozbudować swoją restaurację za pomocą zmiennych. Na poziomie 1 Hedy mogła wyświetlić {echo} zamówienie tylko raz i pamiętała tylko ostatnią zamówioną rzecz.\nTeraz możesz używać zmiennych, a Hedy może zapamiętać zarówno co zamówiłeś do jedzenie, jak i do picia!\n"
                example_code: "```\n{print} Witamy w restauracji Hedy!\n{print} Dziś serwujemy pizzę lub lasagne.\njedzenie {is} {ask} Co chciałbyś zjeść?\n{print} Świetny wybór! Uwielbiam jedzenie!\ndodatki {is} {ask} Chciałbyś do tego mięso czy warzywa?\n{print} Juz przygotowuje jedzenie z dodatki!\n```\n"
                start_code: '# umieść swój tutaj'
                story_text_2: "## Wyzwanie\nCzy możesz uczynić ten kod bardziej rozbudowanym? Na przykład dodając napoje do zamówienia? Lub...?\n"
                example_code_2: "```\n{print} Witamy w restauracji Hedy!\n{print} Dziś serwujemy pizzę lub lasagne.\njedzenie {is} {ask} Co chciałbyś zjeść?\n{print} Świetny wybór! Uwielbiam jedzenie!\ndodatki {is} {ask} Chciałbyś do tego mięso czy warzywa?\n{print} Juz przygotowuje jedzenie z dodatki!\nnapój {is} _\n```\n"
            12:
                story_text: "## Restaurant\nFrom this level on you can use decimal numbers to make you menu more realistic.\n"
                example_code: "```\nprice = 0\nfood = {ask} 'What would you like to order?'\ndrink = {ask} 'What would you like to drink?'\n{if} food {is} 'hamburger'\n    price = price + 6.50\n{if} food {is} 'pizza'\n    price = price + 5.75\n{if} drink {is} 'water'\n    price = price + 1.20\n{if} drink {is} 'soda'\n    price = price + 2.35\n{print} 'That will be ' price ' dollar, please'\n```\n"
                start_code: '# umieść tutaj swój kod'
            11:
                story_text: "## Restaurant\nWe can use the `{for} i {in} {range} 1 {to} 5` to {print} the orders from multiple customers in an orderly manner.\n"
                example_code: "```\n{print} 'Welcome to Restaurant Hedy!'\npeople = {ask} 'For how many people would you like to order?'\n{for} i {in} {range} 1 {to} people\n    {print} 'Order number ' i\n    food = {ask} 'What would you like to eat?'\n    {print} food\n    {if} food {is} fries\n        sauce = {ask} 'What kind of sauce would you like with that?'\n        {print} sauce\n    drinks = {ask} 'What would you like to drink?'\n    {print} drinks\nprice = 4 * people\n{print} 'That will be ' price ' dollars, please!'\n```\n"
                start_code: '# umieść tutaj swój kod'
            10:
                story_text: "## Restaurant\nIn this level you'll learn how to easily {ask} your guests' orders in a short code.\n"
                example_code: "```\ncourses = appetizer, main course, dessert\n{for} course {in} courses\n    food = {ask} 'What would you like to eat as your ' course '?'\n    {print} food ' will be your ' course\n```\n"
                story_text_2: "Of course, you could also order for multiple people!\n"
                example_code_2: "```\ncourses = appetizer, main course, dessert\nnames = Timon, Onno\n{for} name {in} names\n    {for} course {in} courses\n        food = {ask} name ', what would you like to eat as your ' course '?'\n        {print} name ' orders ' food ' as their ' course\n```\n"
                start_code: courses = appetizer, main course, dessert
            9:
                story_text: "## Restaurant\nIn this level you can use nesting to make your restaurant more realistic and more fun!\nFor example you would {ask} for sauce {if} somebody orders fries, but you wouldn't {if} someone orders pizza!\nCheck out the example, and try this at your own virtual restaurant!\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people will be joining us today?'\n{print} 'Great!'\nprice = 0\n{repeat} people {times}\n    food = {ask} 'What would you like to order?'\n    {print} food\n    {if} food {is} fries\n        price = price + 3\n        sauce = {ask} 'What kind of sauce would you like with your fries?'\n        {if} sauce {is} no\n            {print} 'no sauce'\n        {else}\n            price = price + 1\n            {print} 'with ' sauce\n    {if} food {is} pizza\n        price = price + 4\n{print} 'That will be ' price ' dollar'\n{print} 'Enjoy your meal!'\n```\n"
                start_code: '# umieść tutaj swój kod'
            8:
                story_text: "## Restaurant\nIn this level you can make your virtual restaurant more elaborate by repeating multiple lines of code. Like this:\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people will be joining us today?'\n{print} 'Great!'\n{repeat} people {times}\n    food = {ask} 'What would you like to order?'\n    {print} food\n{print} 'Thank you for ordering!'\n{print} 'Enjoy your meal!'\n```\n"
                story_text_2: "## Challenge\nOf course, this code can be expanded with more items on the menu, offering drinks, and/or multiple courses, so feel free to add as many options as you like!\n"
                start_code: '# umieść tutaj swój kod'
            7:
                story_text: "## Restaurant\nIn this level you've learned how to use the {repeat} command to repeat a line of code a certain amount of times.\nYou can use that in your restaurant to {ask} multiple people what they'd like to eat. Like this:\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\npeople = {ask} 'How many people are joining us today?'\n{repeat} people times food = {ask} 'What would you like to eat?'\n{print} 'Thanks for your order! Its coming right up!'\n```\n"
                start_code: '# umieść tutaj swój kod'
            6:
                story_text: "## Restaurant\nIn this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.\n"
                example_code: "## Example Hedy code (Simple)\nYou can make a simple restaurant code, like this:\n```\n{print} 'Welcome to Hedys restaurant'\n{print} 'Here is our menu:'\n{print} 'Our main courses are pizza, lasagne, or spaghetti'\nmain = {ask} 'Which main course would you like?'\nprice = 0\n{if} main {is} pizza price = 10\n{if} main {is} lasagne price = 12\n{if} main {is} spaghetti price = 8\n{print} 'You have ordered ' main\n{print} 'That will be ' price ' dollars, please'\n{print} 'Thank you, enjoy your meal!'\n```\n"
                story_text_2: "But you can also add many more things to your virtual restaurant, for example more courses.\n\n## Challenge\nYou can add many more things to your virtual restaurant. For example, can you...\n- {ask} how many people are coming and multiply the price by that amount?\n- add another course?\n- give people a discount when they enter a (secret) couponcode?\n- add a children's menu?\n- think of other fun things to add?\n"
                example_code_2: "## Example Hedy code (Elaborate)\nIn this example there are three courses, which requires more code and more additions in calculating the price.\n```\n{print} 'Welcome to Hedys restaurant'\n{print} 'Here is our menu:'\n{print} 'Our starters are salad, soup, or carpaccio'\n{print} 'Our main courses are pizza, lasagne, or spaghetti'\n{print} 'Our desserts are brownie, icecream, or milkshake'\nstarter = {ask} 'Which starter would you like to have?'\nmain = {ask} 'Which main course would you like?'\ndessert = {ask} 'Which dessert do you pick?'\nprice = 0\n{if} starter {is} soup price = price + 6 {else} price = price + 7\n{if} main {is} pizza price = price + 10\n{if} main {is} lasagne price = price + 12\n{if} main {is} spaghetti price = price + 8\n{if} dessert {is} brownie price = price + 7\n{if} dessert {is} icecream price = price + 5\n{if} dessert {is} milkshake price = price + 4\n{print} 'You have ordered ' starter ' , ' main ' and ' dessert\n{print} 'That will be ' price ' dollars, please'\n{print} 'Thank you, enjoy your meal!'\n```\n"
                start_code: '# umieść tutaj swój kod'
            5:
                story_text: "## Restaurant\nIn this level the {if} command allows you to {ask} your customers questions and give different responses to the answers.\nIn the example below, you see that you can {ask} the customer {if} they want to hear the specials and Hedy can respond accordingly.\n"
                example_code: "```\n{print} 'Welcome to Hedys restaurant!'\nspecial {is} {ask} 'Would you like to hear our specials today?'\n{if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'\nfood {is} {ask} 'What would you like to eat?'\n{print} 'One ' food ', coming right up!'\ndrink {is} {ask} 'What would you like to drink with that?'\n{if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'\nanything {is} {ask} 'Would you like anything {else}?'\n{print} 'Let me repeat your order...'\n{print} 'One ' food\n{if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink\n{if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything\n{print} 'Thank you for your order and enjoy your meal!'\n```\n"
                story_text_2: "## Challenge\nCan you think of more questions to {ask} the customers when they are ordering, and make up different responses to their answers by using the {if} command?\n"
                start_code: '# umieść tutaj swój kod'
            4:
                story_text: "## Restaurant\nIn this level you have to use quotation marks when using the `{print}` command.\nCan you make your code from the previous levels work in this level too by adding the quotation marks?\n\nBe careful! In the previous levels apostrophes were allowed in the text, but in this level Hedy will confuse them for quotation marks and the code will not work!\nSo instead of typing  `{print} Today we're serving pizza` , you should type `{print} 'Today we are serving pizza'`\n"
                example_code: "## Example Hedy Restaurant\n```\n{print} 'Welcome to Hedys restaurant!'\n{print} 'Today we are serving pizza or lasagna.'\nfood {is} {ask} 'What would you like to eat?'\n{print} 'Great choice! The ' food ' is my favorite!'\ntopping {is} {ask} 'Would you like meat or veggies on that?'\n{print} food ' with ' topping ' is on its way!'\ndrinks {is} {ask} 'What would you like to drink with that?'\n{print} 'Thank you for your order.'\n{print} 'Your ' food ' and ' drinks ' will be right there!'\n```\n"
                start_code: '# umieść tutaj swój kod'
            13:
                story_text: "## Restaurant\nIn this level we can use the new commands to upgrade our restaurant.\nWe use `{and}` to see {if} two things are both the case.\n"
                example_code: "```\nprice = 10\nfood = {ask} 'What would you like to eat?'\ndrinks = {ask} 'What would you like to drink?'\n{if} food {is} 'sandwich' {and} drinks {is} 'juice'\n    {print} 'Thats our discount menu'\n    price = price - 3\n{print} 'That will be ' price ' dollars'\n```\n"
                story_text_2: "We use `{or}` to see {if} one our of two things is the case.\n"
                example_code_2: "```\ndrinks = {ask} 'What would you like to drink?'\n{if} drinks {is} 'water' {or} drinks {is} 'juice'\n    {print} 'Thats a healthy choice'\n```\n"
                start_code: '# umieść tutaj swój kod'
        name: Restauracja
        description: Stwórz swoją własną wirtualną restaurację
        default_save_name: Restauracja
    fortune:
        levels:
            8:
                start_code: '# umieść tutaj swój kod'
                story_text: "## Fortune Teller\nIn the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.\nNow that problem is solved, because of the new way of using the repeat command.\nIn the next example you can have your fortune teller {ask} 3 questions and also print them!\n"
                example_code: "```\n{print} 'I am Hedy the fortune teller!'\n{print} 'You can {ask} me 3 questions.'\nanswers = yes, no, maybe\n{repeat} 3 {times}\n   question = {ask} 'What do you want to know?'\n   {print} question\n   {sleep}\n   {print} 'My crystal ball says...' answers {at} {random}\n```\n"
            7:
                story_text: "## Fortune Teller\nIn this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'You can {ask} 3 questions!'\n{repeat} 3 {times} question = {ask} 'What do you want to know?'\nanswer = yes, no, maybe\n{repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}\n```\n"
                story_text_2: "## Challenge\nAs you can see, the questions aren't printed in this example. That's because the variable `question` was changed 3 times.\nEvery time the player fills in the new answer, Hedy overwrites the previous one, so the first answer the player gave is forgotten.\nThis means you can't print all the questions this way.\n\nBy using 3 different variables instead of 1 (for example `question_1` , `question_2` and `question_3`), you could solve the problem and print the questions.\nThis does mean that you can only use `{repeat}` for the answers, and you will have to ask and print all the questions separately.\nCan you do it?\n\nIn the upcoming levels the layout of {repeat} command will change, which enables you to repeat multiple lines at once.\n"
                start_code: '# umieść tutaj swój kod'
            4:
                start_code: '# umieść tutaj swój kod'
                story_text: "## Fortune Teller\nThis level has no new functions, but allows you to practice with using the quotation marks.\nYou can remake your level 3 code, and make sure to add the quotation marks in the right places!\n\nMind that in level 3, we couldn't use the word 'question' as both the name of the variable and a normal word that could be printed.\nThe quotation marks in level 3 make this possible!\n\nImportant! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.\nMake sure to remove those apostrophes and change the spelling to Im or Whats.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\nquestion {is} {ask} 'What do you want to know?'\n{print} 'This is your question: ' question\nanswers {is} yes, no, maybe\n{print} 'My crystal ball says...'\n{sleep} 2\n{print} answers {at} {random}\n```\n"
            1:
                story_text: "## Wróżka\nCzy byłeś kiedyś w wesołym miasteczku i wróżka przepowiedziała Ci przyszłość? Albo czy kiedykolwiek grałeś magiczną ósemką?\nWtedy prawdopodobnie wiesz, że tak naprawdę nie mogą one przewidzieć twojej przyszłości, ale nadal jest to zabawne!\n\nW najbliższych poziomach możesz nauczyć się jak stworzyć własną maszynę do wróżenia!\nW poziomie 1 możesz zacząć łatwo, pozwalając Hedy przedstawić się jako wróżka i pozwolić jej odpowiedzieć {echo} odpowiedziami graczy.\nNa przykład tak:\n"
                example_code: "```\n{print} Cześć, jestem wróżka Hedy!\n{ask} A ty kim jesteś?\n{print} Pozwól mi spojrzeć w moją kryształową kulę\n{print} Wiedzę... Widzę...\n{echo} Masz na imię\n```\n"
                story_text_2: "## Wyzwanie\nHedy mówi ci teraz tylko twoje imię. Czy możesz rozszerzyć kod tak, aby Hedy mogła przewidzieć więcej rzeczy o Tobie?\nOczywiście Hedy nie jest jeszcze zbyt dobrą wróżką, ponieważ potrafi tylko powtarzać odpowiedzi, które zostały udzielone przez graczy!\nZajrzyj do poziomu 2, aby udoskonalić swoją wróżbę.\n"
                start_code: '# umieść swój kod tu'
            12:
                story_text: "## Fortune Teller\nIn this level you can make your fortunes multiple words. Like in this example below:\n"
                example_code: "```\nfortunes = 'you will be rich', 'you will fall in love', 'you will slip on a banana peel'\n{print} 'I will take a look in my crystall ball for your future.'\n{print} 'I see... I see...'\n{sleep}\n{print} fortunes {at} {random}\n```\n"
                start_code: '# umieść tutaj swój kod'
            10:
                story_text: "## Fortune Teller\nIn this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.\n"
                example_code: "```\nhouses = mansion, apartment, shack, house\nloves = nobody, a royal, their neighbour, their true love\npets = dog, cat, elephant\nnames = Jenna, Ryan, Jim\n{for} name {in} names\n    {print} name ' lives in a ' houses {at} {random}\n    {print} name ' will marry ' loves {at} {random}\n    {print} name ' will get a ' pets {at} {random} ' as their pet.'\n    {sleep}\n```\n"
                story_text_2: We can also make a Harry Potter themed fortune teller.
                example_code_2: "```\nhouses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw\nsubjects = potions, defence against the dark arts, charms, transfiguration\nfears = Voldemort, spiders, failing your OWL test\nnames = Harry, Ron, Hermione\n{for} name in names\n    {print} name ' is placed in ' houses {at} {random}\n    {print} name ' is great at ' subjects {at} {random}\n    {print} name 's greatest fear is ' fears {at} {random}\n```\n"
                start_code: '# umieść tutaj swój kod'
            6:
                story_text: "## Fortune Teller\nIn this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.\nFor example you could calculate how rich you'll get or how many kids you will have when you grow up.\n"
                example_code: "```\n{print} 'I am Hedy the fortune teller!'\n{print} 'I can predict how many kids youll get when you grow up!'\nage = {ask} 'How old are you?'\nsiblings = {ask} 'How many siblings do you have?'\nlength = {ask} 'How tall are you in centimetres?'\nkids = length / age\nkids = kids - siblings\n{print} 'You will get ...'\n{sleep}\n{print} kids ' kids!'\n```\n\n## Example Silly Fortune Teller\nIf the previous example wasn't silly enough for you, take a look at this one!\n\n```\n{print} 'Im Hedy the silly fortune teller!'\n{print} 'I will predict how smart you are!'\nfootball = {ask} 'On a scale 1-10 how much do you love football?'\nbananas = {ask} 'How many bananas did you eat this week?'\nhygiene = {ask} 'How many times did you wash your hands today?'\nresult = bananas + hygiene\nresult = result * football\n{print} 'You are ' result ' percent smart.'\n```\n"
                start_code: '# umieść tutaj swój kod'
            5:
                start_code: '# umieść tutaj swój kod'
                story_text: "## Fortune Teller\nIn this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!\nBy using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.\nCheck out this example to find out how.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'I can predict {if} youll win the lottery tomorrow!'\nperson {is} {ask} 'Who are you?'\n{if} person {is} Hedy {print} 'You will definitely win!\U0001F929' {else} {print} 'Bad luck! Someone {else} will win!\U0001F62D'\n```\n"
                story_text_2: "## Hack the program\nReplace Hedy with your own name in the last line, and Hedy will always predict that you will win the lottery and others won't!\nOf course this might raise some suspicion with the other players... To avoid that, you can make sure that Hedy does give different answers every time you run the code.\nBut of course, still gives you a positive answer and the other players a negative one.\n"
                example_code_2: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'I can predict {if} you will win the lottery tomorrow!'\nperson {is} {ask} 'Who are you?'\ngoodanswer {is} Hurray! You win!, You will definitely win!, We have a winner!\nbadanswer {is} Bad luck! Try again!, Another person will win, You lose!\n{if} person {is} Hedy {print} goodanswer {at} {random} {else} {print} badanswer {at} {random}\n```\n"
                story_text_3: "## Challenges\nThis concept can be used to make may different programs, just be creative! For example you could create a machine that predicts that your favorite sports team will beat all the competitors!\nOr you could make  Snow White's magic mirror on the wall, to tell everyone you are the fairest of them all!\nLet your imagination do the work!\n"
            3:
                story_text: "## Fortune Teller\nIn the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.\nIn this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:\n"
                example_code: "In this example the player can {ask} Hedy a yes-no question and Hedy will pick a random answer for you.\n```\n{print} I’m Hedy the fortune teller!\nquestion {is} {ask} What do you want to know?\n{print} This is what you want to know: question\nanswers {is} yes, no, maybe\n{print} My crystal ball says...\n{sleep} 2\n{print} answers {at} {random}\n```\n"
                story_text_2: "## Challenges\nNow, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.\n"
                start_code: '# umieść tutaj swój kod'
        name: Wróżka
        description: Niech Hedy przewidzi przyszłość
        default_save_name: Wróżka
    haunted:
        levels:
            11:
                start_code: "{print} 'Escape from the haunted house!'"
                story_text: "## Haunted House\nIn this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.\n"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nplayer {is} alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{for} i {in} {range} 1 {to} 3\n    {if} player {is} alive\n        correct_door = doors {at} {random}\n        {print} 'Room ' i\n        {print} 'There are 3 doors in front of you...'\n        chosendoor = {ask} 'Which door do you choose?'\n        {if} chosendoor {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n"
            9:
                story_text: "## Haunted House\nIn this level you can use nesting, which allows you to make the haunted house even more interactive!\n\n## Challenge\nNow it's very hard to win this game, can you make it easier to win?\nFor example by only having 1 wrong door and 2 correct doors instead of 1 correct door en 2 wrong ones?\n"
                start_code: "{print} 'Escape from the haunted house!'"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nplayer = alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{repeat} 3 {times}\n    {if} player {is} alive\n        correct_door {is} doors {at} {random}\n        {print} 'There are 3 doors in front of you...'\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} chosen_door {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n"
            16:
                start_code: '# umieść tutaj swój kod'
                story_text: "## Haunted House Game\nThis haunted house game uses the connection between the lists you can use in this level.\nFor example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.\nCheck out the code!\n"
                example_code: "```\nnumbers = [1, 2, 3]\ni = numbers[random]\nhint = ['growling', 'a cackling laugh', 'fluttering batwings']\nmonsters = ['zombie', 'witch', 'vampire']\nbad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']\ngood_fate = ['You throw the ham. The zombie is distracted and starts etaing it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']\nweapons = ['ham', 'lighter', 'garlic']\n{print} 'You are standing in front of an old mension'\n{print} 'Something is not right here'\n{print} 'You hear ' hint[i]\n{print} 'You are going to explore it'\n{print} 'You enter the kitchen en see a lighter, a raw ham and a garlic.'\nyour_weapon = {ask} 'What do you bring with you?'\n{print} 'With your ' your_weapon ' you enter the living room'\n{print} 'There you find a ' monsters[i]\nneeded_weapon = weapons[i]\n{if} your_weapon == needed_weapon\n    {print} 'You use your ' your_weapon\n    {print} good_fate[i]\n    {print} 'YOU WIN!'\n{else}\n    {print} 'You have chosen the wrong weapon...'\n    {print} bad_fate[i]\n    {print} 'GAME OVER'\n```\n"
            1:
                story_text: "## Nawiedzony dom\nW tej przygodzie pracujesz nad stworzeniem gry, w której musisz uciec z nawiedzonego domu wybierając właściwe drzwi.\nJeśli wybierzesz właściwe drzwi, przeżyjesz, ale jeśli nie, straszny potwór może...\n\nW poziomie 1 zaczynamy naszą grę w nawiedzony dom przez wymyślenie strasznej historii i zapytania gracza jakiego potwora zobaczą w nawiedzonym domu.\n"
                example_code: "```\n{print} Jak się tu dostałem?\n{print} Pamiętam, jak przyjaciel powiedział mi, że mam wejść do starej rezydencji...\n{print} i nagle wszystko stało się czarne.\n{print}  Ale jak wylądowałem na podłodze...?\n{print} Strasznie boli mnie głowa, jakby ktoś walnął mnie kijem!\n{print} Co to za dźwięk?\n{print} O nie! Chyba nie jestem sam w tym domu!\n{print} Muszę się stąd wydostać!\n{print} Przede mną są 3 drzwi...\n{ask} Które drzwi powinienem wybrać?\n{echo} Wybieram drzwi\n{print} ...?\n```\n"
                story_text_2: "## Wyzwanie\nMożesz dokończyć przerażającą historię? Albo wymyślić własną?\n"
                start_code: '{print} Jak się tu znalazłem?'
            2:
                story_text: "## Nawiedzony dom\nW tym nawiedzonym domu możesz wybierać swoje potwory za pomocą emotikonów. Oczywiście możesz też użyć słów.\n"
                example_code: "```\npotwór_1 {is} \U0001F47B\npotwór_2 {is} \U0001F921\npotwór_3 {is} \U0001F476\n{print} Wchodzisz do nawiedzonego domu..\n{print} Nagle widzisz potwór_1\n{print} Uciekasz do innego pokoju, ale potwór_2 czeka na ciebie!\n{print} O nie! Szybko idź do kuchni.\n{print} Ale jak wchodzisz zaatakował ciebie potwór_3!\n```\n"
                start_code: potwór1 {is} _
                story_text_2: "## Wyzwanie\nW powyższym przykładzie potwory są z góry określone. Tak więc za każdym razem, gdy uruchamiasz swój kod, wynik jest taki sam.\nCzy możesz dodać polecenia `{ask}`, aby nawiedzony dom był interaktywny i aby gracze wybierali potwory, które napotkają?\n"
                example_code_2: "```\npotwór_1 {is} _\npotwór_2 {is} _\npotwór_3 {is} _\n{print} Wchodzisz do nawiedzonego domu..\n{print} Nagle widzisz potwór_1\n{print} Uciekasz do innego pokoju, ale potwór_2 czeka na ciebie!\n{print} O nie! Szybko idź do kuchni.\n{print} Ale jak wchodzisz zaatakował ciebie potwór_3!\n```\n"
            14:
                story_text: "## Haunted House\nIn this level you can use the `<` and `>` symbol to introduce lives to your game.\n"
                example_code: "```\n{print} 'Escape from the haunted house'\nlives = 3\ndoors = 1, 2, 3\nmonsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'\n{for} i {in} {range} 1 {to} 10\n    {if} lives > 0\n        good_door = doors {at} {random}\n        monster = monsters {at} {random}\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} good_door == chosen_door\n            {print} 'You have chosen the correct door'\n        {else}\n            {print} 'You see...' monster\n            {if} monster == 'a sleeping 3 headed dog'\n                {print} 'Pffieuw.... Its asleep'\n            {else}\n                {print} 'You lose one life'\n                lives = lives -1\n    {else}\n        {print} 'GAME OVER'\n```\n"
                start_code: '# umieść tutaj swój kod'
            5:
                story_text: "## Haunted House\nUp until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.\nIf the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).\nIn this level you can only win the game by picking the same door Hedy picked randomly.\n"
                example_code: "```\n{print} 'Escape from the haunted house!'\n{print} 'There are 3 doors in front of you...'\ndoors {is} 1, 2, 3\nmonsters {is} werewolf, mummy, vampire, zombie\nchosen_door {is} {ask} 'Which door do you choose?'\n{print} 'You chose door...' chosen_door\n{sleep}\ncorrect_door {is} doors {at} {random}\n{if} chosen_door {is} correct_door {print} 'Great! Youve escaped!'\n{else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}\n```\n"
                start_code: '# umieść tutaj swój kod'
            4:
                story_text: "## Haunted house\nIn this level you learn how to use quotation marks in your games.\nCan you make your Haunted House level 4 proof?\n"
                example_code: "```\n{print} _Escape from the haunted house!_\n{print} _There are 3 doors in front of you..._\nchoice {is} {ask} _Which door do you choose?_\n{print} _You picked door ..._ choice\nmonsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED\n{print} _You see..._\n{sleep}\n{print} monsters {at} {random}\n ```\n"
                start_code: '# umieść tutaj swój kod'
            3:
                story_text: "## Gra w nawiedzony dom\nNa poprzednich poziomach zrobiłeś wprowadzenie do gry w nawiedzony dom, ale jak mogłeś zauważyć, historia zawsze miała straszny koniec.\nNa tym poziomie możesz uczynić swoją historię bardziej interaktywną, zmieniając wynik gry; czasami zostaniesz zjedzony, czasami uciekniesz!\nNiech Hedy decyduje losowo!\n"
                example_code: "```\n{print} Escape from the haunted house!\n{print} There are 3 doors in front of you...\nchoice {is} {ask} Which door do you choose?\n{print} You picked door ... choice\nmonsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED\n{print} You see...\n{sleep}\n{print} monsters {at} {random}\n```\n"
                story_text_2: "## Challenge\nThis story is pretty straight {forward}, maybe you can spook it up a bit by adding a more exciting story.\nAlso you have very limited outcomes right now, there are only 3 options of what's behind the doors. Maybe you can think of more monsters to add to the list!\n\n## Change the game into a tv gameshow!\nLastly, we'd like to challenge you to change this game into a gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!\nCan you do it?\n"
                start_code: '# umieść tutaj swój kod'
                story_text_3: "## Change the game into a tv gameshow!\nLastly, we'd like to challenge you to change this game into a gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!\nCan you do it?\n"
                example_code_3: "```\n{print} The big gameshow!\n{print} There are 3 suitcases in front of you...\n{print} One of them contains _\n_\n```\n"
        name: Nawiedzony dom
        description: Ucieknij z nawiedzonego domu
        default_save_name: Nawiedzony dom
    story:
        levels:
            10:
                example_code: "```\nanimals = red bird, black sheep, green frog, yellow duck, little child\n{print} 'brown bear'\n{print} 'brown bear'\n{print} 'What do you see?'\n{for} animal {in} animals\n    {print} 'I see a ' animal ' looking at me'\n    {print} animal\n    {print} animal\n    {print} 'What do you see?'\n{print} 'I see all the animals looking at me!'\n```\n"
                story_text: "## Opowieść\nW tym poziomie możesz użyć polecenia {for} w swojej opowieści. Dzięki tej komendzie mógłbyś bardzo prosto zaprogramować część wierszyka \"Sroczka kaszkę warzyła\".\n"
                start_code: '# tutaj umieść swój kod'
            1:
                story_text: "## Stwórz opowieść\nNa poziomie 1 możesz stworzyć opowieść z różnymi postaciami które stworzysz samodzielnie.\n\nW pierwszej linii użyj polecenia `{ask}` i zapytaj kto będzie głównym bohaterem twojej opowieści.\nKolejne linie zacznij od polecenia `{print}` jeżeli chcesz wyświetlić tekst.\nUżyj polecenia `{echo}` jeżeli chcesz aby imię twojego bohatera znalazło się na końcu wypowiedzi.\n"

                example_code: "```\n{ask} Głównym bohaterem historii jest\n{print} Główny bohater idzie przez las\n{echo} Jest troszkę przestraszony,\n{print} Wszędzie słyszy jakieś dziwnie odgłosy\n{print} Obawia się że to jest nawiedzony las\n```\n"
                start_code: '{print} Historyjka zaczyna się tutaj'
                story_text_2: "## Ćwiczenie\nCzy możesz teraz stworzyć własną opowieść w Hedy, używając `{print}` , `{ask}` i`{echo}`?\n"
            2:
                story_text: "## Historyjka\nNa poziomie 2. Twoja opowieść może być znacznie zabawniejsza. Imię głównego bohatera może pojawić się w dowolnym miejscu w zdaniu.\n\nTrzeba będzie napisać nieco więcej kodu . Musisz zapytać o imię głównego bohatera zanim będziesz mógł wykorzystać je w zdaniu.\n\nPotem będziesz mógł użyć imienia w dowolnym miejscu w zdaniu.\n\n## Ćwiczenie\nCzy możesz sam stworzyć opowieść używając zmiennej? Czy możesz dodać jeszcze więcej zmiennych?\n"
                example_code: "```\nimię {is} {ask} Jak nazywa się główny bohater?\n{print} imię biega teraz po lesie\n{print} imię trochę się boi\n{print} Nagle imię usłyszał dziwny dźwięk...\n{sleep}\n{print} imię obawia się, że las może być nawiedzony\n```"
                start_code: '{print} Twoja historyjka'
            12:
                story_text: "## Opowieść\nW tym poziomie możesz użyć cudzysłowy, żeby przypisac wiele słów do jednej zmiennej."
                example_code: "\n```\nname = 'The Queen of England'\n{print} name ' was eating a piece of cake, when suddenly...'\n```\n"
                start_code: '# tutaj umieść swój kod'
            9:
                story_text: "## Opowieść\nW tym poziomie możesz użyć poleceń `{if}` and `{repeat}` wewnątrz innych poleceń `{if}` oraz `{repeat}`.\nDzięki temu możesz jeszcze bardziej urozmaicić swoją opowieść.\n\n### Cwiczenie 1\nUzupełnij kod tak, aby polecenie `{if}` działało poprawnie.\n\n### Cwiczenie 2\nDodaj polecenie `{if}` oraz `{else}` do części opowiadania, gdzie Robin wraca do domu.\n\n### Cwiczenie 3\nWróć do swojej opowiadania z poziomu 8 i użyj co najmniej dwóch poleceń `{if}` wewnątrz innego polecenia `{if}`.\n"
                example_code: "```\n{print} 'Robin idzie wzdłuż ulicy'\nlokalizacja = {ask} 'Czy Robin idzie do sklepu, czy wraca do domu?'\n{if} lokalizacja {is} sklep\n    {print} 'Wchodzi do sklepu.'\n    {print} 'Robin widzi ciekawą książkę'\n    książka = {ask} 'Czy Robin kupuje książkę?'\n    {if} książka {is} tak\n    _ {print} 'Robin kupuje książkę i wraca do domu'\n    _ {else}\n    _ {print} 'Robin opuszcza sklep i wraca do domu'\n{else}\n    {print} 'Robin wraca do domu'\n```\n"
                start_code: '# tutaj umieść swój kod'
            8:
                story_text: "## Opowieść\nW tym poziomie masz możliwość napisania wielu lini kodu wewnątrz polecenia {if}. Dzięki temu możesz urozmaicić szczęśliwe i tragiczne zakończenia Twojej opowieści.\n\n## Ćwiczenie 1\nPrzykładowy kod pokazuje dwa różne zakończenia; jedno, w którym bohaterowie skaczą w czasie przy użyciu maszyny czasu, a drugie, w którym tego nie robią.\nUzupełnij puste miejsca co najmniej jednym zdaniem na każde zakończenie.\n**(dodatkowe)** Utwórz dłuższą opowieść. Co się w niej dzieje? Możesz także dodać drugie polecenie `{ask}` z innymi opcjami.\n\n## Ćwiczenie 2\nWróć do swoich zapisanych programów, wybierz program z opowieścią z poziomu 5. Napisz w nich dobre oraz złe zakończenia, każde z co najmniej trzema liniami kodu! \n"
                example_code: "```\n{print} 'O, nie! Tyranozaur Rex zbliża się!'\nzakończenie = {ask} 'Czy chcesz zakończenie szczęśliwe czy smutne?'\n{if} zakończenie {is} szczęśliwe\n    {print} 'W ostatnim momencie Richard wraca do maszyny czasu!'\n    {print} _\n{else}\n    {print} 'O, nie! Richard jest zbyt wolny...'\n    {print} _\n```\n"
                start_code: '# tutaj umieść swój kod'
            7:
                story_text: "## Opowieść\nW niektorych opowieściach, bohaterowie czasem powtarzają wybrany zwrot kilka razy. Przykładem tego jest bohater wołający o pomoc lub też śpiewający piosenkę.\nMożesz stworzyć takie powtórzenia w swojej opowieści przy użyciu polecenia `{repeat}`.\n\n## Ćwiczenie\nDodaj powtórzenia do Twojej opowieści. Wróć do swoich zapisanych programów i wybierz Twój program z opowieścią z poziomu 6 i znajdź linię zawierającą polecenie `{print}` i powtórz ją!\n"
                example_code: "```\n{print} 'The prince kept calling for help'\n{repeat} 5 {times} {print} 'Help!'\n{print} 'Why is nobody helping me?'\n```\n"
                start_code: "{repeat} 5 {times} {print} 'Help!'"
            5:
                story_text: "## Opowieść\nW tym poziomie możesz zaprogramować różne zakończenia, które sprawią, że Twoja opowieść jest bardziej interestująca.\n\n## Ćwiczenie\nWymyśl dwa różne zakonczenia dla swojej opowieści, na przykład:\n\n- Księżniczka przechadza się przez las\n- Napotyka potwora\n\n- Szczęśliwe zakończenie: Księżniczka wyciąga swój miecz i potwór ucieka\n- Tragiczne zakończenie: Potwór zjada księżniczkę\n\nMożesz też dodać możliwość podania nowego imienia. Działa to tak samo jak w poprzednich poziomach. Mozesz też to połączyć z poleceniem `{if}` i dzięki temu otrzymasz pełny program.\n"
                example_code: "```\nimię {is} {ask} 'Kto idzie przez las?'\n{print} imię ' idzie przez las'\n{print} imię ' spotyka potwora'\nzakończenie {is} {ask} 'Czy chciałbyś dobre albo złe zakończenie?'\n{if} zakończenie {is} dobre {print} imię ' wyciąga miecz i potwór ucieka'\n{else} {print} 'Potwór zjada ' imię\n```\n"
                start_code: "{print} 'Tutaj jest początek Twojej opowieści!'"
            4:
                story_text: "## Opowieść\nMogłeś zauważyć, że w poprzednich poziomach polecenie `{print}` miał pewien problem. Czy próbowałeś napisać zdanie które zawierało słowo “imię”? Na przykład `{print}` moje imię to imię.\nW tym poziomie możesz rozwiązać ten problem. Wystarczy, że użyjesz cudzysłowie dookoła tekstu, który chciałbyś wyświetlić.\n"
                example_code: "```\nimię {is} Hans\n{print} _ Główny bohater ma na imię _ imię\n{print} imię _ idzie na spacer do lasu _\n{print} imię _ jest strachliwy _\nzwierzęta {is} \U0001F994, \U0001F43F, \U0001F989, \U0001F987\n{print} _ Słyszy dźwięk _ zwierzęta {at} {random}\n{print} name _ obawia się, że jest w nawiedzonym lesie _\n```\n"
                start_code: "{print} 'Twoja opowieść będzie tutaj napisana!'"
            3:
                story_text: "## Historyjka\nNa poziomie 3. Twoja historyjka może być jeszcze zabawniejsza. Możesz wybrać losowo potwora, zwierzę oraz inne utrudnienia, tak jak w przykładzie:\n"
                example_code: "```\nzwierzęta {is} \U0001F994, \U0001F43F, \U0001F989, \U0001F987\n{print} Teraz słyszy odgłos zwierzęta {at} {random}\n```\n"
                story_text_2: "Komenda `{add}` może się przydać w historyjce.\n"
                example_code_2: "```\n{print} On słyszy odgłos\nzwierzęta {is} \U0001F43F, \U0001F994, \U0001F987, \U0001F989\nzwierzę {is} {ask} Co to było?\n{add} zwierzę {to_list} zwierzęta\n{print} To był odgłos zwierzęta {at} {random}\n```\n"
                story_text_3: "To jest przykład polecenia `{remove}` w twojej opowieści\n\n## Ćwiczenie\nCzy możesz użyć 3 nowych poleceń `{at} {random}` , `{add} {to}` i `{remove} {from}` we własnej opowieści\n"
                example_code_3: "```\n{print} Jego plecak stał się zbyt ciężki.\n{print} W środku była butelka wody, latarka i cegła.\nplecak {is} woda, latarka, cegła\nwyrzuc {is} {ask} Który przedmiot powinien wyrzucić?\n{remove} wyrzuc {from} plecak\n```\n"
                start_code: '{print} Twoja histora'
            15:
                story_text: "## Opowieść\nPrzy użyciu pętli `{while}` możesz stworzyć jeszcze bardziej wciągające opowieści. Na przykład, możesz użyć `{while} gra {is} 'działa'` żeby kontynuwać grę aż się zakończy.\nAlternatywnie możesz napisać `{while} miecz {is} 'zagubiony'` żeby nie pozwolić graczowi kontynuwać zanim znajdą miecz.\n"
                example_code: "```\nkeys = 'lost'\n{print} 'You are standing in your garden and you have lost your keys.'\n{print} 'Where do you want to look for them?'\n{print} 'You can choose: tree, flowerbed, rock, postbox'\n{while} keys == 'lost'\n    location = {ask} 'Where do you want to look?'\n    {if} location == 'flowerbed'\n        {print} 'Here they are!'\n        keys = 'found'\n    {else}\n        {print} 'Nope they are not at the ' location\n{print} 'Now you can enter the house!'\n```\n"
                start_code: '# tutaj umieść swój kod'
            13:
                story_text: "## Opowieść\nUżywając poleceń `{and}` oraz `{or}` możesz skrócić swoje opowieści. Na przykład, zobacz opowieść o smoku.\n\n### Ćwiczenie\nCzy potrafisz zrobić podobną grę przygodową?\n"
                example_code: "```\nsword = 'lost'\ngame = 'on'\n{print} 'Our hero is walking through the forest'\n{print} 'The path splits two ways'\n{for} i {in} {range} 0 {to} 2\n    {if} game {is} 'on'\n        path = {ask} 'Which path should she choose?'\n        {if} path {is} 'left' {and} sword {is} 'found'\n            {print} 'Our hero comes across a dragon!'\n            {print} 'Luckily our hero has a sword to defeat the beast!'\n            game = 'over'\n        {if} path {is} 'left' {and} sword {is} 'lost'\n            {print} 'Our hero finds a dragon, but she doesnt have any weapons!'\n            {print} 'Our hero is beaten by the dragon...'\n            {print} 'Try again'\n            game = 'over'\n        {if} path {is} 'right' {and} sword {is} 'found'\n            {print} 'You have already found the sword. There is nothing left here.'\n            {print} 'She walks back'\n        {if} path {is} 'right' {and} sword {is} 'lost'\n            {print} 'Our hero finds a sword'\n            {print} 'This could come in very handy'\n            sword = 'found'\n```\n"
                start_code: '# tutaj umieść swój kod'
        name: Historyjka
        description: Stwórz krótką historyjkę
        default_save_name: Historyjka
    parrot:
        name: Papuga
        description: Stwórz swoja własną cyfrową papugę która powtórzy wszystko co powiesz!
        default_save_name: Papuga
        levels:
            1:
                story_text: "## Papuga\nStwórz swoją własną cyfrową papugę która powtórzy wszystko co powiesz!\n"
                example_code: "```\n{print} Jestem papuga Hedy\n{ask} Jak masz na imię?\n{echo}\n{echo}\n```\n"
                start_code: '{print} Jestem papuga Hedy

                    {ask} Jak masz na imię?

                    {echo}

                    {echo}

                    '
                story_text_2: "### Ćwiczenie\nCzy potrafisz sprawić, by papuga zadała inne pytanie? Uzupełnij puste miejsca w przykładzie!\n"
                example_code_2: "```\n{print} Jestem papuga Hedy\n{ask} _\n{echo}\n{echo}\n"
            2:
                story_text: "## Papuga\nStwórz swoją własną cyfrową papugę, która będzie po tobie powtarzać cokolwiek powiesz!\n"
                example_code: "```\n{print} Jestem papuga Hedy\nimię {is} {ask} jak masz na imię?\n{print} imię\n{sleep}\n{print} ara\n{sleep}\n{print} imię\n```\n"
                start_code: '{print} Jestem papuga Hedy!'
                story_text_2: "### Ćwiczenie\nMożesz użyć zmiennych, aby papuga powiedziała więcej niż tylko twoje imię. Czy możesz uzupełnić kod?\n"
                example_code_2: "```\n{print} Jestem papuga Hedy\nimię {is} {ask} Jak masz na imię?\n{print} imię\n{sleep}\n{print} imię\nnazwisko {is} {ask} Jak masz na nazwisko?\n_\n{sleep}\n_\n```\n"
            3:
                story_text: "## Papuga\nNaucz swoją papugę nowego słowa z poleceniem `{add}`.\n### Ćwiczenie\nCzy potrafisz sprawić, żeby papuga powiedziała kilka słów?\n"
                example_code: "```\nsłowa {is} ara, Hedy\n{print} Naucz twoją papugę!\nnowe_słowo {is} {ask} Jakiego słowa chcesz ja nauczyć?\n{add} nowe_słowo {to_list} słowa\n{print} \U0001F9D2 Powiedz nowe_słowo , Hedy!\n{print} \U0001F99C słowa {at} {random}\n```\n"
                start_code: '# tutaj umieść swój kod'
            5:
                story_text: "## Papuga\nPamiętaj, żeby wynagrodzić swoją papugę jeżeli powie poprawne słowo.\nUzupełnij brakujące 4 polecenia żeby dokończyć kod.\n"
                example_code: "```\nsłowa {is} kra, Hedy\n{print} 'Wytresuj swoją papugę!'\nnowe_słowo {is} {ask} 'Jakie słowo chciałbyś ją nauczyć?'\n{add} nowe_słowo {to_list} słowa\npowiedziane_słowo {is} słowa {at} {random}\n{print} '\U0001F9D2 Powiedz ' nowe_słowo ', Hedy!'\n{print} '\U0001F99C ' powiedziane_słowo\n_ powiedziane_słowo {is} nowe_słowo _ '\U0001F9D2 Świetnie, Hedy! \U0001F36A'\n_ _ '\U0001F9D2 Nie, Hedy! Powiedz ' nowe_słowo\n```\n"
                start_code: '# tutaj umieść swój kod'
            4:
                story_text: "## Papuga\nW tym poziomie musimy użyć cudzysłowy z poleceniami `{ask}` and `{print}`.\nCzy potrafisz dokończyć kod poprzez dodanie cudzysłowów?\n"
                example_code: "```\nsłowa {is} kra, Hedy\n{print} _ Wytresuj swoją papugę! _\nnowe_słowo {is} {ask} _ Jakie słowo chciałbyś ją nauczyć? _\n{add} nowe_słowo {to_list} słowa\n{print} _ \U0001F9D2 Powiedz _ nowe_słowo _, Hedy!_\n{print} _ \U0001F99C _ słowa {at} {random}\n```\n"
                start_code: '# tutaj umieść swój kod'
    turtle:
        name: Żółw
        description: Stwórz swoje własne obrazki
        default_save_name: Żółw
        levels:
            1:
                story_text: "## Narysujmy coś\nMożesz wykorzystać Hedy także do rysowania.  Rysując linie i obracając żółwia, możesz narysować kwadrat lub gwiazdę!\n\nPisząć `{forward}` możesz narysować linie. Liczba zaraz po komendzie mówi o tym ile ma przejść żółw rysując linie..`{turn} {right}` obraca żółwia o ćwierć obrotu w prawo (zgodnie z ruchem wskazówek zegara), `{turn} {left}` obraca w lewo (przeciwnie do ruchu wskazówek zegara).\n\nJeśli chcesz przesunąć żółwia do tył, możesz wykorzystać komendę `{forward}` ale z ujemną liczba. Na przykład `{forward} -100`\n\n### Ćwiczenie\nTo jest początek schodków. Możesz sprawić aby miały 5 stopni?\n"
                example_code: "```\n{forward} 50\n{turn} {right}\n{forward} 50\n{turn} {left}\n{forward} 50\n```\n"
                start_code: "{forward} 50\n{turn} {left}"
            2:
                story_text: "## Żółw\nNa tym poziomie możesz używać zmiennych aby uczynić żółwia interaktywnym. Na przykład możesz zapytać użytkownika ile kroków ma zrobić twój żółw.\n"
                example_code: "```\nkroki {is} {ask} Ile kroków ma wykonać żółw?\n{forward} kroki\n```\n"
                start_code: "{print} Wyścig żółwi!\nkąt {is} 90\n{turn} kąt\n{forward} 25"
                story_text_2: "Również na poziomie 1 żółw mógł skręcać tylko w lewo lub w prawo. To trochę nudne!\nNa poziomie 2 może obracać się we wszystkich kierunkach.\n\nUżyj liczby 90, aby obrócić o żółwia o ćwierć obrotu. Wielkość obrotu liczby w stopniach. Pełny obrót to 360 stopni.\n\n### Ćwiczenie\nCzy możesz zrobić figurę za pomocą tego kodu? Może trójkąt lub okrąg?\n"
                example_code_2: "```\n{print} Rysowanie kształtu\nkąt {is} 90\n{turn} kąt\n{forward} 25\n{turn} kąt\n{forward} 25\n```\n"
            3:
                story_text: "## Poszukujący żółw\nNa tym poziomie możesz użyć `{at} {random}` podczas rysowania żółwiem. Losowy wybór sprawia, że żółw za każdym razem idzie inną ścieżką.\nUżyj `{at} {random}`, aby wybrać wartość z listy.\n### Ćwiczenie\nCzy możesz skopiować i wkleić linie 2 i 3, żeby stwożyć dłuższą losową ścieżkę?\n"
                example_code: "```\nkąty {is} 10, 50, 90, 150, 250\n{turn} kąty {at} {random}\n{forward} 25\n```\n"
                start_code: "kąty {is} 10, 50, 90, 150, 250\n{turn} kąty {at} {random}\n{forward} 25"
            4:
                story_text: "## Rysujmy\nNa poziomie 4 musisz użyć cudzysłowów z poleceniami `{print}` oraz `{ask}`. To samo się dotyczy rysowania!\n"
                example_code: "```\n{print} _ Rysujemy figury _\nkąt {is} 90\n{turn} kąt\n{forward} 25\n{turn} kąt\n{forward} 25\n```\n"
                start_code: "{print} 'Rysujemy figury'\nkąt {is} 90\n{turn} kąt\n{forward} 25"
                story_text_2: "## Kolory\nMożesz również zmienić kolor rysowanych linii przy użyciu polecenia `{color}`. Sprawdź przykładowy program.\nMożesz również użyc polecenia `{color} {white}` żeby zrobić \"niewidoczne\" linie. Możesz użyć tych \"niewidocznych\" linii, żeby przesunąć żółwia w inne miejsce na ekranie zanim zaczniesz rysować.\n"
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
            5:
                story_text: "## Rysujmy\nNa poziomie 5 możesz dokonywać wyboru przy użyciu polecenia `{if}`. Przykładem takiego wyboru byłby wybór pomiędzy różnymi typami figur do narysowania.\n"
                example_code: "```\n{print} 'Drawing Figures'\nfigure {is} {ask} 'Do you want a square or a triangle?'\n{if} figure {is} triangle angle {is} 120\n{else} angle {is} 90\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n```\n"
                start_code: "{print} 'Rysujemy figury'\nfigura {is} {ask} 'Czy chciałbyś narysować kwadrat czy też trójkąt?'\n{if} figura {is} trójkąt kąt {is} 120 {else} kąt {is} 90\n{turn} kąt\n{forward} 25"
            8:
                story_text: "## Rysujemy\nDzięki naszej nowo nabytej umiejętności powtarzania wielu linii kodu możemy rysować figury w jeszcze prostszy sposób.\nWystarczy, że ustawimy kąt tylko raz i potem użyjemy go jako zmienną wewnątrz polecenia `{repeat}`.\n\n### Ćwiczenie 1\nPrzykładowy kod tworzy kwadrat. Zmień kod tak, aby tworzył inną figurę, np. trójkąt lub sześciokąt.\nWymaga to zmiany w dwóch liniach kodu.\nPodpowiedź: Całe koło to 360 stopni.\n\n### Ćwiczenie 2\nTeraz stwórz rysunek składający się z co najmniej dwóch wielokątów.\n"
                example_code: "```\nkąt = 90\n{repeat} 4 {times}\n    {turn} kąt\n    {forward} 50\n```\n"
                story_text_2: "**(dodatkowe zadanie)** Możemy teraz ulepszyć program, który rysuje różne figury. Donończ kod i możesz narysować dowolny wielokąt, który chcesz!\n"
                example_code_2: "```\nfigura = {ask} 'Ile kątów mam narysować?'\nkąt = 360 / figura\n{repeat} figura {times}\n    {turn} _\n    {forward} _\n```\n"
                start_code: "figura = {ask} 'Ile kątów mam narysować?'"
            6:
                story_text: "## Rysujemy\nNa tym poziomie możesz użyć matematyki żeby narysować różne figury.\nByć może pamiętasz ze szkoły, że obrócenie się dookoła jest tym samym co obrócenie się o 360 stopni. Jeżeli tego nie wiedziałeś to teraz już wiesz!\nZ tego też powodu już wiesz dlaczego gdy rysujemy kwadrat to obracamy się o 90 stopni. Jako, że kwadrat ma cztery boki pod kątem prostym to znaczy że kąt pomiędzy nimi to 90 stopni - 360 stopni podzielone przez 4 (boki) to 90 stopni.\nDzięki temu, że w Hedy możesz przeprowadzać obliczenia matematyczne, możesz tez rysować wszystkie figury jakie tylko chcesz!\n"
                example_code: "```\nangles = {ask} 'How many angles do you want?'\nangle = 360 / angles\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n```\n"
                start_code: "{print} 'Rysujemy figury'"
            9:
                story_text_2: "## Kontrola żółwia\nMożesz teraz kontrolować żółwia na wiele innych sposobów niż tylko do przodu lub do tyłu!\n\n### Ćwiczenie 2\nUzupełnij kod, aby móc kontrolować żółwia za pomocą klawiszy. `w` do przodu, `s` do tyłu, `a` w lewo i `d` w prawo.\n"
                example_code_2: "```\n{repeat} 40 {times}\n    {if} w {is} {pressed}\n        {forward} 10\n    {if} a {is} {pressed}\n        _ _\n```\n"
                start_code: '# umieść tutaj swój kod'
                story_text: "## Żółw\nSkoro potrafimy używać `{repeat}` wewnątrz `{repeat}`, możemy tworzyć bardziej złożone figury.\n\n### Ćwiczenie 1\nTen kod tworzy trzy czarne trójkąty, zmień to na pięć różowych kwadratów.\n\n**(dodatkowe zadanie)** Stwórz własną figurę składającą się z co najmniej dwóch różnych kształtów.\n"
                example_code: "```\n{color} {black}\n{repeat} 3 {times}\n    {repeat} 3 {times}\n        {forward} 10\n        {turn} 120\n    {color} {white}\n    {forward} 50\n    {color} {black}\n```\n"
    piggybank:
        name: Skarbonka
        description: Policz swoje kieszonkowe!
        default_save_name: Skarbonka
        levels:
            14:
                story_text: "## Piggybank\nIn this level you can let Hedy tell you {if} you have saved up enough money!\n"
                example_code: "```\nmoney = {ask} 'How much money have you saved?'\nwish = {ask} 'How much money do you need?'\nallowance = {ask} 'How much pocket money do you get each week?'\nto_save = wish - money\nweeks = to_save / allowance\n{if} wish > money\n    {print} 'You need to save up some more!'\n    {print} 'Youll need ' weeks ' more weeks.'\n{else}\n    {print} 'Great! You have enough'\n    {print} 'Lets go shopping!'\n```\n"
                start_code: '# umieść tutaj swój kod'
            12:
                story_text: "## Piggy Bank\nIn this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!\n"
                example_code: "```\n{print} 'The digital piggy bank'\nwish = {ask} 'What would you like to buy?'\nprice = {ask} 'How much does that cost?'\nsaved = {ask} 'How much money have you saved already?'\nallowance = {ask} 'How much pocket money do you get per week?'\nto_save = price - saved\nweeks = to_save / allowance\n{print} 'You can buy a ' wish ' in ' weeks ' weeks.'\n```\n"
                start_code: '# umieść tutaj swój kod'
    quizmaster:
        name: Quizmaster
        description: Make your own quiz!
        default_save_name: Quizmaster
        levels:
            14:
                story_text: "## Make your own quiz\nIn this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!\nYou can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!\n"
                example_code: "```\n{print} 'Make your own quiz'\npoints_a = 0\npoints_b = 0\n{print} 'Question'\n{print} 'Answer option A'\n{print} 'Answer option B'\nanswer = {ask} 'Which answer?'\n{if} answer == 'A'\n    points_a = points_a + 1\n{if} answer == 'B'\n    points_b = points_b + 1\n{print} 'End of the quiz!'\n{print} 'Lets see the results!'\n{if} points_a > points_b\n    {print} 'You belong to the A club'\n{if} points_b > points_a\n    {print} 'You belong to the B club'\n```\n"
                start_code: '# umieść tutaj swój kod'
    language:
        name: Język
        description: Ćwicz słowa w języku obcym
        default_save_name: language
        levels:
            5:
                story_text: "## Learn a new language\nMake your own program to practice your vocabulary in a new language.\n"
                example_code: "```\n{print} 'Learn French!'\ncat {is} {ask} '\U0001F431'\n{if} cat {is} chat {print} 'Terrific!'\n{else} {print} 'No, cat is chat'\nfrog {is} {ask} '\U0001F438'\n{if} frog {is} grenouille {print} 'Super!'\n{else} {print} 'No, frog is grenouille'\n```\n"
                start_code: '# umieść tutaj swój kod'
            16:
                story_text: "## Learn a new language\nMake your own program to practice your vocabulary in a new language.\n"
                example_code: "```\nfrench_words = ['bonjour', 'ordinateur', 'pomme de terre']\ntranslation = ['hello', 'computer', 'potato']\nscore = 0\n{for} i {in} {range} 1 {to} 3\n    answer = {ask} 'What does ' french_words[i] ' mean?'\n    correct = translation[i]\n    {if} answer == correct\n        {print} 'Correct!'\n        score = score + 1\n    {else}\n        {print} 'Wrong, ' french_words[i] ' means ' translation[i]\n{print} 'You gave ' score ' correct answers.'\n```\n"
                start_code: '# umieść tutaj swój kod'
    secret:
        name: Super Szpieg
        description: Stwórz swój kod szpiegowski
        default_save_name: language
        levels:
            12:
                story_text: "## Make a secret code like a super spy\nIn this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.\nIf the enemy tries to crack the code, they will get some false info to waste their time.\n"
                example_code: "```\nname is ask 'What is your name?'\nif name is 'Agent007'\n    a is 'Go to the airport '\nelse\n    a is 'Go to the trainstation '\npassword is ask 'What is the password?'\nif password is 'TOPSECRET'\n    b is 'tomorrow at 02.00'\nelse\n    b is 'today at 10.00'\nprint a + b\n```\n"
                start_code: '# umieść tutaj swój kod'
            13:
                story_text: "## Superspy\nThe code you made in the previous level can be made a lot easier in this one with the `{and}` command.\n"
                example_code: "```\nname is ask 'What is your name?'\npassword is ask 'What is your password?'\nif name is 'Agent007' and password is 'TOPSECRET'\n    print 'Go to the airport at 02.00'\nelse\n    print 'Go to the trainstation at 10.00'\n ```\n"
                start_code: '# umieść tutaj swój kod'
#    next:
#        name: Co dalej?
#        description: Co dalej?
#        default_save_name: Dalej
#        levels:
#            1:
#                story_text: "## Co dalej?\nGratulacje!!! Dotarłeś do końca poziomu 1. Mam nadzieję, że udało Ci się już stworzyć kilka niesamowitych programów, ale Hedy ma jeszcze wiele do odkrycia. \n\nNa pierwszym poziomie mogłeś zauważyć, że komenda `{echo}` może zapisać tylko jedną informację na raz. \nNa przykład w przygodzie z restauracją, mógłbyś wyświetlić za pomocą polecenia {echo} co chciał zjeść klient, lub co chciał wypić, ale nie oba w jednym zdaniu.\n"
#                example_code: "```\n{print} Witamy u Hedy\n{ask} Co chciałbyś zjeść?\n{echo} Więc chcesz \n{ask} Co chciałbyś wypić?\n{echo} Więc chcesz \n```\n"
#                story_text_2: "Jeśli gracz wpisze hamburger i cola, to nie możesz powiedzieć \"więc chciałbyś hamburgera i colę\",  a musisz wykorzystać dwie osobne linijki kodu. \nRównież komenda `{echo}` powoduje tylko pojawienie się słowa na końcu zdania. Nie możesz więc powiedzieć \"Twój hamburger zaraz będzie!\".\n\nTo się zmieni na poziomie 2. Na poziomie 2 nauczysz się pracować ze zmiennymi, które pozwalają na zapisanie wielu informacji i wypisanie ich w dowolnym miejscu.\nPrzejdźmy więc do następnego poziomu!\n"
#                start_code: "{print} Chodźmy!"
#            2:
#                story_text: "## Co dalej?\nNa tym poziomie nauczyłeś się, czym jest zmienna i jak możesz jej użyć, aby uczynić swoje przygody bardziej interaktywnymi.\nAle... to nie jedyna rzecz, którą możesz zrobić ze zmiennymi! Możesz także używać zmiennych do tworzenia list.\nMożesz nawet pozwolić Hedy wybrać losowe słowo z listy, co pozwoli ci tworzyć prawdziwe gry!\nRzuć okiem na następny poziom!\n"
#                start_code: "{print} Przejdźmy na następny poziom!"
#            3:
#                story_text: "## What's next?\nIn this level you've been practising with variables, but maybe you've come across this mistake.\n\nTry to run this code:\n```\nname {is} Sophie\n{print} My name is name\n```\nOf course you wanted to print `My name is Sophie` but Hedy prints `My Sophie is Sophie`.\nIn the next level this problem is fixed by using quotation marks.\n"
#                start_code: "{print} Przejdźmy do następnego poziomu!"
#            4:
#                story_text: "## What's next?\nIn the previous levels you've already learned to use `{at} {random}` which made your games different every time you ran the code.\nBut it's not really interactive, the player doesn't have any influence on what happens in the game.\n\nIn the next level you'll learn the `{if}` command, that allows you to give different responses in your program. This way you can program a secret password for your computer for example.\nSo let's take a peak!\n\n```\npassword {is} {ask} 'What is the correct password?'\n```\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            5:
#                story_text: "## What's next?\nNow you've reached the end of this level, so you have learned `{ask}` and `{if}`. For example you can {ask} guests what they would like to eat.\nWhat you can't yet do though, is calculate the price for everyone's dinner.\n\nThe next level makes it possible to use addition, subtraction and multiplication in your programs. This way you can calculate the prices in your restaurant, but you could also add a secret code to give your friends and family a discount.\nAnother option in the next level is programming your own maths game, for your little brother or sister to practice their multiplications.\nGo see for yourself in the next level!\n"
#                example_code: "## Free drinks!\n```\n{print} 'Welcome at McHedy'\norder {is} {ask} 'What would you like to eat?'\n{print} 'You would like ' order\n{if} order {is} hamburger price {is} 5\n{if} order {is} fries price {is} 2\ndrinks {is} {ask} 'What would you like to drink?'\n{print} 'You would like ' drinks\n{print} 'That will be ' price ' dollars for your ' order ' please'\n{print} 'The drinks are free in this level because Hedy cant calculate the price yet...'\n```\n"
#                start_code: "{print} 'On to the next level!'"
#            8:
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#                story_text: "## What's next?\nGreat job! You've reached the end of another level! In this level you've learned to use multiple lines of code in an {if} or {repeat} command. But you can't yet combine the two...\nGood news! In the next level you will be allowed to put an {if} inside an {if}, or inside a {repeat} command.\n"
#                example_code: "```\nanswer = {ask} 'Would you like to go to the next level?'\n{if} answer {is} yes\n    {print} 'Great! You can use the {repeat} commando in the {if} command!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n    {print} 'Hooray!'\n{else}\n    {print} 'Okay, you can stay here for a little longer!'\n```\n"
#            6:
#                story_text: "## What's next?\n Great job! You've reached the end of this level, which means you have practiced with `{if}` and `{else}`. You have probably noticed that your codes are getting longer and longer.\n For example {if} you want to program 'Happy Birthday'.\n\nThat's a lot of code for mainly the same words over and over again. Luckily in the next level has a solution with the `{repeat}` command, that allows you to repeat a line of code multiple times.\n"
#                example_code: " ```\n {print} 'happy birthday to you'\n {print} 'happy birthday to you'\n {print} 'happy birthday dear Hedy'\n {print} 'happy birthday to you'\n ```\n"
#                start_code: "{print} 'On to the next level!'"
#            7:
#                story_text: "## What's next?\nNow you've learned how to repeat one single line of code. This comes in handy, but it's not always enough. Sometimes you want to repeat multiple lines at once.\nthe next level allows you to group a couple of lines of code, and repeat that little group of lines all at once!\n"
#                example_code: "```\n{repeat} 5 {times} {print} 'In the next level you can repeat multiple lines of code at once!'\n```\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            9:
#                story_text: "## What's next?\nYou're doing great! In this level we still face a small problem. You have learned to repeat lines, but what if you'd want to slightly change the line.\nFor example if you want to sing the song '{if} you're happy and you know it'. It would look like this:\n\nIf you'd also want the next verse 'stomp your feet', and the next one, and the next one, you'd have to change the code completely.\nIn the next level you'll learn the `{for}` command, which allows you to make a list of actions and repeat the code with another action each time!\nPlease take a look!\n"
#                example_code: "```\n{repeat} 2 {times}\n    {print} '{if} youre happy and you know it clap your hands'\n{print} '{if} youre happy and you know it and you really want to show it'\n{print} '{if} youre happy and you know it clap your hands'\n```\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            10:
#                story_text: "## What's next?\nYou have reached the end of this level, you're doing great! You are about to go to the next level. In the higher levels, Hedy is focussing more and more on teaching you the programming language Python.\nIn Python there is no `{repeat}` command, but there is a command that works like {repeat}. Are you curious to find out how to say `{repeat}` in Python language? Quickly go on to find out!\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            11:
#                story_text: "## What's next?\nMaybe you have tried using decimal numbers in your restaurant adventure. If you did, you probably noticed that Hedy didn't understand them yet and always rounded off.\nFrom the next level on you can use decimal numbers.\n\nAnother cool feauture in the next level is that you can use mulitiple words in a variable.\nFor intance, you could already do this...\n"
#                example_code: "```\nname = {ask} 'Who is your favorite cartoon character?'\n{print} 'I love watching ' name\n```\nBut you couldn't use multiple words in a variable like the example below. This program does not work yet in this level!\n```\nshow = SpongeBob SquarePants\n{print} show 'is my favorite show!'\n```\nGo to the next level to make this code work!\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            12:
#                story_text: "## What's next?\nIn the previous levels you learned how to put two `{if}`commands inside each other. This works fine, but it does give you very long and unhandy codes like this one:\n\nIn this system you have to give both the correct username and the correct password.\nIn the next level you will learn the `{and}` command that will make this code a ot shorter and more understandable!\nCheck it out!\n"
#                example_code: "```\nusername {is} {ask} 'What is your username?'\npassword {is} {ask} 'What is your password?'\n{if} username {is} 'Hedy'\n    {if} password {is} 'secret'\n        {print} 'Welcome Hedy!'\n    {else}\n        {print} 'Access denied'\n{else}\n    {print} 'Access denied!'\n```\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            13:
#                story_text: "## What's next?\nWith the program below you can calulate {if} you've passed a subject at school (so, a grade of six or higher).\nYou can see this code is extremely inefficient, du to the very long code in line 5.\nAll the different grades from 1 to 5 had to be programmed seperately. Lucky for you, in the next level you'll learn how to do this without this extremely long code!\n"
#                example_code: "```\nfirst_grade = {ask} 'What score did you get on your first test?'\nsecond_grade = {ask} 'What score did you get on your second test?'\nadded {is} first_grade + second_grade\nmean_grade {is} added / 2\n{if} mean_grade = 1 {or} mean_grade = 2 {or} mean_grade = 3 {or} mean_grade = 4 {or} mean_grade = 5\n    {print} 'Oh no! You have failed the subject...'\n{else}\n    {print} 'Great! You have passed the subject!'\n```\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            14:
#                story_text: "## What's next?\nIn this game below a code has been made to make sure the player can play on as long as he/she wants...\nBut the code is ineffective and way too long. Also, what {if} the player wants to play 101 games instead of 100?\nYou can't play to infinity?\nIn the next level you will learn a command that makes all of this a lot easier!\n"
#                example_code: "```\ngame {is} 'on'\n{for} i {in} {range} 1 {to} 100\n    {if} game {is} 'on'\n        answer = {ask} 'Do you want to continue?'\n        {if} answer {is} 'no'\n            game {is} 'over'\n        {if} answer {is} 'yes'\n            {print} 'Ok we will continue'\n```\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            15:
#                story_text: "## What's next?\nIn the next level we will grow a bit more towards real Python code. thon code. You will also learn how to match two lists together.\nThis way you can program a code in which the correct animal is matched to the right sound.\nBecause the two codes below... Are obviously nonsense!\n"
#                example_code: "```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {print} 'A ' animal ' says ' sounds {at} {random}\n```\nYou could also try to make it work this way, but....\n```\nanimals = 'chicken', 'horse', 'cow'\nsounds = 'cluck', 'neigh', 'moo'\n{for} animal {in} animals\n    {for} sound {in} sounds\n        {print} 'A ' animal ' says ' sound\n```\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            16:
#                story_text: "## What's next?\nIn the next level it's time for a new command. You might have noticed in the previous levels that `{if}` and `{else}` sometimes aren't enough.\nFor example in this code:\n"
#                example_code: "```\n{print} 'What is for dinner tonight?'\noptions = ['pizza', 'broccoli', 'green beans']\nchosen = options {at} {random}\n{if} chosen = 'pizza'\n    {print} 'Yummy! Pizza!'\n{else}\n    {print} 'Yikes...'\n```\n"
#                story_text_2: In this code it would be great to have 2x an `{else}` so you could have one option for the broccoli and one for the green beans. The next level comes with the new command `{elif}` that makes this possible! So check out the next level now!
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            17:
#                story_text: "## What's next?\nIn the next level you will learn a real Python way to use `{print}`.\n"
#                start_code: "{print} 'Przejdźmy do następnego poziomu!'"
#            18:
#                story_text: "## What's next?\nCongratulations! You have reached the last level of Hedy! But no worries, we are working very hard to create more levels and new adventures. So please come back later to check out the newest levels!\n"
#                start_code: "{print} ('Gratulacje!!!')"
    tic:
        name: Kółko i Krzyżyk
        description: Zagrajmy w kółko i krzyżyk!
        levels:
            13:
                start_code: '# umieść tutaj swój kod'
                story_text: "## Tic Tac Toe\nIn this adventure you can program a game of Tic Tac Toe. You can play with two people. Taking turns, you pick a number of the spot (1 - 9) you want to put your sign (x or o) on.\nThe first player that gets 3 in a row (horizontally, vertically or diagonally) wins!\nHave fun!\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game {is} 'on'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice {is} 1\n                spot_1 = sign\n            {if} choice {is} 2\n                spot_2 = sign\n            {if} choice {is} 3\n                spot_3 = sign\n            {if} choice {is} 4\n                spot_4 = sign\n            {if} choice {is} 5\n                spot_5 = sign\n            {if} choice {is} 6\n                spot_6 = sign\n            {if} choice {is} 7\n                spot_7 = sign\n            {if} choice {is} 8\n                spot_8 = sign\n            {if} choice {is} 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner {is} 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign {is} 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
            14:
                start_code: '# umieść tutaj swój kod'
                story_text: "## Tic Tac Toe\nIn the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.\nYou can use this knowledge in your new Taic Tac Toe game, like this:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game != 'over'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice == 1\n                spot_1 = sign\n            {if} choice == 2\n                spot_2 = sign\n            {if} choice == 3\n                spot_3 = sign\n            {if} choice == 4\n                spot_4 = sign\n            {if} choice == 5\n                spot_5 = sign\n            {if} choice == 6\n                spot_6 = sign\n            {if} choice == 7\n                spot_7 = sign\n            {if} choice == 8\n                spot_8 = sign\n            {if} choice == 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner == 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign == 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
            15:
                start_code: '# umieść tutaj swój kod'
                story_text: "## Tic Tac Toe\nIn this level you can improve your Tic Tac Toe game with the {while} loop/ With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 to 9` into one simple line.\nCheck it out:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over'\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots\n        {remove} choice {from} open_spots\n        {if} choice == 1\n            spot_1 = sign\n        {if} choice == 2\n            spot_2 = sign\n        {if} choice == 3\n            spot_3 = sign\n        {if} choice == 4\n            spot_4 = sign\n        {if} choice == 5\n            spot_5 = sign\n        {if} choice == 6\n            spot_6 = sign\n        {if} choice == 7\n            spot_7 = sign\n        {if} choice == 8\n            spot_8 = sign\n        {if} choice == 9\n            spot_9 = sign\n    {else}\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    winner = {ask} 'Did you win?'\n    {if} winner == 'yes'\n        {print} 'Good job, player ' sign '!'\n        game = 'over'\n    {else}\n        {if} sign == 'x'\n            sign = 'o'\n        {else}\n            sign = 'x'\n```\n"
            17:
                start_code: '# umieść tutaj swój kod'
                story_text: "## Tic Tac Toe\nIn the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.\nThis made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.\nTo use the {elif} to let Hedy check whether or not a player has won is fun, but it also requires a fair amount of extra lines.\n\nIn the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).\nYou can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.\nThis means that the {while} loop will be stopped and the game ends.\n"
                example_code: "```\nsign = 'x'\nopen_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over':\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots:\n        {remove} choice {from} open_spots\n        {if} choice == 1:\n            spot_1 = sign\n        {if} choice == 2:\n            spot_2 = sign\n        {if} choice == 3:\n            spot_3 = sign\n        {if} choice == 4:\n            spot_4 = sign\n        {if} choice == 5:\n            spot_5 = sign\n        {if} choice == 6:\n            spot_6 = sign\n        {if} choice == 7:\n            spot_7 = sign\n        {if} choice == 8:\n            spot_8 = sign\n        {if} choice == 9:\n            spot_9 = sign\n    {else}:\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {else}:\n        {if} sign == 'x':\n            sign = 'o'\n        {else}:\n            sign = 'x'\n```\n"
        default_save_name: Tic
    blackjack:
        name: Blackjack
        description: Spróbuj zdobyć jak największą ilość punktów ale mniejszą lub równą 21
        levels:
            17:
                start_code: '# umieść tutaj swój kod'
                story_text: "## Create a game of Blackjack\nBlackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.\nThe Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.\nIf you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.\nBut be careful not to get more than 21 points, because if you do, you lose!\nThe player who gets closest to 21, without going over it, wins!\n\nHave fun!\n"
                example_code: "```\n{print} 'BLACKJACK'\ncards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']\npoints = 0\ndealer_points = 0\ncard_1 = cards[{random}]\ncard_2 = cards[{random}]\ncard_3 = cards [{random}]\ndealer_card_1 = cards[{random}]\ndealer_card_2 = cards[{random}]\ndealer_card_3 = cards[{random}]\n# Points for card 1\n{if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':\n    points = points + 10\n{elif} card_1 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_1\n# Points for card 2\n{if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':\n    points = points + 10\n{elif} card_2 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_2\n# Points for dealer card 1\n{if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_1 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_1\n# Points for dealer card 2\n{if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_2 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_2\n# Two Aces\n{if} card_1 == 'Ace' {and} card_2 == 'Ace':\n    points = 12\n{if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':\n    dealer_points = 12\n# Scoreboard\n{print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'\n{print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'\n# Extra card for the player\nhit = {ask} 'Do you want an extra card?'\n{if} hit == 'yes':\n    {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':\n        points = points + 10\n    {elif} card_3 == 'Ace':\n        {if} points > 11:\n            points = points + 11\n        {else}:\n            points = points + 1\n    {else}:\n        points = points + card_3\n    print 'You get an extra ' card_3 ' (' points ' points)'\n{else}:\n    print 'No extra cards'\n# Winner\n{if} points > 21 {or} dealer_points > points {or} dealer_points == 21:\n    {print} 'You lose'\n{elif} dealer_points < 17:\n    {print} 'The dealer takes an extra card. It is a... ' dealer_card_3\n    {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':\n        dealer_points = dealer_points + 10\n    {elif} dealer_card_3 == 'Ace':\n        {if} dealer_points < 11:\n            dealer_points = dealer_points + 11\n        {else}:\n            dealer_points = dealer_points + 1\n    {else}:\n        dealer_points = dealer_points + dealer_card_3\n    {print} 'The dealer has ' dealer_points ' points now'\n    {if} dealer_points < 21 {and} dealer_points > points:\n        {print} 'You lose'\n    {else}:\n        {print} 'You win'\n{elif} points > dealer_points {and} points < 21:\n    {print} 'You win!'\n```\n"
        default_save_name: Blackjack
    pressit:
        name: Naciśnięcia klawiszy
        description: Spróbuj przypisać przycisk klawiatury do polecenia!
        default_save_name: Naciśnij
        levels:
            5:
                example_code: "```\n{if} x {is} {pressed} {forward} 50\n```\n"
                story_text: "## Naciśnij!\nWe wprowadzeniu wspomnieliśmy również o nowym poleceniu `{pressed}`. Wykorzystanie `{pressed}` pozwala na stworzenie interaktywnego kodu, który możesz kontrolować w czasie rzeczywistym. W kolejnych poziomach dowiesz się jak korzystać z `{pressed}` i do czego go wykorzystać.\nOprócz wyświetlania tekstu, istnieje wiele innych możliwości wykorzystania `{pressed}`.\nNa przykład możesz również powiązać polecenia żółwia z klawiszami! Spróbuj!\n"
                story_text_2: "## Naciśnięcie klawiszu innego niż przypisany\nMożesz również użyć polecenia `{else}` w poleceniu `{pressed}`. Polecenie `{else}` zostanie wykonane gdy naciśniesz klawisz inny niż ten, który przypisałeś.\n"
                example_code_2: "```\n{if} y {is} {pressed} {print} 'Amazing! You pressed the y key!'\n{else} {print} 'Oh no! You did not press the y key.'\n```\n"
                start_code: '# umieść tutaj swój kod'
            6:
                example_code: "```\nfirst = {ask} 'what is your first number?'\nsecond = {ask} 'what is your second number?'\n{print} 'press a to add, s to substract, d to divide, m to multiply'\n{if} a {is} {pressed} result = first + second\n{if} s {is} {pressed} result = first - second\n{if} d {is} {pressed} result = first / second\n{if} m {is} {pressed} result = first * second\n{print}'The answer is ' result\n```\n"
                start_code: '# umieść tutaj swój kod'
                story_text: "Czy wiesz, że możesz również stworzyć kalkulator używając polecenia `{pressed}`?\nWprowadź do kalkulatora dwa liczby i naciśnij klawisz m, aby pomnożyć.\nTeraz nie musisz zabierać własnego kalkulatora!\nSpróbuj innych klawiszy i zobacz, co się stanie! Czy otrzymałeś inny wynik?\n"
            7:
                example_code: "```\n{if} x {is} {pressed} {forward} 15 {else} {turn} 90\n```\n"
                story_text: "## Kontrola żółwia\nSkoro już nauczyłeś się polecenia `{repeat}` możesz naciskać klawisze wiele razy! Dzięki temu możesz sprawić, że żółw będzie chodził do przodu i obracał się.\n\n### Ćwiczenie\nPrzykładowy kod sprawdza tylko raz, czy klawisz jest naciśnięty. Zmień kod tak, aby można było naciskać klawisze wiele razy i użyj kodu, aby narysować coś ładnego.\n"
                start_code: '# umieść tutaj swój kod'
            9:
                start_code: '# umieść tutaj swój kod'
                story_text: "Jako, że wiesz już jak zagnieżdżać wiele instrukcji, możesz również zrobić to z poleceniem `{pressed}`!\nPoprzez zagnieżdżenie polecenia `{pressed}` w pętli `{repeat}`, możesz powtarzać naciśnięcia przycisków, żeby stworzyć nowe interakcje.\nWiemy, że mogliśmy to zrobić wcześniej, ale dzięki wcięciom masz dużo lepszy przegląd!\nSpróbuj policzyć do 5, na przykład!\n"
                example_code: "```\ntotal = 1\n{repeat} 5 {times}\n    {if} x {is} {pressed}\n        {print} total\n        {print} 'keep pressing!'\n        total = total + 1\n```\n"
            10:
                story_text: "W tym poziomie możesz narysować figurę przy użyciu żółwia. Żółw nie może się doczekać żeby sie ruszyć.\nDaj żółwiowi sygnał startowy poprzez naciśnięcie przycisku x lub y na klawiaturze.\nCzy możesz zrobić, żeby żółw narysował inną figurę?\n"
                start_code: '# umieść tutaj swój kod'
                example_code: "```\ndistances = 100, 80, 60, 40, 20, 10\n{if} x {is} {pressed}\n    {for} distance {in} distances\n        {forward} distance\n        {turn} -90\n{if} y {is} {pressed}\n    {for} distance {in} distances\n        {forward} distance\n        {turn} 90\n```\n"
            11:
                start_code: '# umieść tutaj swój kod'
                story_text: "Skoro już się nauczyłeś polecenia `{for} ... {in} {range} ... {to} ...`, możesz teraz go wykorzystać z poleceniem `{pressed}`.\nNa przykład, spróbuj ruszyć żółwiem. Żółw rośnie każdym razem gdy naciśniesz przypisany klawisz.\nW ten sposób żółw może ruszać się coraz dalej z każdym krokiem.\n"
                example_code: "```\nleft = -90\nright = 90\naround = 180\n{for} counter {in} {range} 1 {to} 15\n    stepsize = counter * 5\n    {if} w {is} {pressed}\n        {forward} stepsize\n    {if} s {is} {pressed}\n        {turn} around\n    {if} a {is} {pressed}\n        {turn} left\n    {if} d {is} {pressed}\n        {turn} right\n```\n"
            12:
                start_code: '# umieść tutaj swój kod'
                story_text: "Czy znasz się na grach komputerowych? W jednej z nich gdy wejdziesz w trawę zostajesz napadnięty przez bardzo podejżaną mysz. Co wtedy robisz?\nW tym poziomie zrobimy małe menu gry z różnymi opcjami.\nPrzypisanie tekstu do zmiennej może być bardzo przydatne gdy chce się ten tekst użyć wielokrotnie.\nOpcja, wybieram Ciebie!\n"
                example_code: "```\nchoose = 'You chose option: '\n{print} 'A wild mouse appeared!'\n{print} 'Choose an option and press first letter: (n)et, (c)at, (b)ag, (r)un'\n{if} n {is} {pressed}\n    {print} choose + 'net'\n    {print} 'You attempt to catch the mouse with a net..'\n    {sleep}\n    {print} 'Congratulations you did it!'\n{if} c {is} {pressed}\n    {print} choose + 'cat'\n    {print} 'You send out your cat'\n    {sleep}\n    {print} 'The mouse got scared and ran away!'\n{if} b {is} {pressed}\n    {print} choose + 'bag'\n    {print} 'The mouse jumped into you bag!'\n{if} r {is} {pressed}\n    {print} choose + 'run'\n    {print} 'You got away safely!'\n```\n"
            13:
                start_code: '# umieść tutaj swój kod'
                story_text: "Skoro potrafisz już użyć poleceń `{and}` oraz `{or}` możesz też użyć je razem z poleceniem `{pressed}`.\nWyobraź sobie, że żółw potrafi zrobić bardzo długi skok w przód po przyciśnięciu przycisku `p`.\nZanim żółw może wykonać taki bardzo długi skok, żółw musi najpierw skręcić w lewo i w prawo.\n"
                example_code: "```\nstepsize = 10\nleft = -90\nright = 90\naround = 180\nlooked_left = 0\nlooked_right = 0\n{repeat} 40 {times}\n    {if} w {is} {pressed}\n        {forward} stepsize\n    {if} s {is} {pressed}\n        {turn} around\n    {if} a {is} {pressed}\n        {turn} left\n        looked_left = 1\n    {if} d {is} {pressed}\n        {turn} right\n        looked_right = 1\n    {if} p {is} {pressed}\n        {if} looked_left {is} 1 {and} looked_right {is} 1\n            {forward} 40\n            looked_left = 0\n            looked_right = 0\n```\n"
            15:
                start_code: '# umieść tutaj swój kod'
                story_text: "Skoro nauczyłeś się o pętlach `{while}`, możesz ich zacząć używać ich na żółwiu!\nŻółw może teraz wykonać tylko 15 kroków lub obrócić się 15 razy zanim się zmęczy!\nSpróbuj dotrzeć jak najdalej zanim żółw się zmęczy! Możesz użyć swojego super skoku po 2 obrótach lub po 5 krokach.\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 2\ntired_in = 15\n{while} tired_in > 0\n    {if} w {is} {pressed}\n        {forward} stepsize\n        jumptime = jumptime - 1\n    {if} s {is} {pressed}\n        {turn} around\n    {if} a {is} {pressed}\n        {turn} left\n        spins = spins - 1\n    {if} d {is} {pressed}\n        {turn} right\n        spins = spins - 1\n    {if} p {is} {pressed}\n        {if} jumptime <= 0 {or} spins <= 0\n            {forward} stepsize * 4\n            jumptime = 5\n            spins = 2\n    tired_in = tired_in - 1\n```\n"
            16:
                start_code: '# umieść tutaj swój kod'
                story_text: "Spróbujmy się trochę poruszyć z grą w Twister!\nGdy wszyscy będą gotowi, naciśnij klawisz x, aby przejść do następnego ruchu!\n"
                example_code: "```\nlimbs = ['Right Hand', 'Left Hand', 'Right Foot', 'Left Foot']\ncolours = ['Blue', 'Green', 'Red', 'Yellow']\n{repeat} 20 {times}\n    l = limbs[{random}]\n    c = colours[{random}]\n    {if} x {is} {pressed}\n        {print} l + ' on ' + c + '!'\n```\n"
            17:
                start_code: '# umieść tutaj swój kod'
                story_text: "Now that you learned how to use ```elif```, we can use it with ```pressed```too! Be aware,\n```elif ... is pressed ``` is not possible! That is why we are going to nest some ```elif```\nstatements into the ```pressed``` options. We also had to add ```:``` to the code to make\neverything work! imagine the turtle being able to do a superjump forward. by pressing ```p``` the\nturtle can make a superjump! However, the turtle can only do this jump every 5 steps or every\n4 turns\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 4\n{repeat} 40 {times}\n    {if} w {is} {pressed}:\n        {forward} stepsize\n        jumptime = jumptime - 1\n    {if} s {is} {pressed}:\n        {turn} around\n    {if} a {is} {pressed}:\n        {turn} left\n        spins = spins - 1\n    {if} d {is} {pressed}:\n        {turn} right\n        spins = spins - 1\n    {if} p {is} {pressed}:\n        {if} jumptime <= 0 {or} spins <= 0:\n            {forward} stepsize * 3\n            jumptime = 5\n            spins = 4\n        {elif} jumptime > 0:\n            {print} \"you need to take more steps or turns before you can superjump!\"\n```\n"
            14:
                story_text: "Skoro już nauczyłeś się używać operatorów, możesz użyć również ich z poleceniem `{pressed}`!\nWyobraź sobie żółwia, który może skakać do przodu.\nPrzytrzymując klawisz `p` żółw może wykonać skok do przodu!\nJednakże żółw może wykonać ten skok tylko co 5 kroków lub co 4 obroty.\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 4\n{repeat} 40 {times}\n    {if} w {is} {pressed}\n        {forward} stepsize\n        jumptime = jumptime - 1\n    {if} s {is} {pressed}\n        {turn} around\n    {if} a {is} {pressed}\n        {turn} left\n        spins = spins - 1\n    {if} d {is} {pressed}\n        {turn} right\n        spins = spins - 1\n    {if} p {is} {pressed}\n        {if} jumptime <= 0 {or} spins <= 0\n            {forward} stepsize * 3\n            jumptime = 5\n            spins = 4\n```\n"
                start_code: '# umieść tutaj swój kod'
    years:
        name: Nowy Rok
        description: Odliczanie do nowego roku!
        default_save_name: Odliczanie do Nowego Roku
        levels:
            11:
                story_text: "## Piosenki\nW tym poziomie możesz użyć polecenia `{for} i {in} {range}` żeby odliczyć czas do Nowego Roku.\n\n### Ćwiczenie\nUzupełnij puste miejsca i upewnij się, że kod działa.\n"
                example_code: "## Odliczanie\n```\n{for} _ {in} _ 10 {to} 1\n    {print} i\n{print} 'Szczęśliwego Nowego Roku!'\n```\n"
                start_code: '# tutaj umieść swój kod'
