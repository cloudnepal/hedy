adventures:
    default:
        name: Uvod
        description: Nivo objašnjenje
        default_save_name: uvod
        levels:
            3:
                story_text_2: Takodje možeš dodati elemente u listu sa `{add}` i ukloniti ih sa `{remove}`.
                story_text: "## Napravi listu!\nU nivou 3 možeš napraviti listu. Možeš dozvoliti da kompjuter odabere nasumično iz liste. To postižeš sa `{at} {random}`.\n"
                example_code: "```\nživotinje {is} pas, mačka, kengur\n{print} životinje {at} {random}\n```\n"
                example_code_2: "```\nživotinje {is} pas, mačka, kengur\n{add} pingvin {to_list} životinje\n{remove} mačka {from} životinje\n{print} životinje {at} {random}\n```\n"
                start_code: '{print} zdravo svete!'
            10:
                example_code: "```\nživotinje {is} pas, mačka, riba\n{for} životinja {in} životinje\n  {print} 'Ja volim ' životinja\n```\n"
                start_code: "životinje {is} pas, mačka, riba\n{for} životinja {in} životinje\n  {print} 'Ja volim ' životinja"
                story_text: "## Za svaki element u mojoj listi...\nU ovom nivou učimo novi kod zvani`{for}`. Sa `{for}` možeš napraviti listu i koristiti sve elemente.\n`{for}` napravi odeljak, kao `{repeat}` i `{if}` tako da sve linije u odeljku moraju da počnu sa razmacima."
            12:
                example_code_4: "```\nime = {ask} 'Kako se zoveš?'\n{if} ime = 'Hedy'\n    {print} 'Zdravo!'\n```\n"
                story_text_5: "**Brojevima ne trebaju znaci navoda**\nZa brojeve, ne koristiš znake navoda posle `=`:\n"
                example_code_5: "```\nrezultat = 25\n{print} 'Osvojio si ' rezultat\n```\n"
                start_code: "{print} 'za decimalne brojeve sada treba da koristimo tačku'\n{print} 2.5 + 2.5"
                story_text: "## Brojevi i tekst\n**Decimalni brojevi**\nDo sada, Hedy nije dozvoljavao upotrebu decimalnih brojeva kao što je 1.5, ali sada je dozvoljeno. Vodi računa da računar koristi tačku `.` a ne zarez za decimalne brojeve."
                example_code: "```\n{print} 'Dva zarez pet plus dva zarez pet je...'\n{print} 2.5 + 2.5\n```\n"
                story_text_2: "**Sav tekst mora da bude izmedju znaka navoda**\nOd ovog nivoa pa nadalje moraćeš takodje da koristiš znake navoda i kada čuvas tekst sa `=`:\n"
                example_code_2: "```\nime = 'Hedy'\n{print} 'Zdravo ' ime\n```\n"
                story_text_3: "**Svi elementi u listi takodje moraju imati znake navoda**\nListe su tekst, tako da im trebaju znaci navoda takodje. Obrati pažnju da svaki pojedinačni element u listi ima znake navoda.\nOvo ti omogućava da sačuvaš dve reči kao jedan element u listu, na primer 'Hari Poter'.\n"
                example_code_3: "```\nsuperheroji = 'Spajdermen', 'Betmen', 'Kapetan Amerika'\n{print} superheroji {at} {random}\n```\n"
                story_text_4: "**Sav tekst posle `{if}` poredjenja takodje mora imati navodnike**\n"
            16:
                start_code: "voće = ['jabuke', 'banane', 'višnje']\n{print} voće"
                example_code: "```\nprijatelji = ['Marko', 'Marija', 'Milan']\nsrećni_brojevi = [15, 18, 6]\n{for} i {in} {range} 1 {to} 3\n    {print} 'srećan broj za' prijatelji[i]\n    {print} ' je ' srećni_brojevi[i]\n```\n"
                story_text: "## Sve više i više kao prvi kod!\nSada ćemo da napravimo liste kao što se prave u programerskom jeziku Python, sa uglastim zagradama oko liste! Takodje nastavljamo da koristimo znake navoda oko svakog elementa, kao što smo u prethodnim nivoima naučili.\nUglaste zagrade možeš koristiti i da ukažeš na tačno odredjeno mesto u listi."
            17:
                start_code: "{for} i {in} {range} 1 {to} 10:\n    {print} i\n{print} 'Spreman ili ne, evo me!'"
                story_text: "## Inače ako\nSada ćemo malo da izmenimo uvlačenje reda. Svaki put kada nam treba uvučeni red, potrebne su nam i dve tačke `:` na kraju prethodnog reda.\n\nU ovom nivou možeš takodje koristiti i novu komandu: `{elif}`. `{elif}` je skraćeno za {else} {if} i treba ti kada želiš da napraviš 3 (ili više!) opcije.\nUveri se!"
                example_code: "```\nnagrade = ['1 milion dinara', 'pita od jabuka', 'ništa']\ntvoje_nagrade = nagrade[{random}]\n{print} 'Osvojio si ' tvoje_nagrade\n{if} tvoje_nagrade == '1 milion dinara' :\n    {print} 'To! Bogat si!'\n{elif} tvoje_nagrade == 'pita od jabuka' :\n    {print} 'Mmmmm, pita od jabuka!'\n{else}:\n    {print} 'Više sreće sledeći put..'\n```\n"
            18:
                start_code: "ime = 'Hedy'\n{print}('Moje ime je ', ime)"
                story_text_3: "## Unos\nPoslednja promena koju ćemo morati da napravimo da bismo došli do koda u Python-u jeste da zamenimo `{ask}` sa `{input}`."
                example_code_3: "```\n{print}('Moje ime je Hedy!')\nime = {input}('Kako se zoveš?')\n{print}('Znači tvoje ime je ', ime)\n```\n"
                story_text: "## Poslednji nivo!\nStigli smo do koda pravog programerskog jezika Python-a! To znači da moramo da koristimo navodnike sa {print} i {range} od sada pa nadalje.\nTo takodje znači da od ovog nivoa možeš koristiti Hedy kod u bilo kom Python okruženju sve dok koristiš komande na Engleskom jeziku. Ako nisi do sada, možeš promeniti podešavanje u meniju komandi."
                example_code: "```\n{print}('Zdravo!')\n{for} i {in} {range}(1, 10):\n    {print}('Ovo je linija ', i)\n```\n"
                story_text_2: Ako želiš da štampaš više od jednog elementa, moraš ih odvojiti zarezima.
                example_code_2: "```\ntemperatura = 25\n{print}('Sada je ', temperatura, ' stepeni napolju')\n```\n"
            1:
                story_text: "## Dobrodošli u Hedy!\nU Nivou 1 možete koristiti komande `{print}`, `{ask}` i `{echo}`.\nIskucaj svoj kod u programerskom polju. Ili pritisni zeleno dugme u primeru koda i kod će se iskucati za vas!\nIsprobaj sam kod tako što ćeš pritisnuti zeleno 'Run code' dugme ispod programerskog polja.\n\nMožeš ispisati tekst na ekranu koristeći `{print}` komandu.     \n"
                example_code: "```\n{print} Zdravo!\n{print} Dobrodošao u Hedy!\n```\n"
                story_text_2: "Možeš takodje tražiti unos sa `{ask}` i ponoviti ga sa `{echo}` komandom.\n"
                story_text_3: "Pa, hajde da počnemo! Ne znaš šta da napraviš? U narednim odeljcima ćeš pronaći ideje za pravljenje programa.\n"
                example_code_2: "```\n{ask} Kako se zoveš?\n{echo} zdravo\n```\n"
                start_code: '{print} Zdravo svete!'
            2:
                story_text: "## Promenljive\nU Nivou 2 ćemo učiti dve nove komande: `{is}` i `{sleep}`.\nMožeš nazvati reč sa `{is}`. Ona se zove promenljiva. U ovom primeru smo napravili promenljivu koja se zove Ime i promenljivu koja se zove Uzrast. Možeš koristiti reč Ime bilo gde u svom kodu i ona će biti zamenjena sa Hedy, ovako:\n\nNa ovaj način ti više ne treba komanda `{echo}`!\n"
                example_code: "```\nime {is} Hedy\nuzrast {is} 15\n{print} ime ima uzrast godina.\n```\n"
                story_text_2: "`{print}` i dalje radi na isti način, ali komanda `{ask}` je promenjena. Treba takodje da koristiš promenljivu i u komandi `{ask}` . To izgleda ovako:\n"
                example_code_2: "```\nodgovor {is} {ask} Kako se zoveš?\n{print} Zdravo odgovor\n```\n"
                story_text_3: "Druga nova komanda u ovom nivou je `{sleep}`, koja pauzira tvoj program na sekund. Ako iskucaš broj iza komande {sleep}, program će pauzirati za taj broj sekundi.\n"
                example_code_3: "```\n{print} Moja omiljena boja je...\n{sleep} 2\n{print} zelena!\n```\n"
                start_code: '{print} zdravo svete!'
            4:
                start_code: "{print} 'Zdravo svete'"
                story_text: "## 'Znaci navoda'\nU nivou 4 `{ask}` i `{print}` su izmenjeni.\nMoraš staviti tekst koji želiš da ispišeš izmedju znaka navoda.\nOvo je korisno, jer sada možeš da ispišeš sve reči koje želiš. Takodje i reči koje si koristio da sačuvaš nešto sa `{is}`.\nVećina programskih jezika takodje koriste znake navoda prilikom ispisivanja, šo znači da smo korak bliži pravom programiranju!\n"
                story_text_2: "## Kontrakcije (skraćivanje reči)\nVažno! Obrati pažnju da sada kada koristimo znake navoda, Hedy će se zbuniti kada koristiš apostrof za kontrakcije. U našem jeziku se retko koriste, npr. rek'o ali u Engleskom jeziku su mnogo češći kao npr. I'm ili What's.\nPostaraj se da ukloniš te apostrofe i reči napišeš pravilno npr. rekao, I am, What is.\nPogledaj primer koda da vidiš pogrešan način korišćenja apostrofa.\n"
                example_code: "```\n{print} 'Treba da koristiš znake navoda od sada pa nadalje!'\nodgovor {is} {ask} 'Šta treba da koristimo od sada pa nadalje?'\n{print} 'Treba da koristimo' odgovor\n```\n"
                example_code_2: "```\n_ Ovo je pogrešan način korišćenja apostrofa _\n{print} 'I'm babysitting my sister's kids'\n{print} 'What's more fun than that?'\n```\n"
            5:
                start_code: "ime {is} {ask} 'Kako se zoveš?'\n{if} ime {is} Hedy {print} 'super!' {else} {print} 'bla'"
                story_text: "## Ako... onda....\nU nivou 5 se nalazi novina, zvana `{if}`! Sa `{if}` možeš birati izmedju dve različite opcije.\nOvaj kod štampa super! ako odabereš ime Hedy, i bla! ako odabereš nešto drugo.\n`{ask}` i `{print}` i dalje rade kao što su i radili u nivou 4.\n"
                example_code: "```\nime {is} {ask} 'Kako se zoves?'\n{if} ime {is} Hedy {print} 'super!' {else} {print} 'bla!'\n```\n"
                story_text_3: "## Liste\nKada želimo da proverimo da li je nešto na listi, sada možemo koristiti komandu `{in}`.\nOvaj kod štampa super! ako odabereš zelenu ili žutu, inače štampa bla!\n"
                example_code_3: "```\nlepe_boje {is} zelena, žuta\nomiljena_boja {is} {ask} 'Koja je tvoja omiljena boja?'\n{if} omiljena_boja {in} lepe_boje {print} 'super!'\n{else} {print} 'bla!'\n```\n"
                story_text_2: "Ponekad kod sa `{if}` postane jako dugačak i zbog toga ne może da stane u jednu liniju na ekranu. <br> Možeš takodje podeliti kod u dve linije, počevši drugu liniju sa `{else}` ovako:\n"
                example_code_2: "```\nime {is} {ask} 'Kako se zoveš?'\n{if} ime {is} Hedy {print} 'super!'\n{else} {print} 'bla!'\n```\n"
                story_text_4: "Još nešto što radi sa `{if}` je `{pressed}`! Sa `{pressed}` možeš povezati bilo koje slovo i bilo koji broj na tastaturi sa bilo kojom komandom. Ako ih povežeš, i pritisneš tipku na tastaturi, nešto će se desiti. Probaj!\n"
                example_code_4: "```\n{if} x {is} {pressed} {print} 'radi!'\n```\n"
            6:
                start_code: "{print} '5 puta 5 je ' 5 * 5"
                story_text: "## 1 + 1\n U ovom nivou naučićeš nešto novo: sada možeš da vršiš i matematičke operacije.\n\n Sabiranje je lako, pišeš isto kao i u matematici: `5 + 5` na primer. Oduzimanje je takodje lako, `5 - 5`.\n\n Množenje je malo drugačije, jer ne postoji znak puta na tastaturi. \n Zato množimo sa zvezdicom na tipki iznad broja 8: `5 * 5`. Čitaj kao \"5 puta 5\" to najbolje pomaže da zapamtiš.\n"
                example_code: "```\n{print} '5 plus 5 je ' 5 + 5\n{print} '5 minus 5 je ' 5 - 5\n{print} '5 puta 5 je ' 5 * 5\n```\n"
                story_text_2: "Takodje, menjamo način čuvanja reči u promenljivoj! Sada možeš koristiti `=` umesto   `{is}` kada čuvaš ime ili broj u promenljivoj, ovako:\n"
                example_code_2: "```\nime = Hedy\nodgovor = 20 + 4\n```\n"
            7:
                start_code: "{repeat} 3 {times} {print} 'Hedy je zabava!'"
                story_text: "## Nivo 7! Nivo 7!\nNivo 7 dodaje komandu `{repeat}`.  `{repeat}` se može koristiti za izvršavanje jedne linije koda više puta.\n"
                example_code: "```\n{repeat} 3 {times} {print} 'Hedy je zabava!'\n```\n"
            8:
                start_code: "{repeat} 5 {times}\n    {print} 'Zdravo ljudi'\n    {print} 'Ovo će biti ištampano 5 puta'"
                story_text: "## Uvlačenje reda\n`{ask}` i `{print}` i dalje rade kao što ih znamo. Ali `{if}`, `{else}`, {pressed} i `{repeat}` su promenjeni!\nSada možeš da grupišeš nekoliko linija zajedno, ali moraćeš da uvučeš kod.\nTo znači pravljenje četiri razmaka na početku linije. Takodje ćeš morati da uvučeš red kada želiš da napraviš odeljak od jedne linije koda.\n"
                example_code: "Ovo je kako komanda `{repeat}` radi sad:\n```\n{repeat} 5 {times}\n    {print} 'Zdravo svima'\n    {print} 'Ovo je sve ponovljeno 5 puta'\n```\nOvo je kako komande `{if}` i `{else}` rade sada:\n\n```\nime {is} {ask} 'Kako se zoveš?'\n{if} ime {is} Hedy\n    {print} 'Dobrodošla Hedy'\n    {print} 'Možeš se igrati na svom računaru!'\n{else}\n    {print} 'ULJEZ!'\n    {print} 'Ne možeš koristiti ovaj računar!'\n```\n"
            9:
                start_code: "{repeat} 3 {times}\n    hrana = {ask} 'Sta želiš?'\n    {if} hrana {is} pica\n        {print} 'super!'\n    {else}\n        {print} 'pica je bolja'"
                story_text: "## Sve zajedno sad!\nU ovom nivou ne samo da možeš da koristiš višebrojne linije sa  `{if}` i `{repeat}`, nego možeš da ih koristis i zajedno!\nU primeru ćeš videti komandu `{if}` unutar komande `{repeat}`. Takodje je dozvoljeno i obrnuto. Kao i komanda `{if}` je dozvoljena unutar komande `{if}` i `{repeat}` unutar `{repeat}`.\nPokušaj!\n"
                example_code: "```\n{repeat} 3 {times}\n    hrana = {ask} 'Šta želiš?'\n    {if} hrana {is} pica\n        {print} 'super!'\n    {else}\n        {print} 'pica je bolja'\n```\n"
            11:
                start_code: "{for} brojač {in} {range} 1 {to} 5\n    {print} brojač"
                story_text: "## Petlje!\nU ovom nivou, dodajemo novi oblik za `{for}`. U ranijim nivoima, koristili smo `{for}` sa listom, ali `{for}` možemo koristiti i sa brojevima.\nTo radimo tako što dodamo ime promenljivoj, i u nastavku dodamo `{in}` `{range}`. Onda napišemo broj sa kojim ćemo početi, `{to}` i broj sa kojim ćemo završiti.\n\nProbaj u primeru i vidi sta će se desiti! I u ovom nivou ćeš morati da koristiš uvučene redove za sve linije koje dodju ispod `{for}` izjave."
                example_code: "```\n{for} brojač {in} {range} 1 {to} 5\n    {print} brojač\n```\n"
            13:
                start_code: "ime = {ask} 'kako se zoves?'\nuzrast = {ask} 'koliko imas godina?'\n{if} ime {is} 'Hedy' {and} uzrast {is} 2\n    {print} 'Ti si prava Hedy!'"
                story_text: "## i... ili..?\nSada ćemo da naučimo `{and}` i `{or}`! Ako hoćeš da proveriš dve izjave, ne moraš koristiti dva puta {if} nego možeš koristiti `{and}` i `{or}`. Ako koristiš `{and}`, obe izjave, levo i desno od `{and}` moraju biti istinite. Ali možemo takodje koristiti i `{or}`. U tom slučaju samo jedna izjava mora biti tačna."
                example_code: "```\nime = {ask} 'Kako se zoveš?'\nuzrast = {ask} 'koliko imaš godina?'\n{if} ime {is} 'Hedy' {and} uzrast {is} 2\n    {print} 'Ti si prava Hedy!'\n```\n"
            14:
                start_code: "uzrast = {ask} 'Koliko imaš godina?'\n{if} uzrast < 13\n    {print} 'Mladji si od mene!'\n{else}\n    {print} 'Stariji si od mene!'"
                story_text: "## Dobro, Bolje, Najbolje!\nNaučićemo još novih stvari. Možda to već znate iz matematike, znaci manje `<` i veće `>`.\nManje `<` proverava da li je prvi broj manji nego drugi, na primer uzrast `<` 12 proverava da li je uzrast manji od 12 godina.\nAko želiš da proveriš da li je prvi broj manji ili jednak drugom broju, možes koristiti znak manje ili jednako `<=`, na primer uzrast `<=` 11.\nZnak više `>` proverava da li je prvi broj veći nego drugi, na primer uzrast `>` 10 proverava da li je uzrast veći od 10.\nAko želiš da proveriš da li je prvi broj veći ili jednak drugom broju, možes koristiti znak veće ili jednako`>=`, na primer uzrast `>=` 11.\nOva poredjenja koristiš sa `{if}`, ovako:\n"
                example_code: "```\nuzrast = {ask} 'Koliko imaš godina?'\n{if} uzrast > 12\n    {print} 'Stariji si od mene!'\n```\n"
                story_text_2: "Od ovog nivoa pa nadalje, ako želiš da porediš tačno, možeš koristiti dva znaka za jednačenje `==`. Tako je u većini programskih jezika:\n"
                example_code_2: "```\nime = {ask} 'Kako se zoveš?'\n{if} ime == 'Hedy'\n    {print} 'Super si!'\n```\n"
                story_text_3: "Možeš takodje porediti i da li nešto *nije* jednako nečemu, koristeći ovaj znak `!=` :\n"
                example_code_3: "```\nime = {ask} 'Kako se zoveš?'\n{if} ime != 'Hedy'\n    {print} 'Ti nisi Hedy'\n```\n"
            15:
                start_code: "odgovor = 0\n{while} odgovor != 25\n    odgovor = {ask} 'Koliko je 5 puta 5?'\n{print} 'Tačan odgovor je dat'"
                story_text: "##  Još petlji!\nSada ćemo naučiti novu petlju, `{while}` petlja! Nastavljamo petlju sve dok je izjava tačna.\nTako da nemoj zaboraviti da promeniš vrednost elementa u petlji.\n\nU primeru koda, nastavljamo sve dok ne dobijemo tačan odgovor.\nAko nikad ne dobijemo tačan odgovor, petlja se neće nikad prekinuti!"
                example_code: "```\nodgovor = 0\n{while} odgovor != 25\n    odgovor = {ask} 'Koliko je 5 puta 5?'\n{print} 'Tačan odgovor je dat'\n```\n"
    story:
        levels:
            3:
                example_code_3: "```\n{print} Njegov ranac je postao previše težak.\n{print} Unutra je bila flaša sa vodom, baterijska lampa i cigla.\nranac {is} vida, lampa, cigla\notpad {is} {ask} Šta bi iz torbe trebalo izbaciti?\n{remove} otpad {from} ranac\n```\n"
                start_code: '{print} Tvoja priča'
                example_code_2: "```\n{print} On čuje zvuk\nživotinje {is} \U0001F43F, \U0001F994, \U0001F987, \U0001F989\nživotinja {is} {ask} Šta misliš da je to?\n{add} životinja {to_list} životinje\n{print} to je bila životinjal {at} {random}\n```\n"
                story_text: "## Priča\nU nivou 3 možeš osmisliti priču da bude još zanimljivija. Možeš odabrati bilo koje čudovište, životinju ili bilo koju drugu prepreku, ovako:\n"
                example_code: "```\nživotinje {is} \U0001F994, \U0001F43F, \U0001F989, \U0001F987\n{print} On sada cuje zvuk životinje {at} {random}\n```\n"
                story_text_2: "Komanda `{add}` ti takodje može biti korisna u tvojoj priči.\n"
                story_text_3: "Ovo je primer komande `{remove}` u tvojoj priči\n\n### Vežbanje\nPrekopiraj tvoju priču iz prethodnog nivoa u ovaj nivo.\nU ovom novou si naučio 3 nove komande `{at} {random}` , `{add} {to}` i `{remove} {from}`.\nDodaj nove linije koda u svoju priču, tako da iskoristiš svaku komandu bar jednom.\n"
            4:
                example_code: "```\nname {is} {ask} _ What is your name? _\n{print}  _ The main character is called _ name\n{print} name  _ is now going to walk in the woods _\n{print} name _ is a bit scared _\nanimals {is} \U0001F994, \U0001F43F, \U0001F989, \U0001F987\n{print} _ He hears the sound of a _ animals {at} {random}\n{print} name _ is afraid this is a haunted forest _\n```\n"
                start_code: "{print} 'Your story will be printed here!'"
                story_text: "## Story\nYou may have noticed that there is still a problem in the previous levels. Did you try to print a sentence that contained the word name? i.e. `{print}` my name is name.\nYou can solve that in this level. You must use quotation marks for everything that you are going to print.\n\n### Exercise\nCopy the example code and make it work by adding quotation marks on the lines.\n\n### Exercise 2\nGo back to the previous level and copy your story code. Make the code work in this level by adding quotation marks in the right spots.\nMind: The variables in your own story should be outside of the quotation marks. Just like the second line of the example code. In that line the variable name is placed outside of the quotation marks.\n"
            10:
                start_code: '# place your code here'
                story_text: "## Story\nIn this level you can use the {for} command in your story. In this way you could easily program the children's book 'Brown bear, Brown bear, what do you see'.\n\n### Exercise\n\nLook at <a href=\"https://www.yonkerspublicschools.org/cms/lib/NY01814060/Centricity/Domain/1621/Brown%20Bear%20Book.pdf\"> the story</a> if you do not know it, and make sure it is printed as in the book.\n"
                example_code: "```\nanimals = _ , _ , _ \n{print} 'Brown bear, Brown bear'\n{print} 'What do you see?'\n```\n"
            12:
                story_text: "## Story\nIn this level you can use the quotation marks to save multiple words in a variable."
                example_code: "```\nname = 'The Queen of England'\n{print} name ' was eating a piece of cake, when suddenly...'\n```\n"
                start_code: '# place your code here'
            15:
                start_code: '# place your code here'
                story_text: "## Story\nUsing the `{while}` loop can make your stories more interesting. For example, you can use `{while} game {is} 'on'` so you can play until the game is over.\nOr you can use `{while} sword {is} 'lost'` so the player can't continu the game until they have found something.\n"
                example_code: "```\nkeys = 'lost'\n{print} 'You are standing in your garden and you have lost your keys.'\n{print} 'Where do you want to look for them?'\n{print} 'You can choose: tree, flowerbed, rock, postbox'\n{while} keys == 'lost'\n    location = {ask} 'Where do you want to look?'\n    {if} location == 'flowerbed'\n        {print} 'Here they are!'\n        keys = 'found'\n    {else}\n        {print} 'Nope they are not at the ' location\n{print} 'Now you can enter the house!'\n```\n"
            1:
                story_text: "## Osmisli priču\nU nivou 1 možeš da osmisliš priču sa različitim glavnim junacima koje ćeš sam uneti.\n\nNa prvoj liniji, koristi `{ask}` i upitaj ko će biti glavni junak priče.\n\nPosle te prve linije, počni sa `{print}` ako rečenica treba da bude ištampana.\nKoristi `{echo}` ako želiš da tvoj glavni junak bude na kraju rečenice.\n"
                example_code: "```\n{ask} Glavni junak priče je\n{print} Glavni junak će sada da ide da prošeta u šumu\n{echo} On je pomalo uplašen,\n{print} Čuje neobične zvuke svuda unaokolo\n{print} Boji se da je ovo ukleta šuma\n```\n"
                story_text_2: "### Vežbanje\nSada osmisli svoju pricu sa najmanje 6 linija koda.\nOva priča ne sme biti ista kao kod iz primera.\nKoristi bar jednu komandu `{ask}` i jednu komandu `{echo}`.\nMožeš odabrati bilo koju temu.\nAko ne možeš da smisliš baš ni jednu, upotrebi neku od naših tema: odlazak u bioskop, sportska utakmica ili dan u zološkom vrtu.\n"
                start_code: '{print} Tvoja priča počinje ovde'
            2:
                story_text: "## Priča\nU nivou 2 možeš učiniti da tvoje priče budu još zabavnijim. Ime tvog glavnog junaka se sada može nalaziti bilo gde u rečenici.\n\nMada, za to moraš isprogramirati malo dodatnog koda. Glavnog junaka moraš sada imenovati prvo.\n\nOnda možeš staviti ime bilo gde u rečenici.\n"
                story_text_2: "### Vežbanje\nSada je vreme da dodaš promenljive u tvoju priču koju si osmislio u prethodnom nivou.\nIdi u 'Moji programi', potraži svoju priču o avanturi u nivou 1 i prekopiraj kod. Dodaj taj kod u ekran za unos u ovom nivou.\n\nOvaj kod neće raditi u ovom novou, jer još uvek nisi koristio promenljive.\nPromeni komande `{ask}` i `{echo}` u svom kodu u tačan oblik koji si naučio u ovom nivou.\n\n**Dodatno** Dodaj komandu sleep u svoj kod da bi podigao napetost u svojoj priči.\n"
                example_code: "```\nime {is} {ask} Kako se glavni junak zove?\n{print} ime će sada da trči u šumi\n{print} ime je pomalo uplašen\n{print} On odjednom čuje neobičan zvuk...\n{sleep}\n{print} ime je uplašen da je ovo ukleta šuma\n```"
                start_code: '{print} Tvoja priča'
            5:
                story_text: "## Story\nIn this level you can program different endings, which will make your story even more fun.\nIn the example code you can see how to make 2 different endings.\n\n### Exercise 1\nWrite a new short story of at least 6 lines of code about a topic of your choosing.\nNo inspiration? Choose one of these topics: a superhero, a boring school day, stranded on a desert island.\n\nNow give the player a change to choose a happy or a bad end, just like in the example code.\nProgram both the endings.\n\n### Exercise 2\nCopy the story you've created in your own story adventure in the previous levels.\nFind a way to add at least 2 `{if}` and `{else}` commands to your story.\nThis can be with a happy or bad ending, but you can also try to find other ways to incoporate the commands.\n"
                example_code: "```\nname {is} {ask} 'Who is walking in the forest?'\n{print} name ' walks through the forest'\n{print} name ' encounters a monster'\nend {is} {ask} 'Would you like a good or a bad ending?'\n{if} end {is} good {print} name ' takes the sword and the monster quickly runs away'\n{else} {print} 'The monster eats ' name\n```\n"
                start_code: "{print} 'Here your story will start!'"
            7:
                story_text: "## Story\nIn a story, someone says words several times. For example, when someone calls for help or sings a song.\nYou can put such repetitions in your story, in this level with `{repeat}`.\n\n### Exercise\nAdd repetition to your own story. Go back to your saved programs, choose your story program from level 6 and\nfind a line containing `{print}` and repeat it!\n"
                example_code: "```\n{print} 'The prince kept calling for help'\n{repeat} 5 {times} {print} 'Help!'\n{print} 'Why is nobody helping me?'\n```\n"
                start_code: "{repeat} 5 {times} {print} 'Help!'"
            8:
                story_text: "## Story\nIn this level you can use multiple lines in your {if} commands, this way you can upgrade your happy or sad ending!\n\n### Exercise 1\nThe example code shows two different endings; one where the characters jump in a time machine and one where they do not.\nComplete the blanks with at least one sentence per ending. \n**(extra)** Make the story longer. What happens in the story? You can also add a second `{ask}` with different options.\n\n### Exercise 2\nGo back to your saved programs, choose your story program from level 5. Now write a good and a bad ending of at least three lines long each! \n"
                example_code: "```\n{print} 'OH NO! The T-rex is closing in!'\nend = {ask} 'Do you want a happy or a sad ending?'\n{if} end {is} happy\n    {print} 'Just in time Richard jumps back into the time machine!'\n    {print} _\n{else}\n    {print} 'Oh no! Richard is too slow...'\n    {print} _\n```\n"
                start_code: '# place your code here'
            9:
                story_text: "## Story\nIn this level you can use `{if}` and `{repeat}` commands inside other `{if}` and `{repeat}` commands. \nThis gives you many options and really helps you to make your story interactive.\n\n### Exercise 1\nFinish the code so the `{if}` works correctly.\n\n### Exercise 2\nAdd an `{if}` and `{else}` for the part of the story where Robin goes home too.\n\n### Exercise 3\nGo back to your level 8 story and use at least two `{if}`s inside another `{if}`.\n"
                example_code: "```\n{print} 'Robin is walking downtown'\nlocation = {ask} 'Is Robin going into a shop, or does she go home?'\n{if} location {is} shop\n    {print} 'She enters the shop.'\n    {print} 'Robin sees an interesting looking book'\n    book = {ask} 'Does Robin buy the book?'\n    {if} book {is} yes\n    _ {print} 'Robin buys the book and goes home'\n    _ {else}\n    _ {print} 'Robin leaves the shop and goes home'\n{else}\n    {print} 'Robin goes home'\n```\n"
                start_code: '# place your code here'
            13:
                story_text: "## Story\nBy using the `{and}` and `{or}` commands, you can shorten your stories. For example, check out the dragon story.\n\n### Exercise\nCan you make your own adventure minigame like this?\n"
                example_code: "```\nsword = 'lost'\ngame = 'on'\n{print} 'Our hero is walking through the forest'\n{print} 'The path splits two ways'\n{for} i {in} {range} 0 {to} 2\n    {if} game {is} 'on'\n        path = {ask} 'Which path should she choose?'\n        {if} path {is} 'left' {and} sword {is} 'found'\n            {print} 'Our hero comes across a dragon!'\n            {print} 'Luckily our hero has a sword to defeat the beast!'\n            game = 'over'\n        {if} path {is} 'left' {and} sword {is} 'lost'\n            {print} 'Our hero finds a dragon, but she doesnt have any weapons!'\n            {print} 'Our hero is beaten by the dragon...'\n            {print} 'Try again'\n            game = 'over'\n        {if} path {is} 'right' {and} sword {is} 'found'\n            {print} 'You have already found the sword. There is nothing left here.'\n            {print} 'She walks back'\n        {if} path {is} 'right' {and} sword {is} 'lost'\n            {print} 'Our hero finds a sword'\n            {print} 'This could come in very handy'\n            sword = 'found'\n```\n"
                start_code: '# place your code here'
        name: Priča
        description: Priča
        default_save_name: Priča
    parrot:
        levels:
            2:
                start_code: '{print} Im Hedy the parrot!'
                story_text: "## Parrot\nCreate your own online pet parrot that will copy you!\n"
                example_code: "```\n{print} Im Hedy the parrot\nname {is} {ask} whats your name?\n{print} name\n{sleep}\n{print} squawk\n{sleep}\n{print} name\n```\n"
                story_text_2: "### Exercise\nYou can use variables to make the parrot say more than only your name. Can you complete this code?\n"
                example_code_2: "```\n{print} Im Hedy the parrot\nname {is} {ask} whats your name?\n{print} name\n{sleep}\n{print} name\nsurname {is} {ask} whats your surname?\n_\n{sleep}\n_\n```\n"
            1:
                story_text: "## Parrot\nCreate your own online pet parrot that will copy you!\n"
                example_code: "```\n{print} Im Hedy the parrot\n{ask} whats your name?\n{echo}\n{echo}\n```\n"
                story_text_2: "### Exercise\nCopy the example code to your input screen by clicking on the yellow button.\nMake the parrot ask a different question. Fill in the blanks in the example!\n**Extra** You can also let the parrot ask multiple questions. Type in some more lines of code beneath your own code.\n"
                example_code_2: "```\n{print} Im Hedy the parrot\n{ask} _\n{echo}\n{echo}\n"
                start_code: "{print} Im Hedy the parrot\n{ask} What is your name?\n{echo}\n{echo}\n"
            3:
                story_text: "## Parrot\nTeach your parrot a new word with `{add}`.\n### Exercise\nHow can you make your parrot say multiple words?\n"
                example_code: "```\nwords {is} squawk, Hedy\n{print} Train your parrot!\nnew_word {is} {ask} Which word do you want to teach them?\n{add} new_word {to_list} words\n{print} \U0001F9D2 Say new_word, Hedy!\n{print} \U0001F99C words {at} {random}\n```\n"
                start_code: '# place your code here'
            4:
                story_text: "## Parrot\nIn this level we have to use quotation marks with the commands `{ask}` and `{print}`.\n### Exercise\nComplete the code by filling in quotation marks on the blanks.\n"
                example_code: "```\nwords {is} squawk, Hedy\n{print} _ Train your parrot! _\nnew_word {is} {ask} _ Which word do you want to teach them? _\n{add} new_word {to_list} words\n{print} _ \U0001F9D2 Say _ new_word _, Hedy!_\n{print} _ \U0001F99C _ words {at} {random}\n```\n"
                start_code: '# Write your code here'
            5:
                story_text: "## Parrot\nReward your parrot if it says the correct word!\nFinish the code by filling in the 4 missing commands.\n"
                example_code: "```\nwords {is} squawk, Hedy\n{print} 'Train your parrot!'\nnew_word {is} {ask} 'Which word do you want to teach them?'\n{add} new_word {to_list} words\nsaid_word {is} words {at} {random}\n{print} '\U0001F9D2 Say ' new_word ', Hedy!'\n{print} '\U0001F99C ' said_word\n_ said_word {is} new_word _ '\U0001F9D2 Great job, Hedy! \U0001F36A'\n_ _ '\U0001F9D2 No, Hedy! Say ' new_word\n```\n"
                start_code: '# place your code here'
        name: Parrot
        description: Create your own online pet parrot that will copy you!
        default_save_name: Parrot
    songs:
        levels:
            6:
                story_text: "## Songs\nSongs often contain a lot of repetition. Sometimes the repetition is also based on counting.\nFor example, in the well-known song 'Bottles of beer'. You can program that song with a little math.\n\nTip: Use the read aloud function to let Hedy sing the song to you!\n\n### Exercise\nYou can now repeat lines 2 to 7 as many times as you want by copying the lines.\n"
                example_code: "```\nverse = 99\n{print} verse ' bottles of beer on the wall'\n{print} verse ' bottles of beer'\n{print} 'Take one down, pass it around'\nverse = verse - 1\n{print} verse ' bottles of beer on the wall'\n{sleep}\n```\n"
                story_text_2: "## 5 Little Monkeys jumping on the bed\nThis children's song counts down from 5 little monkeys to 1 monkey.\nIf you copy line 2 - 7 and paste it under the the code, you can sing the whole song!\n"
                example_code_2: "```\nnumber = 6\nnumber = number - 1\n{print} number ' little monkeys jumping on the bed'\n{print} 'One fell off and bumped his head'\n{print} 'Mama called the doctor and the doctor said'\n{print} 'NO MORE MONKEYS JUMPING ON THE BED!'\n{sleep}\n```\n"
                start_code: "{print} 'Lets sing!'"
            10:
                example_code: "```\nfamily = baby, mammy, daddy, grandma, grandpa\n_ _ _ _ \n  {print} _\n```\n"
                start_code: '# place your code here'
                story_text: "## Songs\nWith `{for}` you can print make the whole baby shark song (including all the other sharks in the family) in only 6 lines!\n\n### Exercise 1\nCan you make the baby shark code even shorter by using a `{for}` command? Finish the example code.\n"
                story_text_2: "### Exercise 2\nPrint the song Five little moneys jumping on the bed. Look up the text if you don't remember.\n\n**(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.\n"
                example_code_2: "```\nmonkeys = 5, 4, 3, 2, 1\n```\n"
            11:
                story_text: "## Songs\nIn this level you can use the `{for}` with `{range}` to make songs that use counting, like the 5 little monkeys.\n\n### Exercise 1\nFill in the blanks and make the code work! If you don't remember the song text, look it up yourself.\n\n### Exercise 2\nThe final line of the song is different from the others. Print this line inside the `{for}`, and use an `{if}` to make it work correctly.\n"
                example_code: "```\n_ monkeys _ _ 5 _ 1\n    {print} monkeys ' little monkeys jumping on the bed'\n    _\n```\n"
                start_code: '# place your code here'
            12:
                story_text: "## Sing a song!\nIn this song we can make it even easier to program 'if you're happy and you know it, clap your hands'. Because we can put all of the actions in a variable, check it out:\n\n### Exercise\nCan you add the right amount of indentation to each line to make the song play correctly?\nMind: Not all lines need indentation\n"
                example_code: "```\n_ actions = 'clap your hands', 'stomp your feet', 'shout Hurray!'\n_ {for} action {in} actions\n_ {for} i {in} {range} 1 {to} 2\n_ {print} 'if youre happy and you know it'\n_ {print} action\n_ {print} 'if youre happy and you know it and you really want to show it'\n_ {print} 'if youre happy and you know it'\n_ {print} action\n```\n"
                start_code: '# place your code here'
            7:
                example_code: "```\n{repeat} _ _ {print} 'Baby Shark tututudutudu'\n{print} 'Baby Shark'\n```\n"
                start_code: "{print} 'Baby Shark'"
                story_text: "## Songs\nSongs often contain a lot of repetition. For example... Baby Shark! If you sing it, you keep singing the same thing:\n\nBaby Shark tututudutudu <br>\nBaby Shark tututudutudu <br>\nBaby Shark tututudutudu <br>\nBaby Shark\n\n### Exercise\nYou can print the song Baby Shark with a `{repeat}`? Finish the code by replacing the blanks?\n**Extra** After Baby Shark you can of course also program other songs. There are many songs with repetition!\nCan you think of one more song and print it?\n"
            8:
                story_text: "## Songs\nIn a previous level you've programmed the song 'Bottles of beer'. But without the `{repeat}` command, you had to copy the verses many times.\nIn this level you can repeat the song 99 times, just by adding one simple line!\n\n### Exercise\nAdd the right command on the blanks and indent the code correctly.\n"
                example_code: "```\nverse = 99\n_ 99 {times}\n{print} verse ' bottles of beer on the wall'\n{print} verse ' bottles of beer'\n{print} 'Take one down, pass it around'\nverse = verse - 1\n{print} verse ' bottles of beer on the wall'\n```\n"
                start_code: '# place your code here'
            16:
                story_text: "## Sing a song!\nIn this level, you can program a song like OldMacDonald even more quickly. You can connect the right animal to the right sound by simply putting them in the same place in the list.\nThe Drunken Sailor is also quickly made in this level. You only need 8 lines for the entire song, check it out!\n"
                example_code: "## Old MacDonald\n```\nanimals = ['pig', 'dog', 'cow']\nsounds = ['oink', 'woof', 'moo']\n{for} i {in} {range} 1 {to} 3\n    animal = animals[i]\n    sound = sounds[i]\n    {print} 'Old McDonald had a farm'\n    {print} 'E I E I O!'\n    {print} 'and on that farm he had a ' animal\n    {print} 'E I E I O!'\n    {print} 'with a ' sound sound ' here'\n    {print} 'and a ' sound sound ' there'\n    {print} 'here a ' sound\n    {print} 'there a ' sound\n    {print} 'everywhere a ' sound sound\n```\n\n## Drunken Sailor\n```\nlines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']\n{for} line {in} lines\n    {for} i {in} {range} 1 {to} 3\n        {print} line\n    {print} 'early in the morning'\n    {for} i {in} {range} 1 {to} 3\n        {print} 'way hay and up she rises'\n    {print} 'early in the morning'\n```\n"
                start_code: '# place your code here'
        name: Sing a song!
        description: Print a song
        default_save_name: Song
    turtle:
        levels:
            9:
                story_text_2: "## Turtle Control\nYou can now also move the turtle in many more ways than only forward or backwards!\n### Exercise 2\nFinish the code so you can control the turtle with keys. w for forward, s for backward, a for left and d for right. \nTip: For left and right, you will need to use three lines of code!\n"
                example_code_2: "```\n{repeat} 40 {times}\n    {if} w {is} {pressed}\n        {forward} 10\n    {if} a {is} {pressed}\n        _ _\n```\n"
                story_text: "## Turtle\nNow that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.\n\n### Exercise 1\nThis code creates three black triangles, change that into five pink squares.\n\n **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.\n"
                example_code: "```\n{color} {black}\n{repeat} 3 {times}\n    {repeat} 3 {times}\n        {forward} 10\n        {turn} 120\n    {color} {white}\n    {forward} 50\n    {color} {black}\n```\n"
                start_code: '# place your code here'
            1:
                story_text: "## Let's draw\nYou can also use Hedy to draw. By combining turns and lines, you can make a square or stairs!\n\nUsing `{forward}` you draw a line forwards. The number behind it determines how far the turtle will walk. `{turn} {right}` turns a quarter turn in clockwise direction, `{turn} {left}` turns counter clockwise.\n\nIf you want to go backwards, you use the `{forward}` command but with a negative number. So for example `{forward} -100`\n\n### Exercise\nThis is the start of a little staircase. Can you make it have 5 steps?\n"
                example_code: "```\n{forward} 50\n{turn} {right}\n{forward} 50\n{turn} {left}\n{forward} 50\n```\n"
                start_code: "{forward} 50\n{turn} {left}"
            2:
                story_text: "## Turtle\nIn this level you can use variables to make the turtle interactive. For example you can ask the player how many steps the turtle must make.\n"
                example_code: "```\nanswer {is} {ask} How many steps should the turtle make?\n{forward} answer\n```\n"
                story_text_2: "Also, in level 1 the turtle could only turn left or right. That is a bit boring!\nIn level 2 he can point his nose in all directions.\n\nUse 90 to turn a quarter. We call this degrees. A full turn is 360 degrees.\n\n### Exercise\nCan you make a figure with this code? Maybe a triangle or a circle?\n"
                example_code_2: "```\n{print} Drawing figures\nangle {is} 90\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n```\n"
                start_code: "{print} Turtle race!\nangle {is} 90\n{turn} angle\n{forward} 25"
            5:
                story_text: "## Let's draw\nIn level 5 you can make a choice with `{if}`. For example between different types of figures.\n"
                example_code: "```\n{print} 'Drawing Figures'\nfigure {is} {ask} 'Do you want a square or a triangle?'\n{if} figure {is} triangle angle {is} 120\n{else} angle {is} 90\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n```\n"
                start_code: "{print} 'Drawing Figures'\nfigure {is} {ask} 'Do you want a square or a triangle?'\n{if} figure {is} triangle angle {is} 120 {else} angle {is} 90\n{turn} angle\n{forward} 25"
            3:
                story_text: "## Searching turtle\nIn this level you can use `{at} {random}` with the drawing turtle. A random choice makes the turtle walk a different path each time.\nUse `{at} {random}` to choose a value from a list.\n### Exercise\nCan you copy and paste lines 2 and 3 to create a longer random path?\n"
                example_code: "```\nangles {is} 10, 50, 90, 150, 250\n{turn} angles {at} {random}\n{forward} 25\n```\n"
                start_code: "angles {is} 10, 50, 90, 150, 250\n{turn} angles {at} {random}\n{forward} 25"
            4:
                story_text: "## Let's draw\nIn level 4 you have to use quotation marks with `{print}` and `{ask}`. Also when drawing!\n"
                example_code: "```\n{print} _ Drawing figures _\nangle {is} 90\n{turn} angle\n{forward} 25\n{turn} angle\n{forward} 25\n```\n"
                story_text_2: "## Colors\nYou can also change the color of the lines with the command `{color}`. Check out the example.\nYou can also use the command `{color} {white}` to make 'invisible' lines. You could use these white lines to move the turtle anywhere in the screen before you start drawing.\n"
                example_code_2: "```\n{color} {white}\n{forward} -80\n{color} {green}\n{forward} 50\n{color} {yellow}\n{forward} 50\n{color} {red}\n{forward} 50\n```\n"
                start_code: "{print} 'Drawing figures'\nangle {is} 90\n{turn} angle\n{forward} 25"
            6:
                story_text: "## Let's draw\nIn this level you can use calculations to draw different figures.\nYou may have learned in school that turning a full circle is 360 degrees. If not, now you know!\nThat's why you also use 90 degrees for a square. 360 divided by 4 is 90.\nNow that we can do math with Hedy, we can draw all the figures we want!\n"
                example_code: "```\nangles = {ask} 'How many angles do you want?'\nangle = 360 / angles\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n{forward} 50\n{turn} angle\n```\n"
                start_code: "{print} 'Drawing figures'"
            8:
                story_text: "## Let's draw\nNow that we can repeat several lines, we can make figures more easily.\nWe only have to set the angle once and then use that variable in the `{repeat}`.\n\n### Exercise 1\nThe example code creates a square. Change the code so that it create another figure, such as a triangle or a hexagon. \nThis requires a change to two lines of code.\nTip: An entire circle is 360 degrees.\n\n### Exercise 2\nNow create a drawing consisting of at least two polygons.\n"
                example_code: "```\nangle = 90\n{repeat} 4 {times}\n    {turn} angle\n    {forward} 50\n```\n"
                story_text_2: "**(extra)** We can now improve the program that draws different figures. Finish the code and you can draw any polygon you'd like!\n"
                example_code_2: "```\nfigure = {ask} 'How many angles should I draw?'\nangle = 360 / figure\n{repeat} figure {times}\n    {turn} _\n    {forward} _\n```\n"
                start_code: figure = {ask} 'How many angles should I draw?'
        name: Turtle
        description: Make your own drawing
        default_save_name: Turtle
    dishes:
        levels:
            3:
                start_code: '{print} Who does the dishes?'
                story_text: "## Dishwashing\nDo you always disagree at home about who should wash the dishes or change the litter box today?\nThen you can let the computer choose very fairly. You can program that in this level!\n"
                example_code: "```\npeople {is} mom, dad, Emma, Sophie\n{print} people {at} {random} has to do the dishes\n```\n"
                story_text_2: "### Exercise\nMake your own version of the dishwasher program. Firstly make a list of your family members.\nThen think of a task that needs to be done, and let the computer decide who has to do the task with the `{at} {random}` command.\n\n**Extra** Don't feel like doing the dishes yourself? Hack the program by removing your name from the list with the `{remove}` `{from}` command.\n"
            4:
                example_code: "```\npeople {is} mom, dad, Emma, Sophie\n{print} _ the dishes are done by _\n{sleep}\n{print} people {at} _\n```\n"
                start_code: "{print} 'Who does the dishes?'"
                story_text: "## Dishwashing\nWith quotation marks you can make your dishwashing program even better.\n\n### Exercise\nFirst, fill in right symbols or commands on the blanks to make this example program work.\nDid you get it? Great! Now copy your own code from the previous level and make it work in this level by adding quotation marks in the right spots.\n"
            5:
                story_text: "## Dishwashing\nWith the `{if}` you can now have more fun with choice in the program. You can have your program respond to the choice that the computer has made.\n\nCan you finish the code so that it prints 'too bad' when it is your turn and otherwise 'yes!'?\nDon't forget the quotes!\n"
                example_code: "```\npeople {is} mom, dad, Emma, Sophie\ndishwasher {is} people {at} {random}\n{if} dishwasher {is} Sophie {print} _ too bad I have to do the dishes _ \n{else} {print} 'luckily no dishes because' _ 'is already washing up'\n```\n"
                start_code: "{print} 'Who does the dishes?'"
            6:
                story_text: "## Dishwashing\nHow often is everyone going to do the dishes? Is that fair? You can count it in this level.\n"
                example_code: "```\npeople = mom, dad, Emma, Sophie\nemma_washes = 0\ndishwasher = people {at} {random}\n{print} 'The dishwasher is' dishwasher\n{if} dishwasher {is} Emma emma_washes = emma_washes + 1\n{print} 'Emma will do the dishes this week' emma_washes 'times'\n```\n\nNow you can copy lines 3 to 5 a few times (e.g. 7 times for a whole week) to calculate for a whole week again.\nDo you make the code for the whole week?\n"
                story_text_2: "## Make it fair\nIf you are extremely unlucky the previous program might choose you to to the dishes for the whole week! That's not fair!\nTo create a fairer system you can use the `{remove}` command to remove the chosen person from the list. This way you don't have to do the dishes again untill everybody has had a turn.\n\nMonday and tuesday are ready for you! Can you add the rest of the week?\nAnd... can you come up with a solution for when your list is empty?\n"
                example_code_2: "```\npeople = mom, dad, Emma, Sophie\ndishwasher = people {at} {random}\n{print} 'Monday the dishes are done by: ' dishwasher\n{remove} dishwasher {from} people\ndishwasher = people {at} {random}\n{print} 'Tuesday the dishes are done by: ' dishwasher\n{remove} dishwasher {from} people\ndishwasher = people {at} {random}\n```\n"
                start_code: "{print} 'Who does the dishes?'"
            7:
                story_text: "## Dishwashing\nWith the `{repeat}` you can repeat pieces of code. You can use this to calculate who will be washing dishes for multiple days!\n### Exercise\nUse the `{repeat}` command to decide on who needs to wash the dishes for an entire week. Each blank needs to be filled with one command or number!\n**(extra)** Can you think of other tasks in the house? Adapt the code so it decides on three household chores. Do not forget to print what tasks it concerns!\n"
                example_code: "```\npeople = mom, dad, Emma, Sophie\n{repeat} _ _ {print} 'Dishwashing will be done by ' _ _ _\n```\n"
                start_code: "{print} 'Who does the dishes?'"
            10:
                story_text: "## Dishwashing\nIn this level you can make a schedule for the whole week in an easy way!\n\n### Exercise\nAdd a second chore, such as vacuuming or tidying up, and make sure it is also divided for the whole week.\n<br> **(extra)** The program is not fair, you can be unlucky and wash up all week. How could you make the program more fair?\n"
                example_code: "```\ndays = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday\nnames = mom, dad, Emma, Sophie\nfor day in days\n    {print} names {at} {random} ' does the dishes on ' day\n```\n"
                start_code: '# place your code here'
        name: Dishes?
        description: Use the computer to see who does the dishes
        default_save_name: Dishes
    pressit:
        name: Key presses
        levels:
            11:
                story_text: "Now that you have learned of the `{for} ... {in} {range} ... {to} ...` rule, you can use it for `{pressed}`\ntoo! for example, try moving the turtle! The turtle grows everytime you press a linked button.\nThis way the turtle can move further every step!\n"
                example_code: "```\nleft = -90\nright = 90\naround = 180\n{for} counter {in} {range} 1 {to} 15\n    stepsize = counter * 5\n    {if} w {is} {pressed}\n        {forward} stepsize\n    {if} s {is} {pressed}\n        {turn} around\n    {if} a {is} {pressed}\n        {turn} left\n    {if} d {is} {pressed}\n        {turn} right\n```\n"
                start_code: '# place your code here'
            15:
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 2\ntired_in = 15\n{while} tired_in > 0\n    {if} w {is} {pressed}\n        {forward} stepsize\n        jumptime = jumptime - 1\n    {if} s {is} {pressed}\n        {turn} around\n    {if} a {is} {pressed}\n        {turn} left\n        spins = spins - 1\n    {if} d {is} {pressed}\n        {turn} right\n        spins = spins - 1\n    {if} p {is} {pressed}\n        {if} jumptime <= 0 {or} spins <= 0\n            {forward} stepsize * 4\n            jumptime = 5\n            spins = 2\n    tired_in = tired_in - 1\n```\n"
                start_code: '# place your code here'
                story_text: "Now that you have learned about the `{while}` loops, you can start using it on the turtle!\nThe turtle is now only allowed to take only 15 steps or turn 15 times, before he gets tired!\nTry to get as far as possible before the turtle gets tired! You can use your superjump after 2 turns\nor 5 steps.\n"
            16:
                story_text: "Lets move a little with a game of Twister!\nWhen everyone is ready, press the x key for the next move!\n"
                start_code: '# place your code here'
                example_code: "```\nlimbs = ['Right Hand', 'Left Hand', 'Right Foot', 'Left Foot']\ncolours = ['Blue', 'Green', 'Red', 'Yellow']\n{repeat} 20 {times}\n    l = limbs[{random}]\n    c = colours[{random}]\n    {if} x {is} {pressed}\n        {print} l + ' on ' + c + '!'\n```\n"
            5:
                story_text: "## Press it!\nIn the introduction you were also told about the new keyword `{pressed}`! Using `{pressed}`\ncan make coding much more interactive, and you can have live control of what is executed!\nIn the upcoming levels you will learn how `{pressed}` makes this possible and what uses `{pressed}`\nhas.\nBesides printing text, there is a whole other variety of uses for `{pressed}`\nFor example, you can also link turtle commands to keys! Try it!\n"
                example_code: "```\n{if} x {is} {pressed} {forward} 50\n```\n"
                story_text_2: "## If Else Pressed\nYou can also assign an `{else}` statement to `{pressed}`. The `{else}` statement will be executed whenever you press a key other than the key you assigned.\n"
                example_code_2: "```\n{if} y {is} {pressed} {print} 'Amazing! You pressed the y key!'\n{else} {print} 'Oh no! You did not press the y key.'\n```\n"
                start_code: '# place your code here'
            10:
                example_code: "```\ndistances = 100, 80, 60, 40, 20, 10\n{if} x {is} {pressed}\n    {for} distance {in} distances\n        {forward} distance\n        {turn} -90\n{if} y {is} {pressed}\n    {for} distance {in} distances\n        {forward} distance\n        {turn} 90\n```\n"
                story_text: "In this level you can make the turtle draw you a figure. The turtle is raring to go.\nGive the turtle the starting signal by pressing the x or y key on your keyboard.\nCan you let the turtle draw you another figure?\n"
                start_code: '# place your code here'
            6:
                story_text: "Did you know you can also make a calculator using `{pressed}`?\nGive the calculator two numbers and press the m key to multiply.\nNow you don't have to bring your own!\nTry other keys and see what happens! Do you get a different result?\n"
                example_code: "```\nfirst = {ask} 'what is your first number?'\nsecond = {ask} 'what is your second number?'\n{print} 'press a to add, s to substract, d to divide, m to multiply'\n{if} a {is} {pressed} result = first + second\n{if} s {is} {pressed} result = first - second\n{if} d {is} {pressed} result = first / second\n{if} m {is} {pressed} result = first * second\n{print} 'The answer is ' result\n```\n"
                start_code: '# place your code here'
            7:
                story_text: "## Controlling the turtle\nNow that you have learned about `{repeat}`, we can press keys multiple times! You can use it to make the turtle walk forward and turn.\n\n### Exercise\nThe example code only checks the key once. Change the code so that you can press the keys many times, and use use code to draw something nice.\n"
                example_code: "```\n{if} x {is} {pressed} {forward} 15 {else} {turn} 90\n```\n"
                start_code: '# place your code here'
            9:
                story_text: "## Touch type game\nNow that you know how to combine statements, you can create a touch type tool with `{pressed}`. \n\n### Exercise\nFinish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.\n"
                example_code: "```\npoints = 1\nletters = a, b, c, d, e\n{repeat} 10 {times}\n    letter = _ _ _ \n    {print} 'Press the letter ' letter\n    {if} letter {is} {pressed}\n    _\n    _\n    _\n```\n"
                start_code: '# place your code here'
            12:
                story_text: "Are you familiar with videogames? You walk into tall grass and are suddenly approached by\na very suspicious mouse. What will you do?\nIn this level we will make a small menu with different kinds of options.\nStoring text into a variable is quite handy for repeated uses.\nOption, I choose you!\n"
                example_code: "```\nchoose = 'You chose option: '\n{print} 'A wild mouse appeared!'\n{print} 'Choose an option and press first letter: (n)et, (c)at, (b)ag, (r)un'\n{if} n {is} {pressed}\n    {print} choose + 'net'\n    {print} 'You attempt to catch the mouse with a net..'\n    {sleep}\n    {print} 'Congratulations you did it!'\n{if} c {is} {pressed}\n    {print} choose + 'cat'\n    {print} 'You send out your cat'\n    {sleep}\n    {print} 'The mouse got scared and ran away!'\n{if} b {is} {pressed}\n    {print} choose + 'bag'\n    {print} 'The mouse jumped into you bag!'\n{if} r {is} {pressed}\n    {print} choose + 'run'\n    {print} 'You got away safely!'\n```\n"
                start_code: '# place your code here'
            13:
                story_text: "Now that you learned how to use `{and}` and `{or}`, we can use it with `{pressed}`too!\nImagine the turtle being able to do a superjump forward.\nBy pressing `p` the turtle can make a superjump!\nHowever, the turtle can only do this jump if he turns left and right first!\n"
                example_code: "```\nstepsize = 10\nleft = -90\nright = 90\naround = 180\nlooked_left = 0\nlooked_right = 0\n{repeat} 40 {times}\n    {if} w {is} {pressed}\n        {forward} stepsize\n    {if} s {is} {pressed}\n        {turn} around\n    {if} a {is} {pressed}\n        {turn} left\n        looked_left = 1\n    {if} d {is} {pressed}\n        {turn} right\n        looked_right = 1\n    {if} p {is} {pressed}\n        {if} looked_left {is} 1 {and} looked_right {is} 1\n            {forward} 40\n            looked_left = 0\n            looked_right = 0\n```\n"
                start_code: '# place your code here'
            14:
                story_text: "Now that you learned how to use operators, we can use it with `{pressed}` too!\nImagine the turtle being able to do a superjump forward.\nBy pressing `p` the turtle can make a superjump!\nHowever, the turtle can only do this jump every 5 steps or every 4 turns\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 4\n{repeat} 40 {times}\n    {if} w {is} {pressed}\n        {forward} stepsize\n        jumptime = jumptime - 1\n    {if} s {is} {pressed}\n        {turn} around\n    {if} a {is} {pressed}\n        {turn} left\n        spins = spins - 1\n    {if} d {is} {pressed}\n        {turn} right\n        spins = spins - 1\n    {if} p {is} {pressed}\n        {if} jumptime <= 0 {or} spins <= 0\n            {forward} stepsize * 3\n            jumptime = 5\n            spins = 4\n```\n"
                start_code: '# place your code here'
            17:
                story_text: "Now that you learned how to use `{elif}`, we can use it with `{pressed}`too! Be aware, `{elif} ... {is} {pressed}` is not possible! That is why we are going to nest some `{elif}` statements into the `{pressed}` options. We also had to add `:` to the code to make everything work! Imagine the turtle being able to do a superjump forward. By pressing `p` the turtle can make a superjump! However, the turtle can only do this jump every 5 steps or every 4 turns\n"
                example_code: "```\nstepsize = 15\nleft = -90\nright = 90\naround = 180\njumptime = 5\nspins = 4\n{repeat} 40 {times}\n    {if} w {is} {pressed}:\n        {forward} stepsize\n        jumptime = jumptime - 1\n    {if} s {is} {pressed}:\n        {turn} around\n    {if} a {is} {pressed}:\n        {turn} left\n        spins = spins - 1\n    {if} d {is} {pressed}:\n        {turn} right\n        spins = spins - 1\n    {if} p {is} {pressed}:\n        {if} jumptime <= 0 {or} spins <= 0:\n            {forward} stepsize * 3\n            jumptime = 5\n            spins = 4\n        {elif} jumptime > 0:\n            {print} \"you need to take more steps or turns before you can superjump!\"\n```\n"
                start_code: '# place your code here'
        description: Try linking a keyboard key to a command!
        default_save_name: Pressit
    rock:
        levels:
            4:
                start_code: "{print} 'Welcome to your own rock scissors paper!'"
                story_text: "## Rock, paper, scissors\nIn this level we can further program rock, paper, scissors. But if you want to add text, you have to use quotation marks here too.\n### Exercise\nCopy your code from the previous level and make it work by using quotation marks after each `{print}` or `{ask}` command.\n"
            5:
                start_code: "{print} 'Welcome to your own rock scissors paper!'"
                story_text: "## Rock, paper, scissors\nIn this level we can determine who won.\nFor that you need the new `{if}` code.\n\nSave your choice with the name of choice and the choice of computer as computer choice.\nThen you can use `{if}` to see if they are the same or different.\nWill you finish the code?\n"
                example_code: "```\noptions {is} rock, paper, scissors\ncomputer_choice {is} _\nchoice {is} {ask} 'What do you choose?'\n{print} 'you chose ' _\n{print} 'computer chose ' _\n{if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'\n```\n\nFill in the correct code on the blanks to see {if} it is a draw.\n"
            10:
                example_code: "```\nchoices = rock, paper, scissors\nplayers = _\n{for} player {in} players\n     {print} player ' chooses ' choices {at} {random}\n```\n"
                story_text: "## Rock, Paper, Scissors\nFeeling too lazy to play the game yourself? Let Hedy play it for you!\nYou only have to fill in the names of the players and they get a random choice.\n\n### Exercise 1\nFinish the program by filling in a list of names.\n\n### Exercise 2\nAdd a computer player that chooses with each player.\n\n**(extra)** Go back to your code and decide who wins in each round: the computer or the named person.\n"
                start_code: '# place your code here'
            1:
                story_text: "## Rock, paper, scissors\nIn level 1 you can start with a rock, paper, scissors  game.\n\nWith `{ask}` you can make a choice, and with `{echo}` you can repeat that choice.\n"
                example_code: "```\n{print} what do you choose?\n{ask} choose from rock, paper or scissors\n{echo} so your choice was:\n```\n"
                story_text_2: "### Exercise\nInstead of using words, you could also use emojis: ✊✋✌\nCan you create a code using emojis?\n"
                example_code_2: "```\n{print} what do you choose?\n{ask} choose from _\n{echo} so your choice was:\n```\n"
                start_code: "{print} Welcome to your own rock scissors paper!\n{ask} What will you choose?\n"
            2:
                story_text: "## Rock, paper, scissors\nIn this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!\n"
                example_code: "```\n_ {is} {ask} rock, paper, or scissors?\n{print} I choose _\n```\n"
                story_text_2: "### Exercise\nCopy the example code to your input screen by clicking the yellow button.\nFinish the code by filling in the right commands on the blanks.\n"
                start_code: '# place your code here'
            3:
                example_code_2: "```\nchoices {is} rock, paper, scissors\n{print} player 1 chooses... choices {at} {random}\n{print} player 2 _\n```\n"
                start_code: '{print} Welcome to your own rock scissors paper!'
                story_text: "## Rock, paper, scissors\n\nIn this level we can enter lists and choose things from them.\nYou first make a list with `{is}`. Then you can let the computer choose something from the list with `{at} {random}`.\nFor example, you can let the computer pick from rock, paper and scissors.\n"
                example_code: "```\nchoices {is} rock, paper, scissors\n{print} choices {at} {random}\n```\n"
                story_text_2: "### Exercise\nCopy the example code and fill in the blanks to add an extra player to this game.\n\n**Extra** Now the players are just called player 1 and player 2. Can you add ask commands (with variables of course) to ask the players' names?\nThis way you could create this output, for example: `James picks... paper`\n"
            9:
                story_text: "## Rock, paper, scissors\nIn this level you can program the whole rock, paper, scissors game by nesting the `{if}` commands. \n\n### Exercise\nCan you finish the code? The program must tell who has won for every combination.\n\n**(extra)** Want to play more than one game? Expand the code so that you can play multiple rounds. You can even use an `{ask}` to ask the user how many rounds they want to play.\n"
                example_code: "```\nchoices {is} rock, paper, scissors\nyour_choice {is} {ask} 'What do you choose?'\n{print} 'You choose ' your_choice\ncomputer_choice {is} choices {at} {random}\n{print} 'The computer chooses ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'Tie'\n{if} computer_choice {is} rock\n    {if} your_choice {is} paper\n        {print} 'You win!'\n    {if} your_choice {is} scissors\n        {print} 'You lose!'\n# finish this code\n```\n"
                start_code: '# place your code here'
            13:
                story_text: "## Rock, paper, scissors\nWith the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.\n"
                example_code: "```\noptions = 'rock', 'paper', 'scissors'\nyour_choice = {ask} 'What do you choose?'\ncomputer_choice = options {at} {random}\n{print} 'You choose ' your_choice\n{print} 'The computer chooses ' computer_choice\n{if} computer_choice {is} your_choice\n    {print} 'Tie'\n{if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'\n    {print} 'You win!'\n{if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'\n    {print} 'The computer wins!'\n_\n```\n"
                start_code: '# place your code here'
            15:
                story_text: "## Rock, Paper, Scissors\nPlay until you beat the computer! But first, finish the example code...\n"
                example_code: "```\nwon = 'no'\noptions = 'rock', 'paper', 'scissors'\n{while} won == 'no'\n    your_choice = {ask} 'What do you choose?'\n    computer_choice = options {at} {random}\n    {print} 'you chose ' your_choice\n    {print} 'the computer chose ' computer_choice\n    {if} computer_choice == your_choice\n        {print} 'Tie!'\n    {if} computer_choice == 'rock' {and} your_choice == 'scissors'\n        {print} 'You lose!'\n    {if} computer_choice == 'rock' {and} your_choice == 'paper'\n        {print} 'You win!'\n        won = 'yes'\n_\n```\n"
                start_code: '# place your code here'
        name: Rock, paper, scissors
        description: Make your own rock, paper, scissors game
        default_save_name: Rock
    calculator:
        levels:
            6:
                example_code_3: "```\ntables = 4, 5, 6, 8\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\ntable = tables {at} {random}\nnumber = numbers {at} {random}\ncorrect_answer = table * number\nanswer = {ask} 'how much is ' table ' times ' number '?'\n{if} answer {is} correct_answer {print} 'okay'\n{else} {print} 'mistake! it was ' correct_answer\n```\n"
                start_code: "{print} 'Welcome to this calculator!'"
                example_code: "```\nnumber_1 {is} {ask} 'Fill in the first number:'\nnumber_2 {is} {ask} 'Fill in the second number:'\ncorrect_answer = number_1 * number_2\n{print} number_1 ' times ' number_2 ' is ' correct_answer\n```\n"
                story_text_2: "### Exercise\nThe calculator above will calculate the answer for you, but you can also make a program to test your own maths skills, like this:\nFill in the blanks to make it complete!\n"
                story_text: "## Calculator\nNow that you can do maths, you can make a calculator yourself!\n"
                example_code_2: "```\ncorrect_answer = 11 * 27\nanswer = {ask} 'How much is 11 times 27?'\n{if} answer {is} _ {print} 'good job!'\n{else} {print} 'Wrong! It was ' _\n```\n"
                story_text_3: "## Random numbers\nYou can also let the computer do random sums on its own using random.\nThis is how you choose a number of tables to practice, and from that you always get a different sum:\n"
            14:
                story_text: "## Guess which number\nIn this level you can programm the game 'Guess which number'\n"
                example_code: "```\n{print} 'Guess which number'\nnumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\nnumber = numbers {at} {random}\ngame = 'on'\n{for} i {in} {range} 1 {to} 10\n    {if} game == 'on'\n        guess = {ask} 'Which number do you think it is?'\n        {if} guess > number\n            {print} 'Lower!'\n        {if} guess < number\n            {print} 'Higher!'\n        {if} guess == number\n            {print} 'You win!'\n            game = 'over'\n```\n"
                start_code: '# place your code here'
            15:
                story_text: "## Calculator\nYou can add the `{while}` loop to the calculator game you've learned to make in a previous level.\nThis makes sure the player can't continue to the next question {if} they answer incorrectly.\n"
                example_code: "```\nscore = 0\n{for} i {in} {range} 0 {to} 9\n    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    number1 = numbers {at} {random}\n    number2 = numbers {at} {random}\n    correct = number1 * number2\n    answer = 0\n    {while} answer != correct\n        {print} 'How much is ' number1 ' times ' number2 '?'\n        answer = {ask} 'Fill in your answer:'\n        {print} 'Your answer is ' answer\n    {print} 'Good job!'\n{print} 'You win!'\n```\n"
                start_code: '# place your code here'
            9:
                story_text: "## Calculator\nIn level 6 you created a calculator, in this level you can expand that code so it asks multiple questions.\n\n### Exercise 1\nCan you finish line 10 to make to program work?\n\n### Exercise 2\nGive the played feedback when the enter a right or wrong answer. To achieve that, expand your program with an `{else}`.\n"
                example_code: "```\nscore = 0\n{repeat} 10 {times}\n    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    number1 = numbers {at} {random}\n    number2 = numbers {at} {random}\n    correct_answer = number1 * number2\n    {print} 'What is ' number1 ' times ' number2 '?'\n    answer = {ask} 'Type your answer here...'\n    {print} 'Your answer is' answer\n    {if} _ {is} _\n        score = score + 1\n{print} 'Great job! Your score is... ' score ' out of 10!'\n```\n"
                start_code: "{print} 'Welcome to this calculator!'"
            12:
                example_code: "```\nnumber1 = {ask} 'What is the first number?'\nnumber2 = {ask} 'What is the second number?'\nanswer = _\n{print} number1 ' plus ' number2 ' is ' answer\n```\n"
                start_code: '# place your code here'
                story_text: "## Calculator\nNow you can make a calculator that works for decimal numbers. Fill in the blanks to get it to work properly!\n"
            10:
                story_text: "## Calculator\nThis calculator game helps you practise your tables of multiplication!\n### Exercise\nCan you add more numbers to the list, so you can practise the multiplication tables until 10?\n"
                example_code: "```\nnumbers = 1, 2, 3\n{for} number1 {in} numbers\n    {for} number2 {in} numbers\n        answer = {ask} 'How much is ' number2 ' times ' number1 '?'\n        correct = number1 * number2\n        {if} answer {is} correct\n            {print} 'Great job!'\n        {else}\n            {print} 'That is wrong. The right answer is ' correct\n```\n"
                start_code: '# place your code here'
            11:
                story_text: "## Calculator\nWith a `{for}` you can simplify tables of multiplication practise program.\n\n### Exercise 1\nImprove the example code such that it prints a nice multiplication table: <br> \"1 times 10 is 10\", \"2 times 10 is 20\", etc.\n\n### Exercise 2\nGo back to your level 10 multiplication code, and modify it so that it uses a `{for}` and `{range}`.\n"
                example_code: "```\nnumber = 10\n{for} i {in} {range} 1 to 10\n    {print} i * number\n```\n"
                start_code: '# place your code here'
        name: Calculator
        description: Create a calculator
        default_save_name: Calculator
    restaurant:
        name: Restaurant
        description: Create your own virtual restaurant
        default_save_name: Restaurant
        levels:
            1:
                story_text: "## Restaurant\n In level 1 you can make your own virtual restaurant and take your guests' orders.\n"
                example_code: "```\n{print} Welcome to Hedy's restaurant \U0001F35F\n_ What would you like to order?\n{echo} So you would like to order\n{print} Thank you for your order!\n{print} It's on its way!\n```\n"
                story_text_2: "### Exercise\nCopy the example code into your input screen by clicking the yellow button.\nFirstly, fill in the correct command on the blanks to make to code work properly.\nThen add at least 4 more lines of code to the restaurant program.\nAsk the costumer what they would like to drink and ask if they want to pay with cash or card.\nLastly, think of a nice way to say goodbye to your costumer.\n"
                start_code: '# place your code here'
            2:
                story_text_2: "### Exercise\nCopy your own restaurant code from to previous level to the input screen below.\nFix the code by replacing the `{ask}` and `{echo}` commands and using variables, like you've learned in this level.\n\nNow that your code is working again, it's time to add something more.\nLook at the last line of the example code: `{print} food with topping is on its way!`\nIn this single line 2 variables have been used to create a summary of the order.\nNow add your own summary of the food and drinks ordered by the customer.\n\n**Extra** Now that you've learned how to use variables, you can use as many variables in one line as you'd like. Can you add more variables to your code, like eat in or take-away, cash or card, with or without a straw etc.?\n"
                start_code: '# place your code here'
                story_text: "## Restaurant\nIn level 2 you could expand your restaurant by using variables. In level 1 Hedy could only {echo} the order once and only remember the last thing that was ordered.\nNow you can use variables and Hedy can remember both the food and the toppings!\n"
                example_code: "```\n{print} Welcome to Hedy's restaurant!\n{print} Today we're serving pizza or lasagna.\nfood {is} {ask} What would you like to eat?\n{print} Great choice! The food is my favorite!\ntopping {is} {ask} Would you like meat or veggies on that?\n{print} food with topping is on its way!\n```\n"
            3:
                story_text: "## Random Restaurant\nHaving trouble to decide what you wanna have for dinner? You can let Hedy choose for you!\nSimply add lists of your favorite (or least favorite) meals and Hedy can randomly choose your dinner.\nYou can also have a bit of fun, by letting Hedy choose the price for your dinner as well! What will you get?\n"
                story_text_2: "### Exercise\nNow make your own version of the random restaurant.\nMake a list of starts, mains, desserts, drinks and prices yourself.\nThen use `{print}` and `{at} {random}` commands to tell the costumer what will be on their menu tonight.\n"
                example_code: "```\ndishes {is} spaghetti, brussels sprouts, hamburgers\n{print} You will have dishes {at} {random} tonight!\nprices {is} 1 euro, 10 euros, 100 euros\n{print} That will be prices {at} {random} please.\n```\n"
                example_code_2: "```\n{print} Welcome to your own random restaurant!\nstarters {is} _\nmains {is} _\ndesserts {is} _\ndrinks {is} _\nprices {is} _\n_\n```\n"
                story_text_3: "## Allergies\n**Extra** Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.\n"
                example_code_3: "```\n{print} Mystery milkshake\nflavors {is} strawberry, chocolate, vanilla\nallergies {is} {ask} Are you allergic to any falvors?\n_\n{print} You get a flavors {at} {random} milkshake\n```\n"
                start_code: '# place your code here'
            5:
                story_text: "## Restaurant\nIn this level the `{if}` command allows you to `{ask}` your customers questions and give different responses to the answers.\nIn the example below, you see that you can `{ask}` the customer `{if}` they want to hear the specials and Hedy can respond accordingly.\n"
                start_code: '# place your code here'
                example_code: "```\n{print} 'Welcome to Restaurant Chez Hedy!'\nspecial {is} {ask} 'Would you like to hear our specials today?'\n{if} special {is} yes {print} 'Todays special is chicken piri piri and rice.' {else} {print} 'No problem.'\nfood {is} {ask} 'What would you like to eat?'\n{print} 'One ' food ', coming right up!'\ndrink {is} {ask} 'What would you like to drink with that?'\n{if} drink {is} cola {print} 'Im sorry, we are out of cola!' {else} {print} 'Great choice!'\nanything {is} {ask} 'Would you like anything else?'\n{print} 'Let me repeat your order...'\n{print} 'One ' food\n{if} drink {is} cola {print} 'and...' {else} {print} 'One ' drink\n{if} anything {is} no {print} 'Thats it!' {else} {print} 'One ' anything\n{print} 'Thank you for your order and enjoy your meal!'\n```\n"
                story_text_2: "### Exercise\nCan you think of more questions to `{ask}` the customers when they are ordering, and make up different responses to their answers by using the `{if}` command?\n"
            6:
                story_text_2: "But you can also add many more things to your virtual restaurant, for example more courses.\n\n### Exercise\nYou can add many more things to your virtual restaurant. For example, can you...\n- ask how many people are coming and multiply the price by that amount?\n- add another course?\n- give people a discount when they enter a (secret) couponcode?\n- add a children's menu?\n- think of other fun things to add?\n"
                start_code: '# place your code here'
                story_text: "## Restaurant\nIn this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.\n"
                example_code: "\nYou can make a simple restaurant code, like this:\n```\n{print} 'Welcome to Restaurant Chez Hedy'\n{print} 'Here is our menu:'\n{print} 'Our main courses are pizza, lasagne, or spaghetti'\nmain = {ask} 'Which main course would you like?'\nprice = 0\n{if} main {is} pizza price = 10\n{if} main {is} lasagne price = 12\n{if} main {is} spaghetti price = 8\n{print} 'You have ordered ' main\n{print} 'That will be ' price ' dollars, please'\n{print} 'Thank you, enjoy your meal!'\n```\n"
                example_code_2: "\nIn this example there are three courses, which requires more code and more additions in calculating the price.\n```\n{print} 'Welcome to Restaurant Chez Hedy'\n{print} 'Here is our menu:'\n{print} 'Our starters are salad, soup, or carpaccio'\n{print} 'Our main courses are pizza, lasagne, or spaghetti'\n{print} 'Our desserts are brownie, icecream, or milkshake'\nstarter = {ask} 'Which starter would you like to have?'\nmain = {ask} 'Which main course would you like?'\ndessert = {ask} 'Which dessert do you pick?'\nprice = 0\n{if} starter {is} soup price = price + 6 {else} price = price + 7\n{if} main {is} pizza price = price + 10\n{if} main {is} lasagne price = price + 12\n{if} main {is} spaghetti price = price + 8\n{if} dessert {is} brownie price = price + 7\n{if} dessert {is} icecream price = price + 5\n{if} dessert {is} milkshake price = price + 4\n{print} 'You have ordered ' starter ' , ' main ' and ' dessert\n{print} 'That will be ' price ' dollars, please'\n{print} 'Thank you, enjoy your meal!'\n```\n"
            7:
                story_text: "## Restaurant\nIn this level you've learned how to use the `{repeat}` command to repeat a line of code a certain amount of times.\nYou can use that in your restaurant to `{ask}` multiple people what they'd like to eat.\n\n### Exercise\nCan you complete the code? Hedy needs to repeat this question as many times as there are people. So if there are 5 people, the question needs to be asked 5 times.\n**(extra)** Expand your code with more questions, for example about drinks or sauce.\n"
                example_code: "```\n{print} 'Welcome to Restaurant Chez Hedy'\npeople = {ask} 'How many people are joining us today?'\n```\n"
                start_code: '# place your code here'
            8:
                start_code: '# place your code here'
                story_text: "## Restaurant\nIn this level you can make your virtual restaurant more elaborate by repeating multiple lines of code. Like this:\n"
                example_code: "```\n{print} 'Welcome to Restaurant Chez Hedy!'\npeople = {ask} 'How many people will be joining us today?'\n{print} 'Great!'\n{repeat} people {times}\n    food = {ask} 'What would you like to order?'\n    {print} food\n{print} 'Thank you for ordering!'\n{print} 'Enjoy your meal!'\n```\n"
                story_text_2: "### Exercise\nThis code can be expanded with more items on the menu, for example offering drinks, and/or multiple courses or desserts. Add at least one more item.\n**(extra)** Add even more items, as many options as you like!\n"
            10:
                example_code: "```\ncourses = appetizer, main course, dessert\n{for} course {in} courses\n    {print} 'What is your order for ' course '?'\n    _ \n    _\n```\n"
                story_text_2: "### Exercise\nOf course, you could also order for multiple people!\nCan you add the correct amount of indentation before each line to make the code work properly?\nTip: some lines don't need any indentation at all.\n"
                start_code: courses = appetizer, main course, dessert
                story_text: "## Restaurant\nIn this level you'll learn how to easily ask orders for different courses.\n\n### Exercise 1\nFinish the code with an `{ask}` on the blanks such that the customer is asked what they want to eat for each course.\n"
                example_code_2: "```\n_ courses = appetizer, main course, dessert\n_ names = Timon, Onno\n_ {for} name {in} names\n_ {for} course {in} courses\n_ food = {ask} name ', what would you like to eat as your ' course '?'\n_ {print} name ' orders ' food ' as their ' course\n```\n"
            4:
                example_code: "## Example Hedy Restaurant\n```\n_ Add the quotation marks to this code _\n{print} Welcome to Restaurant Chez Hedy!\n{print} Today we are serving pizza or lasagna.\nfood {is} {ask} What would you like to eat?\n{print} Great choice! The  food  is my favorite!\ntopping {is} {ask} Would you like meat or veggies on that?\n{print} food  with  topping  is on its way!\ndrinks {is} {ask} What would you like to drink with that?\n{print} Thank you for your order.\n{print} Your  food  and  drinks  will be right there!\n```\n"
                start_code: '# place your code here'
                story_text: "## Restaurant\nIn this level you have to use quotation marks when using the `{print}` or `{ask}` command.\n\n### Exercise\nAdd the quotation marks to this code to make it work! Be careful: variables should not be in quotation marks.\n\n### Exercise 2\nGo back to the previous level and copy your restaurant code. Make the code work in this level by adding quotation marks in the right spots.\n"
            9:
                story_text: "## Restaurant\nIn this level you can use nesting to make your restaurant more realistic and more fun!\n\n### Exercise\nThe indentation was removed in the example code. \nCan you figure out how much indentation each line needs in order for the code to work properly?\nIf the customer orders pizza, Hedy shouldn't ask what sauce the costumer wants.\n\n**(extra)** A restaurant does not stock all sauces. Make a list of available sauces and give a reply with each order whether you sell it. <br>\n**(extra)** Pizzas have toppings. Ask customers what they want.<br>\n**(extra)** Do customers want a drink? Ask them too! <br>                    \n"
                example_code: "```\n{print} 'Welcome to Restaurant Chez Hedy!'\npeople = {ask} 'How many people will be joining us today?'\n{print} 'Great!'\nprice = 0\n{repeat} people {times}\n_ food = {ask} 'What would you like to order?'\n_ {print} food\n_ {if} food {is} fries\n_ price = price + 3\n_ sauce = {ask} 'What kind of sauce would you like with your fries?'\n_ {if} sauce {is} no\n_ {print} 'no sauce'\n_ {else}\n_ price = price + 1\n_ {print} 'with ' sauce\n_ {if} food {is} pizza\n_ price = price + 4\n{print} 'That will be ' price ' dollar'\n{print} 'Enjoy your meal!'\n```\n"
                start_code: '# place your code here'
            11:
                story_text: "## Restaurant\nWe can use the `{for}` with `{range}` to print the orders from multiple customers in an orderly manner.\n\n### Exercise\nFinish the restaurant code, so that you can ask for the order of multiple people. Print the order number each time: 'Order 1', 'Order 2', etc.\nAre you not sure how to go about this? Have a peek at your level 8 code.\n\n**(extra)** In level 9 the restaurant also used prices. You can add that here too!\n"
                example_code: "```\n{print} 'Welcome to Restaurant Hedy!'\npeople = {ask} 'For how many people would you like to order?'\n{print} 'So you want to order for ' people ' people.'\n{print} \"Let's go!\"\n```\n"
                start_code: '# place your code here'
            12:
                story_text: "## Restaurant\nFrom this level on you can use decimal numbers to make you menu more realistic.\n\n### Exercise\nCan you think of a code to give your friends and family a 15% discount?\n"
                example_code: "```\nprice = 0.0\nfood = {ask} 'What would you like to order?'\ndrink = {ask} 'What would you like to drink?'\n{if} food {is} 'hamburger'\n    price = price + 6.50\n{if} food {is} 'pizza'\n    price = price + 5.75\n{if} drink {is} 'water'\n    price = price + 1.20\n{if} drink {is} 'soda'\n    price = price + 2.35\n{print} 'That will be ' price ' dollar, please'\n```\n"
                start_code: '# place your code here'
            13:
                story_text: "## Restaurant\nIn this level we can use the new commands to upgrade our restaurant.\nWe use `{and}` to see {if} two things are both the case.\n\n### Exercise\nFill in `{and}` and `{or}` on the right blanks.\n"
                example_code: "```\nprice = 10\nfood = {ask} 'What would you like to eat?'\ndrinks = {ask} 'What would you like to drink?'\n{if} food {is} 'sandwich' _ drinks {is} 'juice'\n    {print} 'Thats our discount menu'\n    price = price - 3\n{if} drinks {is} 'juice' _ drinks {is} 'sap'\n    {print} 'What a healthy choice!'\n{print} 'That will be ' price ' dollars'\n```\n"
                start_code: '# place your code here'
            15:
                story_text: "## Restaurant\nWith the `{while}` you can make sure your costumers can keep adding orders until they are done.\n"
                example_code: "```\n{print} 'Welcome at McHedy'\nmore = 'yes'\n{while} more == 'yes'\n    order = {ask} 'What would you like to order?'\n    {print} order\n    more = {ask} 'Would you like to order anything else?'\n{print} 'Thank you!'\n```\n"
                start_code: '# place your code here'
    fortune:
        levels:
            4:
                start_code: '# place your code here'
                story_text: "## Fortune Teller\nThis level has no new functions, but allows you to practice with using the quotation marks.\nYou can remake your level 3 code, and make sure to add the quotation marks in the right places!\n\nMind that in level 3, we couldn't use the word 'question' as both the name of the variable and a normal word that could be printed.\nThe quotation marks in level 3 make this possible!\n\n### Exercise\nWe have removed all the quotation marks from this example code, can you add them in all the right places?\n\n### Exercise 2\nGo back to the previous level and copy your fortune teller code. Make the code work in this level by adding quotation marks in the right spots.\n"
                example_code: "```\n_ Add the quotation marks to this code _\n{print} Im Hedy the fortune teller!\nquestion {is} {ask} What do you want to know?\n{print} This is your question:  question\nanswers {is} yes, no, maybe\n{print} My crystal ball says...\n{sleep} 2\n{print} answers {at} {random}\n```\n"
            5:
                start_code: '# place your code here'
                story_text: "## Fortune Teller\nIn this level you'll learn to (secretly) tip the odds in your favor, when using the fortune teller!\nBy using `{if}` and `{else}` you can make sure that you will always get a good fotune, while other people might not.\nCheck out this example to find out how.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'I can predict if youll win the lottery tomorrow!'\nperson {is} {ask} 'Who are you?'\n{if} person {is} Hedy {print} 'You will definitely win!\U0001F929' {else} {print} 'Bad luck! Someone else will win!\U0001F62D'\n```\n"
                story_text_2: "## Hack the program\nReplace Hedy with your own name in the last line, and Hedy will always predict that you will win the lottery and others won't!\nOf course this might raise some suspicion with the other players... To avoid that, you can make sure that Hedy does give different answers every time you run the code.\nBut of course, still gives you a positive answer and the other players a negative one.\n"
                example_code_2: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'I can predict if you will win the lottery tomorrow!'\nperson {is} {ask} 'Who are you?'\ngoodanswer {is} Hurray! You win!, You will definitely win!, We have a winner!\nbadanswer {is} Bad luck! Try again!, Another person will win, You lose!\n{if} person {is} Hedy {print} goodanswer {at} {random} {else} {print} badanswer {at} {random}\n```\n"
                story_text_3: "### Exercises\nThis concept can be used to make may different programs, just be creative! For example you could create a machine that predicts that your favorite sports team will beat all the competitors!\nOr you could make  Snow White's magic mirror on the wall, to tell everyone you are the fairest of them all!\nLet your imagination do the work!\n"
            6:
                start_code: '# place your code here'
                story_text: "## Fortune Teller\nIn this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.\nFor example you could calculate how rich you'll get or how many kids you will have when you grow up.\n\n\n\n### Exercise\nCan you think of your own (silly) fortune telling machine?\n"
                example_code: "```\n{print} 'I am Hedy the fortune teller!'\n{print} 'I can predict how many kids youll get when you grow up!'\nage = {ask} 'How old are you?'\nsiblings = {ask} 'How many siblings do you have?'\nlength = {ask} 'How tall are you in centimetres?'\nkids = length / age\nkids = kids - siblings\n{print} 'You will get ...'\n{sleep}\n{print} kids ' kids!'\n```\n\n## Example Silly Fortune Teller\nIf the previous example wasn't silly enough for you, take a look at this one!\n```\n{print} 'Im Hedy the silly fortune teller!'\n{print} 'I will predict how smart you are!'\nfootball = {ask} 'On a scale 1-10 how much do you love football?'\nbananas = {ask} 'How many bananas did you eat this week?'\nhygiene = {ask} 'How many times did you wash your hands today?'\nresult = bananas + hygiene\nresult = result * football\n{print} 'You are ' result ' percent smart.'\n```\n"
            7:
                start_code: '# place your code here'
                story_text: "## Fortune Teller\nIn this level you can use the `{repeat}` command to make your machine tell multiple fortunes at once.\n"
                example_code: "```\n{print} 'Im Hedy the fortune teller!'\n{print} 'You can ask 3 questions!'\n{repeat} 3 {times} question = {ask} 'What do you want to know?'\nanswer = yes, no, maybe\n{repeat} 3 {times} {print} 'My crystal ball says... ' answer {at} {random}\n```\n"
                story_text_2: "### Exercise\nThe example program asks three questions but... Does not give three answers.\nMake a list of answers and print a random one, three times. Think of fun answers yourself.\n\nSadly we cannot yet show the answers pairwise. In the upcoming levels the layout of `{repeat}` command will change, soving that problem.\n"
            1:
                story_text: "## Fortune Teller\nHave you ever been to a carnival and had your future predicted by a fortune teller? Or have you ever played with a magic eight ball?\nThen you probably know that they can't really predict your future, but it's still fun to play!\n\nIn the upcoming levels you can learn how to create your own fortune telling machine!\nIn level 1 you can start off easy by letting Hedy introduce herself as a fortune teller and let her {echo} the players' answers.\nLike this:\n"
                example_code: "```\n_ Hello, I'm Hedy the fortune teller!\n_ Who are you?\n_ Let me take a look in my crystal ball\n_ I see... I see...\n_ Your name is\n```\n"
                story_text_2: "### Exercise\nCopy the example code into your inputscreen and fill in the blanks to make the code work.\n**Extra** Change the code and let the fortune teller not only predict your name, but also your age, your favorite sports team or something else about yourself.\n"
                start_code: '# place your code here'
            3:
                story_text: "## Fortune Teller\nIn the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.\nIn this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:\n"
                story_text_2: "### Exercise\nNow, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or 'ask again'.\n"
                example_code: "\nIn this example the player can {ask} Hedy a yes-no question and Hedy will pick a random answer for you.\n```\n{print} I’m Hedy the fortune teller!\nquestion {is} {ask} What do you want to know?\n{print} This is what you want to know: question\nanswers {is} yes, no, maybe\n{print} My crystal ball says...\n{sleep} 2\n{print} answers {at} {random}\n```\n"
                start_code: '# place your code here'
            8:
                story_text: "## Fortune Teller\nIn the previous levels you've learned how to use `{repeat}` to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.\nNow that problem is solved, because of the new way of using the `{repeat}` command.\nIn the next example you can have your fortune teller ask 3 questions and also print them!\n\n### Exercise\nCan you fill in right command on the blanks?\n"
                example_code: "```\n{print} 'I am Hedy the fortune teller!'\n{print} 'You can ask me 3 questions.'\nanswers = yes, no, maybe\n_ _ _\n   question = {ask} 'What do you want to know?'\n   {print} question\n   {sleep}\n   {print} 'My crystal ball says...' answers {at} {random}\n```\n"
                start_code: '# place your code here'
            10:
                story_text: "## Fortune Teller\nIn this level you'll learn how to program the game MASH (mansion, apartment, shack, house). In this game you can predict for all the players at once, what their future will look like.\n\n### Exercise 1\nAdd two names to the list and see how the output of the program changes when you run it.\n"
                example_code: "```\nhouses = mansion, apartment, shack, house\nloves = nobody, a royal, their neighbour, their true love\npets = dog, cat, elephant\nnames = Jenna, Ryan, Jim\n{for} name {in} names\n    {print} name ' lives in a ' houses {at} {random}\n    {print} name ' will marry ' loves {at} {random}\n    {print} name ' will get a ' pets {at} {random} ' as their pet.'\n    {sleep}\n```\n"
                story_text_2: "### Exercise 2\nWe can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.\n**(extra)** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.\n"
                example_code_2: "```\nhouses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw\nsubjects = potions, defence against the dark arts, charms, transfiguration\nfears = Voldemort, spiders, failing your OWL test\nnames = Harry, Ron, Hermione\n_\n_ {print} name ' is placed in ' houses {at} {random}\n_ {print} name ' is great at ' subjects {at} {random}\n_ {print} name 's greatest fear is ' fears {at} {random}\n```\n"
                start_code: '# place your code here'
            12:
                story_text: "## Fortune Teller\nIn this level you can make your fortunes multiple words. Can you add more different fortunes to the list?\n"
                example_code: "```\nfortunes = 'you will slip on a banana peel', _\n{print} 'I will take a look in my crystall ball for your future.'\n{print} 'I see... I see...'\n{sleep}\n{print} fortunes {at} {random}\n```\n"
                start_code: '# place your code here'
        name: Fortune teller
        description: Let Hedy predict the future
        default_save_name: Fortune Teller
    haunted:
        levels:
            1:
                start_code: '{print} How did I get here?'
                story_text: "## Haunted house\nIn this adventure you are working towards making a game in which you have to escape from a haunted house by picking the correct door.\nIf you pick the right door you'll survive, but if not a terrible monster might...\n\nIn level 1 we start our haunted house game by making up a scary story and ask the player what monster they'll see in the haunted house.\n"
                example_code: "```\n{print} How did I get here?\n{print} I remember my friend telling me to go into the old mansion...\n{print} and suddenly everything went black.\n{print} But how did I end up on the floor...?\n{print} My head hurts like Ive been hit by a baseball bat!\n{print} What's that sound?\n{print} Oh no! I feel like Im not alone in this house!\n{print} I need to get out of here!\n{print} There are 3 doors in front of me..\n{ask} Which door should i pick?\n{echo} I choose door\n{print} ...?\n```\n"
                story_text_2: "### Exercise\nCopy the example code to your input screen by clicking the yellow button.\nNow finish the story by adding at least 5 lines of code.\nRemember to start each line of codes with a `{print}` command.\n"
            2:
                example_code_2: "```\nmonster_1 {is} _\nmonster_2 {is} _\nmonster_3 {is} _\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
                start_code: monster1 {is} _
                story_text: "## Haunted House\nIn this haunted house you can choose your monsters with emojis. Of course you could also use words.\n"
                example_code: "```\nmonster_1 {is} \U0001F47B\nmonster_2 {is} \U0001F921\nmonster_3 {is} \U0001F476\n{print} You enter the haunted house.\n{print} Suddenly you see a monster_1\n{print} You run into the other room, but a monster_2 is waiting there for you!\n{print} Oh no! Quickly get to the kitchen.\n{print} But as you enter monster_3 attacks you!\n```\n"
                story_text_2: "### Exercise\nIn the example above the monsters are predetermined. So each time you run your code, the output is the same.\nCan you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?\n"
            3:
                story_text_3: "## Change the game into a tv gameshow!\n### Exercise\nLastly, we'd like to challenge you to change this game into a gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!\nCan you do it? We have already put the first lines into the example code.\n"
                example_code_3: "```\n{print} The big gameshow!\n{print} There are 3 suitcases in front of you...\n{print} One of them contains _\n_\n```\n"
                start_code: '# place your code here'
                story_text: "## Haunted house game\nIn the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.\nIn this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!\nLet Hedy decide randomly!\n"
                example_code_2: "```\n_ Escape from the haunted house!\n_ There are 3 doors in front of you...\n_ _ _ Which door do you choose?\n_ You picked door ... choice\nmonsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED\n_ You see...\n{sleep}\n_ _ _ _\n```\n"
                story_text_2: "### Exercise\nCopy the example codes and fill in the blanks to make it work!\n\n**Extra** This story is pretty straight forward, maybe you can spook it up a bit by adding a more exciting story.\nAlso you have very limited outcomes right now, there are only 3 options of what's behind the doors. Maybe you can think of more monsters to add to the list!\n"
            4:
                start_code: '# place your code here'
                story_text: "## Haunted house\nIn this level you learn how to use quotation marks in your games.\n\n### Exercise\nCan you make your Haunted House level 4 proof?\n\n### Exercise 2\nGo back to the previous level and copy your haunted house code. Make the code work in this level by adding quotation marks in the right spots.\n"
                example_code: "```\n_ Add quotation marks to this code _\n{print} Escape from the haunted house!\n{print} There are 3 doors in front of you...\nchoice {is} {ask} Which door do you choose?\n{print} You picked door ... choice\nmonsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED\n{print} You see...\n{sleep}\n{print} monsters {at} {random}\n ```\n"
            5:
                story_text: "## Haunted House\nUp until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.\nIf the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).\nIn this level you can only win the game by picking the same door Hedy picked randomly.\n\n### Exercise\nCan you find the 4 missing words to complete the code?\n"
                example_code: "```\n{print} 'Escape from the haunted house!'\n{print} 'There are 3 doors in front of you...'\ndoors {is} 1, 2, 3\nmonsters {is} werewolf, mummy, vampire, zombie\nchosen_door {is} {ask} 'Which door do you choose?'\n{print} 'You chose door...' chosen_door\n{sleep}\ncorrect_door {is} doors {at} {random}\n_ _ _ _ {print} 'Great! Youve escaped!'\n{else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}\n```\n"
                start_code: '# place your code here'
            9:
                story_text: "## Haunted House\nIn this level you can use nesting, which allows you to make the haunted house even more interactive!\n\n### Exercise\nNow it's very hard to win this game, can you make it easier to win?\nChange your code so it only has one wrong door and two correct doors instead of one correct door and two wrong ones? \nTip: This means changing the variable correct_door into wrong_door, and switching the `{if}` and `{else}` code.\nAnd of course you may also change the story and make it your own. Change the monsters or make it a happy game show where you get a gift!\n"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nplayer = alive\ndoors = 1, 2, 3\nmonsters = zombie, vampire, giant spider\n{repeat} 3 {times}\n    {if} player {is} alive\n        correct_door {is} doors {at} {random}\n        {print} 'There are 3 doors in front of you...'\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} chosen_door {is} correct_door\n            {print} 'No monsters here!'\n        {else}\n            {print} 'You are eaten by a ' monsters {at} {random}\n            player = dead\n    {else}\n        {print} 'GAME OVER'\n{if} player {is} alive\n    {print} 'Great! You survived!'\n```\n"
                start_code: "{print} 'Escape from the haunted house!'"
            11:
                story_text: "## Haunted House\nIn this level we've changed the `{for}` command so we can tell the player where they are. \n\n### Exercise 1\nFinish the program so the player knows which room they are in.\n\n### Exercise 2\nMake the program into an adventure by following these steps:\n\n1. Make a list of choices (like: fight or flight)\n2. Make sure the player can choose an option with `{ask}`\n3. Is answer correct? Then they may proceed to the next monster. Do they give a wrong answer? Let the player know with a `{print}`. \n\n**(extra)** If you make a wrong choice, a monster is still shown! How could you change that?\n"
                example_code: "```\n{print} 'Escape from the Haunted House!'\nmonsters = zombie, vampire, giant spider\n_\n    {print} 'Room ' i\n    monster = monsters {at} {random}\n```\n"
                start_code: "{print} 'Escape from the haunted house!'"
            14:
                story_text: "## Haunted House\nIn this level you can use the `<` and `>` symbol to introduce lives to your game.\n"
                example_code: "```\n{print} 'Escape from the haunted house'\nlives = 3\ndoors = 1, 2, 3\nmonsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'\n{for} i {in} {range} 1 {to} 10\n    {if} lives > 0\n        good_door = doors {at} {random}\n        monster = monsters {at} {random}\n        chosen_door = {ask} 'Which door do you choose?'\n        {if} good_door == chosen_door\n            {print} 'You have chosen the correct door'\n        {else}\n            {print} 'You see...' monster\n            {if} monster == 'a sleeping 3 headed dog'\n                {print} 'Pffieuw.... Its asleep'\n            {else}\n                {print} 'You lose one life'\n                lives = lives -1\n    {else}\n        {print} 'GAME OVER'\n```\n"
                start_code: '# place your code here'
            16:
                story_text: "## Haunted House Game\nThis haunted house game uses the connection between the lists you can use in this level.\nFor example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.\nCheck out the code!\n"
                example_code: "```\nnumbers = [1, 2, 3]\ni = numbers[{random}]\nhint = ['growling', 'a cackling laugh', 'fluttering batwings']\nmonsters = ['zombie', 'witch', 'vampire']\nbad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']\ngood_fate = ['You throw the ham. The zombie is distracted and starts etaing it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']\nweapons = ['ham', 'lighter', 'garlic']\n{print} 'You are standing in front of an old mansion'\n{print} 'Something is not right here'\n{print} 'You hear ' hint[i]\n{print} 'You are going to explore it'\n{print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'\nyour_weapon = {ask} 'What do you bring with you?'\n{print} 'With your ' your_weapon ' you enter the living room'\n{print} 'There you find a ' monsters[i]\nneeded_weapon = weapons[i]\n{if} your_weapon == needed_weapon\n    {print} 'You use your ' your_weapon\n    {print} good_fate[i]\n    {print} 'YOU WIN!'\n{else}\n    {print} 'You have chosen the wrong weapon...'\n    {print} bad_fate[i]\n    {print} 'GAME OVER'\n```\n"
                start_code: '# place your code here'
        description: Escape from the haunted house
        name: Haunted House
        default_save_name: Haunted House
    piggybank:
        levels:
            14:
                example_code: "```\nmoney = {ask} 'How much money have you saved?'\nwish = {ask} 'How much money do you need?'\nallowance = {ask} 'How much pocket money do you get each week?'\nto_save = wish - money\nweeks = to_save / allowance\n{if} wish > money\n    {print} 'You need to save up some more!'\n    {print} 'Youll need ' weeks ' more weeks.'\n{else}\n    {print} 'Great! You have enough'\n    {print} 'Lets go shopping!'\n```\n"
                start_code: '# place your code here'
                story_text: "## Piggybank\nIn this level you can let Hedy tell you if you have saved up enough money!\n"
            12:
                story_text: "## Piggy Bank\nIn this adventure you learn how to make a digital piggy bank.\nFinish the code to calculate how much money you have and how long you need to save up to buy what you want!\n"
                example_code: "```\n{print} 'The digital piggy bank'\nwish = {ask} 'What would you like to buy?'\nprice = {ask} 'How much does that cost?'\nsaved = {ask} 'How much money have you saved already?'\nallowance = {ask} 'How much pocket money do you get per week?'\nto_save = price - saved\nweeks = to_save / allowance\n{print} 'You can buy a ' _ ' in ' _ ' weeks.'\n```\n"
                start_code: '# place your code here'
        name: Piggy Bank
        description: Count your pocketmoney!
        default_save_name: Piggy Bank
    quizmaster:
        name: Quizmaster
        description: Make your own quiz!
        default_save_name: Quizmaster
        levels:
            14:
                start_code: '# place your code here'
                story_text: "## Make your own quiz\nIn this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!\nYou can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!\n"
                example_code: "```\n{print} 'Make your own quiz'\npoints_a = 0\npoints_b = 0\n{print} 'Question'\n{print} 'Answer option A'\n{print} 'Answer option B'\nanswer = {ask} 'Which answer?'\n{if} answer == 'A'\n    points_a = points_a + 1\n{if} answer == 'B'\n    points_b = points_b + 1\n{print} 'End of the quiz!'\n{print} 'Lets see the results!'\n{if} points_a > points_b\n    {print} 'You belong to the A club'\n{if} points_b > points_a\n    {print} 'You belong to the B club'\n```\n"
    language:
        name: Language
        description: Practice words in a foreign language
        default_save_name: Language
        levels:
            5:
                story_text: "## Learn a new language\nMake your own program to practice your vocabulary in a new language.\n\n### Exercise\nMake the code longer by adding at least 3 more words for the player to learn.\n**Extra** Of course, you can choose to use a different language than French. You can change to code to any language you'd like to learn.\n"
                example_code: "```\n{print} 'Learn French!'\ncat {is} {ask} '\U0001F431'\n{if} cat {is} chat {print} 'Terrific!'\n{else} {print} 'No, cat is chat'\nfrog {is} {ask} '\U0001F438'\n{if} frog {is} grenouille {print} 'Super!'\n{else} {print} 'No, frog is grenouille'\n```\n"
                start_code: '# place your code here'
            16:
                story_text: "## Learn a new language\nMake your own program to practice your vocabulary in a new language.\n"
                example_code: "```\nfrench_words = ['bonjour', 'ordinateur', 'pomme de terre']\ntranslation = ['hello', 'computer', 'potato']\nscore = 0\n{for} i {in} {range} 1 {to} 3\n    answer = {ask} 'What does ' french_words[i] ' mean?'\n    correct = translation[i]\n    {if} answer == correct\n        {print} 'Correct!'\n        score = score + 1\n    {else}\n        {print} 'Wrong, ' french_words[i] ' means ' translation[i]\n{print} 'You gave ' score ' correct answers.'\n```\n"
                start_code: '# place your code here'
    blackjack:
        levels:
            17:
                start_code: '# place your code here'
                story_text: "## Create a game of Blackjack\nBlackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.\nThe Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.\nIf you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.\nBut be careful not to get more than 21 points, because if you do, you lose!\nThe player who gets closest to 21, without going over it, wins!\n\nHave fun!\n"
                example_code: "```\n{print} 'BLACKJACK'\ncards = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen','King', 'Ace']\npoints = 0\ndealer_points = 0\ncard_1 = cards[{random}]\ncard_2 = cards[{random}]\ncard_3 = cards [{random}]\ndealer_card_1 = cards[{random}]\ndealer_card_2 = cards[{random}]\ndealer_card_3 = cards[{random}]\n# Points for card 1\n{if} card_1 == 'Jack' {or} card_1 == 'Queen' {or} card_1 == 'King':\n    points = points + 10\n{elif} card_1 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_1\n# Points for card 2\n{if} card_2 == 'Jack' {or} card_2 == 'Queen' {or} card_2 == 'King':\n    points = points + 10\n{elif} card_2 == 'Ace':\n    points = points + 11\n{else}:\n    points = points + card_2\n# Points for dealer card 1\n{if} dealer_card_1 == 'Jack' {or} dealer_card_1 == 'Queen' {or} dealer_card_1 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_1 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_1\n# Points for dealer card 2\n{if} dealer_card_2 == 'Jack' {or} dealer_card_2 == 'Queen' {or} dealer_card_2 == 'King':\n    dealer_points = dealer_points + 10\n{elif} dealer_card_2 == 'Ace':\n    dealer_points = dealer_points + 11\n{else}:\n    dealer_points = dealer_points + dealer_card_2\n# Two Aces\n{if} card_1 == 'Ace' {and} card_2 == 'Ace':\n    points = 12\n{if} dealer_card_1 == 'Ace' {and} dealer_card_2 == 'Ace':\n    dealer_points = 12\n# Scoreboard\n{print} 'You have a ' card_1 ' and a ' card_2 ' (' points ' points)'\n{print} 'The dealer has a ' dealer_card_1 ' and a ' dealer_card_2 ' (' dealer_points ' points)'\n# Extra card for the player\nhit = {ask} 'Do you want an extra card?'\n{if} hit == 'yes':\n    {if} card_3 == 'Jack' {or} card_3 == 'Queen' {or} card_3 == 'King':\n        points = points + 10\n    {elif} card_3 == 'Ace':\n        {if} points > 11:\n            points = points + 11\n        {else}:\n            points = points + 1\n    {else}:\n        points = points + card_3\n    {print} 'You get an extra ' card_3 ' (' points ' points)'\n{else}:\n    {print} 'No extra cards'\n# Winner\n{if} points > 21 {or} dealer_points > points {or} dealer_points == 21:\n    {print} 'You lose'\n{elif} dealer_points < 17:\n    {print} 'The dealer takes an extra card. It is a... ' dealer_card_3\n    {if} dealer_card_3 == 'Jack' {or} dealer_card_3 == 'Queen' {or} dealer_card_3 == 'King':\n        dealer_points = dealer_points + 10\n    {elif} dealer_card_3 == 'Ace':\n        {if} dealer_points < 11:\n            dealer_points = dealer_points + 11\n        {else}:\n            dealer_points = dealer_points + 1\n    {else}:\n        dealer_points = dealer_points + dealer_card_3\n    {print} 'The dealer has ' dealer_points ' points now'\n    {if} dealer_points < 21 {and} dealer_points > points:\n        {print} 'You lose'\n    {else}:\n        {print} 'You win'\n{elif} points > dealer_points {and} points < 21:\n    {print} 'You win!'\n```\n"
        name: Blackjack
        description: Try to get as close to 21 as you can
        default_save_name: Blackjack
    tic:
        name: Tic Tac Toe
        description: Play a game of Tic Tac Toe!
        levels:
            14:
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game != 'over'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice == 1\n                spot_1 = sign\n            {if} choice == 2\n                spot_2 = sign\n            {if} choice == 3\n                spot_3 = sign\n            {if} choice == 4\n                spot_4 = sign\n            {if} choice == 5\n                spot_5 = sign\n            {if} choice == 6\n                spot_6 = sign\n            {if} choice == 7\n                spot_7 = sign\n            {if} choice == 8\n                spot_8 = sign\n            {if} choice == 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner == 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign == 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
                start_code: '## place your code here'
                story_text: "## Tic Tac Toe\nIn the previous levels you've made a tic tac toe game. Now you've learned how to use the = sign, the == sign and the != sign.\nYou can use this knowledge in your new Tic Tac Toe game, like this:\n"
            15:
                start_code: '## place your code here'
                story_text: "## Tic Tac Toe\nIn this level you can improve your Tic Tac Toe game with the {while} loop. With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 {to} 9` into one simple line.\nCheck it out:\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over'\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots\n        {remove} choice {from} open_spots\n        {if} choice == 1\n            spot_1 = sign\n        {if} choice == 2\n            spot_2 = sign\n        {if} choice == 3\n            spot_3 = sign\n        {if} choice == 4\n            spot_4 = sign\n        {if} choice == 5\n            spot_5 = sign\n        {if} choice == 6\n            spot_6 = sign\n        {if} choice == 7\n            spot_7 = sign\n        {if} choice == 8\n            spot_8 = sign\n        {if} choice == 9\n            spot_9 = sign\n    {else}\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    winner = {ask} 'Did you win?'\n    {if} winner == 'yes'\n        {print} 'Good job, player ' sign '!'\n        game = 'over'\n    {else}\n        {if} sign == 'x'\n            sign = 'o'\n        {else}\n            sign = 'x'\n```\n"
            13:
                story_text: "## Tic Tac Toe\nIn this adventure you can program a game of Tic Tac Toe. You can play with two people. Taking turns, you pick a number of the spot (1 - 9) you want to put your sign (x or o) on.\nThe first player that gets 3 in a row (horizontally, vertically or diagonally) wins!\n"
                example_code: "```\nsign = 'x'\nopen_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{for} i {in} {range} 1 {to} 9\n    {if} game {is} 'on'\n        choice = {ask} 'Player ' sign ', which spot?'\n        {if} choice {in} open_spots\n            {remove} choice {from} open_spots\n            {if} choice {is} 1\n                spot_1 = sign\n            {if} choice {is} 2\n                spot_2 = sign\n            {if} choice {is} 3\n                spot_3 = sign\n            {if} choice {is} 4\n                spot_4 = sign\n            {if} choice {is} 5\n                spot_5 = sign\n            {if} choice {is} 6\n                spot_6 = sign\n            {if} choice {is} 7\n                spot_7 = sign\n            {if} choice {is} 8\n                spot_8 = sign\n            {if} choice {is} 9\n                spot_9 = sign\n        {else}\n            {print} 'That spot was already taken'\n        {print} spot_1 spot_2 spot_3\n        {print} spot_4 spot_5 spot_6\n        {print} spot_7 spot_8 spot_9\n        {print} ' '\n        winner = {ask} 'Did you win?'\n        {if} winner {is} 'yes'\n            {print} 'Good job, player ' sign '!'\n            game = 'over'\n        {else}\n            {if} sign {is} 'x'\n                sign = 'o'\n            {else}\n                sign = 'x'\n```\n"
                start_code: '## place your code here'
            17:
                story_text: "## Tic Tac Toe\nIn the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.\nThis made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.\nTo use the {elif} to let Hedy check whether or not a player has won is fun, but it also requires a fair amount of extra lines.\n\nIn the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).\nYou can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.\nThis means that the {while} loop will be stopped and the game ends.\n"
                example_code: "```\nsign = 'x'\nopen_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ngame = 'on'\nspot_1 = '.'\nspot_2 = '.'\nspot_3 = '.'\nspot_4 = '.'\nspot_5 = '.'\nspot_6 = '.'\nspot_7 = '.'\nspot_8 = '.'\nspot_9 = '.'\n{print} 'TIC TAC TOE!'\n{print} spot_1 spot_2 spot_3\n{print} spot_4 spot_5 spot_6\n{print} spot_7 spot_8 spot_9\n{print} ' '\n{while} game != 'over':\n    choice = {ask} 'Player ' sign ', which spot?'\n    {if} choice {in} open_spots:\n        {remove} choice {from} open_spots\n        {if} choice == 1:\n            spot_1 = sign\n        {if} choice == 2:\n            spot_2 = sign\n        {if} choice == 3:\n            spot_3 = sign\n        {if} choice == 4:\n            spot_4 = sign\n        {if} choice == 5:\n            spot_5 = sign\n        {if} choice == 6:\n            spot_6 = sign\n        {if} choice == 7:\n            spot_7 = sign\n        {if} choice == 8:\n            spot_8 = sign\n        {if} choice == 9:\n            spot_9 = sign\n    {else}:\n        {print} 'That spot was already taken'\n    {print} spot_1 spot_2 spot_3\n    {print} spot_4 spot_5 spot_6\n    {print} spot_7 spot_8 spot_9\n    {print} ' '\n    {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':\n        {print} 'Player ' sign ' wins!'\n        game = 'over'\n    {else}:\n        {if} sign == 'x':\n            sign = 'o'\n        {else}:\n            sign = 'x'\n```\n"
                start_code: '## place your code here'
        default_save_name: Tic
    years:
        name: New Year's
        description: Countdown to the New Year!
        default_save_name: New Year's Countdown
        levels:
            11:
                story_text: "## Happy New Year\nIn this level you can use the `{for}` number `{in}` `{range}` command to countdown to the New Year.\n\n### Exercise\nFill in the blanks and make the code work!\n"
                example_code: "```\n{for} number {in} {range} _ {to} _\n    {print} number\n{print} 'Happy New Year!'\n```\n"
                start_code: '# place your code here'
    dice:
        name: Dice
        description: Make your own dice
        default_save_name: Dice
        levels:
            3:
                story_text: "## Dice\nIn this level we can choose from a list. With that we can let the computer choose one side of the die.\nTake a look at the games you have in your closet at home.\nAre there games with a (special) die? You can also copy it with this code.\nFor example, the dice of the game Earthworms with the numbers 1 to 5 and an earthworm on it.\n\n![Die of earthworms with 1 to 5 and an earthworm on it](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)\n"
                example_code: "```\nchoices {is} 1, 2, 3, 4, 5, earthworm\n{print} You threw _ {at} {random}\n```\n"
                story_text_2: "### Exercise\nThe dice in the example above are dice for a specific game. Can you make normal dice?\nOr other special dice from a different game?\n"
                example_code_2: "```\nchoices {is} _\n```\n"
                start_code: '{print} What will the die indicate this time?'
            4:
                story_text: "## Dice\nIn this level you can also create dice. But this time you can try it yourself, without an example code!\n\n### Exercise\nMake your own dice in this level.\nTip: If you have no idea how to make dice. Take a peek at your dice from the previous level, but don't forget to add quotation marks.\n"
                start_code: "{print} 'What will the die indicate this time?'"
            5:
                story_text: "## Dice\nYou can also make a die again in this level using the `{if}`.\nComplete the sample code so that the code says \"You can stop throwing\" once you have thrown an earthworm.\n\nBut maybe you want to recreate a die from a completely different game. That's fine too! Then make up your own reaction, e.g. 'yes' for 6 and 'pity' for something else.\n"
                example_code: "```\nchoices {is} 1, 2, 3, 4, 5, earthworm\nthrow {is} _\n{print} 'you have' _ 'thrown'\n{if} _ {is} earthworm {print} 'You can stop throwing.' _ {print} 'You have to hear it again!'\n```\n"
                start_code: "{print} 'What will the die indicate this time?'"
            6:
                example_code_2: "## Looking forward\n\nDid you manage to calculate the score for 8 dice? That required a lot of cutting and pasting, right? We are going to make that easier in level 7!\n"
                story_text: "## Dice\nYou can also make an Earthworm die again in this, but now you can also calculate how many points have been rolled.\nYou may know that the worm counts 5 points for Earthworms. Now after a roll you can immediately calculate how many points you have thrown.\nThis is the code to calculate points for one die:\n\n### Exercise\nCan you make the code so that you get the total score for 8 dice? To do that, you have to cut and paste some lines of the code.\n"
                example_code: "```\nchoices = 1, 2, 3, 4, 5, earthworm\npoints = 0\nthrow = choices {at} {random}\n{print} 'you threw' throw\n{if} throw {is} earthworm points = points + 5 {else} points = points + throw\n{print} 'those are' points ' point'\n```\n"
                start_code: "{print} 'What will the die indicate this time?'"
            7:
                story_text: "## Dice\nYou can also make a dice again in level 5. With the `{repeat}` code you can easily roll a whole hand of dice.\n\n### Exercise\nTry to finish the sample code!  **(extra)** Think of a game you know that involves a dice and program that using a `{repeat}`.\n"
                example_code: "```\nchoices = 1, 2, 3, 4, 5, 6\n_ _ _ _ _ _ _\n```\n"
                start_code: "{print} 'What will the dice indicate this time?'"
            10:
                story_text: "## Dice\nIs everybody taking too long throwing the dice? In this level you can let Hedy throw all the dice at once!\n\n### Exercise \nChange the names into names of your friends or family, and finish the code so they each roll.\n"
                example_code: "```\nplayers = Ann, John, Jesse\nchoices = 1, 2, 3, 4, 5, 6\n_ _ _ _\n    {print} player ' throws ' choices {at} {random}\n    {sleep}\n```\n"
                start_code: '# place your code here'
            15:
                story_text: "## Dice\nIn this game you have to throw 6 in as little tries as possible.\n"
                example_code: "```\noptions = 1, 2, 3, 4, 5, 6\n{print} 'Throw 6 as fast as you can!'\nthrown = 0\ntries = 0\n{while} thrown != 6\n    thrown = options {at} {random}\n    {print} 'You threw ' thrown\n    tries = tries + 1\n{print} 'Yes! You have thrown 6 in ' tries ' tries.'\n```\n"
                start_code: '# place your code here'
    secret:
        levels:
            13:
                example_code: "```\nname {is} {ask} 'What is your name?'\npassword {is} {ask} 'What is your password?'\n{if} name {is} 'Agent007' _ password {is} 'TOPSECRET'\n    {print} 'Go to the airport at 02.00'\n{else}\n    {print} 'Go to the trainstation at 10.00'\n ```\n"
                start_code: '## place your code here'
                story_text: "## Superspy\nCan you fill in the right command on the blank? Mind: The superspy has to answer BOTH questions correctly, before they get the confidential information!\n"
            12:
                story_text: "## Make a secret code like a super spy\nIn this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.\nIf the enemy tries to crack the code, they will get some false info to waste their time.\n\n### Exercise\nMake your own secret code for your superspy. Can you make it consist of even more variables?\n"
                example_code: "```\nname {is} {ask} 'What is your name?'\nif name {is} 'Agent007'\n    a {is} 'Go to the airport '\n{else}\n    a {is} 'Go to the trainstation '\npassword {is} {ask} 'What is the password?'\n{if} password {is} 'TOPSECRET'\n    b {is} 'tomorrow at 02.00'\n{else}\n    b {is} 'today at 10.00'\n{print} a + b\n```\n"
                start_code: '## place your code here'
        name: SuperSpy
        description: Make your own spy code
        default_save_name: SuperSpy
