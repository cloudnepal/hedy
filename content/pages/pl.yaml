title: Dokumentacja
home-sections:
-   title: Czym jest stopniowany język programowania?
    text: |-
        Uczenie się programowania może być trudne. Nie oznacza to, że programowanie samo w sobie *jest* trudne! Ale jest wiele zasad które należy zapamiętać, zupełnie jak gdy rozpoczyna się naukę polskiego.
        Podobnie, będziesz potrzebować wiele praktyki aby nauczyć się programowania.

        Możesz czytać te zdania z łatwością. Ale czy pamiętasz okres rozpoczynania nauki czytania? Każda litera wymagała od ciebie czasu!
        To prawda również w przypadku programowania, może ono być trudne na początku, ale z czasem staje się łatwiejsze!

        Dobrą cechą Hedy jest to, że Hedy jest *stopniowany*. Oznacza to, że nie musisz uczyć się wszystkich zasad jednocześnie.
        Pierwsze kilka poziomów nie ma aż tak wiele zasad, dzięki czemu swobodnie możesz przyzwyczaić się do programowania.
        Na każdym poziomie dodajemy nowe zasady, zwiększając liczbę komend które znasz. Komendy to instrukcje dla komputera.
-   title: Dlaczego Hedy jest stopniowany?
    text: |-
        W tym materiale wideo Felienne, twórczyni Hedy, wyjaśnia dlaczego Hedy jest stopniowany.

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/fmF7HpU_-9k" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
-   title: Dla kogo jest Hedy?
    text: Hedy jest przeznaczony dla wszystkich dzieci pragnących nauczyć się programować! Musisz jedynie potrafić czytać po angielsku z łatwością.
-   title: Multi-lingual programming
    text: While almost all textual programming language have keywords in English, such as `for` or `repeat`, Hedy can be used in any language! We currently support 39 different languages, including Spanish, Arabic, Simplified Chinese and Hindi. If your language is not available you can always start a a new translation.
-   title: Built for the classroom
    text: |-
        Hedy is suitable for kids aged 10 and up and designed for classroom use.
        Teachers can use our free, built-in lesson plans, but can also author their own lessons and load these into the Hedy user interface.
-   title: Czy potrzebuję doświadczenia z programowaniem?
    text: Nie, nie jest to wymagane. Jednakże, jeśli programowałoś już w Scratchu lub Pythonie, niektóre z komend będą dla ciebie znajome.
-   title: Czy Hedy jest darmowy?
    text: |-
        Tak! Hedy jest także Otwartym Oprogramowaniem (Open Source), co oznacza, że każdy kto potrafi programować może pomóc nam ulepszać Hedy.
        Możesz znaleźć kod na [GitHubie](https://github.com/hedyorg/hedy).
        Jeśli lubisz Hedy i chcesz wnieść swój wkład, akceptujemy (i jesteśmy bardzo wdzięczni za) [dotacje](https://github.com/sponsors/hedyorg)!
-   title: Czy muszę coś zainstalować?
    text: Nie. Hedy działa w przeglądarce internetowej, która jest programem którego używasz aby wyświetlać tę stronę. Prawdopodobnie Chrome, Edge lub Firefox. Hedy działa również za twoim telefonie lub tablecie.
join-sections:
-   title: Supporting Hedy
    text: "# There are three ways in which you can support Hedy!"
-   title: Improving the language
    text: |-
        The gradual and multi-lingual nature of Hedy create a lot of interesting technical challenges.
        Find those issues on [Github](https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage).
-   title: Translating Hedy
    text: |-
        Not a programmer? No problem! Another way to support Hedy is by [translating keywords, error messages, adventures are other content](https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial)

        This is the current status, help us complete a language, or add a new one!
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="Translation status" /></a>
-   title: Help teachers get started
    text: |-
        Hedy is designed to support teachers in providing programming lessons in class. We have specific teacher features like the option to create a class, customize it and see how your students are doing.
        If you like Hedy, you can reach out to schools that you know to help teachers get started! We can help you find schools or teachers via [Discord](https://discord.gg/8yY7dEme9r).
learn-more-sections:
-   title: Czy lubisz Hedy?
    text: |-
        Podziel się z nami swoją opinią!
        [Kliknij tutaj aby wysłać do nas wiadomość](mailto:hello@hedy.org "O Hedy")
-   title: Found a bug?
    text: "[Daj nam znać na GitHubie](https://github.com/hedyorg/hedy/issues/new/choose)"
-   title: Co tygodniowa pogadanka nad kodem
    text: |-
        Chcesz się dowiedzieć więcej o Hedy? Zobacz wystąpienie Felienne na "European Code Week 2020" (po Angielsku):

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/R2U9MEowYag?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
start-sections:
-   title: Getting started with Hedy
    text: "*Something about teachers accounts, slides etc*"
-   title: What other teachers say
    text: |-
        A while ago we ran a few short Hedy teachers surveys. 
        The questions span between suggestions of improvement and Hedy’s best features. 
        Below is a testimony of their thoughts:

        Simple interface and good examples. *Teacher: 3rd - 6th grades (elementary)*

        Multilingual programming and just the gradual programming concept itself. - *US: middle school, 6th-8th grade*

        The gradual nature of introducing programming. *Australia: High school*

        The construction is so good. *Netherlands: Lower secondary school HAVO-VWO*

        I can keep the pace of the class. *Netherlands: group 7 en 8* 

        Continues automatically. *Netherlands: 2 HAVO-VWO*

        Both that the explanation can be in Dutch (and the code in English), and that it builds up with more 
        and more possibilities. *Netherlands: Plus class group 7*

        The 'realness' of programming, it resembles how it is in reality. *Netherlands: Plus class group 4 to 8*

        Step-by-step activities. Fun activities. *Netherlands: 1e All levels, 2e VWO/HAVO 2e VWO +, 3e HAVO 3e VWO*

        But Hedy and its gradual levels... what an idea, 
        I wanted to personally thank you for creating this. I cannot thank you enough. Also, I have never seen the level of engagement and enthusiasm of my 
        students, as I have seen with Hedy. We have covered till level 5, and plan to spend one more week on it in classes and labs, 
        before starting Python.  *Pakistan*

        I really like Hedy very much and it is also nicely set up, which makes it good to use in primary school. 
        Hedy's gradual approach works very well. 
        The short explanation at the beginning of each level and the short example programs help to give the children a quick insight into what is new in the chosen level. 
        The different assignments that the children can choose also work very well. 
        You see the children choose assignments that appeal to them and they then get to work with them, 
        through the levels. Hedy is great fun for children who are good at programming and want to get a 
        taste of a real programming language. It is good preparation for secondary school as soon as more ICT 
        education is given there. *Netherlands: Oegstgeest Montessori school*

        <img width="500px" src="static/images/teacherfeedback/Fkids1.JPG"></img>
teacher-guide:
-   title: Wprowadzenie
    key: intro
    subsections:
    -   title: Czym jest Hedy?
        text: |-
            Hedy to tekstowy język programowania, stworzony dla dzieci i nastolatków w przedziale wiekowym 10 - 15 lat.
            W przeciwieństwie do innych języków skierowanych do dziecięcej widowni, takich jak Scratch, Hedy nie używa kodu w formie bloczków, a prawdziwego tekstu.
            Hedy oferuje więc naukę pisania kodu niczym prawdziwi programiści, ale małymi kroczkami za pomocą krótkich i ciekawych zadań.
            Dzięki temu Hedy może funkcjonować jako przystanek na drodze do nauki właściwych języków programowania, takich jak Python, w łatwo przyswajalny i, przede wszystkim, zabawny sposób!
            Jeśli chcesz wiedzieć więcej, możesz obejrzeć ten <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">film</a> na temat tego, jak powstawał język programowania Hedy.
    -   title: Docelowi odbiorcy
        text: |-
            Hedy został stworzony z myślą o dzieciach i nastolatkach w wieku 10 - 15 lat.
            Ważnym jest, by uczniowie potrafili poprawnie czytać. Nie zalecamy używania Hedy’ego zanim uczniowie nie osiągną poziomu czytania odpowiadającego dzieciom z 3 klasy podstawowej.
            Uczniowie (i nauczyciele!) nie muszą mieć żadnego doświadczenia w programowaniu przed rozpoczęciem nauki z Hedy’m.
    -   title: Jak działa Hedy?
        text: |-
            Hedy jest podzielony na poziomy, w ramach których wprowadzane są nowe polecenia. Każdy poziom zawiera szereg zadań pozwalających na przećwiczenie nowo poznanych poleceń. 
            Jako nauczyciel, możesz decydować które zadania są dostępne dla twoich uczniów. Czy będą tworzyć restauracje, kalkulator czy może nawiedzony dom? Na każdym poziomie, zadania są ułożone od najłatwiejszych do najtrudniejszych. 
            Dzięki takiemu podejściu, Twoi uczniowie cały czas będą mieli przed sobą zajmujące wyzwania. Zadania mogą być wykonywane przez każdego z uczniów z osobna, lub możesz je wykorzystać jako instrukcje nn aswoioich lejach. 

            Zadania zawierają także przykładowy kod, aby ułatwić korzystanie z Hedy, także mniej obeznanym z programowaniem nauczycielom.
            Oczywiście Hedy wspiera również kreatywnych nauczycieli, którzy uwielbiają tworzyć własne plany lekcji i zadania.

            Po zrobieniu wszystkich zadań z danego poziomu, Twoi uczniowie mogę sprawdzić swoją wiedzę w quizie.
            Możesz śledzić pracę i postępy swoich uczniów na stronie klasy.
    -   title: Urządzenia
        text: |-
            Hedy jest aplikacją internetową, co oznacza, że działa on na każdym urządzeniu z dostępną przeglądarką (Google Chrome, Firefox, Edge itp.), dzięki czemu każdy komputer, laptop, tablet, czy nawet smartfon, jest odpowiednim narzędziem to korzystania z Hedy’ego.
            Nie ma potrzeby pobierania czegokolwiek przed przystąpieniem do pracy z Hedy’m – po prostu uruchomcie stronę internetową i jesteście gotowi do działania!
    -   title: Społeczność Hedy
        text: |-
            Zapraszamy wszystkich nauczycieli, programistów i innych fanów Hedy do przyłączenia się do naszego <a href="https://discord.gg/8yY7dEme9r" target="_blank">Discorda</a>. Jest to idealne miejsce aby porozmawiać o Hedy’m: mamy kanały gdzie możesz pokazać innym swoje projektu i lekcje, kanały do zgłaszania błędów, oraz kanały do dyskusji z innymi nauczycielami oraz zespołem Hedy’ego
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI" target="_blank">Tutaj</a> możesz znaleźć film jak dołączyć do społeczności na Discordzie.
    -   title: Hedy and the GDPR
        text: |-
            Organizations in the EU have to comply with the GDPR (General Data Protection Regulation) when processing personal data.
            Because this is a complex issue for many schools, you can use all Hedy programming functionalities without sharing personal data.
            The easiest way to do this is to use Hedy without creating accounts for the teacher and students. Without accounts, all functionality is available, with the exception of personalizing levels, saving students' programs and viewing their progress. That is limiting, but there are schools that use Hedy in that way.

            A second way is for a teacher to create an account with an email address without personal data, for example "docent25@email.com". Apart from an email address, which is only required to reset your password, you do not need to share any information when you create a teacher account.
            With a teacher account, you can create anonymous accounts for students, e.g. rainbow-student1, rainbow-student2, etc (See 'Teaching preparations' for a detailed manual). This way you can use all functionality of Hedy, including saving progress, without sharing personal data of yourself or your students.

            If the above is not sufficient for your context, we can sign a processing agreement for the processing of your personal data.
-   title: Tutorial
    key: tutorial
    subsections:
    -   title: Tutorial
        text: Chcesz (ponownie) przejść przez samouczek? Kliknij <a href="https://hedy.org/tutorial" target="_blank">tutaj</a>.
-   title: Przygotowanie
    key: przygotowanie
    subsections:
    -   title: For teachers
        text: You can prepare your classes at the <a href="https://hedy.org/for-teachers" target="_blank">For Teachers page</a>. On this page you'll find everything you'll need to teach with Hedy, like your classes, your adventures and slides. All the functionalities of the for teachers page are explained below.
    -   title: Tworzenie klasy
        text: |-
            Jako nauczyciel, możesz stworzyć klasę dla swoich uczniów. Klasa taka umożliwia Ci zobaczenie kont uczniów i stworzone przez nich programy, a także monitorowanie ich postępów.
            Ten <a href="https://www.youtube.com/watch?v=Y3RTIWftJQg" target="_blank">film</a> pokazuje w jaki sposób można szybko stworzyć klasę w Hedy.
    -   title: Duplicate a class
        text: |-
            Are you teaching multiple classes? Then you don't have to customize each class individually. Simply make a class, costumize the class (see "Customize your Class" to learn how) and then duplicate this class as many times as you want.
            You can duplicate the class on the 'For Teachers' page. If you duplicate a class, all the class settings are duplicated as well. This means that all the levels and adventures you've mande unavailable for the first class will now be unavailable for the new class(es) as well.
            The student accounts and second teacher accounts in your class will not be duplicated into the new class.
    -   title: Add a second teacher
        text: |-
            Are you not the only teacher that teaches your class? Then you can now add another teacher to the class. Go to the 'For teachers' page and click on the class. Then choose 'Invite a teacher' and fill in the username of your colleague.
            Your colleague will get an invitation on their account to join your class. They can see that invitation message by clicking on their username in the upper right corner of the screen and selecting 'My account'.
            Once the other teacher accepts the invitation they can customize the class as well.
            To remove a second teacher from your class, go to the class page and remove the second teacher. The teacher who's created the class cannot be removed.
    -   title: Customize your Class
        text: |-
            You can customize your class and choose which adventures are available for your students. This way your students won't be overwhelmed by the amount of adventures and levels, and they can specifically focus on the adventures you'd like them to practice with.
            Click on your class on the for teachers page and choose 'customize class'. On this page you can select levels, set opening dates, unlock level thresholds and more.

            **Select and order adventures**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df38cbb2-468e-4317-ac67-92eaf4212adc" width="1000">
            In this section you can select and order adventures. The pink tabs are adventures with new commands. The gray tabs are regular adventures. To rearrange the order of the adventures, you can drag the tabs. However, we do advise you to use the regular order of adventures as the Hedy team made sure the adventures go from easiest to hardest.
            If you want to remove an adventure for your students, simply click the cross on the adventure's tab.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/0ddd10b5-ef60-4480-a0c4-fc9a0f323baa" width="300">
            If you want to add adventures, for instance your own adventure or an adventure you accidentally removed, use this menu to add the adventure to your students' adventures. Simply click the adventure you want to add and it (re)appears in the line of adventures. To undo all your changes to the adventures, click 'Reset'.

            **Opening dates**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/4e59acfa-4772-429f-8328-babb43c942d5" width="300">
            With this feature you can set opening dates for the levels. This way you can make a lesson plan before your course begins and not worry about opening new levels each week. In the image above the first level is opened directly, the second will open the 23th of september, and the 3rd level the week after. The other levels are closed.
            Don't want to set opening dates? No problem, just leave this section blank.

            **Unlock level thresholds**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/99a34dab-f112-459e-bfd1-07618be4715a" width = "1000">
            This featue allows you to set a threshold for your students' quiz grade, before they can continue to the next level. For example, if you enter "80" your students have to score at least 80% on the quiz before they are allowed to go to the next level. If they haven't met the threshold, they are not allowed to continue and have to retake the quiz.
            Don't want to use the threshold? No worries, just keep this section blank.


            **Other settings**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/a8491d67-6d6e-42a7-b672-fd3d083a76f8"/>
            There are some other setting that could be usefu to you aswell. Our first extra setting is 'Mandatory developer's mode'. In developers mode the students only see their input and output screens and the run button. The adventures are hidden and there are no cheatsheets available. This might come in handy in a test situation.
            If this option is not selected the developer's mode is available for students too as a voluntary option.

            If you want all your students to be visible in de class highscore, you can select the second option.
            With all the other options you can choose to hide some functions or content for your students, this might help them focus more.

            **Save**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df179df3-3073-4d15-bba6-62e58fb675be" width="300">
            Don't forget to save your changes when you're done customizing your class.
    -   title: Konta uczniów
        text: |-
            Uczniowie mogą dołączyć do Twoich zajęć na dwa sposoby: Ty tworzysz konta dla nich albo oni tworzą własne konta.

            **Ty tworzysz konta dla swoich uczniów**
            Najprostszym sposobem by dodać uczniów do Twoich zajęć jest stworzenie dla nich konta. Można to zrobić klikając przycisk „stwórz konta dla uczniów” i uzupełniając pola z loginami i hasłami.
            Uczniowie mogą zalogować się za pomocą tychże właśnie loginów i haseł. Po zalogowaniu się, będą mieć możliwość zmiany loginu i hasła na takie, które bardziej im odpowiada nadal pozostając w Twoich zajęciach.
            Ten <a href="https://www.youtube.com/watch?v=eEQvik-Ce5M" target="_blank">film</a> pokazuje jak dodać uczniów do Twoich zajęć w najprostszy i najszybszy sposób.

            **Uczniowie tworzą własne konta**
            Twoi uczniowie mogą założyć własne konta na stronie Hedy. Żeby mogli dołączyć do zajęć, wystarczy, że klikną link z zaproszeniem.
            Link z zaproszeniem znajduje się na stronie zajęć. Wyślij go do swoich uczniów. Zwróć uwagę, że uczniowie muszą być zalogowani do Hedy w momencie kliknięcia w link.
            Możesz również ręcznie zaprosić ucznia do swoich zajęć klikając przycisk „Zaproś użytkownika”.
    -   title: Zmiana preferowanego języka
        text: |-
            Tworząc profil uczniowie powinni wybrać „preferowany język”. Hedy będzie zawsze włączał się w wybranym przez ucznia języku.
            W każdej chwili można zmienić język ponownie przechodząc do „Moje konto” i „Moje ustawienia osobiste”.

            **Dla osób nie mówiących po angielsku**
            Nie tylko możesz zmienić język zadań na swój własny język. Możesz także wybrać język, w którym mają być słowa kluczowe (na przykład „napisz” lub „zapytaj”).
            W ten sposób możesz nauczyć swoich uczniów kodowania za pomocą angielskich słów kluczowych, ale możesz także pozwolić im programować we własnym języku. Przykładowo holenderscy studenci mogą użyć polecenia „vraag” zamiast „zapytaj”.
            If a student wants to switch languages, they can click the keyword switcher. It will switch the keywords from English to the preferred language and back.
            Fun fact! Students are allowed program in both English and their own language at the same time! So, if they have trouble remembering some keywords in English, but easily remember other ones they can use both at the same time.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/0b3122e6-ff22-43d7-b8b6-62f47f485293" width="100">

            **Video**
            Ten <a href="https://www.youtube.com/watch?v=QrVZETj4oLM" target="_blank">film</a> pokazuje w jaki sposób ustawić preferowany język oraz jak zmienić język słów kluczowych.
    -   title: Przechowywanie programów
        text: |-
            Po zalogowaniu, zobaczysz Moje programy obok ikony Twojego profilu.
            Ten link dostępny jest również dla Twoich uczniów. Wewnątrz Moje programy możesz znaleźć wszystkie programy nad którymi pracowałaś.
            Domyślnie programy będą zapisane w „Moje programy” po tym gdy je uruchomisz, oraz co 10 sekund, pod swoją domyślną nazwą
            i ich poziomem (przykładowo: Opowieść 5). Jeśli chcesz przechować program pod inną nazwą wystarczy, że napiszesz ją w pasku nazwy.
            Aktualnie tylko jeden program może być zapisany dla każdej zakładki w poziomie.

            Ty (i Twoi uczniowie) możecie również udostępniać programy pryz użyciu przycisku udostępnij obok nazwy programu.
            Takie programy te zostaną opublikowane na naszej <a href="https://hedy.org/explore" target="_blank">stronie "Odkrywaj"</a>, aby każdy mógł je zobaczyć i wykorzystać.
            Jeśli chcesz cofnąć udostępnianie swojego programu, przejdź do „Moje programy” i kliknij „Przestań udostępniać”.

            Ikona samolotu z papieru może być użyta do oddania programu nauczycielowi zajęć. Programów które zostały oddane nie będzie już można edytować.
-   title: Nauczanie z Hedy'm
    key: nauczanie
    subsections:
    -   title: Nauczanie z Hedy'm
        text: |-
            Hedy zawiera wiele różnych poziomów, z których każdy uczy nowych umiejętności. Zalecamy nauczanie jednego poziomu na lekcję.
            Daje to uczniom czas na pełne zrozumienie nowego polecenia lub koncepcji i przećwiczenie ich przed przejściem na wyższy poziom.
            Nasze lekcje są zorganizowane w następujący sposób:
    -   title: Slides
        text: |-
            When giving instructions you might want to use our slides. Our slides are available on the 'For teachers' page. There is a set of slides for each level. In the slides all the new commands for that level are explained. We have aimed to explain why these changes are nessecary or how the new commands come in handy.
            We also give some examples of how the new commands can be used. You could of course also use your own slides, or just open Hedy and show your students around the website. Whichever you prefer to give the best Hedy lessons!
    -   title: Wprowadzenie
        text: |-
            Możesz rozpocząć lekcje od krótkiego przypomnienia: co już wiedzą na dany temat, czego nauczyli się na poprzedniej lekcji i jakie błędy popełnili, z czego się z nich nauczyli?
            W ten sposób wszystkie wcześniej wyuczone polecenia i często popełniane błędy są świeże w pamięci Twoich uczniów, kiedy zaczynasz wprowadzać nową lekcję.
    -   title: Wprowadzanie nowych pojęć i komend
        text: |-
            Nowe pojęcia i polecenia mogą być bardzo trudne dla niektórych uczniów do zrozumienia.
            Dlatego istotne jest by pokazać wiele wzorców poprawnego używania nowych poleceń swoim uczniom.
            Zwłaszcza przy początkowych poziomach, gdzie niektórzy uczniowie nie mają żadnego doświadczenia w programowaniu, przyswojenie abstrakcyjnych pojęć może być dla nich trudne.
            Pokazanie wielu przykładów sprawia, że abstrakcyjne pojęcie (jak na przykład: „Co to jest zmienna?”) staje się bardziej rozpoznawalne i zrozumiałe („Spójrz, zmienna zwierzę zmieniła się w słowo pies”).
    -   title: Przejdźmy do praktyki
        text: |-
            Each level contains different adventures that you can find in the pink tabs. The first pink tab explains the new commands in this level.
            The following tabs are adventures that the students can try out and make their own.
            The adventures are arranged from easiest to hardest, so we recommend to start on the left and your your way to the right.
            The last tab 'what's next' gives a little teaser of what you'll learn in the next level. Of course, you can select the adventures you want your students to do for each level.
            They don't always have to make every adventure. Every adventure contains an example code, that the students can try out with the green button.
            The example code gets copied to the workfield, where the students can try out the code and adjust it to make it their own.
            Stimulate your students to turn the example code into their own projects by adding their own ideas and making their own variation of the adventure.
    -   title: Quiz
        text: |-
            By sprawdzić, czy Twoi uczniowie opanowali wszystkie umiejętności z danego poziomu, możesz pozwolić im podejść do quizu.
            Quiz taki obejmuje 10 pytań wielokrotnego wyboru dotyczących nowych pojęć i poleceń wprowadzonych w tym poziomie.
            Nie każdy poziom ma odpowiadający mu quiz, wciąż jesteśmy na etapie ich projektowania.
            Niektóre poziomy zawierają łamigłówki. Łamigłówki pokazują uczniom kilka linii kodu, które uczniowie muszą ustawić we właściwej kolejności.

            Ten <a href="https://www.youtube.com/watch?v=lNh5EdZVUwc" target="_blank">film</a> pokazuje quizy i łamigłówki.
    -   title: Ocena
        text: |-
            Zakończ lekcję, przeprowadzając krótkie podsumowanie. Czego nauczyli się uczniowie? Z jakimi trudnościami się zetknęli?
            Czy uczyli się na swoich błędach? I oczywiście: Co stworzyli?
            Uczniowie są często bardzo dumni ze swoich własnych dzieł, więc warto zaoszczędzić trochę czasu i dać uczniom możliwość zaprezentowania ich pracy kolegom z klasy.
-   title: Teacher Statistics
    key: teacher_statistics
    subsections:
    -   title: Live Dashboard
        text: |-
            If you would like to keep track of your students' progress, you can make use of the live dashboard. You can find the live dashboard by clicking 'Live statistics' on your class page.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/97a54679-b1d6-46b4-a633-ab0161114642" width="1000">
            All the features of this dashboard are explained below.
    -   title: Level Selection
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/94dc891d-cdd6-4311-91f2-51900eaf4c2a" width="500">
            Firstly, you can select the levels you'd like to see on the dahsboard. Select the levels your students are currently working on by clicking on the number of that level. Deselect levels that you do not want to see by clicking them again.
            In this example level 1 and 2 are selected. You can click on refresh to refresh the dashboard and get the most current stats.
    -   title: Class Overview
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/b2c30ef9-6eba-4c02-92a3-9669504a54a8" width="1000">
            In the class overview you can see which adventure your students are working on right now. You can see that one student is working on the 'Rock, Paper, Scissors' adventure in level 1, one is working on the 'Fortune Teller' in level 1 and one student is working on the 'Rock, Paper, Scissors' adventure in level 2.
            If you'd like to know which of your students is working on the adventure, simply click the number and their accountnames will appear.
            You can also see how many of your students have finished the quiz. In this case, one student finished the quiz in level 1. Again, you can click the 1 to see which of your students it is.

            You can also see one of the students is 'missing' from this overview. That's because he's working on an adventure in level 4, which is not selected.
    -   title: Student List
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/693e976c-199f-46f4-abae-3f18f9854cd0" width="1000">
            Here you can find a list of your students and you can see their individual progress. The blue ring shows you what your students are currently working on.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/c7e2150f-60de-4ef7-8862-5901a7fb6609" width="150">
            It is important to notice that the blue dots means that a students 'attempted' the adventure. This means that they ran a code in this adventure and went on to the next adventure, so this does not automatically mean that they did a good job!
            If you want to see how an individual student is getting along, you can click their name in this overview. This is what you see if you click on marleen_h3a for example:
            <img src="https://github.com/hedyorg/hedy/assets/80678586/f8c2480d-c724-46f9-a702-33532828de70" width="800">
            You see that Marleen is having some trouble programming. She tried to run a program that contains blanks multiple times, so she probably doesn't know that she has to change something in the example code before running it.
            In this way this overview can give you a better understanding of what a student is struggling with.
    -   title: Common Errors
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/e7af5ce3-ca74-48e7-9654-f17435596fbc" width="500">
            If you're not only interested in individual struggles of your students, but you'd like to know what the whole class seems to be doing wrong, you can use this oversight of common errors.
            The most common error messages that your students are recieving will appear in this oversight for you, so you could give some more instructions to the whole class if needed.
            By clicking the error, you can see which students are having trouble with this error. By clicking resolve, you'll remove this error from the list.
    -   title: Overview of programs per adventure
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/f07bf714-7250-4711-82a1-616f9f7b55e8" width="1000">
            Another useful overview of all the programs your students made in a level can be found on your class page. Go to the class page and click 'Overview of programs per adventure'. Here you'll find this overview.
            You could use this overview to check your students' work. If they have made a program in an adventure, an eye appears in your overview. Click the eye to view their work. Did you like it? Then you can check the box and a green tick will appear.
            This way you create a nice overview for yourself of your students' results.
-   title: Dodatkowe cechy Hedy
    key: cechy
    subsections:
    -   title: Stwórz swoją własną przygodę
        text: Każdy nauczyciel może tworzyć również swoje własne przygody. Ten <a href="https://www.youtube.com/watch?v=A0zbXpxX4q4" target="_blank">film</a> pokazuje jak możesz stworzyć swoją własną przygodę jako nauczyciel i dodać ją do swoich zajęć.
    -   title: Strona Odkrywaj
        text: |-
            Na <a href="https://hedy.org/explore" target="_blank">stronie Odkrywaj</a> możesz zobaczyć prace innych użytkowników Hedy. Możesz wypróbować ich programy i użyć ich jako inspiracji do stworzenia czegoś fajnego.
            Możesz również dodać stworzony przez Ciebie program do strony Odkrywaj klikając „Zapisz i udostępnij kod” w oknie programowania lub przechodząc do Moje programy i klikając „Udostępnij”.
            Nie chcesz już udostępniać swojego programu? Wystarczy, że przejdziesz do „Moje programy” i klikniesz „Przestań udostępniać”.
            Więcej informacji na temat strony Odkrywaj znajdziesz w tym <a href="https://www.youtube.com/watch?v=26boFjqvS5Q" target="_blank">filmie</a>.
    -   title: Moje osięgnięcia
        text: |-
            Jeśli klikniesz na swoją nazwę użytkownika w prawym górnym rogu ekranu, możesz przejść do strony <a href="https://hedy.org/my-achievements" target="_blank">Moje osiągnięcia</a>. Na tej stronie kolekcjonowane są Twoje osiągnięcia. Twoi uczniowie również mają taką stronę.
            Gdy najedziesz myszką na odznakę zobaczysz w jaki sposób możesz ją zdobyć. Istnieją również ukryte odznaki, których sposób zdobycia musisz odkryć samodzielnie.
            Jeśli chcesz dowiedzieć się więcej o osiągnięciach to obejrzyj ten <a href="https://www.youtube.com/watch?v=-FjmKejukCs" target="_blank">film</a>.
    -   title: Najlepsze wyniki
        text: |-
            Na <a href="www.https://hedy.org/highscores" target="_blank">tej stronie</a> możesz zobaczyć najlepsze wyniki wszystkich użytkowników Hedy.
            W tym <a href="https://www.youtube.com/watch?v=IqTiUkBVTo8" target="_blank">filmie</a> możesz dowiedzieć się więcej o najlepszych wynikach.
    -   title: Debugger
        text: |-
            Czy Twój program (lub program Twojego ucznia) nie działa? Musi być w nim jakiś bug (błąd programistyczny)! Możesz użyć debuggera do znalezienia błędu.
            Debugger to przycisk z biedronką na ekranie programowania. Po jego naciśnięciu możesz uruchamiać swój program linia po linii by znaleźć swój błąd.
            Czy udało Ci się już znaleźć błąd? Naciśnij czerwony przycisk stopu, a debugger się wyłączy.
    -   title: Czytaj na głos
        text: Czy chcesz by wyjście twojego programu zostało przeczytane na głos? W takim razie możesz użyć funkcji Czytaj na głos, która znajduje się pod przyciskiem „Uruchom kod” na Twoim ekranie programowania.
    -   title: Tryb programisty
        text: |-
            Przeszkadzają Ci wszystkie przygody, lub potrzebujesz napisać dłuższy program? Wypróbuj więc przełącznik „Tryb programisty” na dole ekranu programowania.
            Tryb programisty pozwala Tobie i Twoim uczniom użyć większego ekranu programowania.
    -   title: Cheat sheets
        text: |-
            In every level there is a button with this emoji 🤔. You and your students can find the "cheat sheets" there. On this cheat sheet, you can find all the commands that are usable in this level in their correct form.
            So if you've forgotten how a command works, simply take a peek at the cheat sheet!
    -   title: Other useful features
        text: Ten <a href="https://www.youtube.com/watch?v=c4MntPPgl1Y" target="_blank">film</a> pokazuje jeszcze więcej funkcji Hedy, takich jak ściągawka oraz przełącznik klawiatury.
-   title: After Hedy
    key: after
    subsections:
    -   title: What to do after Hedy?
        text: |-
            Congratulations on reaching the end of Hedy! Your students have now learned how to create their own basic code in the Python programming language.
            Of course, you could keep programming in our Hedy compiler, but it might be more exciting for your students to transfer to a "real" Python interface.
            Would you like to continue teaching Python? Then please visit <a href="https://www.python.org/about/gettingstarted/" target="_blank">the Python website</a> to learn how to get started in another compiler.

            Now that your students have a basic knowledge of programming in general, you could also show them around in other textual programming languages. The language might change but the concepts do not, so Hedy will still give them a big advantage.
-   title: Answers to the exercises
    key: answers
    intro: |-
        The answers to all the exercises can be found on the public profile of the useraccount 'Hedy_answers'. We often encourage students to use their own creativity in their answers, so these answers are merely a guideline as to what a possible correct answer could look like.

        To go to the 'Hedy_answers' profile, please click <a href="https://hedy.org/user/hedy_answers" target="_blank">here</a>.
-   title: Często popełniane błędy
    key: częste_pomyłki
    intro: |-
        Możesz uczyć się na błędach, zwłaszcza w programowaniu!
        Pomyłki są nieuniknione, dając przy tym świetną okazję do uczenia się, jednak znalezienie odpowiedniego ich rozwiązania może okazać się dość problematyczne dla samych nauczycieli.
        Szczególnie w późniejszych poziomach, kiedy kod staje się coraz dłuższy i bardziej skomplikowany. Z tego też powodu stworzyliśmy listę najczęściej spotykanych błędów w każdym z poziomów, wraz z ich rozwiązaniami.
    levels:
    -   level: "1"
        sections:
        -   title: Uczniowie zapominają napisać odpowiednią komendę
            example:
                error_text: Na przykład, wpisują zdanie bez używania komendy 'napisz'
                error_code: Hedy nie może tego wyświetlić
                solution_text: Naucz swoich uczniów, by zawsze zaczynali linijkę kodu komendą.
                solution_code: "{print} Hedy może to wyświetlic!"
        -   title: Uczniowie używają wielkich liter przy wpisywaniu komend
            example:
                error_text: Komendy nie zadziałają, jeżeli zostaną napisane przy użyciu wielkich liter
                error_code: |-
                    Zapytaj Czemu mój kod nie działa?
                    Napisz Bo używam wielkich liter.
                solution_text: Zamień wielkie litery na małe.
                solution_code: |-
                    {ask} Czemu mój kod teraz działa?
                    {print} Bo używam tylko małych liter!
        -   title: Uczniowie używają 'dołącz' bez ' zapytaj'
            example:
                error_text: Komenda 'dołącz' powtarza odpowiedź do pytania zadanego komendą 'zapytaj'. Bez 'zapytaj', 'powtórz' nie ma czego powtórzyć.
                error_code: "{echo} Nazywasz się"
                solution_text: Dodaj komendę 'zapytaj'.
                solution_code: |-
                    {ask} Jak się nazywasz?
                    {echo} Nazywasz się
        -   title: Uczniowie próbują wykorzystać komendę 'dołącz' do dodania wartości w środku zdania
            example:
                error_text: I mają rację! Jednak by to osiągnąć, potrzebne będą zmienne, wprowadzone dopiero w następnym poziomie.
                error_code: |-
                    {ask} Jaki język programowania jest najlepszy?
                    {echo} jest najlepszy!
                solution_text: "By zachować spójność przekazu, na potrzeby poziomu 1 ograniczymy się do:"
                solution_code: |-
                    {ask} Jaki język programowania jest najlepszy?
                    {echo} Najlepszy jest...
        -   title: "Żółw: Uczniowie wyprowadzają żółwia poza ekran"
            example:
                error_text: Uczniowie często lubią wykorzystywać duże liczby podczas zabawy z żółwiem, powodując tym samym przesunięcie poza widok ekranu.
                error_code: |-
                    {forward} 300
                    {turn} 90
                solution_text: W tym przykładzie, uczniom może się wydawać, że komenda 'obróć' nie działa. Pomimo tego, że wszystko wykonuje się tak jak powinno, nie możesz tego zobaczyć, ponieważ wykonuje się poza ekranem. Użyjcie mniejszych liczb, by tego uniknąć.
                solution_code: |-
                    {forward} 100
                    {turn} 90
        -   title: "Żółw: Uczniowie próbują użyć komendę 'wstecz' lub podobną, lecz takowa nie istnieje"
            example:
                error_text: Komenda 'wstecz' nie istnieje
                error_code: wstecz 100
                solution_text: "By żółw ruszył się wstecz, należy użyć komendy 'naprzód' z wartością ujemną. Na przykład:"
                solution_code: "{forward} -100"
    -   level: "2"
        sections:
        -   title: Uczniowie wpisali komendę z literówką
            example:
                error_text: Hedy nie rozpozna komendy z literówką.
                error_code: napizs Nie rób literówek
                solution_text: Naucz swoich uczniów, by zwracali uwagę na wiadomości z błędami. W ten sposób szybciej dojdą do tego, co poszło nie tak.
                solution_code: "{print} Nie rób literówek"
        -   title: Uczniowie zapominają, że komenda ask uległa zmianie
            example:
                error_text: Na tym poziomie uczniowie uczą się o zmiennych. Komenda ask również wymaga zmiennej, ale uczniowie o tym zapominają.
                error_code: zapytaj Co chciałbyś zjeść
                solution_text: W tym poziomie musisz wskazać Hedy'emu, gdzie przechować odpowiedź, by użyć ją później. Coś takiego nazywane jest 'zmienną'.
                solution_code: zamówienie {is} Co chciałbyś zjeść
        -   title: Uczniowie próbują użyć komendy 'dołącz'
            example:
                error_text: Dla niektórych uczniów frustrujące może być to, że polecenie echo już nie działa. Dlatego bardzo ważne jest, aby wyjaśnić zalety korzystania ze zmiennych. Na przykład można używać wielu zmiennych w kodzie i można je umieszczać w dowolnym miejscu w zdaniu!
                error_code: |-
                    odpowiedź {is} {ask} Czemu dołącz już nie działa
                    dołącz
                solution_text: Użyj zmiennej.
                solution_code: |-
                    odpowiedź {is} {ask} Czemu dołącz już nie działa
                    {print} odpowiedź
        -   title: Uczniowie używają nazwy zmiennej jak zwykłego słowa
            example:
                error_text: W przykładzie poniżej, słowo 'imię' używane jest zarówno jako zmienna, jak i część zwykłego zdania. Wynikiem tego kodu będzie 'Hej moje Hedy to Hedy'.
                error_code: |-
                    imię {is} Hedy
                    {print} Hej moje imię to Hedy
                solution_text: By tego uniknąć, nie używaj słów jako i nazwy zmiennych, i części zdania. W poziomie 4 problem ten jest rozwiązany za pomocą cudzysłowów.
                solution_code: |-
                    imię {is} Hedy
                    {print} Hej nazywam się imię
        -   title: Uczniowie używają zmiennych z nazwami dwuczłonowymi .
            example:
                error_text: Nazwa zmiennej musi zawierać tylko jedno słowo. Zamiast spacji możliwe jest użycie podkreślników '_', w ten sposób dwa słowa liczą się jak jedno.
                error_code: wybrane drzwi to zapytaj Które drzwi wybierasz
                solution_text: Zamień spacje na podkreślniki.
                solution_code: wybrane_drzwi {is} {ask} Które drzwi wybierasz
        -   title: Uczniowie używają nieistniejącej zmiennej
            example:
                error_text: W tym przykładzie uczeń nazwał zmienną 'pies', ale próbuje wywołuje zmienną 'imię'.
                error_code: |-
                    pies {is} {ask} Jak nazywa się twój pies
                    {print} Twój pies nazywa się imię
                solution_text: Zawsze zwracaj uwagę na spójność nazwy zmiennej. Małe zmiany mogą być trudne do zauważenia (na przykład użycie liczby mnogiej zamiast pojedynczej), ale będą miały wpływ na działanie (lub niedziałanie) kodu.
                solution_code: |-
                    imię {is} {ask} Jak nazywa się twój pies
                    {print} Twój pies nazywa się imię
    -   level: "3"
        sections:
        -   title: Uczniowie próbują wyświetlić całe listy
            example:
                error_text: A list can't be printed. You can only print one item from the list with at random.
                error_code: |-
                    groceries {is} apples, milk, chocolate
                    {print} groceries
                solution_text: To print a list of all the groceries, you simply need to put them after a print command. Else you can use the list to print one item with at random.
                solution_code: |-
                    {print} apples, milk, chocolate

                    or

                    groceries {is} apples, milk, chocolate
                    {print} groceries {at} {random}
        -   title: Uczniowie używają nazw zmiennych lub list jak zwykłego tekstu
            example:
                error_text: This problem probably occured in level 2 as well. Now it can happen with lists too.
                error_code: |-
                    name {is} Hedy
                    {print} Hi my name is name

                    or

                    animal {is} rhino, bee, swan
                    {print} The best animal is... animal {at} {random}
                solution_text: Don;t use the names of variables or lists in regular text to print. In level 4 this problem is solves with quotation marks.
                solution_code: |-
                    name {is} Hedy
                    {print} Hi I'm name

                    or

                    animals {is} rhino, bee, swan
                    {print} The best animal is... animals {at} {random}
        -   title: Students forget at in at random
            example:
                error_text: Like in the example
                error_code: |-
                    birds {is} sparrow, seagull, robin
                    {print} birds random
                solution_text: This problem is solved by adding the word at.
                solution_code: |-
                    birds {is} sparrow, seagull, robin
                    {print} birds {at} {random}
        -   title: Students forget to use the print command when also using the at random command
            example:
                error_text: Or they will sometimes put at random at the beginning of the line.
                error_code: |-
                    fruit {is} apple, cherry, banana
                    fruit at random
                solution_text: Emphasize to your students that you always need a print to print text.
                solution_code: |-
                    fruit {is} apple, cherry, banana
                    {print} fruit {at} {random}
        -   title: Students forget to use commas in their lists
            example:
                error_text: In a list items are seperated with a comma.
                error_code: |-
                    pizzas {is} funghi tonno quattro stagioni
                    {print} pizzas {at} {random}
                solution_text: After each item on your list, there should be a comma
                solution_code: |-
                    pizzas {is} funghi, tonno, quattro stagioni
                    {print} pizzas {at} {random}
        -   title: Students try to use at random without a list
            example:
                error_text: For example
                error_code: |-
                    clubs {is} Manchester United
                    {print} clubs {at} {random}
                solution_text: Hedy can't print anything at random, because there is no list to choose from.
                solution_code: |-
                    clubs {is} Manchester United, Bayrn Munchen, FC Barcelona
                    {print} clubs {at} {random}
        -   title: Students try to use add/remove without a list
            example:
                error_text: In the example below 'names' is not a list, but a variable. You cannot add anything to it.
                error_code: |-
                    names {is} Jake
                    your_name {is} {ask} Who are you?
                    {add} your_name {to_list} names
                    {print} names {at} {random}
                solution_text: There has to be a list first, so you have to add a second name to turn names into a list, for example Amy. If you don't want amy on your list, you can use remove to remove it after.
                solution_code: |-
                    names {is} Jake, Amy
                    your_name {is} {ask} Who are you?
                    {add} your_name {to_list} names
                    {print} names {at} {random}
        -   title: Students forget to use to/from in add/remove
            example:
                error_text: Without to/from the add/remove command won't work.
                error_code: |-
                    adventures {is} story, parrot, dice
                    choice {is} Which adventure do you like best?
                    add choice
                    remove dice
                    {print} I love adventures {at} {random}
                solution_text: Hedy has to know which list the item should be added to/removed from.
                solution_code: |-
                    adventures {is} story, parrot, dice
                    choice {is} Which adventure do you like best?
                    {add} choice {to_list} adventures
                    {remove} dice {from} adventures
                    {print} I love adventures {at} {random}
    -   level: "4"
        sections:
        -   title: Students forget to use quotation marks on both sides of the text
            example:
                error_text: In this level print and ask need a set of quotation marks. One before of the text and one after.
                error_code: |-
                    {print} Hello
                    mood {is} {ask} 'How are you?
                solution_text: Add the correct quotation marks.
                solution_code: |-
                    {print} 'Hello'
                    mood {is} {ask} 'How are you?'
        -   title: Students use the wrong quotation marks
            example:
                error_text: It is important to start your lesson by checking if the students know how to type a quotation mark properly. ELse they might use the "double quotes" or the `skewed one`.
                error_code: |-
                    {print} `Welcome to the restaurant`
                    food {is} {ask} "What would you like to order?"
                solution_text: "These are the correct quotation marks:"
                solution_code: |-
                    {print} 'Welcome to the restaurant'
                    food {is} {ask} 'What would you like to order?'
        -   title: Students use an apostrophe in their text
            example:
                error_text: From this level on apostrophes are not allowed. They are often used in English when thyping contractions like you're, don't or what's.
                error_code: "{print} 'You're not allowed to type this'"
                solution_text: You can choose to use the wrong grammar and just leave the apostrophe out. Or you could use the ` as an apostrophe.
                solution_code: |-
                    {print} 'Youre allowed to type this'
                    {print} 'And you`re able to do this'
    -   level: "5"
        sections:
        -   title: Students forget to use print in an if command
            example:
                error_text: After students use if or else they forget to use a second command like print or ask.
                error_code: |-
                    {if} name {is} Hedy 'Great!'
                    {else}  Hedy {is} better!
                solution_text: Add the print command to fix it.
                solution_code: |-
                    {if} name {is} Hedy {print} 'Great!'
                    {else} {print} 'Hedy is better!'
        -   title: Students might use two different names for the same variable
            example:
                error_text: In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |-
                    horse {is} {ask} 'What is your horse called?'
                    {if} name {is} Bonfire {print} 'cool'
                    {else} {print} 'less cool!'
                solution_text: Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |-
                    horse {is} {ask} 'What is your horse called'
                    {if} horse {is} Bonfire {print} 'cool!'
                    {else} {print} 'less cool!'
        -   title: Students still forget the quotes on both sides
            example:
                error_text: Using the `if` command can make the code lines very long and students tend to forget to use quotes.
                error_code: |-
                    {if} name {is} Hedy {print} fun
                    {else} {print} 'meh!
                solution_text: Always use 2 quotes in a print command.
                solution_code: |-
                    {if} name {is} Hedy {print} 'fun'
                    {else} {print} 'meh!'
        -   title: Students use quotes around variable names
            example:
                error_text: In this level there are no quotes around variable names.
                error_code: |-
                    {if}  name  {is} 'Hedy' {print} 'fun'
                    {else} {print} 'meh!'
                solution_text: Remove the quotes to get the code to work.
                solution_code: |-
                    {if} name {is} Hedy {print} 'fun'
                    {else} {print} 'meh!
        -   title: Students use long variable names containing two words
            example:
                error_text: A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: chosen door is ask  Which door do you pick?
                solution_text: Add an underscore.
                solution_code: chosen_door {is} {ask} 'which door do you pick?'
        -   title: Students want multiple answers to be correct
            example:
                error_text: For example this student Hedy to tell all his friends that they are funny, but other classmates would be told that they are not.
                error_code: "{if} name {is} Jesse, David, Souf print  You are funny  {else} {print} 'You are not funny'"
                solution_text: |-
                    You could use the `in` command for that. It is explained in a higher level, but it does already work in level 5.
                    Another solution is to use multiple if commands and no else command. The disadvantage is that it won't tell the other classmates that they are not funny.
                solution_code: |-
                    friends {is} Jesse, David, Souf
                    name {is} {ask} 'Who are you?'
                    {if} name {in} friends {print} 'You are funny'
                    {else} {print} 'You are not funny'

                    or

                    name {is} {ask} 'Who are you?'
                    {if} naam {is} Jesse {print} 'You are funny'
                    {if} naam {is} David {print} 'You are funny'
                    {if} naam {is} Souf {print} 'You are funny'
        -   title: The students make the variable name the same as the value in the if statement
            example:
                error_text: In the example below the password is 'password'. This will result in it always being correct.
                error_code: |-
                    password {is} {ask} 'What is the password?'
                    {if} password {is} password {print} 'Access granted'
                    {else} {print} 'Acces denied!'
                solution_text: Pick a different name for your variable.
                solution_code: |-
                    secret_password {is} {ask} 'What is the password'
                    {if} secret_password {is} password {print} 'Access granted!'
                    {else} {print} 'Access denied!'
    -   level: "6"
        sections:
        -   title: Students struggle with quotation marks
            example:
                error_text: Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.
                error_code: "{print} '5 + 5'"
                solution_text: In this code the output screen will print '10'.
                solution_code: "{print} 5 + 5"
        -   title: Students struggle with the concept of doing maths with a variable
            example:
                error_text: "Some students will find it hard to do maths with variables. Try to show them very simple examples, like:"
                error_code: |-
                    age = {ask} 'How old are you?'
                    {print} 'Next year you will be ' age + 1
                solution_text: Or take it a step further like this.
                solution_code: |-
                    price = 0
                    {print} 'Welcome to our burger restaurant'
                    burger = {ask} 'Would you like a burger?'
                    {if} burger = yes price = price + 10
                    drink = {ask} 'Would you like a drink?'
                    {if} drink = yes price = price + 4
                    {print} 'That will be ' price ' euros please'
    -   level: "7"
        sections:
        -   title: Students forget one of the word of the repeat command, or they forget the print command
            example:
                error_text: Make sure that the students know to use both the full repeat command and the print command.
                error_code: |-
                    {repeat} 3 {times}  For he`s a jolly good fellow
                    {repeat} 3 print
                solution_text: "This is the correct code:"
                solution_code: |-
                    {repeat} 3 {times} {print} 'For he`s a jolly good fellow'
                    {repeat} 3 {times} {print} 'Which nobody can deny!'
        -   title: Students try to repeat multiple lines
            example:
                error_text: In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.
                error_code: |-
                    {repeat} 3 {times} drink = {ask} 'What would you like to drink?'
                    {print} drink
                solution_text: You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.
                solution_code: |-
                    drink = {ask} 'What would you like to drink?'
                    {print} drink
                    drink = {ask} 'What would you like to drink?'
                    {print} drink
                    drink = {ask} 'What would you like to drink?'
                    {print} drink
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long-running programs. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: "{repeat} 100 {times} {print} 'How many times can I repeat this?'"
                solution_text: Make sure the programs aren't too long
                solution_code: "{repeat} 20 {times} {print} 'This is enough'"
    -   level: "8"
        sections:
        -   title: Students use the indentation wrong
            example:
                error_text: Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple snippets before making a whole program with it.
                error_code: |-
                    {repeat} 3 {times}
                    {print} 'hello'
                solution_text: "This is the correct code:"
                solution_code: |-
                    {repeat} 3 {times}
                        {print} 'hello'
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                error_text: For instance, in the code below the student wanted to take the drinks order of 3 people. But insted the program asked 3 times, but only wrote down one order.
                error_code: |-
                    {repeat} 3 {times}
                        drink = {ask} 'What would you like to drink?'
                    {print} drink
                solution_text: |-
                    In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.
                    Showing your students these differences can help them understand why we need indentation to make our programs work.
                solution_code: |-
                    {repeat} 3 {times}
                        drink = {ask} 'What would you like to drink?'
                        {print} drink
        -   title: Students want to nest if statements, or put if statements inside a loop
            example:
                error_text: |-
                    In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.
                    In the next level this is allowed.
                error_code: |-
                    birthday = {ask} 'Is it you birthday?'
                    {if} birthday = yes
                        {repeat} 3 {times}
                            {print} 'Hip Hip Hooray!'
                solution_text: "This is the correct code for this level:"
                solution_code: |-
                    birthday = {ask} 'Is it you birthday?'
                    {if} birthday = yes
                        {print} 'Hip Hip Hooray!'
                        {print} 'Hip Hip Hooray!'
                        {print} 'Hip Hip Hooray!'
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long-running programs. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: |-
                    {repeat} 100 {times}
                        {print} 'How many times can I repeat this?'
                solution_text: Make sure the programs aren't too long
                solution_code: |-
                    {repeat} 20 {times}
                        {print} 'This is enough'
        -   title: Students use the if command to check if the variable value is the same as the variable name
            example:
                error_text: |-
                    We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.
                    In line 2 the computer is asked to check wheter the variable password is the same as the variable password, so itself. Which means the answer is alway yes.
                    So with this code the answer will always be 'You can come in' no matter what the player fills in.
                error_code: |-
                    password {is} {ask} 'What is the password?'
                    {if} password {is} password
                        {print} 'You can come in'
                    {else}
                        {print} 'You are not allowed'
                solution_text: You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.
                solution_code: |-
                    password {is} {ask} 'What is the password?'
                    {if} password {is} 'password'
                        {print} 'You can come in'
                    {else}
                        {print} 'You are not allowed'
    -   level: "9"
        sections:
        -   title: Students make mistakes with indentation
            example:
                error_text: The hardest part about this level is getting the indentation right. Students love nesting if statements, sometimes even inside other nested if statements. Keeping track of indentation can get pretty tough.
                error_code: |-
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                            {if} book {is} yes
                    {print} 'Robin buys the book and goes home'
                    {else}
                        {print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
                solution_text: This is the correct code. Try to keep track of all the different constructions when putting if statements inside other if statements.
                solution_code: |-
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                        {if} book {is} yes
                            {print} 'Robin buys the book and goes home'
                        {else}
                            {print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
    -   level: "10"
        sections:
        -   title: Students so not use the for command correctly
            example:
                error_text: We often see that students try to print the list (in the example animals) instead of the items of the list.
                error_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animals
                solution_text: The word animals in the last line should be changed into animal.
                solution_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animal
        -   title: Students forget the indentation
            example:
                error_text: Students tend to forget to use indentation after a for command.
                error_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                    {print} 'I love ' animals
                solution_text: You should use indentation after a for command.
                solution_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animal
    -   level: "11"
        sections:
        -   title: Students forget to use indentation
            example:
                error_text: Make sure that the students use indentation.
                error_code: |-
                    {for} i {in} {range} 1 {to} 5
                    {print} i
                solution_text: "This is the correct code:"
                solution_code: |-
                    {for} i {in} {range} 1 {to} 5
                        {print} i
        -   title: Students don't understand the i
            example:
                error_text: |-
                    Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.
                    For example, this code:
                error_code: |-
                    {for} i {in} {range} 1 {to} 5
                    {print} i
                solution_text: Could just as well be replaced with this code. It works the same.
                solution_code: |-
                    {for} banana {in} {range} 1 {to} 5
                        {print} banana
    -   level: "12"
        sections:
        -   title: Students forget quotation marks
            example:
                error_text: Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the if command.
                error_code: |-
                    superheroes = Spiderman, Batman, Iron Man
                    superhero = superheroes {at} {random}
                    {if} superhero = Batman
                        {print} 'IM BATMAN!'
                solution_text: "This is the correct code:"
                solution_code: |-
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    superhero = superheroes {at} {random}
                    {if} superhero {is} 'Batman'
                        {print} 'IM BATMAN!'
        -   title: Students use quotation marks on numbers they want to use for calculations
            example:
                error_text: |-
                    You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.
                    In the example below, you can't do maths with the number 25, because it's in quotation marks.
                error_code: |-
                    score = '25'
                    answer {is} {ask} 'Do you want a point?'
                    {if} answer {is} 'yes'
                        score = score + 1
                        {print} score
                solution_text: "This is the correct code:"
                solution_code: |-
                    score = 25
                    answer {is} {ask} 'Do you want a point?'
                    {if} answer {is} 'yes'
                        score = score + 1
                        {print} score
        -   title: Students use commas instead of periods in decimal numbers
            example:
                error_text: Decimal numbers can be used from this level on, but you can't use commas.
                error_code: "{print} 2,5 + 2,5"
                solution_text: "This is the correct code:"
                solution_code: "{print} 2.5 + 2.5"
    -   level: "13"
        sections:
        -   title: Students confuse `and` with `or`
            example:
                error_text: Both commands might appear similar, but their functions are very different.
                error_code: |-
                    game {is} {ask} 'Do you want to play a game?'
                    time {is} {ask} 'Do you have time to play?'
                    {if} game {is} 'yes' {or} time {is} 'yes'
                        {print} 'Lets play!'
                solution_text: In this case, the person should answer yes on both questions, so you should use `and`.
                solution_code: |-
                    game {is} {ask} 'Do you want to play a game?'
                    time {is} {ask} 'Do you have time to play?'
                    {if} game {is} 'yes' {and} time {is} 'yes'
                        {print} 'Lets play!'
    -   level: "14"
        sections:
        -   title: Students confuse the < and > signs
            example:
                error_text: Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.
                error_code: |-
                    age = {ask} 'How old are you?'
                    {if} age < 12
                        {print} 'You are older than I am!'
                solution_text: "This is the correct code:"
                solution_code: |-
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_text: These signs are probably new for most students. Make sure to explain these signs to your students.
                error_code: |-
                    name = {ask} 'What is your name?'
                    {if} name =  'Hedy'
                        {print} 'You are not Hedy'
                solution_text: "This is the correct code:"
                solution_code: |-
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
        -   title: Students forget to use the == sign
            example:
                error_text: In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.
                error_code: |-
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy'
                        {print} 'You are cool!'
                solution_text: "This is the correct code:"
                solution_code: |-
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
    -   level: "15"
        sections:
        -   title: Students forget indentation in the while loop
            example:
                error_text: Indentation is often hard for students.
                error_code: |-
                    answer = 0
                    {while} answer != 25
                    answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                solution_text: "This is the correct code:"
                solution_code: |-
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
    -   level: "16"
        sections:
        -   title: Students forget the brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = 'starwberry', 'chocolate'
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: "This is the correct code:"
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students use the wrong brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = ('starwberry', 'chocolate')
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: "This is the correct code:"
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: "This is the correct code:"
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students still use the old at random command
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    {print} 'I love ' icecream at random ' icecream'
                solution_text: "This is the correct code:"
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: "This is the correct code:"
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
    -   level: "17"
        sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_text: The elif command needs a condition behind it. It cannot be used like else, without a condition.
                error_code: |-
                    color = {ask} 'What is your favorite color?'
                    {if} color == 'green':
                        {print} 'green is nice'
                    {elif}
                        {print} 'I like green'
                solution_text: "This is the correct code:"
                solution_code: |-
                    color = {ask} 'What is your favorite color?'
                    {if} color == 'green':
                        {print} 'green is nice'
                    {elif} color == yellow:
                        {print} 'yellow is alright'
                    {else}:
                        {print} 'I like green'
        -   title: Students forget the colon
            example:
                error_text: After each command that requires indentation, a colon should be used.
                error_code: |-
                    answer = {ask} 'How are you doing?'
                    {if} answer {is} 'great'
                        {print} 'Me too!'
                    {elif} answer {is} 'bad'
                        {print} 'Let me cheer you up!'
                    {else}
                        {print} 'Im great!'
                solution_text: "This is the correct code:"
                solution_code: |-
                    answer = {ask} 'How are you doing?'
                    {if} answer {is} 'great':
                        {print} 'Me too!'
                    {elif} answer {is} 'bad':
                        {print} 'Let me cheer you up!'
                    {else}:
                        {print} 'Im great!'
    -   level: "18"
        sections:
        -   title: Students forget to use the brackets
            example:
                error_text: Students will forget to put brackets around their text.
                error_code: "{print} 'my name is Hedy!'"
                solution_text: "This is the correct code:"
                solution_code: "{print}('my name is Hedy!')"
        -   title: Students will still use the ask command
            example:
                error_text: The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.
                error_code: |-
                    {print}('My name is Hedy!')
                    name = ask('What is your name?')
                    {print}('So your name is ', name)
                solution_text: "This is the correct code:"
                solution_code: |-
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
        -   title: Students might use the brackets as quotation marks
            example:
                error_text: They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.
                error_code: |-
                    temperature = 25
                    {print}('It is ') temperature ('degrees outside')
                solution_text: "This is the correct code:"
                solution_code: |-
                    temperature = 25
                    {print}('It is ', temperature, 'degrees outside')
