title: Hedy Dokumentation
home-sections:
-   title: Textprogrammierung leicht gemacht!
    text: |-
        Viele Schulen und Lehrpersonen auf der Welt möchten ihre Schülerinnen und Schülern im Programmieren unterrichten . Zu Beginn wird dies oft mit spielerischen Werkzeugen vom Beebot-Roboter bis
        Scratch Junior oder Scratch gemacht. Nachdem sie diese Werkzeuge verwendet haben, wollen Kinder oft zu mächtigeren, textbasierten Programmiersprachen, wie Python, wechseln.

        Python ist jedoch schwierig, da es nur auf Englisch verfügbar ist und von den Lernenden das gleichzeitige Erlernen komplexer Programmierkonzepte und Syntax erfordert.
        Hedy ist der einfache Weg mit textbasierten Sprachen zu beginnen! Hedy ist kostenlos nutzbar, Open Source und in dreierlei Hinsicht anders als jede andere textbasierte Programmiersprache.

        1. Hedy ist mehrsprachig, du kannst Hedy in deiner eigenen Sprache verwenden
        2. Hedy ist graduell, daher kannst du ein Konzept und die zugehörige Syntax einzeln lernen
        3. Hedy wurde für den Unterricht entwickelt und ermöglicht es Lehrpersonen, das Erlebnis ihrer Schüler individuell zu gestalten
-   title: Mehrsprachige Programmierung
    text: Während fast alle textbasierten Programmiersprachen englische Schlüsselwörter wie `for` oder `repeat` haben, kann Hedy in jeder Sprache verwendet werden! Wir unterstützen derzeit 47 verschiedene Sprachen, darunter Niederländisch, Spanisch, Arabisch, Türkisch, Chinesisch und Hindi. Wenn deine Sprache nicht verfügbar ist, kannst du jederzeit eine neue Übersetzung starten.
-   title: Schritt für Schritt lernen
    text: Das Erlernen einer Programmiersprache kann überwältigend sein, da Lernende gleichzeitig Konzepte (zum Beispiel if-else oder Schleifen) und Syntax (wie Anführungszeichen oder runde Klammern) lernen müssen. In Hedy werden Konzepte zunächst mit wenig Syntax eingeführt und dann verfeinert. Eine wissenschaftlich erprobte Art zu lernen!
-   title: Entwickelt für den Unterricht
    text: |-
        Hedy ist für Kinder ab 10 Jahren geeignet und für den Einsatz im Klassenzimmer konzipiert.
        Lehrer können unsere kostenlosen, integrierten Unterrichtspläne nutzen, aber auch eigene Unterrichtsstunden verfassen und diese in die Hedy-Benutzeroberfläche laden.
-   title: Programmieren im Kontext
    text: Hedy zeigt das Programmieren in größtmöglichem Umfang und kann auf vielfältige, spannende Weise eingesetzt werden. Hedy ermöglicht die Erstellung digitaler und interaktiver Geschichten, farbenfroher Zeichnungen, die auf dem Bildschirm angezeigt, aber auch mit einem Stiftplotter gezeichnet oder auf ein T-Shirt gestickt werden können, und mit denen sich Spiele oder Apps mit Tasten und Tastaturaktionen erstellen lassen.
-   title: Ist Hedy kostenlos?
    text: |-
        Ja! Hedy ist "Open Source", was bedeutet, dass jede und jeder uns helfen kann, Hedy zu verbessern.
        Du kannst unseren Code auf <a href="https://github.com/hedyorg/hedy" target="_blank">Github</a> finden.
        Falls du Hedy magst und etwas beitragen möchtest, akzeptieren wir <a href="https://github.com/sponsors/hedyorg" target="_blank">Spenden</a> (und sind sehr dankbar für)!
-   title: Muss ich etwas installieren?
    text: Nein. Hedy funktioniert im Browser, dem Programm, mit dem du diese Seite betrachtest. Wahrscheinlich Chrome oder Edge oder Firefox. Hedy funktioniert auch auf Smartphones und Tablets.
-   title: Benötige ich Programmiererfahrung, um mit Hedy zu unterrichten?
    text: |-
        Nein, das ist nicht nötig. Alle Konzepte werden in den Folien und in der Benutzeroberfläche für Lernende erklärt.
        Wenn du ein kostenloses Lehrpersonenkonto erstellst, erhaltest du auch Zugriff auf das Lehrpersonenhandbuch mit Informationen zum Unterrichten
        und häufig gemachte Fehler.
join-sections:
-   title: Hedy unterstützen
    text: '# Es gibt drei Möglichkeiten, wie du Hedy unterstützen kannst!'
-   title: Die Sprache verbessern
    text: |-
        Die schrittweise und mehrsprachige Natur von Hedy bringt viele interessante technische Herausforderungen mit sich.
        Du findest diese auf <a href="https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage" target="_blank">Github</a>.
-   title: Hedy übersetzen
    text: |-
        Kein Programmierer? Kein Problem! Eine weitere Möglichkeit, Hedy zu unterstützen, besteht darin,  <a href="https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial" target="_blank">Schlüsselwörter, Fehlermeldungen, Abenteuer und andere Inhalte zu übersetzen</a>.
        Dies ist der aktuelle Status. Hilf uns, eine Sprache zu vervollständigen oder eine neue hinzuzufügen!
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="Übersetzungsstatus" /></a>
-   title: Lehrpersonen helfen loszulegen
    text: |-
        Hedy wurde gestaltet, um Lehrpersonen dabei zu unterstützen Programmierlektionen im Unterricht durchzuführen. Wir haben spezifische Lehrpersonen-Features, wie die Option Klassen zu erstellen, anzupassen und zu sehen wie deine Schülerinnen und Schüler sich machen.
        Falls du Hedy magst, kannst du Schulen ansprechen, um Lehrpersonen zu helfen anzufangen! Wir können dir helfen Schulen oder Lehrpersonen über unseren <a href="https://discord.gg/8yY7dEme9r" target="_blank">Discord</a> zu finden.
learn-more-sections:
-   title: Komm in die Hedy-Gemeinschaft
    text: |-
        Wir hören gern von dir! Die beste Kontaktmöglichkeit ist unser <a href="https://discord.gg/8yY7dEme9r" target="_blank">Discord-Server</a>.

        Du kannst uns auch eine [E-Mail schicken](mailto:hello@hedy.org "Über Hedy").

        Um über die neuesten Nachrichten auf dem Laufenden zu bleiben, [abonniere unseren Newsletter](/subscribe).
-   title: Ein tiefes Eintauchen!
    text: |-
        Möchtest du mehr über Hedys Philosophie und Design erfahren? Schau dir den Vortrag von Felienne bei der StrangeLoop Conference 2022 an:

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/fmF7HpU_-9k?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
-   title: Hedy in den Nachrichten
    text: |-
        Manche Websites und Zeitungen haben seit unserem Release im Frühjahr 2020 über Hedy geschrieben. Hier pflegen wir eine Liste:
        * [Java Magazine 04.2023](images/Hedy_Javamagazine2023.pdf)
        * [Tech Optimism - A Solution to the IT Shortage (Dutch), August 2022](https://pom.show/2022/08/12/een-oplossing-voor-het-it-tekort/)
        * [Codeweek Podcast, July 2022](https://codeweek.eu/podcast/26)
        * [Heise.de (Deutsch), Januari 2022](https://www.heise.de/news/Hedy-die-mitwachsende-Programmiersprache-6336264.html)
        * [Strumenta, November 2021](https://tomassetti.me/teaching-programming-with-hedy/)
        * [Vives (Dutch), CodeWeek Special October 2021](images/Vives-174-Codeweek.pdf)
        * [CodeWeek.eu - Haunted House Challenge, September 2021](https://codeweek.eu/2021/challenges/haunted-house)
        * [Opensource.com, April 2021](https://opensource.com/article/21/4/hedy-teach-code)
        * [IO Magazine, April 2021](https://ict-research.nl/wordpress/wp-content/uploads/2021/04/IO-magazine-NR1-2021_web.pdf)
        * [Ingeniería De Software (Spanish), February 2021](https://ingenieriadesoftware.es/hedy-mejor-lenguaje-ensenar-programacion-ninos/)
        * [Hello World Magazine, February 2021](images/Hello_World_15_Hedy.pdf)
        * [Discoro, January 2021](https://discoro.wordpress.com/2021/01/09/hedy-gradually-learning-a-programming-language/)
        * [Felienne wins the Dutch award for ICT research for Hedy, January 2021](https://www.nwo.nl/en/news/felienne-hermans-receives-dutch-prize-ict-research-2021)
        * [SlashDot, August 2020](https://news.slashdot.org/story/20/08/17/024248/scientist-proposes-a-new-programming-language-for-teaching-coding-and-python)
        * [GenBeta (Spanish), August 2020](https://www.genbeta.com/desarrollo/nuevo-lenguaje-para-ensenar-programacion-a-ninos-como-se-ensena-a-leer-escribir-forma-gradual-niveles)
        * [Developpez (French), August 2020](https://programmation.developpez.com/actu/308095/Une-scientifique-propose-un-nouveau-langage-de-programmation-pour-enseigner-aux-enfants-le-codage-informatique-au-travers-d-une-approche-graduelle-implementee-en-Python-sur-13-paliers/)
        * [Vives (Dutch), October 2020](images/artikel_vives.pdf) "Met Hedy stap voor stap leren programmeren"
        * [Leiden University, April 2020](https://www.universiteitleiden.nl/en/news/2020/03/looking-to-distract-the-kids-while-you-work-from-home-get-them-programming)
        * [Mare (Dutch), April 2020](https://www.mareonline.nl/cultuur/computercode-voor-de-kids/)
        * [AG Connect (Dutch), April 2020](https://www.agconnect.nl/artikel/stapsgewijs-python-leren-programmeren-met-nieuwe-taal-hedy)
start-sections:
-   title: Getting started with Hedy
    text: |-
        Willkommen bei Hedy, wir freuen uns dir beim Loslegen zu helfen.

        Unsere [Lehranleitung](http://localhost:8080/for-teachers/manual) enthält einen Überblick über alle Features im Detail, aber diese Seite enthält einen kurzen Überblick, damit du weißt was was ist, bevor du einsteigst.

        Einige Punkte die wichtig sind:
        * Hedy ist ein Werkzeug, das entwickelt wurde, um das Unterrichten einer Klasse von Kindern beim Programmieren zu unterstützen! Du kannst deinen eigenen Lektionen und Lehrpläne erzeugen und mitverfolgen, wie die Kinder voran kommen
        * Du musst nicht viel über Programmieren wissen, wenn du beginnst. Hedy geht auch für dich Schritt-für-Schritt vor!
        * Du kannst Hedy in deiner Muttersprache benutzen, da es in viele andere Sprachen übersetzt wurde!
        * Jedes Kind kann programmieren!! Hedy ist besonders praktisch für Kinder, die visuell beeinträchtigt sind, da Hedy das Material laut vorlesen kann ohne das man eine Maus benutzen muss
        * Wir sind hier um zu helfen, du kannst uns z.B. auf [Discord](https://discord.gg/8yY7dEme9r) finden oder du kannst uns eine [Mail schreiben](hello@hedy.org).
-   title: Was Lehrpersonen über Hedy sagen
    text: "A while ago we ran a few short Hedy teachers surveys. \nThe questions span between suggestions of improvement and Hedy’s best features. \nBelow is a testimony of their thoughts:\n\nSimple interface and good examples. *Teacher: 3rd - 6th grades (elementary)*\n\nMultilingual programming and just the gradual programming concept itself. - *US: middle school, 6th-8th grade*\n\nThe gradual nature of introducing programming. *Australia: High school*\n\nThe construction is so good. *Netherlands: Lower secondary school HAVO-VWO*\n\nI can keep the pace of the class. *Netherlands: group 7 en 8* \n\nContinues automatically. *Netherlands: 2 HAVO-VWO*\n\nBoth that the explanation can be in Dutch (and the code in English), and that it builds up with more \nand more possibilities. *Netherlands: Plus class group 7*\n\nThe 'realness' of programming, it resembles how it is in reality. *Netherlands: Plus class group 4 to 8*\n\nStep-by-step activities. Fun activities. *Netherlands: 1e All levels, 2e VWO/HAVO 2e VWO +, 3e HAVO 3e VWO*\n\nBut Hedy and its gradual levels... what an idea, \nI wanted to personally thank you for creating this. I cannot thank you enough. Also, I have never seen the level of engagement and enthusiasm of my \nstudents, as I have seen with Hedy. We have covered till level 5, and plan to spend one more week on it in classes and labs, \nbefore starting Python.  *Pakistan*\n\nI really like Hedy very much and it is also nicely set up, which makes it good to use in primary school. \nHedy's gradual approach works very well. \nThe short explanation at the beginning of each level and the short example programs help to give the children a quick insight into what is new in the chosen level. \nThe different assignments that the children can choose also work very well. \nYou see the children choose assignments that appeal to them and they then get to work with them, \nthrough the levels. Hedy is great fun for children who are good at programming and want to get a \ntaste of a real programming language. It is good preparation for secondary school as soon as more ICT \neducation is given there. *Netherlands: Oegstgeest Montessori school*\n\n<img width=\"500px\" src=\"static/images/teacherfeedback/Fkids1.JPG\"></img>"
teacher-guide:
-   title: Einführung zu Hedy
    key: intro
    subsections:
    -   title: Was ist Hedy?
        text: |-
            Hedy ist eine textuelle Programmiersprache, die speziell für (Pre-)Teens (10 bis 15 Jahre alt) entwickelt wurde.
            Im Gegensatz zu Programmiersprachen für Kinder, wie Scratch, verwendet Hedy keine Codeblöcke, sondern textuellen Code.
            Mit Hedy lernt man also, Code zu tippen, wie es echte Programmierer tun, aber in kleinen Schritten mit spielerischen Übungen.
            Auf diese Weise kann Hedy als Sprungbrett zu echten Programmiersprachen wie Python dienen, und das auf eine zugängliche und vor allem spaßige Weise!
            Wenn Sie mehr erfahren möchten, können Sie dieses <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">Video</a> über die Entwicklung von Hedy als Programmiersprache ansehen.
    -   title: Zielgruppe
        text: |-
            Hedy wurde für Schüler der Unter- und Mittelstufe entwickelt (10 – 15 Jahre).
            Es ist wichtig, dass die Schüler gut lesen können. Wir empfehlen, erst mit Hedy anzufangen, wenn die Schüler mindestens das Leseniveau der 3. Klasse erreicht haben.
            Schüler (und Lehrer!) brauchen keine Programmiererfahrung, bevor sie mit Hedy beginnen.
    -   title: Wie funktioniert Hedy?
        text: |-
            Hedy ist in Level unterteilt, in denen neue Befehle gelehrt werden. Jede Stufe enthält eine Vielzahl von Abenteuern, in denen die neu erlernten Befehle geübt werden können.
            Als Lehrer können Sie entscheiden, welche Abenteuer für Ihre Schüler zur Verfügung stehen. Werden sie in diesem Level ein Restaurant, eine Rechenmaschine oder ein Spukhaus bauen? Innerhalb jedes Levels sind die Abenteuer vom einfachsten zum schwierigsten geordnet.
            So werden Ihre Schüler immer wieder neu herausgefordert. Die Abenteuer können von den Schülern einzeln gelöst werden, oder Sie können sie in einem klassischen Unterricht einsetzen.

            Zu den Abenteuern gehört auch ein Code-Beispiel, damit auch weniger digital informierte Lehrer Hedy nutzen können!
            Natürlich ist Hedy auch für die kreativen Lehrer gedacht, die gerne ihre eigenen Unterrichtspläne und Abenteuer erstellen!

            Nachdem Sie alle Abenteuer eines bestimmten Levels programmiert haben, können Ihre Schüler ihr Wissen in einem Quiz testen.
            Sie können die Arbeit und den Fortschritt Ihrer Schüler auf der Klassenseite verfolgen.
    -   title: Geräte
        text: |-
            Hedy ist webbasiert, d.h. es funktioniert auf jedem Gerät mit einem Browser (Chrome, Firefox, Edge usw.), sodass Laptops, Chromebooks, Tablets und sogar Smartphones geeignet sind, um Hedy zu verwenden.
            Du musst nichts herunterladen, bevor du mit Hedy arbeitest, geh’ einfach auf die Website und schon kannst du loslegen!
    -   title: Die Hedy Community
        text: |-
            Alle Hedy-Lehrpersonen, Programmierer und Programmiererinnen und andere Fans sind auf unserem <a href="https://discord.gg/8yY7dEme9r" target="_blank">Discord-Server</a> willkommen. Dies ist der ideale Ort, um sich über Hedy auszutauschen: wir haben Channel, wo du deine coolen Projekte und Lektionen zeigen kannst, Channel um Fehler zu melden, und Channel um sich mit anderen Lehrpersonen und dem Hedy-Team zu unterhalten.
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI" target="_blank">Hier</a> findest du ein Video darüber, wie man der Discord Community beitritt.
    -   title: Hedy and the GDPR
        text: |-
            Organizations in the EU have to comply with the GDPR (General Data Protection Regulation) when processing personal data.
            Because this is a complex issue for many schools, you can use all Hedy programming functionalities without sharing personal data.
            The easiest way to do this is to use Hedy without creating accounts for the teacher and students. Without accounts, all functionality is available, with the exception of personalizing levels, saving students' programs and viewing their progress. That is limiting, but there are schools that use Hedy in that way.

            A second way is for a teacher to create an account with an email address without personal data, for example "docent25@email.com". Apart from an email address, which is only required to reset your password, you do not need to share any information when you create a teacher account.
            With a teacher account, you can create anonymous accounts for students, e.g. rainbow-student1, rainbow-student2, etc (See 'Teaching preparations' for a detailed manual). This way you can use all functionality of Hedy, including saving progress, without sharing personal data of yourself or your students.

            If the above is not sufficient for your context, we can sign a processing agreement for the processing of your personal data.
-   title: Tutorial
    key: tutorial
    subsections:
    -   title: Tutorial
        text: Möchtest du das Tutorial (nochmal) machen? Klicke <a href="https://hedy.org/tutorial" target="_blank">hier</a>.
-   title: Vorbereitungen
    key: vorbereitungen
    subsections:
    -   title: For teachers
        text: You can prepare your classes at the <a href="https://hedy.org/for-teachers" target="_blank">For Teachers page</a>. On this page you'll find everything you'll need to teach with Hedy, like your classes, your adventures and slides. All the functionalities of the for teachers page are explained below.
    -   title: Klasse Anlegen
        text: |-
            Als Lehrperson kannst du eine Klasse für deine Schülerinnen und Schüler erstellen. In dieser Klasse kannst du die SuS-Accounts und ihre Programme sehen und ihren Fortschritt beobachten.
            Dieses <a href="https://www.youtube.com/watch?v=Y3RTIWftJQg" target="_blank">Video</a> zeigt dir wie du schnell eine Klasse in Hedy anlegen kannst.
    -   title: Duplicate a class
        text: |-
            Are you teaching multiple classes? Then you don't have to customize each class individually. Simply make a class, costumize the class (see "Customize your Class" to learn how) and then duplicate this class as many times as you want.
            You can duplicate the class on the 'For Teachers' page. If you duplicate a class, all the class settings are duplicated as well. This means that all the levels and adventures you've mande unavailable for the first class will now be unavailable for the new class(es) as well.
            The student accounts and second teacher accounts in your class will not be duplicated into the new class.
    -   title: Add a second teacher
        text: |-
            Are you not the only teacher that teaches your class? Then you can now add another teacher to the class. Go to the 'For teachers' page and click on the class. Then choose 'Invite a teacher' and fill in the username of your colleague.
            Your colleague will get an invitation on their account to join your class. They can see that invitation message by clicking on their username in the upper right corner of the screen and selecting 'My account'.
            Once the other teacher accepts the invitation they can customize the class as well.
            To remove a second teacher from your class, go to the class page and remove the second teacher. The teacher who's created the class cannot be removed.
    -   title: Customize your Class
        text: |-
            You can customize your class and choose which adventures are available for your students. This way your students won't be overwhelmed by the amount of adventures and levels, and they can specifically focus on the adventures you'd like them to practice with.
            Click on your class on the for teachers page and choose 'customize class'. On this page you can select levels, set opening dates, unlock level thresholds and more.

            **Select and order adventures**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df38cbb2-468e-4317-ac67-92eaf4212adc" width="1000">
            In this section you can select and order adventures. The pink tabs are adventures with new commands. The gray tabs are regular adventures. To rearrange the order of the adventures, you can drag the tabs. However, we do advise you to use the regular order of adventures as the Hedy team made sure the adventures go from easiest to hardest.
            If you want to remove an adventure for your students, simply click the cross on the adventure's tab.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/0ddd10b5-ef60-4480-a0c4-fc9a0f323baa" width="300">
            If you want to add adventures, for instance your own adventure or an adventure you accidentally removed, use this menu to add the adventure to your students' adventures. Simply click the adventure you want to add and it (re)appears in the line of adventures. To undo all your changes to the adventures, click 'Reset'.

            **Opening dates**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/4e59acfa-4772-429f-8328-babb43c942d5" width="300">
            With this feature you can set opening dates for the levels. This way you can make a lesson plan before your course begins and not worry about opening new levels each week. In the image above the first level is opened directly, the second will open the 23th of september, and the 3rd level the week after. The other levels are closed.
            Don't want to set opening dates? No problem, just leave this section blank.

            **Unlock level thresholds**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/99a34dab-f112-459e-bfd1-07618be4715a" width = "1000">
            This featue allows you to set a threshold for your students' quiz grade, before they can continue to the next level. For example, if you enter "80" your students have to score at least 80% on the quiz before they are allowed to go to the next level. If they haven't met the threshold, they are not allowed to continue and have to retake the quiz.
            Don't want to use the threshold? No worries, just keep this section blank.


            **Other settings**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/a8491d67-6d6e-42a7-b672-fd3d083a76f8"/>
            There are some other setting that could be usefu to you aswell. Our first extra setting is 'Mandatory developer's mode'. In developers mode the students only see their input and output screens and the run button. The adventures are hidden and there are no cheatsheets available. This might come in handy in a test situation.
            If this option is not selected the developer's mode is available for students too as a voluntary option.

            If you want all your students to be visible in de class highscore, you can select the second option.
            With all the other options you can choose to hide some functions or content for your students, this might help them focus more.

            **Save**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df179df3-3073-4d15-bba6-62e58fb675be" width="300">
            Don't forget to save your changes when you're done customizing your class.
    -   title: Schüler-Accounts
        text: |-
            Es gibt 2 Wege, wie deine Schülerinnen und Schüler einer Klasse beitreten: Du kannst sie ihre eigenen Accounts erstellen lassen oder für sie Accounts anlegen.

            **Du erstellst Accounts für deine Schülerinnen und Schüler**
            Der einfachste Weg Schülerinnen und Schüler zu deiner Klasse hinzuzufügen ist Accounts für sie anzulegen. Dies geht, indem man auf "Erstelle SuS-Accounts" klickt und die Nutzernamen und Passwörter für sie ausfüllt.
            Die Schülerinnen und Schüler können sich mit den Nutzernamen und Passwörtern deiner Wahl einloggen. Danach können sie beides ändern, wenn sie möchten, und bleiben trotzdem in deiner Klasse.
            Dieses <a href="https://www.youtube.com/watch?v=eEQvik-Ce5M" target="_blank">video</a> zeigt wie du am schnellsten und einfachsten SuS zu deiner Klasse hinzufügst.

            **Schülerinnen und Schüler machen ihre eigenen Accounts**
            Deine Schülerinnen und Schüler gehen auf die Hedy Website und erstellen ihre eigenen Accounts, so wie du es getan hast. Um sie deiner Klasse hinzuzufügen, müssen sie nur auf den Einladungs-Link klicken.
            Du findest den Einladungs-Link auf der Klassenseite, um ihn deinen Schülerinnen und Schülern zu schicken. Beachte, dass deine Schülerinnen und Schüler eingeloggt sein müssen, wenn sie den Link anklicken, damit es reibungslos läuft.
            Du kannst eine Schülerin oder einen Schüler manuell einladen, indem du den "Einladen mit Nutzername"-Knopf drückst.
    -   title: Bevorzugte Sprache einstellen
        text: |-
            Wenn Schülerinnen und Schüler Konten erstellen, sollen sie eine 'bevorzugte Sprache' auswählen. Hedy wird immer in dieser Sprache geladen werden.
            Diese Sprache kann später geändert werden in dem man zu 'Mein Konto' und dann zu 'Meine persönlichen Einstellungen' navigiert.

            **Für Nicht-Englischsprachige**
            Du kannst nicht nur die Sprache der Abenteuer auf deine eigene Sprache festlegen. Auch die Schlüsselwörter (wie z.B. 'print' oder 'ask') können in der eigenen Sprache angezeigt werden.
            So kannst du deinen Schülern programmieren mit englischen Schlüsselwörter beibringen, du kannst sie aber auch in ihrer eigenen Sprache programmieren lassen. Zum Beispiel können niederländische Schüler den Befehl 'vraag' anstatt 'ask' benutzen.
            If a student wants to switch languages, they can click the keyword switcher. It will switch the keywords from English to the preferred language and back.
            Fun fact! Students are allowed program in both English and their own language at the same time! So, if they have trouble remembering some keywords in English, but easily remember other ones they can use both at the same time.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/0b3122e6-ff22-43d7-b8b6-62f47f485293" width="100">

            **Video**
            Dieses <a href="https://www.youtube.com/watch?v=QrVZETj4oLM" target="_blank">video</a> zeigt dir, wie man eine präferierte Sprache setzt und die Schlüsselwörter ebenfalls zur präferierten Sprache ändert.
    -   title: Programme speichern
        text: |-
            Wenn du eingeloggt bist, siehst du "Meine Programme" neben deinem Profilbild.
            Diese Auswahl existiert ebenfalls für deine Schülerinnen und Schüler. Unter "Meine Programme" kannst du alle Programme finden, an denen du gearbeitet hast.
            Im Normalfall werden Programme, die du ausführst, sowie alle 10 Sekunden, unter "Meine Programme" unter einem vorgegebenen Namen
            mit dem Level gespeichert (zum Beispiel: Geschichte 5). Wenn du ein Programm unter einem neuen Namen speichern möchtest, tippe einfach den neuen Namen in die Namensleiste.

            Derzeit kann pro Level und Tab nur ein Programm gespeichert werden.

            Du (und deine Schülerinnen und Schüler) können auch Programme teilen, indem du den Teilen-Knopf neben dem Programmnamen benutzt. Diese Programme werden auf unserer <a href="https://hedy.org/explore" target="_blank">Entdecke-Seite</a> für jedermann zum Ansehen und Benutzen gepostet.
            Wenn du das Programm nicht mehr teilen möchtest, gehe zu "Meine Programme" und klicke "Zurückziehen".

            Das Papierflugzeugsymbol kann verwendet werden, um Programme bei der Lehrperson einer Klasse einzureichen. Programme, die eingereicht wurden, können nicht mehr editiert werden.
-   title: Unterricht mit Hedy
    key: unterricht
    subsections:
    -   title: Teaching with Hedy
        text: |-
            Hedy contains a lot of different levels that each teach a different new skill. We recommend to teach one level per lesson.
            This gives your students the time to fully grasp a new command or concept and practice with it, before moving on to the next level.
            We use this structure in our lessons:
    -   title: Slides
        text: |-
            When giving instructions you might want to use our slides. Our slides are available on the 'For teachers' page. There is a set of slides for each level. In the slides all the new commands for that level are explained. We have aimed to explain why these changes are nessecary or how the new commands come in handy.
            We also give some examples of how the new commands can be used. You could of course also use your own slides, or just open Hedy and show your students around the website. Whichever you prefer to give the best Hedy lessons!
    -   title: Introduction
        text: |-
            Du kannst deine Lektion damit beginnen, das Vorwissen deiner Schülerinnen und Schüler zu aktivieren: Was wissen sie bereits über das Thema, was haben sie in der vorherigen Stunde gelernt und welche Fehler haben sie gemacht, aus denen sie nun gelernt haben?
            Auf diese Weise sind alle zuvor gelernten Befehle und häufig gemachten Fehler noch frisch im Gedächtnis deiner Schüler, wenn du in die neue Lektion einführst.
    -   title: Einführung neuer Konzepte und Befehle
        text: |-
            Die neuen Konzepte und Befehle können für einige Schülerinnen und Schüler sehr schwer vollständig zu verstehen sein.
            Deshalb ist es wichtig, dass du deinen Schülerinnen und Schülern den richtigen Umgang mit den neuen Befehlen vorleben.
            Vor allem in den unteren Leveln, in denen einige Schüler überhaupt keine Erfahrung mit der Programmierung haben, kann es für sie schwierig sein, die neuen abstrakten Konzepte zu verstehen.
            Durch das Aufzeigen vieler Beispiele wird ein abstraktes Konzept (z.B. "Was ist eine Variable?") besser erkennbar und leichter verständlich ("Sieh mal, die Variable haustier wurde zu hund").
    -   title: Lass uns loslegen
        text: |-
            Jedes Level enthält verschiedene Abenteuer, die du in den rosa Tabs findest. Das erste rosa Tab erklärt die neuen Befehle in diesem Level.
            Die folgenden Tabs sind Abenteuer, die die Schülerinnen und Schüler ausprobieren und selbst gestalten können.
            Die Abenteuer sind vom einfachsten zum schwierigsten geordnet, daher empfehlen wir, auf der linken Seite zu beginnen und sich nach rechts vorzuarbeiten.
            Das letzte Tab "Was kommt als Nächstes" gibt einen kleinen Vorgeschmack auf das, was du im nächsten Level lernen wirst. Natürlich kannst du die Abenteuer auswählen, die deine Schülerinnen und Schüler in jeder Stufe machen sollen.
            Sie müssen nicht immer jedes Abenteuer machen. Jedes Abenteuer enthält Beispiel-Code, den die Schülerinnen und Schüler mit der grünen Schaltfläche ausprobieren können.
            Der Beispiel-Code wird in das Arbeitsfeld kopiert, wo die Schülerinnen und Schüler den Code ausprobieren und anpassen können, um ihn zu ihrem eigenen zu machen.
            Rege deine Schülerinnen und Schüler dazu an, den Beispiel-Codes in ihre eigenen Projekte zu verwandeln, indem sie ihre eigenen Ideen hinzufügen und ihre eigene Variante des Abenteuers erstellen.
    -   title: Quizze und Puzzle
        text: |-
            Um zu überprüfen, ob deine Schülerinnen und Schüler alle neuen Infos in diesem Level aufgenommen haben, kannst du sie ein Quiz machen lassen.
            Das Quiz enthält 10 Multiple-choice-Fragen über die neuen Konzepte und Befehle des Levels.
            Nicht jedes Level hat bereits ein Quiz, weil wir die Quizze erst noch erstellen.
            Manche Level enthalten auch Puzzles. Puzzles zeigen den Schülerinnen und Schüler ein paar Zeilen Code, die die Schülerinnen und Schüler in die richtige Reihenfolge bringen müssen.

            Dieses <a href="https://www.youtube.com/watch?v=lNh5EdZVUwc" target="_blank">Video</a> zeigt die Quizze und Puzzles.
    -   title: Auswertung
        text: |-
            Runde deine Lektion mit einer kurzen Evaluation ab. Was haben die Schülerinnen und Schüler gelernt? Auf welche Schwierigkeiten sind sie gestoßen?
            Wie haben sie aus ihren Fehlern gelernt? Und natürlich: Was haben sie kreiert?
            Schülerinnen und Schüler sind oft sehr stolz auf ihre Kreationen, daher ist es nett etwas Zeit einzuplanen, um ihnen die Möglichkeit zu geben ihren Mitschülerinnen und Mitschülern ihre Arbeitsergebnisse zu zeigen.
-   title: Teacher Statistics
    key: teacher_statistics
    subsections:
    -   title: Live Dashboard
        text: |-
            If you would like to keep track of your students' progress, you can make use of the live dashboard. You can find the live dashboard by clicking 'Live statistics' on your class page.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/97a54679-b1d6-46b4-a633-ab0161114642" width="1000">
            All the features of this dashboard are explained below.
    -   title: Level Selection
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/94dc891d-cdd6-4311-91f2-51900eaf4c2a" width="500">
            Firstly, you can select the levels you'd like to see on the dahsboard. Select the levels your students are currently working on by clicking on the number of that level. Deselect levels that you do not want to see by clicking them again.
            In this example level 1 and 2 are selected. You can click on refresh to refresh the dashboard and get the most current stats.
    -   title: Class Overview
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/b2c30ef9-6eba-4c02-92a3-9669504a54a8" width="1000">
            In the class overview you can see which adventure your students are working on right now. You can see that one student is working on the 'Rock, Paper, Scissors' adventure in level 1, one is working on the 'Fortune Teller' in level 1 and one student is working on the 'Rock, Paper, Scissors' adventure in level 2.
            If you'd like to know which of your students is working on the adventure, simply click the number and their accountnames will appear.
            You can also see how many of your students have finished the quiz. In this case, one student finished the quiz in level 1. Again, you can click the 1 to see which of your students it is.

            You can also see one of the students is 'missing' from this overview. That's because he's working on an adventure in level 4, which is not selected.
    -   title: Student List
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/693e976c-199f-46f4-abae-3f18f9854cd0" width="1000">
            Here you can find a list of your students and you can see their individual progress. The blue ring shows you what your students are currently working on.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/c7e2150f-60de-4ef7-8862-5901a7fb6609" width="150">
            It is important to notice that the blue dots means that a students 'attempted' the adventure. This means that they ran a code in this adventure and went on to the next adventure, so this does not automatically mean that they did a good job!
            If you want to see how an individual student is getting along, you can click their name in this overview. This is what you see if you click on marleen_h3a for example:
            <img src="https://github.com/hedyorg/hedy/assets/80678586/f8c2480d-c724-46f9-a702-33532828de70" width="800">
            You see that Marleen is having some trouble programming. She tried to run a program that contains blanks multiple times, so she probably doesn't know that she has to change something to the example codes before running them.
            In this way this overview can give you a better understanding of what a student is struggling with.
    -   title: Common Errors
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/e7af5ce3-ca74-48e7-9654-f17435596fbc" width="500">
            If you're not only interested in individual struggles of your students, but you'd like to know what the whole class seems to be doing wrong, you can use this oversight of common errors.
            The most common error messages that your students are recieving will appear in this oversight for you, so you could give some more instructions to the whole class if needed.
            By clicking the error, you can see which students are having trouble with this error. By clicking resolve, you'll remove this error from the list.
    -   title: Overview of programs per adventure
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/f07bf714-7250-4711-82a1-616f9f7b55e8" width="1000">
            Another useful overview of all the programs your students made in a level can be found on your class page. Go to the class page and click 'Overview of programs per adventure'. Here you'll find this overview.
            You could use this overview to check your students' work. If they have made a program in an adventure, an eye appears in your overview. Click the eye to view their work. Did you like it? Then you can check the box and a green tick will appear.
            This way you create a nice overview for yourself of your students' results.
-   title: Extra Hedy-Features
    key: Features
    subsections:
    -   title: Erstelle dein eigenes Abenteuer
        text: Für Lehrpersonen ist es auch möglich eigene Abenteuer zu erstellen. Dieses <a href="https://www.youtube.com/watch?v=A0zbXpxX4q4" target="_blank">Video</a> zeigt dir, wie du dein eigenes Abenteuer erstellst und es zu deinen Klassen hinzufügst.
    -   title: Seite entdecken
        text: |-
            Auf der <a href="https://hedy.org/explore" target="_blank">Entdecke</a> -Seite kannst du die Arbeit anderer Hedy-Nutzer einsehen. Du kannst ihre Programme ausprobieren und sie als Inspiration für deine eigenen coolen Kreationen nutzen.
            Du kannst auch ein selbst erstelltes Programm auf der Entdecke-Seite verfügbar machen, indem du "Code speichern und teilen" im Programmierteil klicken oder unter "Meine Programme" auf "Teilen" klicken.
            Möchtest du dein Programm nicht mehr teilen? Gehe einfach zu "Meine Programme" und klicke "Zurückziehen".
            Wenn du mehr Informationen über die Entdecke-Seite möchtest, schau dir dieses <a href="https://www.youtube.com/watch?v=26boFjqvS5Q" target="_blank">Video</a> an.
    -   title: Meine Errungenschaften
        text: |-
            Wenn du auf deinen Nutzernamen in der oberen, rechten Ecke klickst, kannst du zu <a href="https://hedy.org/my-achievements" target="_blank">Meine Errungenschaften</a> gehen. Auf dieser Seite werden deine Errungenschaften gesammelt. Deine Schülerinnen und Schüler haben ebenfalls so eine Seite.
            Wenn du mit der Maus über die Medaille gehst, siehst du wie man sie sich verdient. Es gibt auch versteckte Medaillen, bei denen du selbst herausfinden musst, wie man sie sich verdient.
            Wenn du mehr Informationen über Errungenschaften möchtest, schau dir dieses <a href="https://www.youtube.com/watch?v=-FjmKejukCs" target="_blank">Video</a> an.
    -   title: Highscores
        text: |-
            Auf <a href="www.https://hedy.org/highscores" target="_blank">dieser Seite</a> kannst du die Highscores aller Hedy-Nutzer sehen.
            In diesem <a href="https://www.youtube.com/watch?v=IqTiUkBVTo8" target="_blank">Video</a> kannst du mehr über Highscores erfahren.
    -   title: Debugger
        text: |-
            Funktioniert dein Code (oder der deiner Schülerinnen und Schüler) nicht? Dann muss ein Bug (Programmierfehler) drin sein! Du kannst den Debugger verwenden, um den Fehler zu finden.
            Der Debugger ist der Marienkäferknopf im Programmierbereich. Wenn du ihn drückst, kannst du deinen Code Zeile für Zeile ausführen, um deinen Fehler zu finden.
            Hast du den Fehler gefunden? Drück den roten Stoppknopf und der Debugger wird abschalten.
    -   title: Vorlesen
        text: Möchtest du die Ausgabe deines Programms vorlesen lassen? Dann kannst du die Vorlesen-Funktion nutzen, die du unter dem "Ausführen"-Knopf auf dem Code-Bereich findest.
    -   title: Programmiermodus
        text: |-
            Bist du von all den Abenteuern abgelenkt oder möchtest du ein langes Programm schreiben? Dann schau dir den "Programmiermodus"-Schalter am unteren Ende deines Programmierbereichs an.
            Der Programmiermodus erlaubt es dir und deinen Schülerinnen und Schüler einen größeren Programmierbereich zu nutzen
    -   title: Cheat sheets
        text: |-
            In every level there is a button with this emoji 🤔. You and your students can find the "cheat sheets" there. On this cheat sheet, you can find all the commands that are usable in this level in their correct form.
            So if you've forgotten how a command works, simply take a peek at the cheat sheet!
    -   title: Andere nützliche Features
        text: Dieses <a href="https://www.youtube.com/watch?v=c4MntPPgl1Y" target="_blank">Video</a> zeigt dir noch mehr Features von Hedy, wie die Cheatsheets und den Schlüsselwortumschalter.
-   title: After Hedy
    key: after
    subsections:
    -   title: What to do after Hedy?
        text: |-
            Congratulations on reaching the end of Hedy! Your students have now learned how to create their own basic codes in the Python programming language.
            Of course, you could keep programming in our Hedy compiler, but it might be more exciting for your students to transfer to a "real" Python interface.
            Would you like to continue teaching Python? Then please visit <a href="https://www.python.org/about/gettingstarted/" target="_blank">the Python website</a> to learn how to get started in another compiler.

            Now that your students have a basic knowledge of programming in general, you could also show them around in other textual programming languages. The language might change but the concepts do not, so Hedy will still give them a big advantage.
-   title: Answers to the exercises
    key: answers
    intro: |-
        The answers to all the exercises can be found on the public profile of the useraccount 'Hedy_answers'. We often encourage students to use their own creativity in their answers, so these answers are merely a guideline as to what a possible correct answer could look like.

        To go to the 'Hedy_answers' profile, please click <a href="https://hedy.org/user/hedy_answers" target="_blank">here</a>.
-   title: Häufige Fehler
    key: häufige_fehler
    intro: |-
        Du kannst aus deinen Fehlern lernen, ganz besonders beim Programmieren!
        Fehler zu machen ist unausweichlich, und eine großartige Gelegenheit zum Lernen, jedoch kann es für Lehrpersonen eine Herausforderung sein den korrekten Fix für einen Fehler zu finden.
        Ganz besonders, wenn die Programme länger werden je weiter die Level fortschreiten. Deshalb haben wir eine Liste mit den häufigsten Fehlern und ihren Lösungen für jedes Level erstellt.
    levels:
    -   level: '1'
        sections:
        -   title: Schülerinnen und Schüler vergessen Befehle einzutippen
            example:
                error_text: Beispielsweise schreiben sie einen Satz ohne den drucke-Befehl zu benutzen.
                error_code: Hedy kann dies nicht ausgeben
                solution_text: Sag deinen Schülerinnen und Schüler eine Zeile immer mit einem Befehl zu starten.
                solution_code: drucke Hedy kann dies drucken!
        -   title: Schülerinnen und Schüler schreiben Befehle in Großbuchstaben
            example:
                error_text: Befehle funktionieren nicht mit Großbuchstaben.
                error_code: |-
                    Frage warum schlägt mein Code fehl?
                    Drucke Weil Ich Großbuchstaben benutze.
                solution_text: Entferne die Großbuchstaben.
                solution_code: |-
                    frage Warum funktioniert mein Code jetzt?
                    drucke Weil ich die Großbuchstaben entfernt habe!
        -   title: Schülerinnen und Schüler benutzen echo ohne frage
            example:
                error_text: Echo ist gemacht um Antworten wiederzugeben nachdem man sie mit dem frage-Befehl eingelesen hat. Ohne frage würde echo nichts tun.
                error_code: echo Dein Name ist
                solution_text: Füge einen frage-Befehl hinzu, um es zum Laufen zu bringen.
                solution_code: |-
                    frage Was ist dein Name?
                    echo Dein Name ist
        -   title: Schülerinnen und Schüler möchten ihr echo Wort (Variable) in der Mitte eines Satzes
            example:
                error_text: Und sie haben Recht! Deshalb werden sie im nächsten Level lernen echte Variablen zu benutzen.
                error_code: |-
                    frage Welche Programmiersprache macht am meisten Spaß?
                    echo ist die Beste!
                solution_text: 'In Level 1 müssen wir es wie folgt belassen:'
                solution_code: |-
                    frage Welche Programmiersprache macht am meisten Spaß?
                    echo Die Beste ist...
        -   title: 'Schildkröte: Schülerinnen und Schüler lassen die Schildkröte vom Bildschirm runter laufen'
            example:
                error_text: Schülerinnen und Schüler probieren oft große Zahlen mit der Schildkröte aus, was dazu führt, dass der Pfeil aus der Bildfläche geht.
                error_code: |-
                    vorwärts 300
                    drehe 90
                solution_text: Im Beispiel denken die Schülerinnen und Schüler, dass der drehe-Befehl nicht funktioniert. Obwohl er dennoch funktioniert, kann man es ausserhalb der Bildfläche nicht sehen. Benutze kleinere Zahlen, um zu verhindern, dass dies passiert.
                solution_code: |-
                    vorwärts 100
                    drehe 90
        -   title: 'Schildkröte: Schülerinnen und Schüler benutzen den Befehl rückwärts, aber der existiert nicht'
            example:
                error_text: Rückwärts ist kein Befehl.
                error_code: rückwärts 100
                solution_text: 'Um die Schildkröte rückwärts gehen zu lassen, benutzt man den vorwärts-Befehl und eine negative Zahl. Zum Beispiel:'
                solution_code: vorwärts -100
    -   level: '2'
        sections:
        -   title: Schülerinnen und Schüler machen Tippfehler in ihren Befehlen
            example:
                error_text: Hedy kann keinen Befehl mit Tippfehler erkennen.
                error_code: prinnt Mach keine Tippfehler!
                solution_text: Unterrichte deine Schülerinnen und Schüler im Lesen der Fehlermeldungen. Auf diese Weise können sie selbst herausfinden, was schiefgelaufen ist.
                solution_code: print Mach keine Tippfehler!
        -   title: Schülerinnen und Schüler vergessen, dass sich der frage-Befehl geändert hat
            example:
                error_text: In diesem Level lernen Schülerinnen und Schüler Variablen kennen. Der frage-Befehl braucht ebenso eine Variable, aber Schülerinnen und Schüler vergessen dies.
                error_code: frage Was möchten Sie essen?
                solution_text: In diesem Level musst du Hedy sagen, wo die Antwort gespeichert werden soll, sodass sie später benutzt werden kann. Dies nennt man eine Variable.
                solution_code: bestellung ist Was möchten Sie essen?
        -   title: Schülerinnen und Schüler versuchen den echo-Befehl zu verwenden
            example:
                error_text: Für einige Schülerinnen und Schüler könnte es frustrierend sein zu erfahren, dass der echo-Befehl nicht mehr funktioniert. Daher ist es sehr wichtig, die Vorteile der Benutzung von Variablen zu erklären. Zum Beispiel kannst du mehrere Variablen in einem Programm verwenden und du kannst sie beliebig in Sätze einbauen!
                error_code: |-
                    antwort ist frage Warum funktioniert echo nicht mehr?!
                    echo
                solution_text: Benutze stattdessen eine Variable.
                solution_code: |-
                    antwort ist frage Warum funktioniert echo nicht mehr?!
                    drucke antwort
        -   title: Schülerinnen und Schüler benutzen einen Variablennamen als normales Wort
            example:
                error_text: Im Beispiel unten wird 'Name' als Variable benutzt, aber auch als normaler Text. Die Ausgabe wird 'Hi mein Hedy ist Hedy' sein.
                error_code: |-
                    Name ist Hedy
                    drucke Hi mein Name ist Name
                solution_text: Benutze also keine Wörter aus dem Text als Variablennamen. In Level 4 wird dies durch Anführungszeichen gelöst.
                solution_code: |-
                    name ist Hedy
                    drucke Hi ich bin name
        -   title: Schülerinnen und Schüler benutzen lange Variablennamen, die zwei Wörter enthalten.
            example:
                error_text: Eine Variable sollte mit einem Wort benannt werden. Du kannst einen Unterstrich verwenden, um zwei Wörter zu verbinden. Dies zählt als eins.
                error_code: gewählte Tür ist frage Welche Tür wählst du?
                solution_text: Füge einen Unterstrich hinzu.
                solution_code: gewählte_tür ist frage Welche Tür wählst du?
        -   title: Schülerinnen und Schüler könnten zwei verschiedene Namen für die gleiche Variable verwenden
            example:
                error_text: In diesem Beispiel hat der Schüler "Pferd" und "Name" für die gleiche Variable verwendet.
                error_code: |-
                    Pferd ist frage Wie heißt dein Pferd?
                    drucke Dein Pferd heißt Name
                solution_text: Prüfe immer, ob die Variable durchgehend den gleichen Namen im Code hat. Kleine Unterschiede können schwer zu erkennen sein (z.B. Plural), sie werden jedoch den Code stören.
                solution_code: |-
                    Name ist frage Wie heißt dein Pferd?
                    drucke Dein Pferd heißt Name
    -   level: '3'
        sections:
        -   title: Schülerinnen und Schüler versuchen ganze Listen zu drucken
            example:
                error_text: Eine Liste kann nicht gedruckt werden. Du kannst nur ein Element der Liste ausgeben mit `{at}` `{random}`.
                error_code: |-
                    einkäufe ist Äpfel, Milch, Schokolade
                    drucke einkäufe
                solution_text: Um eine Liste aller Einkäufe auszugeben, musst du sie nur nach einem `{print}`-Befehl platzieren. Sonst kannst du die Liste ausgeben, indem du `{at}` `{random}` nutzt.
                solution_code: |-
                    {print} Äpfel, Milch, Schokolade

                    oder

                    einkäufe {is} Äpfel, Milch, Schokolade
                    {print} einkäufe {at} {random}
        -   title: Schülerinnen und Schüler nutzen den Namen einer Variablen oder Liste als ganz normalen Text
            example:
                error_text: Dieses Problem ist wahrscheinlich auch in Level 2 aufgetreten. Nun kann es auch mit Listen passieren.
                error_code: |-
                    name {is} Hedy
                    {print} Hi mein Name ist name

                    oder

                    tier {is} Nashorn, Biene, Schwan
                    {print} Das beste Tier ist... tier {at} {random}
                solution_text: Verwende die Namen von Variablen oder Listen nicht in regulärem Text zur Ausgabe. In Level 4 wird dieses Problem mit Anführungszeichen gelöst.
                solution_code: |-
                    name {is} Hedy
                    {print} Hi ich bin name

                    oder

                    tiere {is} Nashorn, Biene, Schwan
                    {print} Das beste Tier ist... tiere {at} {random}
        -   title: Schülerinnen und Schüler vergessen `{at}` `{random}`
            example:
                error_text: Wie im Beispiel
                error_code: |-
                    vögel ist Spatz, Möwe, Rotkehlchen
                    drucke vögel random
                solution_text: Dieses Problem wird durch das Hinzufügen des Wortes at gelöst.
                solution_code: |-
                    vögel {is} Spatz, Möwe, Rotkehlchen
                    {print} vögel {at} {random}
        -   title: Schülerinnen und Schüler vergessen den `{print}` Befehl zu nutzen während sie auch den `{at}` `{random}` Befehl benutzen
            example:
                error_text: Oder manchmal schreiben sie `{at}` `{random}` an den Beginn der Zeile.
                error_code: |-
                    obst {is} Apfel, Kirsche, Banane
                    obst {at} {random}
                solution_text: Betone ggü. deinen Schülerinnen und Schülern, dass man immer drucke braucht um Text auszugeben.
                solution_code: |-
                    obst {is} Apfel, Kirsche, Banane
                    {print} obst {at} {random}
        -   title: Schülerinnen und Schüler vergessen Kommas in ihren Listen zu benutzen
            example:
                error_text: In einer Liste werden Elemente mit einem Komma getrennt.
                error_code: |-
                    pizzas {is} funghi tonno quattro stagioni
                    {print} pizzas {at} {random}
                solution_text: Nach jedem Element in deiner Liste sollte ein Komma sein
                solution_code: |-
                    pizzas ist funghi, tonno, quattro stagioni
                    drucke pizzas at random
        -   title: Schülerinnen und Schüler versuchen den `{at}` `{random}` Befehl ohne eine Liste zu verwenden
            example:
                error_text: Zum Beispiel
                error_code: |-
                    clubs {is} Manchester United
                    {print} clubs {at} {random}
                solution_text: Hedy kann nichts at random drucken, weil keine Liste existiert von der gewählt werden kann.
                solution_code: |-
                    clubs {is} Manchester United, Bayrn Munchen, FC Barcelona
                    {print} clubs {at} {random}
        -   title: Schülerinnen und Schüler versuchen add/remove ohne eine Liste zu verwenden
            example:
                error_text: Im unteren Beispiel ist "Namen" keine Liste, aber eine Variable. Du kannst nichts hinzufügen.
                error_code: |-
                    namen {is} Jake
                    dein_name {is} {ask} Wer bist du?
                    {add} dein_name {to} namen
                    {print} namen {at} {random}
                solution_text: Es muss zuerst eine Liste geben, daher musst du einen zweiten Namen hinzufügen, um aus Namen eine Liste zu machen, z.B. Amy. Wenn du Amy nicht in deiner Liste möchtest, kannst du sie sofort danach entfernen.
                solution_code: |-
                    namen {is} Jake, Amy
                    dein_name {is} {ask} Wer bist du?
                    {add} dein_name {to} namen
                    {print} namen {at} {random}
        -   title: Schülerinnen und Schüler vergessen zu/aus beim addiere/entferne zu verwenden
            example:
                error_text: Ohne zu/von funktionieren füge/entferne-Befehle nicht.
                error_code: |-
                    abenteuer {is} Geschichte, Papagei, Würfel
                    wahl {is} Welches Abenteuer gefällt dir am Besten?
                    {add} wahl
                    {remove} Würfel
                    {print} Ich mag Abenteuer {at} {random}
                solution_text: Hedy muss wissen zu welcher Liste ein Element hinzugefügt oder entfernt werden soll.
                solution_code: |-
                    Abenteuer ist Geschichte, Papagei, Würfel
                    wahl ist Welches Abenteuer gefällt dir am Besten?
                    füge wahl zu Abenteuer
                    entferne Würfel von Abenteuer
                    drucke Ich mag Abenteuer at random
    -   level: '4'
        sections:
        -   title: Schülerinnen und Schüler vergessen Anführungszeichen auf beiden Seiten des Textes
            example:
                error_text: In diesem Level benötigen drucke und frage Anführungszeichen. Eines vor dem Text und eines dahinter.
                error_code: |-
                    drucke Hallo
                    stimmung ist frage 'Wie geht es dir?'
                solution_text: Füge die richtigen Anführungszeichen hinzu.
                solution_code: |-
                    drucke 'Hallo'
                    stimmung ist frage 'Wie geht es dir?'
        -   title: Schülerinnen und Schüler verwenden die falschen Anführungszeichen
            example:
                error_text: Es ist wichtig die Lektion mit einer Überprüfung zu beginnen, ob die Schülerinnen und Schüler wissen wie man einfache Anführungszeichen eintippt. Sonst könnten sie die "doppelten" oder die `schrägen` verwenden.
                error_code: |-
                    drucke `Willkommen im Restaurant`
                    essen ist frage "Was möchten Sie bestellen?"
                solution_text: 'Dies sind die richtigen Anführungszeichen:'
                solution_code: |-
                    drucke 'Willkommen im Restaurant'
                    essen ist frage 'Was möchten Sie bestellen?'
        -   title: Schülerinnen und Schüler verwenden ein Apostroph in ihrem Text
            example:
                error_text: Ab diesem Level sind Apostrophe nicht erlaubt. Im Englischen werden sie oft benutzt, um Zusammenziehungen zu schreiben, wie z.B. you're, don't oder what's.
                error_code: drucke 'Hedy's Restaurant darfst du nicht tippen'
                solution_text: Du kannst die falsche Grammatik verwenden und das Apostroph einfach weglassen. Oder du kannst ` als Ersatz für das Apostroph verwenden.
                solution_code: |-
                    drucke 'Hedys ist erlaubt zu tippen'
                    drucke 'Und Hedy`s ist erlaubt'
    -   level: '5'
        sections:
        -   title: Schülerinnen und Schüler vergessen `{print}` innerhalb eines `{if}`-Befehls zu verwenden
            example:
                error_text: Schülerinnen und Schüler vergessen nach einem `{if}` oder `{else}` einen zweiten Befehl wie `{print}` oder `{ask}` zu verwenden.
                error_code: |-
                    falls name ist Hedy 'Großartig!'
                    sonst 'Hedy ist besser!'
                solution_text: Füge den drucke-Befehl hinzu, um es zu reparieren.
                solution_code: |-
                    falls name ist Hedy drucke 'Großartig!'
                    sonst drucke 'Hedy ist besser!'
        -   title: Schülerinnen und Schüler könnten zwei verschiedene Namen für die gleiche Variable verwenden
            example:
                error_text: In diesem Beispiel hat der Schüler oder die Schülerin 'Pferd' und 'Name' für die gleiche Variables benutzt.
                error_code: |-
                    Pferd ist frage 'Wie heißt dein Pferd?'
                    falls Name ist Bonfire drucke 'cool'
                    sonst drucke 'weniger cool!'
                solution_text: Prüfe immer, ob die Variable durchgehend den gleichen Namen im Code hat. Kleine Unterschiede können schwer zu erkennen sein (z.B. Plural), sie werden jedoch den Code stören.
                solution_code: |-
                    Pferd ist frage 'Wie heißt dein Pferd?'
                    falls Pferd ist Bonfire drucke 'cool'
                    sonst drucke 'weniger cool!'
        -   title: Schülerinnen und Schüler vergessen immer noch die Anführungszeichen auf beiden Seiten
            example:
                error_text: Programme mit falls-Befehl können sehr lang werden und Schülerinnen und Schüler tendieren dazu, die Anführungszeichen zu vergessen.
                error_code: |-
                    falls name ist Hedy drucke Spaß
                    sonst drucke 'bäh!
                solution_text: Benutze immer 2 Anführungszeichen in einem drucke-Befehl.
                solution_code: |-
                    falls name ist Hedy drucke 'Spaß'
                    sonst drucke 'bäh!'
        -   title: Schülerinnen und Schüler nutzen Anführungszeichen um Variablennamen herum
            example:
                error_text: In diesem Level sind keine Anführungszeichen um Variablennamen herum.
                error_code: |-
                    falls 'name' ist 'Hedy' drucke 'Spaß'
                    sonst drucke 'meh!'
                solution_text: Entferne die Anführungszeichen, um den Code zum Laufen zu kriegen.
                solution_code: |-
                    falls name ist Hedy drucke 'Spaß'
                    sonst drucke 'bäh!
        -   title: Schülerinnen und Schüler verwenden lange Variablennamen bestehend aus zwei Worten
            example:
                error_text: Eine Variable sollte mit einem Wort benannt werden. Du kannst ein Apostroph verwenden, um zwei Wörter zu verbinden. Dies zählt als eins.
                error_code: gewählte Tür ist frage 'Welche Tür wählst du?'
                solution_text: Füge einen Unterstrich hinzu.
                solution_code: gewählte_tür ist frage 'Welche Tür wählst du?'
        -   title: Schülerinnen und Schüler möchten, dass mehrere Antworten richtig sind
            example:
                error_text: Zum Beispiel lässt die Schülerin oder der Schüler Hedy all seinen Freunden sagen, dass sie lustig sind, aber anderen Klassenkameraden, dass sie es nicht sind.
                error_code: falls name ist Jesse, David, Souf drucke 'Du bist lustig' sonst drucke 'Du bist nicht lustig'
                solution_text: |-
                    Du kannst den `in` Befehl dafür verwenden. Er wird in einem höheren Level erklärt, aber er funktioniert bereits in Level 5.
                    Eine andere Lösung ist es, mehrere falls-Befehle und keinen sonst-Befehl zu verwenden. Der Nachteil ist, dass dies den anderen Mitschülern nicht sagen wird, dass sie nicht lustig sind.
                solution_code: |-
                    freunde ist Jesse, David, Souf
                    name ist frage 'Wer bist du?'
                    falls name in freunde drucke 'Du bist lustig'
                    sonst drucke 'Du bist nicht lustig'

                    oder

                    name ist frage 'Wer bist du?'
                    falls name ist Jesse drucke 'Du bist lustig'
                    falls name ist David drucke 'Du bist lustig'
                    falls name ist Souf drucke 'Du bist lustig'
        -   title: Die Schülerinnen und Schüler machen den Variablennamen zum Gleichen wie den Wert im `{if}`-Befehl
            example:
                error_text: Im Beispiel ist das Passwort 'Passwort'. Dies führt dazu, dass es immer richtig ist.
                error_code: |-
                    passwort ist frage 'Was ist das Passwort?'
                    falls passwort ist passwort drucke 'Zugang gewährt'
                    sonst drucke 'Zugang verwehrt!'
                solution_text: Wähle einen anderen Namen für deine Variable.
                solution_code: |-
                    geheimes_passwort {is} {ask} 'Was ist das Passwort?'
                    falls geheimes_passwort {is} passwort {print} 'Zugang gewährt'
                    {else} {print} 'Zugang verwehrt!'
    -   level: '6'
        sections:
        -   title: Schülerinnen und Schüler kämpfen mit Anführungszeichen
            example:
                error_text: Einige Schüler haben Probleme damit, Anführungszeichen hinzuzufügen oder nicht. Wenn du Anführungszeichen hinzufügst, wird auf dem Ausgabebildschirm buchstäblich "5+5" angezeigt.
                error_code: drucke '5 + 5'
                solution_text: In diesem Code wird auf dem Ausgabebildschirm '10' ausgegeben.
                solution_code: drucke 5 + 5
        -   title: Schülerinnen und Schüler haben Schwierigkeiten mit dem Konzept Berechnungen mit einer Variablen durchzuführen
            example:
                error_text: 'Einigen Schülerinnen und Schülern fällt es schwer, mit Variablen zu rechnen. Zeige ihnen sehr einfache Beispiele, wie z.B.:'
                error_code: |-
                    alter = frage 'Wie alt bist du?'
                    drucke 'Nächstes Jahr bist du ' alter + 1
                solution_text: Oder gehe noch einen Schritt weiter wie hier.
                solution_code: |-
                    preis = 0
                    drucke 'Willkommen in unserem Burger-Restaurant'
                    burger = frage 'Möchten Sie einen Burger?
                    falls burger = ja preis = preis + 10
                    getränk = frage 'Möchten Sie ein Getränk?
                    falls getränk = ja preis = preis + 4
                    drucke 'Das macht dann ' preis ' Euro bitte'
    -   level: '7'
        sections:
        -   title: Schülerinnen und Schüler vergessen ein Wort des Wiederholungsbefehls oder sie vergessen den Ausgabebefehl
            example:
                error_text: Stelle sicher, dass die Schülerinnen und Schüler wissen wie man sowohl den vollständigen Wiederholungsbefehl als auch den Ausgabebefehl verwendet.
                error_code: |-
                    wiederhole 3 mal 'Denn er ist ein toller Kerl'
                    wiederhole 3 mal 'Das kann niemand leugnen!'
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: |-
                    wiederhole 3 mal drucke 'For he`s a jolly good fellow'
                    wiederhole 3 mal drucke 'Which nobody can deny!'
        -   title: Schülerinnen und Schüler versuchen mehrere Zeilen zu wiederholen
            example:
                error_text: In diesem Level kannst du nur eine Zeile mehrfach wiederholen. In diesem Code wollte die Schülerin oder der Schüler 3 verschiedene Getränke ausgeben, aber es wird nicht funktionieren. Es wird die Frage 3 mal stellen und nur die letzte Antwort ausgeben.
                error_code: |-
                    wiederhole 3 mal getränk = frage 'Was möchten Sie trinken?'
                    drucke getränk
                solution_text: Du solltest ins nächste Level gehen, um mehrere Zeilen wiederholen zu können. In diesem Level wirst du alles separat drucken müssen.
                solution_code: |-
                    getränk = frage 'Was möchten Sie trinken?'
                    drucke getränk
                    getränk = frage 'Was möchten Sie trinken?'
                    drucke getränk
                    getränk = frage 'Was möchten Sie trinken?'
                    drucke getränk
        -   title: Schülerinnen und Schüler erstellen Programme, die zu lang zum Ausführen brauchen
            example:
                error_text: In diesem Level ist es sehr leicht langen Code zu erstellen. Die Schülerinnen und Schüler dürfen keine Programme erstellen, die zu lange zum Ausführen brauchen (um unsere Server zu retten).
                error_code: wiederhole 100 mal drucke 'Wie oft kann ich dies wiederholen?'
                solution_text: Stelle sicher, dass der Code nicht zu lang ist
                solution_code: wiederhole 20 mal drucke 'Dies ist genug'
    -   level: '8'
        sections:
        -   title: Schülerinnen und Schüler benutzen die falsche Einrückung
            example:
                error_text: Einrückung ist ein neues Konzept in diesem Level, welches einigen Schülerinnen und Schülern schwerfällt. Stelle sicher, dass sie einige einfache Beispiele üben, bevor sie ein ganzes Programm damit erstellen.
                error_code: |-
                    wiederhole 3 mal
                    drucke 'hallo'
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: |-
                    wiederhole 3 mal
                        drucke 'hallo'
        -   title: Schülerinnen und Schüler wiederholen nur 1 Zeile, obwohl sie mehrere Zeilen wiederholen wollten
            example:
                error_text: Zum Beispiel wollte die Schülerin oder der Schüler im Code unten die Getränkebestellung von 3 Leuten aufnehmen. Aber anstatt dessen hat das Programm 3 mal gefragt, aber nur eine Bestellung aufgeschrieben.
                error_code: |-
                    wiederhole 3 mal
                        getränk = frage 'Was möchten Sie trinken?'
                    drucke getränk
                solution_text: |-
                    Im korrekten Code beginnt die dritte Zeile auch mit Einrückung. Auf diese Weise gehört sie zum wiederhole-Block und wird daher 3 mal wiederholt.
                    Zeige deinen Schülerinnen und Schülern diese Unterschiede, um ihnen dabei zu helfen zu verstehen, warum wir Einrückung brauchen, um unsere Programme zum Laufen zu bringen.
                solution_code: |-
                    wiederhole 3 mal
                        getränk = frage 'Was möchten Sie trinken?'
                        drucke getränk
        -   title: Schülerinnen und Schüler möchten `{if}`-Befehle verschachteln oder `{if}` in eine Schleife packen
            example:
                error_text: |-
                    In diesem Level dürfen die Schülerinnen und Schüler noch keine `{if}`-Befehle in andere `{if}`-Befehle oder Wiederholungsschleifen stecken.
                    Im nächsten Level ist dies erlaubt.
                error_code: |-
                    geburtstag = frage 'Hast du Geburtstag?'
                    falls geburtstag = ja
                        wiederhole 3 mal
                            drucke 'Hip Hip Hooray!'
                solution_text: 'Dies ist der korrekte Code für dieses Level:'
                solution_code: |-
                    geburtstag = frage 'Hast du Geburtstag?'
                    falls geburtstag = ja
                        drucke 'Hip Hip Hooray!'
                        drucke 'Hip Hip Hooray!'
                        drucke 'Hip Hip Hooray!'
        -   title: Schülerinnen und Schüler erstellen Programme, die zu lang zum Ausführen brauchen
            example:
                error_text: In diesem Level ist es sehr leicht lang laufende Programme zu erstellen. Den Schülerinnen und Schülern ist es nicht erlaubt lang laufende Programme zu erstellen (um unsere Server zu retten).
                error_code: |-
                    wiederhole 100 mal
                        drucke 'Wie oft kann ich dies wiederholen?'
                solution_text: Stelle sicher, dass die Programme nicht zu lange laufen
                solution_code: |-
                    wiederhole 20 mal
                        drucke 'Dies ist genug'
        -   title: Die Schülerinnen und Schüler nutzen den `{if}`-Befehl, um zu prüfen, ob der Variablenwert das Gleiche ist wie der Variablenname
            example:
                error_text: |-
                    Wir haben diesen Fehler bei einigen unserer Schülerinnen und Schüler gesehen. Sie erstellen ein Passwort für ihren Computer, verwenden als Passwort jedoch 'Passwort'.
                    In Zeile 2 wird der Computer beauftragt zu prüfen, ob die Variable passwort das Gleiche ist wie die Variable passwort, also sich selbst. Was bedeutet, dass die Antwort immer ja ist.
                    Also wird mit diesem Code die Antwort immer 'Du kannst reinkommen' sein, was auch immer der Spieler einträgt.
                error_code: |-
                    passwort ist frage 'Was ist das Passwort?'
                    falls passwort ist passwort
                        drucke 'Du kannst reinkommen'
                    sonst
                        drucke 'Du hast keine Erlaubnis'
                solution_text: Du kannst diesen Fehler beheben, indem du Anführungszeichen hinzufügst. Auf diese Weise weiß der Computer, dass das zweite Passwort eine Zeichenkette (also normaler Text) ist und kein Variablenname.
                solution_code: |-
                    passwort ist frage 'Was ist das Passwort?'
                    falls passwort ist 'passwort'
                        drucke 'Du kannst reinkommen'
                    sonst
                        drucke 'Du hast keine Erlaubnis'
    -   level: '9'
        sections:
        -   title: Schülerinnen und Schüler machen Fehler bei der Einrückung
            example:
                error_text: Der schwerste Teil an diesem Level ist, die Einrückung hinzubekommen. Schülerinnen und Schüler lieben es, `{if}`-Befehle zu verschachteln, manchmal sogar innerhalb anderer verschachtelter `{if}`-Befehle. Mit der Einrückung Schritt zu halten kann ziemlich schwer sein.
                error_code: |-
                    drucke 'Robin geht in die Stadt'
                    ort = frage 'Geht Robin in den Laden, oder geht sie nach Hause?'
                    falls ort ist Laden
                        drucke 'Sie betritt den Laden.'
                        drucke 'Robin sieht ein interessant aussehendes Buch'
                        buch = frage 'Kauft Robin das Buch?'
                            falls buch ist ja
                    drucke 'Robin kauft das Buch und geht nach Hause'
                    sonst
                        drucke 'Robin verlässt den Laden und geht nach Hause'
                    sonst
                        drucke 'Robin geht nach Hause'
                solution_text: Dies ist der korrekte Code. Versuche all die verschiedenen Konstruktionen im Blick zu behalten, wenn du `{if}`-Befehle in andere `{if}`-Befehle steckst.
                solution_code: |-
                    drucke 'Robin geht in die Stadt'
                    ort = frage 'Geht Robin in den Laden, oder geht sie nach Hause?'
                    falls ort ist Laden
                        drucke 'Sie betritt den Laden.'
                        drucke 'Robin sieht ein interessant aussehendes Buch'
                        buch = frage 'Kauft Robin das Buch?'
                        falls buch ist ja
                            drucke 'Robin kauft das Buch und geht nach Hause'
                        sonst
                            drucke 'Robin verlässt den Laden und geht nach Hause'
                    sonst
                        drucke 'Robin geht nach Hause'
    -   level: '10'
        sections:
        -   title: Schülerinnen und Schüler benutzen den für-Befehl nicht richtig
            example:
                error_text: Wir sehen oft, dass die Schülerinnen und Schüler versuchen die Liste (in diesem Beispiel tiere) auszugeben, anstatt die Elemente in der Liste auszugeben.
                error_code: |-
                    tiere ist Hund, Katze, Blobfisch
                    für tier in tiere
                      drucke 'Ich liebe ' tiere
                solution_text: Das Wort tiere in der letzten Zeile sollte zu tier geändert werden.
                solution_code: |-
                    tiere ist Hund, Katze, Blobfisch
                    für tier in tiere
                      drucke 'Ich liebe ' tier
        -   title: Schülerinnen und Schüler vergessen die Einrückung
            example:
                error_text: Schülerinnen und Schüler tendieren dazu nach einem für-Befehl die Einrückung zu vergessen.
                error_code: |-
                    tiere ist Hund, Katze, Blobfisch
                    für tier in tiere
                    drucke 'Ich liebe ' tiere
                solution_text: Du solltest nach einem für-Befehl Einrückung benutzen.
                solution_code: |-
                    tiere ist Hund, Katze, Blobfisch
                    für tier in tiere
                      drucke 'Ich liebe ' tier
    -   level: '11'
        sections:
        -   title: Schülerinnen und Schüler vergessen Einrückung zu benutzen
            example:
                error_text: Stelle sicher, dass die Schülerinnen und Schüler Einrückung verwenden.
                error_code: |-
                    für i in bereich 1 bis 5
                    drucke i
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: |-
                    für i in bereich 1 bis 5
                        drucke i
        -   title: Schülerinnen und Schüler verstehen das i nicht
            example:
                error_text: |-
                    Manche Schülerinnen und Schüler verstehen nicht, dass i eine Variable ist. i wurde gewählt, weil es in Python-Programmen verwendet wird, aber du könntest genauso gut auch einen anderen Variablennamen verwenden.
                    Zum Beispiel, dieser Code:
                error_code: |-
                    für i in bereich 1 bis 5
                    drucke i
                solution_text: Könnte genauso gut mit diesem Code ersetzt werden. Es funktioniert genauso.
                solution_code: |-
                    für banane in bereich 1 bis 5
                        drucke banane
    -   level: '12'
        sections:
        -   title: Schülerinnen und Schüler vergessen Anführungszeichen
            example:
                error_text: Schülerinnen und Schüler brauchen nun mehr Anführungszeichen als in vorigen Leveln. In diesem Beispiel wurden Anführungszeichen in der Liste und im `{if}`-Befehl vergessen.
                error_code: |-
                    superhelden = Spiderman, Batman, Iron Man
                    superheld = superhelden {at} {random}
                    {if} superheld = Batman
                        {print} 'IM BATMAN!'
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: |-
                    superhelden = 'Spiderman', 'Batman', 'Iron Man'
                    superheld = superhelden {at} {random}
                    {if} superheld {is} 'Batman'
                        {print} 'IM BATMAN!'
        -   title: Schülerinnen und Schüler nutzen Anführungszeichen bei Zahlen, die sie für Berechnungen verwenden wollen
            example:
                error_text: |-
                    Du kannst Anführungszeichen um Zahlen verwenden, aber nur falls du möchtest, dass der Computer denkt, dass es Text ist. Dies bedeutet, dass du keine Berechnungen mit den Zahlen machen kannst.
                    Im Beispiel unten kannst du keine Berechnungen mit der Zahl 25 machen, weil sie in Anführungszeichen steht.
                error_code: |-
                    punkte = '25'
                    antwort ist frage 'Möchtest du einen Punkt?'
                    falls antwort ist 'ja'
                        punkte = punkte + 1
                        drucke punkte
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: |-
                    punkte = 25
                    antwort ist frage 'Möchtest du einen Punkt?'
                    falls antwort ist 'ja'
                        punkte = punkte + 1
                        drucke punkte
        -   title: Schülerinnen und Schüler verwenden Kommas anstatt Punkte in Dezimalzahlen
            example:
                error_text: Ab diesem Level können Dezimalzahlen benutzt werden, jedoch kannst du keine Kommas verwenden.
                error_code: drucke 2,5 + 2,5
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: drucke 2.5 + 2.5
    -   level: '13'
        sections:
        -   title: Schülerinnen und Schüler verwechseln `und` mit `oder`
            example:
                error_text: Beide Befehle können ähnlich erscheinen, aber ihre Funktion ist sehr verschieden.
                error_code: |-
                    spiel ist frage 'Möchtest du ein Spiel spielen?'
                    zeit ist frage 'Hast du Zeit zum Spielen?'
                    falls spiel ist 'ja' oder zeit ist 'ja'
                        drucke 'Lass uns spielen!'
                solution_text: In diesem Fall soll die Person auf beide Fragen mit ja antworten, also solltest du `und` benutzen.
                solution_code: |-
                    spiel ist frage 'Möchtest du ein Spiel spielen?'
                    zeit ist frage 'Hast du Zeit zum Spielen?'
                    falls spiel ist 'ja' und zeit ist 'ja'
                        drucke 'Lass uns spielen!'
    -   level: '14'
        sections:
        -   title: Schülerinnen und Schüler verwechseln die < und > Zeichen
            example:
                error_text: Oft kennen die Schülerinnen und Schüler diese Zeichen bereits aus dem Mathematikunterricht. Aber, falls deine Schülerinnen und Schüler diese Zeichen noch nicht kennen, könnte es eine Hürde darstellen.
                error_code: |-
                    alter = frage 'Wie alt bist du?'
                    falls alter < 12
                        drucke 'Du bist älter als ich!'
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: |-
                    alter = frage 'Wie alt bist du?'
                    falls alter > 12
                        drucke 'Du bist älter als ich!'
        -   title: Schülerinnen und Schüler verwenden oft die falschen Zeichen für `!=` `<=` und `>=`
            example:
                error_text: Diese Zeichen sind möglicherweise für die meisten Schülerinnen und Schüler neu. Stelle sicher, dass du diese Zeichen deinen Schülerinnen und Schülern erklärst.
                error_code: |-
                    name = frage 'Wie heißt du?'
                    falls name =< 'Hedy'
                        drucke 'Du bist nicht Hedy'
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: |-
                    name = frage 'Wie heißt du?'
                    falls name != 'Hedy'
                        drucke 'Du bist nicht Hedy'
        -   title: Schülerinnen und Schüler vergessen das == Zeichen zu benutzen
            example:
                error_text: In diesem Level dürfen Schülerinnen und Schüler weiterhin = oder ist benutzen. Aber in anderen Leveln oder in Python werden sie damit in Schwierigkeiten geraten. Also ist es besser, sie zu trainieren es zu benutzen.
                error_code: |-
                    name = frage 'Wie heißt du?'
                    falls name = 'Hedy'
                        drucke 'Du bist cool!'
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: |-
                    name = frage 'Wie heißt du?'
                    falls name == 'Hedy'
                        drucke 'Du bist cool!'
    -   level: '15'
        sections:
        -   title: Schülerinnen und Schüler vergessen die Einrückung in der Wiederholungsschleife
            example:
                error_text: Einrückung ist oft schwer für Schülerinnen und Schüler.
                error_code: |-
                    antwort = 0
                    solange antwort != 25
                    antwort = frage 'Was ist 5 mal 5?'
                    drucke 'Eine richtige Antwort wurde gegeben'
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: |-
                    antwort = 0
                    solange antwort != 25
                        antwort = frage 'Was ist 5 mal 5?'
                    drucke 'Eine richtige Antwort wurde gegeben'
    -   level: '16'
        sections:
        -   title: Schülerinnen und Schüler vergessen die Klammern
            example:
                error_text: Ab diesem Level sollten Listen in Klammern stehen.
                error_code: |-
                    eis = 'Erdbeer', 'Schokoladen'
                    drucke 'Ich liebe ' eis[zufällig] 'eis'
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: |-
                    eis = ['Erdbeer', 'Schokoladen']
                    drucke 'Ich liebe ' eis[zufällig] 'eis'
        -   title: Schülerinnen und Schüler benutzen die falschen Klammern
            example:
                error_text: Ab diesem Level sollten Listen in Klammern stehen.
                error_code: |-
                    eis = ('Erdbeer', 'Schokoladen'}
                    drucke 'Ich liebe ' eis[zufällig] 'eis'
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: |-
                    eis = ['Erdbeer', 'Schokoladen']
                    drucke 'Ich liebe ' eis[zufällig] 'eis'
        -   title: Schülerinnen und Schüler vergessen die Anführungszeichen während sie sich auf die Klammern konzentrieren
            example:
                error_text: Schülerinnen und Schüler konzentrieren sich manchmal sehr auf den neuen Aspekt der Syntax, sodass sie die Anführungszeichen vergessen.
                error_code: |-
                    eis = [Erdbeer, Schokoladen]
                    drucke 'Ich liebe ' icecream[zufällig] 'eis'
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: |-
                    eis = ['Erdbeer', 'Schokoladen']
                    drucke 'Ich liebe ' icecream[zufällig] 'eis'
        -   title: Schülerinnen und Schüler verwenden immer noch den alten at random Befehl
            example:
                error_text: Schülerinnen und Schüler konzentrieren sich manchmal sehr auf den neuen Aspekt der Syntax, sodass sie die Anführungszeichen vergessen.
                error_code: |-
                    eis = [Erdbeer, Schokoladen]
                    drucke 'Ich liebe ' eis at random 'eis'
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: |-
                    eis = ['Erdbeer', 'Schokoladen']
                    drucke 'Ich liebe ' eis[zufällig] 'eis'
        -   title: Schülerinnen und Schüler vergessen die Anführungszeichen während sie sich auf die Klammern konzentrieren
            example:
                error_text: Schülerinnen und Schüler sind manchmal sehr auf die neuen Aspekte der Syntax konzentriert, sodass sie die Anführungszeichen vergessen.
                error_code: |-
                    eis = [Erdbeer, Schokoladen]
                    drucke 'Ich liebe ' eis[zufällig] 'eis'
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: |-
                    eis = ['Erdbeer', 'Schokoladen']
                    drucke 'Ich liebe ' eis[zufällig] 'eis'
    -   level: '17'
        sections:
        -   title: Schülerinnen und Schüler benutzen `{elif}` wie `{else}`, also ohne Bedingung
            example:
                error_text: Der `{elif}` Befehl benötigt eine Bedingung dahinter. Er kann nicht wie `{else}` benutzt werden, ohne Bedingung.
                error_code: |-
                    farbe = {ask} 'Was ist deine Lieblingsfarbe?'
                    {falls} farbe == 'grün':
                        {print} 'Grün ist nett'
                    {elif}:
                        {print} 'Ich mag grün'
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: |-
                    farbe = {ask} 'Was ist deine Lieblingsfarbe?'
                    {if} farbe == 'grün':
                        {print} 'grün ist nett'
                    {elif} farbe == gelb:
                        {print} 'gelb ist OK'
                    {else}:
                        {print} 'Ich mag grün'
        -   title: Schülerinnen und Schüler vergessen den Doppelpunkt
            example:
                error_text: Nach jedem Befehl der Einrückung verlangt, sollte ein Doppelpunkt verwendet werden.
                error_code: |-
                    antwort = {ask} 'Wie geht es dir?'
                    {if} antwort {is} 'großartig'
                        {print} 'Ich auch!'
                    {elif} antwort {is} 'schlecht'
                        {print} 'Lass mich dich aufheitern!'
                    {else}
                        {print} 'Großartig!'
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: |-
                    antwort = frage 'Wie geht es dir?'
                    falls antwort ist 'großartig':
                        drucke 'Ich auch!'
                    sofalls antwort ist 'schlecht':
                        drucke 'Lass mich dich aufheitern!'
                    sonst:
                        drucke 'Großartig!'
    -   level: '18'
        sections:
        -   title: Schülerinnen und Schüler vergessen die Klammern
            example:
                error_text: Schülerinnen und Schüler vergessen Klammern um ihren Text zu setzen
                error_code: drucke 'mein Name ist Hedy!'
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: drucke('mein Name ist Hedy!')
        -   title: Schülerinnen und Schüler verwenden weiterhin den frage-Befehl
            example:
                error_text: Der frage-Befehl wurde seit Level 1 benutzt. Also könnte es schwierig für die Schülerinnen und Schüler sein zu input anstelle von frage zu wechseln.
                error_code: |-
                    drucke('Mein Name ist Hedy!')
                    name = frage('Was ist dein Name?')
                    drucke('Also ist dein Name ', name)
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: |-
                    drucke('Mein Name ist Hedy!')
                    name = input('Was ist dein Name?')
                    drucke('Also ist dein Name ', name)
        -   title: Schülerinnen und Schüler könnten die Klammern als Anführungszeichen verwenden
            example:
                error_text: Sie haben gelernt die Variablen außerhalb der Anführungszeichen zu halten, also könnten sie das Gleiche mit den Klammern tun. Was nicht der richtige Weg ist sie zu benutzen.
                error_code: |-
                    temperatur = 25
                    drucke('Es ist ') temperatur ('Grad draußen')
                solution_text: 'Dies ist der korrekte Code:'
                solution_code: |-
                    temperatur = 25
                    drucke('Es ist ', temperatur, 'Grad draußen')
