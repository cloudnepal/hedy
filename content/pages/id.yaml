title: "Hedy documentation"
sections:
-   title: "Pengenalan Hedy"
    key: "intro"
    subsections:
    -   title: "Apa itu Hedy?"
        text: |
            Hedy adalah bahasa pemrograman berbasis tekstual, dikembangkan khusus untuk (pra)remaja (10 sampai 15 tahun).
            Berbeda dengan bahasa-bahasa pemrograman untuk anak-anak, seperti Scratch, Hedy tidak menggunakan blok kode namun kode tekstual.
            Jadi dengan Hedy siswa akan belajar bagaimana menuliskan kode seperti pemrogram pada umumnya, tapi dengan beberapa langkah-langkah kecil dan latihan-latihan yang menyenangkan.
            Dengan cara ini Hedy dapat berfungsi sebagai batu lonkucingan untuk ke bahasa pemrograman sesungguhnya seperti Python dalam cara yang mudah dan menyenangkan!
            Disini guru bisa menonton [video](https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s) tentang pengembangan Hedy sebagai sebuah bahasa pemrograman.
    -   title: "Target pengguna"
        text: |
            Hedy dikembangkan untuk siswasekolah menengah pertama dan sekolah dasar (umur 10 - 15).
            Penting untuk diingat bahwa para siswa perlu bisa membaca dengan baik. Kami tidak merekomendasikan penggunakan Hedy untuk siswa dibawah kelas 3.
            Siswa (dan guru!) tidak memerlukan pengalaman pemrograman sebelum memulai Hedy.
    -   title: "How does Hedy work?"
        text: |
            <Todo>
    -   title: "Mengajar dengan Hedy"
        text: |
            Hedy dibagi menjadi beberapa level, dengan perintah-perintah baru yang diajarkan. Setiap level berisi latihan-latihan untuk menguasai perintah yang baru dipelajari.
            Latihan-latihan dapat dilakukan oleh siswa secara independen, atau guru dapat menggunakannya dalam instruksi-instruksi klasik.
            Rencana pengajaran untuk setiap level disediakan di manual untuk guru. Rencana pengajaran dan latihan dijelaskan langkah demi langkah, untuk memastikan bahwa guru-guru yang tidak terlalu terbiasa dengan teknologi pun dapat mengikutinya!
            Tentu saja Hedy juga mengakomodasi guru-guru kreatif yang ingin membuat rencana pengajaran dan latihannya sendiri!
    -   title: "Perangkat-perangkat"
        text: |
            Hedy berbasis web, yang artinya dapat berfungsi dengan perangkat apapun asalkan memiliki browser (Google Chrome, Firefox, Edge dan lainnya).
            Jadi laptop, chromebooks, tablet, ataupun perangkat mobile dapat digunakan untuk menggunakan Hedy.
            Tidak ada kebutuhan untuk unduh apapun agar dapat menggunakan Hedy, guru hanya perlu ke websitenya dan memulainya!
-   title: "Tutorial"
    key: "tutorial"
    subsections:
    -   title: "Tutorial"
        text: |
            Do you want to follow the tutorial (again)? Click [here](https://hedycode.com/tutorial)
-   title: "Persiapan-persiapan"
    key: "preparations"
    subsections:
    -   title: "Login (masuk ke website)"
        text: |
            Untuk memulai pemrograman dengan Hedy, kunjungi situs berikut:
            [https://www.hedycode.com/](https://www.hedycode.com/)
            Klik Login di bagian kanan atas. Dengan ini guru bisa masuk menggunakan username dan password guru. Apakah ini pertama kalinya guru menggunakan Hedy? Klik tombol hijau Create an account.
            Tip: Pilihlah username dan password yang dapat dengan mudah guru hafal, atau tuliskan di selembar kertas!
    -   title: "Customize your Class"
        text: |
            You can also customize your class and choose which adventures are available for them. This way your students won't be overwhelmed by the amount of adventures and levels, and they can specifically focus on the adventures you'd like them to practice with.
            This [video](https://www.youtube.com/watch?v=qva9gXBoUwY&t=10s) shows you how to customize your class.
    -   title: "Menyimpan program-program"
        text: |
            Setelah guru masuk, guru akan melihat spanduk biru dengan My profile dan My programs.
            Pada My programs guru dapat menemukan semua kode program yang pernah guru simpan.
            Guru dapat menyimpan proyek-proyek guru dengan memberikan nama di bar putih dan menekan tombol hijau Save Code.
            Mari memulai pemrograman yang menyenangkan!
    -   title: Setting preferred language
        text: "When students create profile they are supposed to choose a 'preferred language'. Hedy will always be loaded in this selected language.\nChanging this language can always be done later on by navigation to 'My account' and 'My personal settings' again.\nFrom December 2021 on setting a preferred language is obligatory for each Hedy account.\nWhen your account or the accounts of your students have being created earlier than this date you will receive a message that a preferred language is missing.\nDon't worry! Navigate to 'My profile' and set a language in your profile settings.\nUntil you set a language Hedy will be shown in your browser language and, when this language is not supported, in English.\n\n**For non-English speakers**\nNot only can you change the language of the adventures to your own language. You can also choose which language the keywords (for example 'print' or 'ask') should be in.\nThis way you can teach your students to code with English keywords, but you can also let them program in their own laguage. For example Dutch students can use the command 'vraag' instead of 'ask'.\n"
    -   title: Storing programs
        text: "Because you are now logged in, you'll see the blue banner with My profile and My programs.\nThese tabs exist for your students too. In My programs you can find all the codes that you've saved.\n\nYou can save your projects easily by giving your project a name in the white bar and pressing the green button Save Code.\nYou (and your students) can also share programs. These programs will be posted on our explore page, for everybody to see and use.\nIf you want to unshare your program, go to 'My programs' and click 'Unshare'.\n"
-   title: "Mengajar dengan Hedy"
    key: "teaching"
    subsections:
    -   title: " "
        text: |
            Hedy berisi banyak level dan setiap level mengajarkan kemampuan baru. Kami merekomendasikan untuk mengajar satu level per sesi.
            Ini memberikan para siswa waktu untuk mengerti perintah-perintah atau konsep yang baru dan berlatih dengannya, sebelum pindah ke level berikutnya.
            Kami menggunakan struktur ini di sesi-sesi kami:
    -   title: "Slides"
        text: |
            **COMING SOON** Here you'll soon find slides to use in your lessons.
    -   title: "Pengenalan"
        text: |
            Guru dapat memulai pengajaran dengan mengingatkan kembali siswa akan pengetahuan terkait yang pernah mereka miliki: apa yang telah mereka ketahui tentang pemrograman, apa yang telah mereka pelajari, dan apa kesalahan-kesalahan yang pernah mereka buat.
            Dengan cara ini, semua perintah-perintah dan kesalahan-kesalahan yang pernah dilakukan akan teringat di benak para siswa ketika guru memulai pengajaran.
    -   title: "Langkah - langkah terkait konsep dan perintah baru"
        text: |
            Konsep dan perintah baru bisa jadi menantang bagi beberapa siswa untuk dipelajari.
            Karenanya sangat penting untuk memodelkan penggunaan yang tepat dari perintah-perintah yang ada ke para siswa, terutama di level-level awal ketika para siswa tidak memiliki pengalaman pemrograman sama sekali. Menampilkan banyak contoh dapat membuat konsep abstrak yang dipelajari (misal: 'Apa itu variabel') menjadi lebih mudah dipahami ('Lihat, variabel peliharaan sekarang berisi kucing').
    -   title: "Mari mulai bekerja"
        text: |
            Setiap level berisi berbagai petualangan yang dapat kamu temui di tab berwarna merah muda. Tab merah muda pertama menjelaskan perintah-perintah baru pada level tersebut.
            Tab-tab berikutnya adalah petualangan yang siswa dapat coba.
            Petualangan-petualangan yang ada diurutkan dari yang termudah ke yang tersulit, jadi kami merekomendasikan untuk memulai dari kiri dan berjalan perlahan ke kanan.
            Tab terakhir berjudul 'Apa berikutnya?' memberikan sedikit informasi terkait apa yang akan siswa pelajari di level selanjutnya.
            Tentu saja, guru dapat memilih petualangan mana yang akan digunakan oleh para siswa di setiap level. Mereka tidak selalu harus menyelesaikan semua petualangan.
            Setiap petualangan berisi kode contoh, yang dapat dicoba oleh siswa dengan menekan tombol hijau.
            Kode contoh akan tersalin di area kode dan siswa dapat mencoba menjalankan kode terkait dan menyesuaikannya sesuai dengan keinginannya.
            Dorong siswa-siswa untuk mengubah kode contoh yang ada menjadi proyek mereka sendiri dengan menambahkan ide-ide atau variasi unik mereka terhadap petualangan yang ada.
    -   title: "Kuis"
        text: |
            Untuk menguji apakah para siswa sudah menguasai semua informasi yang diberikan pada level tertentu, guru dapat meminta mereka menyelesaikan sebuah kuis.
            Setiap kuis berisi 10 pertanyaan pilihan ganda terkait konsep-konsep dan perintah-perintah baru pada level tersebut.
            Belum setiap level memiliki kuis, karena kami sedang mengembangkan kuis-kuis tersebut.
    -   title: "Evaluasi"
        text: |
            Akhiri pelajaran dengan memberikan evaluasi umum. Apa yang para siswa telah pelajari? Kesulitan-kesulitan apa yang mereka hadapi?
            Bagaimana mereka belajar dari kesalahan-kesalahan mereka? Dan tentu saja: Apa yang mereka berhasil buat?
            Para siswa cenderung bangga atas hasil kreasi mereka sendiri, jadi adalah baik untuk menyediakan waktu dan kesempatan bagi para siswa untuk menampilkan karya mereka di depan teman-temannya.
-   title: "Extra Hedy features"
    key: "features"
    subsections:
    -   title: "Teacher Statistics"
        text: |
            This [video](https://www.youtube.com/watch?v=iwHVG4NRKI4&t=5s) shows you more information on how to use the teacher statistics in your class.
    -   title: "Make your own adventure"
        text: |
            It is also possible for teachers to create your own adventure. [This video](https://www.youtube.com/watch?v=A0zbXpxX4q4) shows you how to create your own adventure as a teacher and add it to your class(es).
    -   title: "Explore page"
        text: |
            On the [explore](https://hedycode.com/explore) page you can view the work of other Hedy users. You can try out their programs and use them as inspiration to create something cool yourself.
            You can also add a program you've made to the explore page yourself by clicking 'Save and share code' in the coding screen or go to My Programs and click 'Share'.
            Don't want to share your work anymore? Simply go to 'My Programs' and click 'Unshare'.
            If you want more information about the explore page, check out this [video](https://www.youtube.com/watch?v=26boFjqvS5Q).
    -   title: "My achievements"
        text: |
            If you click on your username in the topright corner of your screen, you can go to [My achievements](https://hedycode.com/my-achievements). On this page you achievements are collected. Your students have such a page as well.
            When you hover over the badge with your mouse, you'll see how to earn the badge. There are hidden badges too, of which you'll have to find out yourself how to earn them.
            If you want more information on the achievements, check out this [video](https://www.youtube.com/watch?v=-FjmKejukCs).
    -   title: "High Scores"
        text: |
            On [this page](https://hedycode.com/highscores) you can see the high scores of all Hedy users.
            In this [video](https://www.youtube.com/watch?v=IqTiUkBVTo8) you can learn some more about the high scores.
    -   title: "Debugger"
        text: |
            Is your (student's) code not working? There must be a bug (coding mistake) in it! You can use the debugger to find the mistake.
            The debugger is the ladybig button in your coding screen. If you press it, you can run your code line by line to find your mistake.
            Have you found the mistake? Press the red stop button and the debugger will shut off.
    -   title: "Read aloud"
        text: |
            Do you want the output of your program to be read aloud? Then you can use the read aloud function that is found under the 'run code' button in your coding screen.
    -   title: "Programmers mode"
        text: |
            Distracted by all the adventures, or do you want to make a long program? Then check out the 'Programmers Mode' switch at the bottom of your coding screen.
            Programmers mode allows you and your students to use a bigger coding screen.
    -   title: "Other useful features"
        text: |
            This [video](https://www.youtube.com/watch?v=c4MntPPgl1Y) shows you even more features of Hedy, like the cheatsheets and the keyboard switcher.
-   title: "Frequently made mistakes"
    key: "common_mistakes"
    intro: |
        You can learn from your mistakes, especially in coding!
        Making mistakes is unavoidable, and a great opportunity to learn, but for teachers it can be a challenge to find the correct fix for a mistake!
        Especially as the codes get longer and longer as the levels progress. That's why we've made a list with frequently made mistakes in each level, and their solutions.
    levels:
    -   level: '1'
        sections:
        -   title: "Students forget to type commandos"
            example:
                error_text: |
                    For example they type a sentence without using print.
                error_code: |
                    Hedy can't print this
                solution_text: |
                    Teach your students to always start a line of code with a command.
                solution_code: |
                    print Hedy can print this!
        -   title: "Students use capitals when typing commands"
            example:
                error_text: |
                    Commands won't work if they are in capitals.
                error_code: |
                    Ask Why does my code fail?
                    Print Because I'm using capitals.
                solution_text: |
                    Remove the capitals.
                solution_code: |
                    ask Why does my code work now?
                    print Because I removed the capitals!
        -   title: "Students use echo without ask"
            example:
                error_text: |
                    Echo is made to repeat an answer after an ask command. Without ask echo won't do anything.
                error_code: |
                    echo Your name is
                solution_text: |
                    Add an ask command to make it work.
                solution_code: |
                    ask What's your name?
                    echo Your name is
        -   title: "Students want their echo word (variable) to be in the middle of a sentence"
            example:
                error_text: |
                    And they are right! That's why they will learn to use proper variables in the next level.
                error_code: |
                    ask Which programming language is the most fun?
                    echo is the best!
                solution_text: |
                    In level 1 we have to keep it at this:
                solution_code: |
                    ask Which programming language is the most fun?
                    echo The best is...
        -   title: "Turtle: Students let the turtle walk off of the screen"
            example:
                error_text: |
                    Often students love to try out big numbers when using the turtle, which causes the arrow to walk off the screen.
                error_code: |
                    forward 300
                    turn 90
                solution_text: |
                    In the example. students tend to think that the turn command doesn't work. Eventhough is does work, but you can't see it happening off screen. Use smaller numbers to prevent this from happening.
                solution_code: |
                    forward 100
                    turn 90
        -   title: "Turtle: Students use the command backward, but that doens't exist"
            example:
                error_text: |
                    Backward is not a command.
                error_code: |
                    backward 100
                solution_text: |
                    To make the turtle go backwards, you use the forward command and a negative number. For example:
                solution_code: |
                    forward -100
    -   level: '2'
        sections:
        -   title: "Students make typos in their commands"
            example:
                error_text: |
                    Hedy can't recognize a command with a typo.
                error_code: |
                    prinnt Don't make typos!
                solution_text: |
                    Teach your students to read the error messages. This way they can find out themselves what went wrong.
                solution_code: |
                    print Don't make typos!
        -   title: "Students forget that the ask command has changed"
            example:
                error_text: |
                    In this level students learn about variables. The ask command requires a variable as well, but students forget this.
                error_code: |
                    ask what would you like to eat?
                solution_text: |
                    In this level you have to tell Hedy where to save your answer, so it can be used later on. This is called a variable.
                solution_code: |
                    order is What would you like to eat?
        -   title: "Students try to use the echo command. "
            example:
                error_text: |
                    For some students it might be frustrating to learn that the echo command doesn't work anymore. That's why it's very important to explain the advantages of using variables. For example you can use multiple variables in a code, and you can put them anywhere you like in a sentence!
                error_code: |
                    answer is ask Why doesn't echo work anymore?!
                    echo
                solution_text: |
                    Use a varible instead.
                solution_code: |
                    answer is ask Why doens't echo work anymore?!
                    print answer
        -   title: "Students use a variable name or as a normal word"
            example:
                error_text: |
                    In the example below the word 'name' is used a a variable, but also as a normal text. The output of this code will be 'Hi my Hedy is Hedy'.
                error_code: |
                    name is Hedy
                    print Hi my name is name
                solution_text: |
                    So don't use a word you want to use in the text as a variable name. In level 4 this is solved with quotation marks.
                solution_code: |
                    name is Hedy
                    print Hi I'm name
        -   title: "Students use long variable names containing two words."
            example:
                error_text: |
                    A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: |
                    chosen door is ask Which door do you pick?
                solution_text: |
                    Add an underscore.
                solution_code: |
                    chosen_door is ask which door do you pick?
        -   title: "Students might use two different names for the same variable"
            example:
                error_text: |
                    In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |
                    horse is ask What is your horse called?
                    print Your horse is called name
                solution_text: |
                    Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |
                    name is ask What is your horse called?
                    print Your horse is called name
    -   level: '3'
        sections:
        -   title: "Students try to print whole lists"
            example:
                error_text: |
                    A list can't be printed. You can only print one item from the list with at random.
                error_code: |
                    groceries is apples, milk, chocolate
                    print groceries
                solution_text: |
                    To print a list of all the groceries, you simply need to put them after a print command. Else you can use the list to print one item with at random.
                solution_code: |
                    print apples, milk, chocolate

                    or

                    groceries is apples, milk, chocolate
                    print groceries at random
        -   title: "Students use the name of a variable or list as regular text."
            example:
                error_text: |
                    This problem probably occured in level 2 as well. Now it can happen with lists too.
                error_code: |
                    name is Hedy
                    print Hi my name is name

                    or

                    animal is rhino, bee, swan
                    print The best animal is... animal at random
                solution_text: |
                    Don;t use the names of variables or lists in regular text to print. In level 4 this problem is solves with quotation marks.
                solution_code: |
                    name is Hedy
                    print Hi I'm name

                    or

                    animals is rhino, bee, swan
                    print The best animal is... animals at random
        -   title: "Students forget at in at random"
            example:
                error_text: |
                    Like in the example
                error_code: |
                    birds is sparrow, seagull, robin
                    print birds random
                solution_text: |
                    This problem is solved by adding the word at.
                solution_code: |
                    birds is sparrow, seagull, robin
                    print birds at random
        -   title: "Students forget to use the print command when also using the at random command."
            example:
                error_text: |
                    Or they will sometimes put at random at the beginning of the line.
                error_code: |
                    fruit is apple, cherry, banana
                    fruit at random
                solution_text: |
                    Emphasize to your students that you always need a print to print text.
                solution_code: |
                    fruit is apple, cherry, banana
                    print fruit at random
        -   title: "Students forget to use commas in their lists"
            example:
                error_text: |
                    In a list items are seperated with a comma.
                error_code: |
                    pizzas is funghi tonno quattro stagioni
                    print pizzas at random
                solution_text: |
                    After each item on your list, there should be a comma
                solution_code: |
                    pizzas is funghi, tonno, quattro stagioni
                    print pizzas at random
        -   title: "Students try to use at random without a list."
            example:
                error_text: |
                    For example
                error_code: |
                    clubs is Manchester United
                    print clubs at random
                solution_text: |
                    Hedy can't print anything at random, because there is no list to choose from.
                solution_code: |
                    clubs is Manchester United, Bayrn Munchen, FC Barcelona
                    print clubs at random
        -   title: "Students try to use add/remove without a list "
            example:
                error_text: |
                    In the example below 'names' is not a list, but a variable. You cannot add anything to it.
                error_code: |
                    names is Jake
                    your_name is ask Who are you?
                    add your_name to names
                    print names at random
                solution_text: |
                    There has to be a list first, so you have to add a second name to turn names into a list, for example Amy. If you don't want amy on your list, you can use remove to remove it after.
                solution_code: |
                    names is Jake, Amy
                    your_name is ask Who are you?
                    add your_name to names
                    print names at random
        -   title: "Students forget to use to/from in add/remove."
            example:
                error_text: |
                    Without to/from the add/remove command won't work.
                error_code: |
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice
                    remove dice
                    print I love adventures at random
                solution_text: |
                    Hedy has to know which list the item should be added to/removed from.
                solution_code: |
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice to adventures
                    remove dice from adventures
                    print I love adventures at random
    -   level: '4'
        sections:
        -   title: "Students forget to use quotation marks on both sides of the text"
            example:
                error_text: |
                    In this level print and ask need a set of quotation marks. One before of the text and one after.
                error_code: |
                    print Hello
                    mood is ask 'How are you?
                solution_text: |
                    Add the correct quotation marks.
                solution_code: |
                    print 'Hello'
                    mood is ask 'How are you?'
        -   title: "Students use the wrong quotation marks"
            example:
                error_text: |
                    It is important to start your lesson by checking if the students know how to type a quotation mark properly. ELse they might use the "double quotes" or the `skewed one`.
                error_code: |
                    print `Welcome to the restaurant`
                    food is ask "What would you like to order?"
                solution_text: |
                    These are the correct quotation marks:
                solution_code: |
                    print 'Welcome to the restaurant'
                    food is ask 'What would you like to order?'
        -   title: "Students use an apostrophe in their text"
            example:
                error_text: |
                    From this level on apostrophes are not allowed. They are often used in English when thyping contractions like you're, don't or what's.
                error_code: |
                    print 'You're not allowed to type this'
                solution_text: |
                    You can choose to use the wrong grammar and just leave the apostrophe out. Or you could use the ` as an apostrophe.
                solution_code: |
                    print 'Youre allowed to type this'
                    print 'And you`re able to do this'
    -   level: '5'
        sections:
        -   title: "Students forget to use print in an if command"
            example:
                error_text: |
                    After students use if or else they forget to use a second command like print or ask.
                error_code: |
                    if name is Hedy 'Great!'
                    else 'Hedy is better!'
                solution_text: |
                    Add the print command to fix it.
                solution_code: |
                    if name is Hedy print 'Great!'
                    else print 'Hedy is better!'
        -   title: "Students might use two different names for the same variable"
            example:
                error_text: |
                    In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |
                    horse is ask 'What is your horse called?'
                    if name is Bonfire print 'cool'
                    else print 'less cool!'
                solution_text: |
                    Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |
                    horse is ask 'What is your horse called'
                    if horse is Bonfire print 'cool!'
                    else print 'less cool!'
        -   title: "Students still forget the quotes on both sides."
            example:
                error_text: |
                    If commandos can get very long and students tend to forget to use quotes.
                error_code: |
                    if name is Hedy print fun
                    else print 'meh!
                solution_text: |
                    Always use 2 quotes in a print command.
                solution_code: |
                    if name is Hedy print 'fun'
                    else print 'meh!'
        -   title: "Students use quotes around variable names."
            example:
                error_text: |
                    In this level there are no quotes around variable names.
                error_code: |
                    if 'name' is 'Hedy' print 'fun'
                    else print 'meh!'
                solution_text: |
                    Remove the quotes to get the code to work.
                solution_code: |
                    if name is Hedy print 'fun'
                    else print 'meh!
        -   title: "Students use long variable names containing two words."
            example:
                error_text: |
                    A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: |
                    chosen door is ask 'Which door do you pick?'
                solution_text: |
                    Add an underscore.
                solution_code: |
                    chosen_door is ask 'which door do you pick?'
        -   title: "Students want multiple answers to be correct"
            example:
                error_text: |
                    For example this student Hedy to tell all his friends that they are funny, but other classmates would be told that they are not.
                error_code: |
                    if name is Jesse, David, Souf print 'You are funny' else print 'You are not funny'
                solution_text: |
                    You could use the `in` command for that. It is explained in a higher level, but it does already work in level 5.
                    Another solution is to use multiple if commands and no else command. The disadvantage is that it won't tell the other classmates that they are not funny.
                solution_code: |
                    friends is Jesse, David, Souf
                    name is ask 'Who are you?'
                    if name in friends print 'You are funny'
                    else print 'You are not funny'

                    or

                    name is ask 'Who are you?'
                    if naam is Jesse print 'You are funny'
                    if naam is David print 'You are funny'
                    if naam is Souf print 'You are funny'
        -   title: "The students make the variable name the same as the value in the if statement"
            example:
                error_text: |
                    In the example below the password is 'password'. This will result in it always being correct.
                error_code: |
                    password is ask 'What is the password?'
                    if password is password print 'Access granted'
                    else print 'Acces denied!'
                solution_text: |
                    Pick a different name for your variable.
                solution_code: |-
                    secret_password is ask 'What is the password'
                    if secret_password is password print 'Access granted!'
                    else print 'Access denied!'
    -   level: '6'
        sections:
        -   title: Students struggle with quotation marks
            example:
                error_text: "Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.\n"
                error_code: "print '5 + 5'\n"
                solution_text: "In this code the output screen will print '10'.\n"
                solution_code: "print 5 + 5\n"
        -   title: Students struggle with the concept of doing maths with a variable
            example:
                error_text: "Some students will find it hard to do maths with variables. Try to show them very simple examples, like:\n"
                error_code: "age = ask 'How old are you?'\nprint 'Next year you will be ' age + 1\n"
                solution_text: "Or take it a step further like this.\n"
                solution_code: "price = 0\nprint 'Welcome to our burger restaurant'\nburger = ask 'Would you like a burger?'\nif burger = yes price = price + 10\ndrink = ask 'Would you like a drink?'\nif drink = yes price = price + 4\nprint 'That will be ' price ' euros please'\n"
    -   level: '7'
        sections:
        -   title: Students forget one of the word of the repeat command, or they forget the print command
            example:
                error_text: "Make sure that the students know to use both the full repeat command and the print command.\n"
                error_code: "repeat 3 times 'For he`s a jolly good fellow'\nrepeat 3 print 'Which nobody can deny!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "repeat 3 times print 'For he`s a jolly good fellow'\nrepeat 3 times print 'Which nobody can deny!'\n"
        -   title: Students try to repeat multiple lines
            example:
                error_text: "In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.\n"
                error_code: "repeat 3 times drink = ask 'What would you like to drink?'\nprint drink\n"
                solution_text: "You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.\n"
                solution_code: "drink = ask 'What would you like to drink?'\nprint drink\ndrink = ask 'What would you like to drink?'\nprint drink\ndrink = ask 'What would you like to drink?'\nprint drink\n"
        -   title: Students make programs that take too long to run
            example:
                error_text: "In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).\n"
                error_code: "repeat 100 times print 'How many times can I repeat this?'\n"
                solution_text: "Make sure the codes aren't too long\n"
                solution_code: "repeat 20 times print 'This is enough'\n"
    -   level: '8'
        sections:
        -   title: Students use the indentation wrong
            example:
                error_text: "Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple codes before making a whole program with it.\n"
                error_code: "repeat 3 times\nprint 'hello'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "repeat 3 times\n    print 'hello'\n"
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                error_text: "For instance, in the code below the student wanted to take the drinks order of 3 people. But insted the program asked 3 times, but only wrote down one order.\n"
                error_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\nprint drink\n"
                solution_text: "In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.\nShowing your students these differences can help them understand why we need indentation to make our programs work.\n"
                solution_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\n    print drink\n"
        -   title: Students want to nest if statements, or put if statements inside a loop
            example:
                error_text: "In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.\nIn the next level this is allowed.\n"
                error_code: "birthday = ask 'Is it you birthday?'\nif birthday = yes\n    repeat 3 times\n        print 'Hip Hip Hooray!'\n"
                solution_text: "This is the correct code for this level:\n"
                solution_code: "birthday = ask 'Is it you birthday?'\nif birthday = yes\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n"
        -   title: Students make programs that take too long to run
            example:
                error_text: "In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).\n"
                error_code: "repeat 100 times\n    print 'How many times can I repeat this?'\n"
                solution_text: "Make sure the codes aren't too long\n"
                solution_code: "repeat 20 times\n    print 'This is enough'\n"
        -   title: Students use the if command to check if the variable value is the same as the variable name
            example:
                error_text: "We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.\nIn line 2 the computer is asked to check wheter the variable password is the same as the variable password, so itself. Which means the answer is alway yes.\nSo with this code the answer will always be 'You can come in' no matter what the player fills in.\n"
                error_code: "password is ask 'What is the password?'\nif password is password\n    print 'You can come in'\nelse\n    print 'You are not allowed'\n"
                solution_text: "You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.\n"
                solution_code: "password is ask 'What is the password?'\nif password is 'password'\n    print 'You can come in'\nelse\n    print 'You are not allowed'\n"
    -   sections:
        -   title: Students make mistakes with indentation
            example:
                error_text: "The hardest part about this level is getting the indentation right. Students love nesting if statements, sometimes even inside other nested if statements. Keeping track of indentation can get pretty tough.\n"
                error_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n        if book is yes\nprint 'Robin buys the book and goes home'\nelse\n    print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
                solution_text: "This is the correct code. Try to keep track of all the different constructions when putting if statements inside other if statements.\n"
                solution_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n    if book is yes\n        print 'Robin buys the book and goes home'\n    else\n        print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
        level: '9'
    -   level: '10'
        sections:
        -   example:
                error_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animals\n"
                solution_text: "The word animals in the last line should be changed into animal.\n"
                solution_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animal\n"
                error_text: "We often see that students try to print the list (in the example animals) instead of the items of the list.\n"
            title: Students so not use the for command correctly
        -   title: Students forget the indentation
            example:
                error_text: "Students tend to forget to use indentation after a for command.\n"
                error_code: "animals is dog, cat, blobfish\nfor animal in animals\nprint 'I love ' animals\n"
                solution_text: "You should use indentation after a for command.\n"
                solution_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animal\n"
    -   level: '11'
        sections:
        -   title: Students forget to use indentation
            example:
                error_text: "Make sure that the students use indentation.\n"
                error_code: "for i in range 1 to 5\nprint i\n"
                solution_text: "This is the correct code:\n"
                solution_code: "for i in range 1 to 5\n    print i\n"
        -   title: Students don't understand the i
            example:
                error_code: "for i in range 1 to 5\nprint i\n"
                error_text: "Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.\nFor example, this code:\n"
                solution_text: "Could just as well be replaced with this code. It works the same.\n"
                solution_code: "for banana in range 1 to 5\n    print banana\n"
    -   sections:
        -   title: Students forget quotation marks
            example:
                error_text: "Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the if command.\n"
                error_code: "superheroes = Spiderman, Batman, Iron Man\nsuperhero = superheroes at random\nif superhero = Batman\n    print 'IM BATMAN!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "superheroes = 'Spiderman', 'Batman', 'Iron Man'\nsuperhero = superheroes at random\nif superhero is 'Batman'\n    print 'IM BATMAN!'\n"
        -   title: Students use quotation marks on numbers they want to use for calculations
            example:
                error_text: "You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.\nIn the example below, you can't do maths with the number 25, because it's in quotation marks.\n"
                error_code: "score = '25'\nanswer is ask 'Do you want a point?'\nif answer is 'yes'\n    score = score + 1\n    print score\n"
                solution_text: "This is the correct code:\n"
                solution_code: "score = 25\nanswer is ask 'Do you want a point?'\nif answer is 'yes'\n    score = score + 1\n    print score\n"
        -   example:
                error_code: "print 2,5 + 2,5\n"
                solution_text: "This is the correct code:\n"
                solution_code: "print 2.5 + 2.5\n"
                error_text: "Decimal numbers can be used from this level on, but you can't use commas.\n"
            title: Students use commas instead of periods in decimal numbers
        level: '12'
    -   level: '13'
        sections:
        -   title: Students confuse `and` with `or`
            example:
                error_text: "Both commands might appear similar, but their functions are very different.\n"
                error_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' or time is 'yes'\n    print 'Lets play!'\n"
                solution_text: "In this case, the person should answer yes on both questions, so you should use `and`.\n"
                solution_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' and time is 'yes'\n    print 'Lets play!'\n"
    -   level: '14'
        sections:
        -   title: Students confuse the < and > signs
            example:
                error_text: "Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.\n"
                error_code: "age = ask 'How old are you?'\nif age < 12\n    print 'You are older than I am!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "age = ask 'How old are you?'\nif age > 12\n    print 'You are older than I am!'\n"
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_text: "These signs are probably new for most students. Make sure to explain these signs to your students.\n"
                error_code: "name = ask 'What is your name?'\nif name =< 'Hedy'\n    print 'You are not Hedy'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "name = ask 'What is your name?'\nif name != 'Hedy'\n    print 'You are not Hedy'\n"
        -   title: Students forget to use the == sign
            example:
                error_text: "In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.\n"
                error_code: "name = ask 'What is your name?'\nif name = 'Hedy'\n    print 'You are cool!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "name = ask 'What is your name?'\nif name == 'Hedy'\n    print 'You are cool!'\n"
    -   level: '15'
        sections:
        -   example:
                error_text: "Indentation is often hard for students.\n"
                error_code: "answer = 0\nwhile answer != 25\nanswer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "answer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n"
            title: Students forget indentation in the while loop
    -   sections:
        -   title: Students forget the brackets
            example:
                error_text: "From this level on lists should be in brackets.\n"
                error_code: "icecream = 'starwberry', 'chocolate'\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   example:
                error_code: "icecream = ('starwberry', 'chocolate'}\nprint 'I love ' icecream[random] ' icecream'\n"
                error_text: "From this level on lists should be in brackets.\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
            title: Students use the wrong brackets
        -   example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
            title: Students forget the quotation marks while focussing on the brackets
        -   title: Students still use the old at random command
            example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream at random ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        level: '16'
    -   level: '17'
        sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_text: "The elif command needs a condition behind it. It cannot be used like else, without a condition.\n"
                error_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif:\n    print 'I like green'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif color == yellow:\n    print 'yellow is alright'\nelse:\n    print 'I like green'\n"
        -   title: Students forget the colon
            example:
                error_text: "After each command that requires indentation, a colon should be used.\n"
                error_code: "answer = ask 'How are you doing?'\nif answer is 'great'\n    print 'Me too!'\nelif answer is 'bad'\n    print 'Let me cheer you up!'\nelse\n    print 'Im great!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "answer = ask 'How are you doing?'\nif answer is 'great':\n    print 'Me too!'\nelif answer is 'bad':\n    print 'Let me cheer you up!'\nelse:\n    print 'Im great!'\n"
    -   sections:
        -   example:
                error_code: "print 'my name is Hedy!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "print('my name is Hedy!')\n"
                error_text: "Students will forget to put brackets around their text.\n"
            title: Students forget to use the brackets
        -   title: Students will still use the ask command
            example:
                error_text: "The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.\n"
                error_code: "print('My name is Hedy!')\nname = ask('What is your name?')\nprint('So your name is ', name)\n"
                solution_text: "This is the correct code:\n"
                solution_code: "print('My name is Hedy!')\nname = input('What is your name?')\nprint('So your name is ', name)\n"
        -   example:
                error_code: "temperature = 25\nprint('It is ') temperature ('degrees outside')\n"
                solution_text: "This is the correct code:\n"
                solution_code: "temperature = 25\nprint('It is ', temperature, 'degrees outside')\n"
                error_text: "They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.\n"
            title: Students might use the brackets as quotation marks
        level: '18'
learn-more-sections:
-   title: "Apakah kamu menyukai Hedy?"
    text: |
        Kami ingin mendengarnya dari kamu!

        [Klik disini untuk mengirimkan pesan](mailto:hello@hedy.org "About Hedy")
-   title: "Menemukan bug?"
    text: |
        [Beritahu kami di GitHub](https://github.com/hedyorg/hedy/issues/new/choose)
-   title: "Percakapan di Code Week"
    text: |
        Ingin tahu lebih jauh tentang Hedy? Cek pembicaraan yang diberikan Felienne pada European Code Week 2020:

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/R2U9MEowYag?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
start-sections:
-   title: "Apa itu bahasa pemrograman bertahap?"
    text: |
        Belajar pemrograman bisa jadi menantang. Ini bukan karena bahasa pemrogramannya sulit, namun karena ada banyak aturan yang perlu dihafal, sama seperti ketika kamu memulai belajar bahasa Inggris.
        Sama halnya, kamu juga perlu banyak latihan untuk belajar pemrograman.

        Kamu dapat membaca kalimat-kalimat ini dengan mudah. Namun apakah kamu ingat ketika kamu pertama kali belajar membaca? Kamu membutuhkan waktu untuk mengerti setiap karakter.
        Hal ini berlaku juga untuk pemrograman; mungkin dapat menantang pada awalnya tapi nanti akan menjadi semakin mudah!

        Hal baik dari Hedy adalah pembelajaran *bertahap*. Ini artinya kamu tidak perlu belajar semua aturan sekaligus.
        Level-level awal tidak memiliki banyak aturan, sehingga kamu dapat membiasakan diri dengan pemrograman secara nyaman.
        Pada setiap level, kami menambahkan aturan-aturan baru, meningkatkan jumlah perintah yang akan kamu ketahui. Perintah-perintah tersebut adalah instruksi-instruksi bagi komputer.
-   title: "Kenapa Hedy bertahap?"
    text: |
        Pada video ini, Felienne, pembuat Hedy, menjelaskan mengapa Hedy bertahap.

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/fmF7HpU_-9k" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
-   title: "Untuk siapa Hedy berguna?"
    text: |
        Hedy ditujukan untuk anak-anak yang mau belajar pemrograman! Kamu perlu bisa membaca sedikit bahasa inggris untuk ini.
-   title: "Multi-lingual programming"
    text: |
        While almost all textual programming language have keywords in English, such as `for` or `repeat`, Hedy can be used in any language! We currently support 39 different languages, including Spanish, Arabic, Simplified Chinese and Hindi. If your language is not available you can always start a a new translation.
-   title: "Built for the classroom"
    text: |
        Hedy is suitable for kids aged 10 and up and designed for classroom use.
        Teachers can use our free, built-in lesson plans, but can also author their own lessons and load these into the Hedy user interface.
-   title: "Apakah aku memerlukan pengalaman pemrograman?"
    text: |
        Tidak, itu tidak dibutuhkan. Namun, jika kamu sebelumnya pernah memprogram dengan Scratch atau Python, perintah-perintah yang ada akan terlihat mirip.
-   title: "Apakah Hedy gratis?"
    text: |
        Ya!
        Hedy juga 'Open Source', yang artinya semua orang yang memiliki kemampuan pemrograman dapat meningkatkan kualitas Hedy. Kamu dapat menemukan kodenya di [GitHub](https://github.com/hedyorg/hedy).
        Jika kamu menyukai Hedy dan ingin berkontribusi, kami menerima (dan sangat bersyukur untuk itu) [Klik disini untuk donasi](https://github.com/sponsors/hedyorg)!
-   title: "Apakah saya perlu meng-instal sesuatu?"
    text: |
        Tidak. Hedy berjalan di browser, program yang kamu pakai untuk melihat halaman ini (mungkin Chrome, Edge, atau Firefox). Hedy juga berjalan di perangkat mobile ataupun tablet.

join-sections:
-   text: "# There are three ways in which you can support Hedy!\n"
    title: Supporting Hedy
-   title: Improving the language
    text: "The gradual and multi-lingual nature of Hedy create a lot of interesting technical challenges.\nFind those issues on [Github](https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage).\n"
-   title: Translating Hedy
    text: "Not a programmer? No problem! Another way to support Hedy is by [translating keywords, error messages, adventures are other content](https://github.com/hedyorg/hedy/blob/main/TRANSLATING.md)\n\nThis is the current status, help us complete a language, or add a new one!\n<a href=\"https://hosted.weblate.org/engage/hedy/\">\n<img src=\"https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg\" alt=\"Translation status\" /></a>\n"
-   title: Help teachers get started
    text: "Hedy is designed to support teachers in providing programming lessons in class. We have specific teacher features like the option to create a class, customize it and see how your students are doing.\nIf you like Hedy, you can reach out to schools that you know to help teachers get started! We can help you find schools or teachers via [Discord](https://discord.gg/8yY7dEme9r).\n"
