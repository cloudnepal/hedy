title: Hedy dokumentatsioon
sections:
-   title: Sissejuhatus
    key: sissejuhatus
    subsections:
    -   title: Mis on Hedy?
        text: "Hedy on tekstipõhine programmeerimiskeel, mis on spetsiaalselt välja töötatud (eel)teismelistele (10-15 aastastele).\nErinevalt lastele mõeldud programmeerimiskeeltest, nagu Scratch, ei kasuta Hedy koodiplokke, vaid tekstilist koodi.\nNii et Hedyga õpid sa koodi kirjutama nagu tõelised programmeerijad, kuid väikeste sammude ja mänguliste harjutuste abil.\nNii saab Hedy toimida vaheastena tõeliste programmeerimiskeelte, nagu Python, õppimisel ning teha seda ligipääsetaval ja mis veel tähtsam, lõbusal viisil!\nSiit saate vaadata (inglisekeelset) [videot](https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s) Hedy arendamisest.\n"
    -   title: Sihtrühm
        text: "Hedy on välja töötatud, pidades silmas põhikooli õpilasi (vanuses 10 - 15).\nÕplilaste hea lugemisoskus on oluline. Me ei soovita alustada Hedyga enne, kui õpilastel on vähemalt kolmanda klassi lugemisoskus.\nEi õpilastel ega õpetajatel ei ole vaja varasemat programmeerimisoskust.\n"
    -   title: Kuidas Hedy töötab?
        text: "Hedy on jaotatud tasemeteks, kus igal tasemel õpitakse juurde mõni uus käsk. Igal tasemel on erinevaid seiklusi, et saaks harjutada värskelt õpitud käske.\nÕpetajana saate otsustada, millised seiklused on teie õpilastele kättesaadavad. Kas nad teevad sel tasemel restorani, kalkulaatori või kummitava maja? Igal tasemel on seklused järjestatud lihtsaimast raskeimani.\nNiimoodi on teie õpilastel pidev väljakutse. Õpilased võivad seiklusi ette võtta omaette või teie juhendamisel.\n\nSeiklused sisaldavad koodinäiteid, et ka vähem digi-oskajad õpetajad saaksid Hedy kasutamisega hakkama!\nLoomulikult võimaldab Hedy loomingulistel õpetajatel koostada oma õppeplaani ja seiklused!\n\nKui kõik taseme seiklused on läbi programmeeritud, saavad teie õpilased oma teadmisi testida küsimustiku abil.\nSaad jälgida oma õpilaste tööd ja edenemist klassi leheküljel.\n"
    -   title: Seadmed
        text: "Hedy on veebipõhine. See tähendab, et Hedy töötab igal pool, kus saab kasutada brauserit (Chrome, Firefox, Edge, Opera, jne.) ehk sülearvutid, tahvelarvutid ja muud nutiseadmed sobivad Hedy kasutamiseks.\nHedy kasutamiseks ei ole vaja midagi alla laadida, lihtsalt ava veebileht ja hakka pihta!\n"
    -   title: Hedy kogukond
        text: "Kutsume kõiki Hedy õpetajaid, programmeerijaid ja teisi fänneliituma oma [Discord'i serveriga](https://discord.gg/8yY7dEme9r). See on ideaalne koht Hedy teemadel vestlemiseks: meil on kanalid, kus saad teistega jagada oma lahedaid projekte ja õppeplaane, kanalid vigade raporteerimiseks ja kanalid teiste õpetajatega ja Hedy meeskonnaga vestlemiseks.\n"
-   title: "Tutorial"
    key: "tutorial"
    subsections:
    -   title: "Tutorial"
        text: |
            Do you want to follow the tutorial (again)? Click [here](https://hedycode.com/tutorial)
-   title: Ettevalmistused
    key: Ettevalmistused
    subsections:
    -   title: Klassi loomine
        text: "Õpetajana saate luua oma õpilastele klassi. Selles klassis näete õpilaste kontosid ja programme ning saate jälgida nende edusamme.\nSamuti saate oma klassi kohandada ja valida, millised seiklused on neile kättesaadavad. Nii ei ole teie õpilased seikluste ja tasemete hulgast ülekoormatud ning nad saavad keskenduda konkreetselt nendele seiklustele, millega te soovite, et nad harjutaksid.\n"
    -   title: Õpilaste kontod
        text: "On kaks võimalust, kuidas lasta õpilastel oma klassiga liituda: te võite lasta neil oma kontod ise teha või luua neile kontod.\n\n**Õpilased teevad ise oma kontod**\nTeie õpilased võivad minna Hedy veebisaidile ja luua oma kontod, täpselt nagu teie ise tegite. Selleks, et nad teie klassi pääseksid, peavad nad lihtsalt klõpsama kutselingile.\nKutselingi leiate klassi lehelt, saatke see oma õpilastele. Pidage meeles, et teie õpilased peavad olema Hedy'sse sisse logitud, kui nad lingile klõpsavad.\n\n**Teie loote õpilastele kontod**\nMõnikord on lihtsam luua oma õpilastele ise kontosid. Seda saab teha klõpsates nupule \"loo õpilaste kontod\" ja täites nende kasutajanimed ja paroolid.\nÕpilased saavad sisse logida teie valitud kasutajanime ja parooliga. Pärast seda võivad nad soovi korral oma kasutajanime või parooli muuta ning nad jäävad ikkagi teie klassi.\n"
    -   title: Eelistatud keele seadistamine
        text: "Kui õpilased oma konto loovad, siis nad peavad valima 'eelistatud keele'. Hedy laetakse alati selles keeles.\nSeda keelt saab hiljem alati muuta, kui minna uuesti menüüsse \"Minu konto\" ja \"Minu isiklikud seaded\".\nAlates detsembrist 2021 on eelistatud keele määramine kohustuslik iga Hedy konto jaoks.\nKui teie konto või teie õpilaste kontod on loodud enne seda kuupäeva, saate teate, et eelistatud keel puudub.\nÄrge muretsege! Minge vahekaardile 'Minu konto' ja määrake keel oma konto seadetes.\nKuni keel on määratud kuvatakse Hedy teie brauseri keeles ja kui ka see keel ei ole määratud, siis inglise keeles.\n\n**Kui inglise keel ei ole su emakeel**\nTe ei saa mitte ainult seikluste keelt muuta, te saate ka valida millises keeles võtmesõnad (näiteks \"print\" või \"ask\") on. Nii saate õpetada oma õpilastele inglise keelsete märksõnadega programmeerimist, kuid võite lasta neil programmeerida ka oma emakeeles. Näiteks võivad eestikeelsed õpilased kasutada käsku 'küsi' käsu 'ask' asemel.\n\nNB! Käskude tõlkimine eesti keelde ei ole veel valmis, nii et see ei ole veel võimalik.\n"
    -   title: Programmide salvestamine
        text: "Because you are now logged in, you'll see the blue banner with My profile and My programs.\nThese tabs exist for your students too. In My programs you can find all the codes that you've saved.\n\nYou can save your projects easily by giving your project a name in the white bar and pressing the green button Save Code.\nYou (and your students) can also share programs. These programs will be posted on our explore page, for everybody to see and use.\nIf you want to unshare your program, go to 'My programs' and click 'Unshare'.\n"
-   title: Õpetamine Hedy'ga
    key: õpetamine
    subsections:
    -   title: Õpetamine Hedy'ga
        text: "Hedy contains a lot of different levels that each teach a different new skill. We recommend to teach one level per lesson.\nThis gives your students the time to fully grasp a new command or concept and practice with it, before moving on to the next level.\nWe use this structure in our lessons:\n"
    -   title: Sissejuhatus
        text: "You can start your lessons by activating your students' prior knowledge: What do they already know about the subject, what did they learn in the previous lesson and which mistakes did they make that they've now learned from?\nThis way all the previously learned commands and frequently made mistakes are fresh in your students' memories, when you strat introducing the new lesson.\n"
    -   title: Uute mõistete ja käskude tutvustus
        text: "Mõndadele õpilastele võib olla uutest mõistetest ja käskudest raske aru saada.\nSellepärast on väga tähtis näidata õpilastele head eeskuju, kuidas uusi käske õigesti kasutada.\nEriti tähtis on see madalamatel tasemetel, kus õpilastel ei ole üldse mingit programmeerimiskogemust. Neile võib olla abstraktsete mõistete mõistmine keeruline olla.\n\nNäidete abil saab abstraktsed mõisted (näiteks: 'Mis on muutuja?') äratuntavamaks ja kergemini arusaadavaks teha('Näe, muutuja lemmikloom sai väärtuseks koer').\n"
    -   title: Hakkame pihta
        text: "Each level contains different adventures that you can find in the pink tabs. The first pink tab explains the new commands in this level.\nThe following tabs are adventures that the students can try out and make their own.\nThe adventures are arranged from easiest to hardest, so we recommend to start on the left and your your way to the right.\nThe last tab 'what's next' gives a little teaser of what you'll learn in the next level. Of course, you can select the adventures you want your students to do for each level.\nThey don't always have to make every adventure. Every adventure contains an example code, that the students can try out with the green button.\nThe example code gets copied to the workfield, where the students can try out the code and adjust it to make it their own.\nStimulate your students to turn the example codes into their own projects by adding their own ideas and making their own variation of the adventure.\n"
    -   title: Teadmiste kontroll
        text: "Kontrollimaks, kas teie õpilased on tasemel tutvustatud infost aru saanud, võite lasta neil teha teadmiste kontrolli.\nTeadmiste kontroll koosnev 10 valikvastusega küsimusest tasemel tutvustatud uute mõistete ja käskude kohta.\nKõikidel tasemetel ei ole veel teadmiste kontrolli - me alles tegeleme nende koostamisega.\n"
    -   title: Hindamine
        text: "Round up your lesson by having a brief evaluation. What did the students learn? Which hardships did they come across?\nHow did they learn from their mistakes? And of course: What did they create?\nStudents are often very proud of their own creations, so it's nice to save a little time and gove your students the opportunity to show their work to their classmates.\n"
-   title: "Extra Hedy features"
    key: "features"
    subsections:
    -   title: "Teacher Statistics"
        text: |
            This [video](https://www.youtube.com/watch?v=iwHVG4NRKI4&t=5s) shows you more information on how to use the teacher statistics in your class.
    -   title: "Make your own adventure"
        text: |
            It is also possible for teachers to create your own adventure. [This video](https://www.youtube.com/watch?v=A0zbXpxX4q4) shows you how to create your own adventure as a teacher and add it to your class(es).
    -   title: "Explore page"
        text: |
            On the [explore](https://hedycode.com/explore) page you can view the work of other Hedy users. You can try out their programs and use them as inspiration to create something cool yourself.
            You can also add a program you've made to the explore page yourself by clicking 'Save and share code' in the coding screen or go to My Programs and click 'Share'.
            Don't want to share your work anymore? Simply go to 'My Programs' and click 'Unshare'.
            If you want more information about the explore page, check out this [video](https://www.youtube.com/watch?v=26boFjqvS5Q).
    -   title: "My achievements"
        text: |
            If you click on your username in the topright corner of your screen, you can go to [My achievements](https://hedycode.com/my-achievements). On this page you achievements are collected. Your students have such a page as well.
            When you hover over the badge with your mouse, you'll see how to earn the badge. There are hidden badges too, of which you'll have to find out yourself how to earn them.
            If you want more information on the achievements, check out this [video](https://www.youtube.com/watch?v=-FjmKejukCs).
    -   title: "High Scores"
        text: |
            On [this page](https://hedycode.com/highscores) you can see the high scores of all Hedy users.
            In this [video](https://www.youtube.com/watch?v=IqTiUkBVTo8) you can learn some more about the high scores.
    -   title: "Debugger"
        text: |
            Is your (student's) code not working? There must be a bug (coding mistake) in it! You can use the debugger to find the mistake.
            The debugger is the ladybig button in your coding screen. If you press it, you can run your code line by line to find your mistake.
            Have you found the mistake? Press the red stop button and the debugger will shut off.
    -   title: "Read aloud"
        text: |
            Do you want the output of your program to be read aloud? Then you can use the read aloud function that is found under the 'run code' button in your coding screen.
    -   title: "Programmers mode"
        text: |
            Distracted by all the adventures, or do you want to make a long program? Then check out the 'Programmers Mode' switch at the bottom of your coding screen.
            Programmers mode allows you and your students to use a bigger coding screen.
    -   title: "Other useful features"
        text: |
            This [video](https://www.youtube.com/watch?v=c4MntPPgl1Y) shows you even more features of Hedy, like the cheatsheets and the keyboard switcher.
-   title: Sagedasemad vead
    levels:
    -   sections:
        -   title: Õpilased unustavad käsu kirjutada
            example:
                error_text: "Näiteks kirjutavad nad lause, kasutamata võtmesõna {print}.\n"
                error_code: "Hedy ei oska seda printida\n"
                solution_text: "Õpetage oma õpilastele, et nad alustaks koodirida alati käsuga.\n"
                solution_code: "{print} Hedy oskab seda printida!\n"
        -   title: Õpilased kasutavad käskudes suurtähti
            example:
                error_text: "Käsud ei tööta, kui nad algavad suure tähega.\n"
                error_code: "Küsi: „Miks mu kood ei tööta?“\nPrindi Sest ma kasutan suurtähti.\n"
                solution_text: "Eemalda suured tähed.\n"
                solution_code: "{ask} Miks mu kood nüüd töötab?\n{print} Sest ma ei kasuta enam suurtähti!\n"
        -   example:
                solution_text: "Vea parandamiseks lisa käsk {ask}.\n"
                solution_code: "{ask} Mis on sinu nimi?\n{echo} Sinu nimi on\n"
                error_text: "{echo} kordab vastust, mis anti {ask} käsule. Ilma käsuta {ask} ei tee {echo} mitte midagi.\n"
                error_code: "{echo} Sinu nimi on\n"
            title: Õpilased kasutavad {echo} ilma {ask}-ta
        -   title: Õpilased tahavad, et {echo} väljastaks nende vastuse (muutuja) lause keskel
            example:
                error_text: "Õige kah! Sellepärast nad järgmisel tasemel õpivadki kasutama muutujaid.\n"
                error_code: "{ask} Milline programmeerimiskeel on kõige lõbusam?\n{echo} on parim!\n"
                solution_text: "In level 1 we have to keep it at this:\n"
                solution_code: "{ask} Milline programmeerimiskeel on kõige lahedam?\n{echo} Parim on ...\n"
        -   title: 'Kilpkonn: Õpilased lasevad kilpkonnal ekraanilt välja jalutada'
            example:
                error_text: "Often students love to try out big numbers when using the turtle, which causes the arrow to walk off the screen.\n"
                error_code: "{forward} 300\n{turn} 90\n"
                solution_text: "In the example. students tend to think that the turn command doesn't work. Eventhough is does work, but you can't see it happening off screen. Use smaller numbers to prevent this from happening.\n"
                solution_code: "{forward} 100\n{turn} 90\n"
        -   title: "Kilpkonn: Õpilased üritavad kasutada käsku tagasi, aga seda käsku pole olemas"
            example:
                error_text: "Tagasi pole käsk.\n"
                error_code: "tagasi 100\n"
                solution_text: "Et kilpkonna tagurpidi liikuma panna, tuleb kasutada käsku {forward} ja negatiivset arvu. Näiteks:\n"
                solution_code: "{forward} -100\n"
        level: '1'
    -   sections:
        -   title: Õpilased teevad käskudes kirjavigu
            example:
                error_text: "Hedy ei tunne ära kirjaveaga käsku.\n"
                error_code: "prinndi Ära tee kirjavigu!\n"
                solution_text: "Õpetage oma õpilasi veateateid lugema. Nii on neil võimalus ise aru saada, mis valesti läks.\n"
                solution_code: "{print} Ära tee kirjavigu!\n"
        -   example:
                error_text: "Sel tasemel tutvuvad õpilased muutujatega. {ask} käsu kasutamine vajab muutujaid, aga õpilased kipuvad seda unustama.\n"
                error_code: "{ask} Mida te süüa sooviksite?\n"
                solution_text: "In this level you have to tell Hedy where to save your answer, so it can be used later on. This is called a variable.\n"
                solution_code: "order is What would you like to eat?\n"
            title: Õpilased unustavad, et käsk {ask} on muutunud
        -   title: 'Students try to use the echo command. '
            example:
                error_text: "For some students it might be frustrating to learn that the echo command doesn't work anymore. That's why it's very important to explain the advantages of using variables. For example you can use multiple variables in a code, and you can put them anywhere you like in a sentence!\n"
                error_code: "answer is ask Why doesn't echo work anymore?!\necho\n"
                solution_text: "Use a varible instead.\n"
                solution_code: "answer is ask Why doens't echo work anymore?!\nprint answer\n"
        -   example:
                error_text: "In the example below the word 'name' is used a a variable, but also as a normal text. The output of this code will be 'Hi my Hedy is Hedy'.\n"
                error_code: "name is Hedy\nprint Hi my name is name\n"
                solution_text: "So don't use a word you want to use in the text as a variable name. In level 4 this is solved with quotation marks.\n"
                solution_code: "name is Hedy\nprint Hi I'm name\n"
            title: Students use a variable name or as a normal word
        -   example:
                error_text: "A variable should be named with one word. You could use an underscore to connect two words. That counts as one.\n"
                error_code: "chosen door is ask Which door do you pick?\n"
                solution_text: "Add an underscore.\n"
                solution_code: "chosen_door is ask which door do you pick?\n"
            title: Students use long variable names containing two words.
        -   example:
                error_text: "In this example the student has used 'horse' and 'name' for the same variables.\n"
                error_code: "horse is ask What is your horse called?\nprint Your horse is called name\n"
                solution_text: "Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.\n"
                solution_code: "name is ask What is your horse called?\nprint Your horse is called name\n"
            title: Students might use two different names for the same variable
        level: '2'
    -   level: '3'
        sections:
        -   title: Students try to print whole lists
            example:
                error_text: "A list can't be printed. You can only print one item from the list with at random.\n"
                error_code: "groceries is apples, milk, chocolate\nprint groceries\n"
                solution_text: "To print a list of all the groceries, you simply need to put them after a print command. Else you can use the list to print one item with at random.\n"
                solution_code: "print apples, milk, chocolate\n\nor\n\ngroceries is apples, milk, chocolate\nprint groceries at random\n"
        -   title: Students use the name of a variable or list as regular text.
            example:
                error_text: "This problem probably occured in level 2 as well. Now it can happen with lists too.\n"
                error_code: "name is Hedy\nprint Hi my name is name\n\nor\n\nanimal is rhino, bee, swan\nprint The best animal is... animal at random\n"
                solution_text: "Don;t use the names of variables or lists in regular text to print. In level 4 this problem is solves with quotation marks.\n"
                solution_code: "name is Hedy\nprint Hi I'm name\n\nor\n\nanimals is rhino, bee, swan\nprint The best animal is... animals at random\n"
        -   title: Students forget at in at random
            example:
                error_text: "Like in the example\n"
                error_code: "birds is sparrow, seagull, robin\nprint birds random\n"
                solution_text: "This problem is solved by adding the word at.\n"
                solution_code: "birds is sparrow, seagull, robin\nprint birds at random\n"
        -   title: Students forget to use the print command when also using the at random command.
            example:
                error_text: "Or they will sometimes put at random at the beginning of the line.\n"
                error_code: "fruit is apple, cherry, banana\nfruit at random\n"
                solution_text: "Emphasize to your students that you always need a print to print text.\n"
                solution_code: "fruit is apple, cherry, banana\nprint fruit at random\n"
        -   title: Students forget to use commas in their lists
            example:
                error_text: "In a list items are seperated with a comma.\n"
                error_code: "pizzas is funghi tonno quattro stagioni\nprint pizzas at random\n"
                solution_text: "After each item on your list, there should be a comma\n"
                solution_code: "pizzas is funghi, tonno, quattro stagioni\nprint pizzas at random\n"
        -   title: Students try to use at random without a list.
            example:
                error_text: "For example\n"
                error_code: "clubs is Manchester United\nprint clubs at random\n"
                solution_text: "Hedy can't print anything at random, because there is no list to choose from.\n"
                solution_code: "clubs is Manchester United, Bayrn Munchen, FC Barcelona\nprint clubs at random\n"
        -   title: 'Students try to use add/remove without a list '
            example:
                solution_code: "names is Jake, Amy\nyour_name is ask Who are you?\nadd your_name to names\nprint names at random\n"
                error_text: "In the example below 'names' is not a list, but a variable. You cannot add anything to it.\n"
                error_code: "names is Jake\nyour_name is ask Who are you?\nadd your_name to names\nprint names at random\n"
                solution_text: "There has to be a list first, so you have to add a second name to turn names into a list, for example Amy. If you don't want amy on your list, you can use remove to remove it after.\n"
        -   title: Students forget to use to/from in add/remove.
            example:
                error_text: "Without to/from the add/remove command won't work.\n"
                error_code: "adventures is story, parrot, dice\nchoice is Which adventure do you like best?\nadd choice\nremove dice\nprint I love adventures at random\n"
                solution_text: "Hedy has to know which list the item should be added to/removed from.\n"
                solution_code: "adventures is story, parrot, dice\nchoice is Which adventure do you like best?\nadd choice to adventures\nremove dice from adventures\nprint I love adventures at random\n"
    -   sections:
        -   title: Students forget to use quotation marks on both sides of the text
            example:
                error_text: "In this level print and ask need a set of quotation marks. One before of the text and one after.\n"
                error_code: "print Hello\nmood is ask 'How are you?\n"
                solution_text: "Add the correct quotation marks.\n"
                solution_code: "print 'Hello'\nmood is ask 'How are you?'\n"
        -   title: Students use the wrong quotation marks
            example:
                error_text: "It is important to start your lesson by checking if the students know how to type a quotation mark properly. ELse they might use the \"double quotes\" or the `skewed one`.\n"
                error_code: "print `Welcome to the restaurant`\nfood is ask \"What would you like to order?\"\n"
                solution_text: "These are the correct quotation marks:\n"
                solution_code: "print 'Welcome to the restaurant'\nfood is ask 'What would you like to order?'\n"
        -   title: Students use an apostrophe in their text
            example:
                error_code: "print 'You're not allowed to type this'\n"
                error_text: "From this level on apostrophes are not allowed. They are often used in English when thyping contractions like you're, don't or what's.\n"
                solution_text: "You can choose to use the wrong grammar and just leave the apostrophe out. Or you could use the ` as an apostrophe.\n"
                solution_code: "print 'Youre allowed to type this'\nprint 'And you`re able to do this'\n"
        level: '4'
    -   sections:
        -   title: Students forget to use print in an if command
            example:
                error_text: "After students use if or else they forget to use a second command like print or ask.\n"
                error_code: "if name is Hedy 'Great!'\nelse 'Hedy is better!'\n"
                solution_text: "Add the print command to fix it.\n"
                solution_code: "if name is Hedy print 'Great!'\nelse print 'Hedy is better!'\n"
        -   example:
                error_code: "horse is ask 'What is your horse called?'\nif name is Bonfire print 'cool'\nelse print 'less cool!'\n"
                error_text: "In this example the student has used 'horse' and 'name' for the same variables.\n"
                solution_text: "Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.\n"
                solution_code: "horse is ask 'What is your horse called'\nif horse is Bonfire print 'cool!'\nelse print 'less cool!'\n"
            title: Students might use two different names for the same variable
        -   title: Students still forget the quotes on both sides.
            example:
                error_text: "If commandos can get very long and students tend to forget to use quotes.\n"
                error_code: "if name is Hedy print fun\nelse print 'meh!\n"
                solution_text: "Always use 2 quotes in a print command.\n"
                solution_code: "if name is Hedy print 'fun'\nelse print 'meh!'\n"
        -   example:
                error_code: "if 'name' is 'Hedy' print 'fun'\nelse print 'meh!'\n"
                solution_text: "Remove the quotes to get the code to work.\n"
                solution_code: "if name is Hedy print 'fun'\nelse print 'meh!\n"
                error_text: "In this level there are no quotes around variable names.\n"
            title: Students use quotes around variable names.
        -   title: Students use long variable names containing two words.
            example:
                error_text: "A variable should be named with one word. You could use an underscore to connect two words. That counts as one.\n"
                error_code: "chosen door is ask 'Which door do you pick?'\n"
                solution_text: "Add an underscore.\n"
                solution_code: "chosen_door is ask 'which door do you pick?'\n"
        -   example:
                error_text: "For example this student Hedy to tell all his friends that they are funny, but other classmates would be told that they are not.\n"
                error_code: "if name is Jesse, David, Souf print 'You are funny' else print 'You are not funny'\n"
                solution_text: "You could use the `in` command for that. It is explained in a higher level, but it does already work in level 5.\nAnother solution is to use multiple if commands and no else command. The disadvantage is that it won't tell the other classmates that they are not funny.\n"
                solution_code: "friends is Jesse, David, Souf\nname is ask 'Who are you?'\nif name in friends print 'You are funny'\nelse print 'You are not funny'\n\nor\n\nname is ask 'Who are you?'\nif naam is Jesse print 'You are funny'\nif naam is David print 'You are funny'\nif naam is Souf print 'You are funny'\n"
            title: Students want multiple answers to be correct
        -   example:
                error_code: "password is ask 'What is the password?'\nif password is password print 'Access granted'\nelse print 'Acces denied!'\n"
                solution_text: "Pick a different name for your variable.\n"
                solution_code: "secret_password is ask 'What is the password'\nif secret_password is password print 'Access granted!'\nelse print 'Access denied!'\n"
                error_text: "In the example below the password is 'password'. This will result in it always being correct.\n"
            title: The students make the variable name the same as the value in the if statement
        level: '5'
    -   sections:
        -   title: Students struggle with quotation marks
            example:
                error_text: "Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.\n"
                error_code: "print '5 + 5'\n"
                solution_text: "In this code the output screen will print '10'.\n"
                solution_code: "print 5 + 5\n"
        -   example:
                solution_text: "Or take it a step further like this.\n"
                error_text: "Some students will find it hard to do maths with variables. Try to show them very simple examples, like:\n"
                error_code: "age = ask 'How old are you?'\nprint 'Next year you will be ' age + 1\n"
                solution_code: "price = 0\nprint 'Welcome to our burger restaurant'\nburger = ask 'Would you like a burger?'\nif burger = yes price = price + 10\ndrink = ask 'Would you like a drink?'\nif drink = yes price = price + 4\nprint 'That will be ' price ' euros please'\n"
            title: Students struggle with the concept of doing maths with a variable
        level: '6'
    -   sections:
        -   title: Students forget one of the word of the repeat command, or they forget the print command
            example:
                error_text: "Make sure that the students know to use both the full repeat command and the print command.\n"
                error_code: "repeat 3 times 'For he`s a jolly good fellow'\nrepeat 3 print 'Which nobody can deny!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "repeat 3 times print 'For he`s a jolly good fellow'\nrepeat 3 times print 'Which nobody can deny!'\n"
        -   title: Students try to repeat multiple lines
            example:
                error_text: "In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.\n"
                error_code: "repeat 3 times drink = ask 'What would you like to drink?'\nprint drink\n"
                solution_text: "You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.\n"
                solution_code: "drink = ask 'What would you like to drink?'\nprint drink\ndrink = ask 'What would you like to drink?'\nprint drink\ndrink = ask 'What would you like to drink?'\nprint drink\n"
        -   example:
                error_text: "In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).\n"
                error_code: "repeat 100 times print 'How many times can I repeat this?'\n"
                solution_text: "Make sure the codes aren't too long\n"
                solution_code: "repeat 20 times print 'This is enough'\n"
            title: Students make programs that take too long to run
        level: '7'
    -   sections:
        -   title: Students use the indentation wrong
            example:
                error_text: "Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple codes before making a whole program with it.\n"
                error_code: "repeat 3 times\nprint 'hello'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "repeat 3 times\n    print 'hello'\n"
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                error_text: "For instance, in the code below the student wanted to take the drinks order of 3 people. But insted the program asked 3 times, but only wrote down one order.\n"
                error_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\nprint drink\n"
                solution_text: "In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.\nShowing your students these differences can help them understand why we need indentation to make our programs work.\n"
                solution_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\n    print drink\n"
        -   title: Students want to nest if statements, or put if statements inside a loop
            example:
                error_text: "In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.\nIn the next level this is allowed.\n"
                error_code: "birthday = ask 'Is it you birthday?'\nif birthday = yes\n    repeat 3 times\n        print 'Hip Hip Hooray!'\n"
                solution_text: "This is the correct code for this level:\n"
                solution_code: "birthday = ask 'Is it you birthday?'\nif birthday = yes\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n"
        -   title: Students make programs that take too long to run
            example:
                error_text: "In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).\n"
                error_code: "repeat 100 times\n    print 'How many times can I repeat this?'\n"
                solution_text: "Make sure the codes aren't too long\n"
                solution_code: "repeat 20 times\n    print 'This is enough'\n"
        -   example:
                error_code: "password is ask 'What is the password?'\nif password is password\n    print 'You can come in'\nelse\n    print 'You are not allowed'\n"
                solution_text: "You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.\n"
                solution_code: "password is ask 'What is the password?'\nif password is 'password'\n    print 'You can come in'\nelse\n    print 'You are not allowed'\n"
                error_text: "We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.\nIn line 2 the computer is asked to check wheter the variable password is the same as the variable password, so itself. Which means the answer is alway yes.\nSo with this code the answer will always be 'You can come in' no matter what the player fills in.\n"
            title: Students use the if command to check if the variable value is the same as the variable name
        level: '8'
    -   level: '9'
        sections:
        -   example:
                solution_text: "This is the correct code. Try to keep track of all the different constructions when putting if statements inside other if statements.\n"
                solution_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n    if book is yes\n        print 'Robin buys the book and goes home'\n    else\n        print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
                error_text: "The hardest part about this level is getting the indentation right. Students love nesting if statements, sometimes even inside other nested if statements. Keeping track of indentation can get pretty tough.\n"
                error_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n        if book is yes\nprint 'Robin buys the book and goes home'\nelse\n    print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
            title: Students make mistakes with indentation
    -   level: '10'
        sections:
        -   title: Students so not use the for command correctly
            example:
                error_text: "We often see that students try to print the list (in the example animals) instead of the items of the list.\n"
                error_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animals\n"
                solution_text: "The word animals in the last line should be changed into animal.\n"
                solution_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animal\n"
        -   example:
                error_text: "Students tend to forget to use indentation after a for command.\n"
                error_code: "animals is dog, cat, blobfish\nfor animal in animals\nprint 'I love ' animals\n"
                solution_text: "You should use indentation after a for command.\n"
                solution_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animal\n"
            title: Students forget the indentation
    -   level: '11'
        sections:
        -   title: Students forget to use indentation
            example:
                error_text: "Make sure that the students use indentation.\n"
                error_code: "for i in range 1 to 5\nprint i\n"
                solution_text: "This is the correct code:\n"
                solution_code: "for i in range 1 to 5\n    print i\n"
        -   title: Students don't understand the i
            example:
                error_text: "Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.\nFor example, this code:\n"
                error_code: "for i in range 1 to 5\nprint i\n"
                solution_text: "Could just as well be replaced with this code. It works the same.\n"
                solution_code: "for banana in range 1 to 5\n    print banana\n"
    -   level: '12'
        sections:
        -   title: Students forget quotation marks
            example:
                error_text: "Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the if command.\n"
                error_code: "superheroes = Spiderman, Batman, Iron Man\nsuperhero = superheroes at random\nif superhero = Batman\n    print 'IM BATMAN!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "superheroes = 'Spiderman', 'Batman', 'Iron Man'\nsuperhero = superheroes at random\nif superhero is 'Batman'\n    print 'IM BATMAN!'\n"
        -   title: Students use quotation marks on numbers they want to use for calculations
            example:
                error_text: "You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.\nIn the example below, you can't do maths with the number 25, because it's in quotation marks.\n"
                error_code: "score = '25'\nanswer is ask 'Do you want a point?'\nif answer is 'yes'\n    score = score + 1\n    print score\n"
                solution_text: "This is the correct code:\n"
                solution_code: "score = 25\nanswer is ask 'Do you want a point?'\nif answer is 'yes'\n    score = score + 1\n    print score\n"
        -   title: Students use commas instead of periods in decimal numbers
            example:
                error_text: "Decimal numbers can be used from this level on, but you can't use commas.\n"
                error_code: "print 2,5 + 2,5\n"
                solution_text: "This is the correct code:\n"
                solution_code: "print 2.5 + 2.5\n"
    -   sections:
        -   example:
                error_text: "Both commands might appear similar, but their functions are very different.\n"
                error_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' or time is 'yes'\n    print 'Lets play!'\n"
                solution_text: "In this case, the person should answer yes on both questions, so you should use `and`.\n"
                solution_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' and time is 'yes'\n    print 'Lets play!'\n"
            title: Students confuse `and` with `or`
        level: '13'
    -   level: '14'
        sections:
        -   title: Students confuse the < and > signs
            example:
                error_text: "Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.\n"
                error_code: "age = ask 'How old are you?'\nif age < 12\n    print 'You are older than I am!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "age = ask 'How old are you?'\nif age > 12\n    print 'You are older than I am!'\n"
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_text: "These signs are probably new for most students. Make sure to explain these signs to your students.\n"
                error_code: "name = ask 'What is your name?'\nif name =< 'Hedy'\n    print 'You are not Hedy'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "name = ask 'What is your name?'\nif name != 'Hedy'\n    print 'You are not Hedy'\n"
        -   title: Students forget to use the == sign
            example:
                error_text: "In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.\n"
                solution_text: "This is the correct code:\n"
                solution_code: "name = ask 'What is your name?'\nif name == 'Hedy'\n    print 'You are cool!'\n"
                error_code: "name = ask 'What is your name?'\nif name = 'Hedy'\n    print 'You are cool!'\n"
    -   level: '15'
        sections:
        -   title: Students forget indentation in the while loop
            example:
                error_text: "Indentation is often hard for students.\n"
                error_code: "answer = 0\nwhile answer != 25\nanswer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "answer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n"
    -   sections:
        -   title: Students forget the brackets
            example:
                error_text: "From this level on lists should be in brackets.\n"
                error_code: "icecream = 'starwberry', 'chocolate'\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   example:
                error_text: "From this level on lists should be in brackets.\n"
                error_code: "icecream = ('starwberry', 'chocolate'}\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
            title: Students use the wrong brackets
        -   example:
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
            title: Students forget the quotation marks while focussing on the brackets
        -   title: Students still use the old at random command
            example:
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream at random ' icecream'\n"
                solution_text: "This is the correct code:\n"
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        level: '16'
    -   level: '17'
        sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_text: "The elif command needs a condition behind it. It cannot be used like else, without a condition.\n"
                error_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif:\n    print 'I like green'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif color == yellow:\n    print 'yellow is alright'\nelse:\n    print 'I like green'\n"
        -   example:
                error_code: "answer = ask 'How are you doing?'\nif answer is 'great'\n    print 'Me too!'\nelif answer is 'bad'\n    print 'Let me cheer you up!'\nelse\n    print 'Im great!'\n"
                solution_text: "This is the correct code:\n"
                error_text: "After each command that requires indentation, a colon should be used.\n"
                solution_code: "answer = ask 'How are you doing?'\nif answer is 'great':\n    print 'Me too!'\nelif answer is 'bad':\n    print 'Let me cheer you up!'\nelse:\n    print 'Im great!'\n"
            title: Students forget the colon
    -   sections:
        -   title: Students forget to use the brackets
            example:
                error_code: "print 'my name is Hedy!'\n"
                error_text: "Students will forget to put brackets around their text.\n"
                solution_text: "This is the correct code:\n"
                solution_code: "print('my name is Hedy!')\n"
        -   title: Students will still use the ask command
            example:
                error_text: "The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.\n"
                error_code: "print('My name is Hedy!')\nname = ask('What is your name?')\nprint('So your name is ', name)\n"
                solution_text: "This is the correct code:\n"
                solution_code: "print('My name is Hedy!')\nname = input('What is your name?')\nprint('So your name is ', name)\n"
        -   title: Students might use the brackets as quotation marks
            example:
                error_text: "They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.\n"
                error_code: "temperature = 25\nprint('It is ') temperature ('degrees outside')\n"
                solution_text: "This is the correct code:\n"
                solution_code: "temperature = 25\nprint('It is ', temperature, 'degrees outside')\n"
        level: '18'
    key: common_mistakes
    intro: "Oma vigadest on võimalik õppida, eriti koodi kirjutades!\nVigade tegemine on vältimatu ja hea võimalus õppimiseks, kuid õpetajate jaoks võib olla veale õige lahenduse leidmine suureks väljakutseks!\nEriti siis, kui tasemete edenedes kood aina pikemaks kasvab. Sellepärast oleme koostanud nimekirja igal tasemel sageli esinevatest vigadest ja nende lahendustest.\n"
start-sections:
-   title: "Textual programming made easy!"
    text: |
        Many schools and teachers around the world want to teach their students programming. Initially this is often done with playful tools, ranging from the Beebot robot to
        Scratch Junior or Scratch. After using such tools, kids often want to move to more powerful, textual programming languages, like Python.

        Python however is hard, because it is only available in English, and requires learners to learn complex programming concepts and syntax at once.
        Hedy is the easy way to get started with textual programming languages! Hedy is free to use, open source, and unlike any other textual programming language in three ways.

        1. Hedy is multi-lingual, you can use Hedy in your own language
        2. Hedy is gradual, so you can learn one concept and its syntax a time
        3. Hedy is built for the classroom, allowing teachers to fully customize their student's experience
-   title: "Multi-lingual programming"
    text: |
        While almost all textual programming language have keywords in English, such as `for` or `repeat`, Hedy can be used in any language! We currently support 39 different languages, including Spanish, Arabic, Simplified Chinese and Hindi. If your language is not available you can always start a a new translation.
-   title: "Step by step learning"
    text: |
        Learning a programming language can be overwhelming, since learners have to learn concepts (for example if-else or loops) and syntax (like quotation marks or round brackets) at the same time. In Hedy, concepts are first introduced with little syntax and then refined. A scientifically proven way to learn!
-   title: "Built for the classroom"
    text: |
        Hedy is suitable for kids aged 10 and up and designed for classroom use.
        Teachers can use our free, built-in lesson plans, but can also author their own lessons and load these into the Hedy user interface.
-   title: "Programming in context"
    text: |
        Hedy shows programming in the broadest way possible, and can be used in variety of exciting ways. Hedy allows for the creation of digital and interactive stories, colorful drawings that can be shown on the screen but also drawn with a pen plotter or embroidered on a shirt, and can be used to create games or apps with buttons and keyboard actions.
-   title: "Is Hedy free?"
    text: |
        Yes! Hedy is 'Open source', which means that everyone can help us make Hedy better.
        You can find our code on [GitHub](https://github.com/hedyorg/hedy).
        If you like Hedy and want to contribute, we accept (and are very grateful for) [donations](https://github.com/sponsors/hedyorg)!

-   title: "Do I need to install anything?"
    text: |-
        No. Hedy works in the browser, which is the program you are using to look at this page. Probably Chrome or Edge or Firefox. Hedy also works on phones and tablets.
-   title: "Do I need programming experience to teach with Hedy?"
    text: |-
        No, that is not needed. All concepts are explained in the slides and in the interface for learners.
        If you create a free teacher's account, you also get access to the teacher's manual with information on how to teach
        and frequently made mistakes.

learn-more-sections:
-   title: Do you like Hedy?
    text: "We love to hear from you!\n\n[Click here to send us a message](mailto:hello@hedy.org \"About Hedy\")\n"
-   title: Found a bug?
    text: "[Let us know on GitHub](https://github.com/hedyorg/hedy/issues/new/choose)\n"
-   title: Want to help?
    text: "The easiest way is to help with [translating Hedy](https://github.com/hedyorg/hedy/blob/main/TRANSLATING.md)\n\nBelow the current status, help us complete a language, or add a new one.\n<a href=\"https://hosted.weblate.org/engage/hedy/\">\n<img src=\"https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg\" alt=\"Translation status\" /></a>\n"
join-sections:
-   text: "# There are three ways in which you can support Hedy!\n"
    title: Supporting Hedy
-   title: Improving the language
    text: "The gradual and multi-lingual nature of Hedy create a lot of interesting technical challenges.\nFind those issues on [Github](https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage).\n"
-   text: "Not a programmer? No problem! Another way to support Hedy is by [translating keywords, error messages, adventures are other content](https://github.com/hedyorg/hedy/blob/main/TRANSLATING.md)\n\nThis is the current status, help us complete a language, or add a new one!\n<a href=\"https://hosted.weblate.org/engage/hedy/\">\n<img src=\"https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg\" alt=\"Translation status\" /></a>\n"
    title: Translating Hedy
-   title: Help teachers get started
    text: "Hedy is designed to support teachers in providing programming lessons in class. We have specific teacher features like the option to create a class, customize it and see how your students are doing.\nIf you like Hedy, you can reach out to schools that you know to help teachers get started! We can help you find schools or teachers via [Discord](https://discord.gg/8yY7dEme9r).\n"
