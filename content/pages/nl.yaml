title: Hedy documentatie
home-sections:
-   title: Makkelijk leren programmeren!
    text: |-
        Veel scholen leren hun leerlingen al programmeren, in eerste instantie vaak met de Beebot of met Scratch, maar richting de bovenbouw van de basisschool en de
        onderbouw van de middelbare school zijn leerlingen toe aan een taal met tekstcodes zoals Python.

        Maar leren programmeren met Python of andere teksttalen is moeilijk, omdat de codes in het Engels zijn en
        omdat je veel tegelijk moet leren. Hedy is dan dé oplossing! Gratis te gebruiken en beter dan bestaande talen om
        drie redenen.

        1. Hedy is meertalig, dus je kan in het Nederlands programmeren
        2. Hedy is gradueel, dus je leert de concepten één voor één
        3. Hedy is gemaakt voor in de klas, je kan als docent de interface gemakkelijk aanpassen voor jouw klas
-   title: Programmeren in het Nederlands
    text: De meeste teksttalen werken met Engelse codes, maar met Hedy kan je in je eigen taal programmeren, dus gewoon in het Nederlands (of Turks, of Arabisch, of één van onze andere 47 talen). Staat jouw taal nog niet op de lijst? Dan kan je altijd zelf een nieuwe vertaling beginnen.
-   title: Stap voor stap leren
    text: Leren programmeren kan soms lastig zijn omdat je tegelijk concepten moet leren (zoals een als-dan of herhaling) en de syntax van de concepten (zoals aanhalingstekens en dubbele punten). In Hedy koppelen we dat los, je leert eerst een concept met simpele syntax, en later voegen we complexere syntax toe. Een bewezen manier om te leren programmeren!
-   title: Gemaakt voor in de klas
    text: |-
        Hedy is gemaakt voor leerlingen vanaf 10, en is speciaal ontworpen om in de klas te gebruiken.
        Zo kan je gebruik maken van de ingebouwde lessenserie met slides en opdrachten, maar kan je ook je eigen lessen maken en delen met andere docenten.
-   title: Programmeren in context
    text: Hedy laat leerlingen de breedte van programmeren zien. Je kan met Hedy interactieve verhalen maken, of tekeningen maken op je scherm of om te printen met een plotter of te borduren op een shirt! Of je kan je eigen spelletjes of apps maken met knoppen en keyboard acties.
-   title: Is Hedy gratis?
    text: |-
        Ja! Hedy is naast gratis ook 'Open source', dat betekent dat iedereen die al kan programmeren, ons kan helpen om nieuwe stukjes van Hedy te maken.
        Je kunt de code vinden op <a href="https://github.com/hedyorg/hedy" target="_blank">Github</a>.
        Als je Hedy leuk vindt, dan vinden we een <a href="https://github.com/sponsors/hedyorg?locale=nl" target="_blank">donatie</a> heel fijn!
-   title: Moet ik iets installeren?
    text: Nee, Hedy werkt in je 'browser', dat is het programma waarmee je nu ook deze site bekijkt, bijv. Chrome, Edge, of Firefox. Hedy doet het ook op je telefoon of je tablet.
-   title: Heb ik programmeerkennis nodig om Hedy lessen te geven?
    text: |-
        Nee, je kan meteen starten! Alle concepten worden stap voor stap uitgelegd in de slides en in de omgeving voor leerlingen.
        En als je een gratis lerarenaccount aanvraagt krijg je meteen toegang tot de lerarenhandleiding met uitleg over hoe je een les start en
        een lijst met veelgemaakte fouten per level.
join-sections:
-   title: Meehelpen om Hedy te laten groeien
    text: "# Je kunt Hedy op drie manieren helpen!"
-   title: De Hedy taal verbeteren
    text: |-
        Omdat Hedy een graduele taal is met commando's in meerdere talen is er nog een hoop te programmeren!
        Bekijk de bijbehorende issues op onze <a href="https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage" target="_blank">Github</a>.
-   title: Hedy vertalen
    text: |-
        Ben je geen programmeur? Geen probleem! Je kan ons ook helpen door de commando's, avonturen en foutmeldingen van Hedy <a href="https://github.com/hedyorg/hedy/wiki/Hedy-Translation-Tutorial" target="_blank">te vertalen</a>.
        Hieronder zie je de huidige status, help ons door een taal compleet te maken of voeg een nieuwe toe.
        <a href="https://hosted.weblate.org/engage/hedy/">
        <img src="https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg" alt="Translation status" /></a>
-   title: Help docenten op weg met Hedy
    text: |-
        Hedy is gemaakt voor docenten, zodat ze makkelijk programmeerlessen kunnen geven op school. Kan jij al programmeren?
        Dan kan je misschien een school in de buurt helpen te beginnen met Hedy. Op onze <a href="https://discord.gg/8yY7dEme9r" target="_blank">Discord</a> kunnen we je koppelen aan docenten.
learn-more-sections:
-   title: Stichting Hedy
    text: |-
        Het Hedy plaform wordt beheerd door de Stichting Hedy, Sportmanstaat 8, 2341 JG Oegstgeest, KvK nummer 94013985.

        Het bestuur van Stichting Hedy bestaat uit:

          * Felienne Hermans, voorzitter
          * Eelko Huizing, penningmeester
          * Renée Merbis, secretaris

        Het bestuur voert haar functie op vrijwillige basis uit en ontvangt geen salaris of andere beloning voor de verrichte werkzaamheden. De bestuursleden hebben recht op een onkostenvergoeding die zijn gemaakt voor het uitoefenen van de functie. 

-   title: We duiken nog dieper!
    text: |-
        Wil je meer weten? Felienne gaf een praatje op de European Code Week 2020 (in het Engels):

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/R2U9MEowYag?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

-   title: Hedy in het nieuws
    text: |-
        Websites en nieuwsbrieven hebben geschreven over Hedy sinds onze uitgifte in begin 2020. We houden hier een lijst bij:
          * [Java Magazine 04.2023](images/Hedy_Javamagazine2023.pdf)
          * [Tech Optimism - A Solution to the IT Shortage (Dutch), August 2022](https://pom.show/2022/08/12/een-oplossing-voor-het-it-tekort/)
          * [Codeweek Podcast, July 2022](https://codeweek.eu/podcast/26)
          * [Heise.de (German), Januari 2022](https://www.heise.de/news/Hedy-die-mitwachsende-Programmiersprache-6336264.html)
          * [Strumenta, November 2021](https://tomassetti.me/teaching-programming-with-hedy/)
          * [Vives (Dutch), CodeWeek Special October 2021](images/Vives-174-Codeweek.pdf)
          * [CodeWeek.eu - Haunted House Challenge, September 2021](https://codeweek.eu/2021/challenges/haunted-house)
          * [Opensource.com, April 2021](https://opensource.com/article/21/4/hedy-teach-code)
          * [IO Magazine, April 2021](https://ict-research.nl/wordpress/wp-content/uploads/2021/04/IO-magazine-NR1-2021_web.pdf)
          * [Ingeniería De Software (Spanish), February 2021](https://ingenieriadesoftware.es/hedy-mejor-lenguaje-ensenar-programacion-ninos/)
          * [Hello World Magazine, February 2021](images/Hello_World_15_Hedy.pdf)
          * [Discoro, January 2021](https://discoro.wordpress.com/2021/01/09/hedy-gradually-learning-a-programming-language/)
          * [Felienne wins the Dutch award for ICT research for Hedy, January 2021](https://www.nwo.nl/en/news/felienne-hermans-receives-dutch-prize-ict-research-2021)
          * [SlashDot, August 2020](https://news.slashdot.org/story/20/08/17/024248/scientist-proposes-a-new-programming-language-for-teaching-coding-and-python)
          * [GenBeta (Spanish), August 2020](https://www.genbeta.com/desarrollo/nuevo-lenguaje-para-ensenar-programacion-a-ninos-como-se-ensena-a-leer-escribir-forma-gradual-niveles)
          * [Developpez (French), August 2020](https://programmation.developpez.com/actu/308095/Une-scientifique-propose-un-nouveau-langage-de-programmation-pour-enseigner-aux-enfants-le-codage-informatique-au-travers-d-une-approche-graduelle-implementee-en-Python-sur-13-paliers/)
          * [Vives (Dutch), October 2020](images/artikel_vives.pdf) "Met Hedy stap voor stap leren programmeren"
          * [Leiden University, April 2020](https://www.universiteitleiden.nl/en/news/2020/03/looking-to-distract-the-kids-while-you-work-from-home-get-them-programming)
          * [Mare (Dutch), April 2020](https://www.mareonline.nl/cultuur/computercode-voor-de-kids/)
          * [AG Connect (Dutch), April 2020](https://www.agconnect.nl/artikel/stapsgewijs-python-leren-programmeren-met-nieuwe-taal-hedy)
start-sections:
-   title: Beginnen met Hedy
    text: |-
        Welkom bij Hedy, wij zijn blij jouw te helpen met het starten met Hedy.

        Onze [Leraren Handleiding](https://www.hedy.org/for-teachers/manual) heeft een overzicht van alle mogelijkheden in detail, echter deze pagina heeft een beknopte versie zodat je dat weet wat het is voordat je er in duikt. 

        Een paar hoogtepunten die belangrijk zijn om te weten: 
        * Hedy is een instrument ontworpen om het managen van een klas met kinderen die programmeren! Jij kan je eigen lessen creëren, lesplannen en volgen hoe kinderen het doen. 
        * Jij hoeft niet veel te weten over programmeren als je er mee begint, Heby werkt voor stap voor stap, ook voor jou!
        * Jij kunt Hedy in jouw eigen moedertaal gebruiken, omdat het vertaald is in heel veel talen.
        * Ieder kind kan programmeren!! Hedy is speciaal behulpzaam voor kinderen met visuele beperkingen omdat het allemaal hardop kan oplezen, zonder de noodzaak van het gebruik van een muis..
        * Wij zijn hier om te helpen, je kunt ons vinden bijvoorbeeld op [Discord](https://discord.gg/8yY7dEme9r) of je kan [mail-ons](hello@hedy.org).
-   title: Leraren over Hedy
    text: |-
        Een tijdje geleden hebben we een enquête onder leraren gehouden.
        We vroegen naar ideeën voor verbetering en Hedy's beste eigenschappen.
        Hieronder een aantal van de antwoorden:

        Simpele interface en goede voorbeelden. *(NL): groep 6-8*

        Meertalig programmeren en het hele graduele programmeren zelf. *(US) middelbare school*

        Het graduele introduceren van programmeren. *(Australië) middelbare school*

        De constructie is zo goed! *(NL) onderbouw HAVO-VWO*

        Ik kan de klas goed volgen. *(NL) groep 7-8*

        Gaat automatisch verder. *(NL) 2 HAVO-VWO*

        Zowel dat de uitleg in het NL kan (en code in EN) en dat het opbouwt in mogelijkheden.
        *(NL) plus klas groep 7*

        De 'echtheid' van programmeren, het lijkt op de realiteit. *(NL) plus klas groep 4-8*

        Stap voor stap activiteiten. Leuke activiteiten. *(NL) 1-3 HAVO-VWO*

        Hedy en haar graduele levels.... wat een idee!
        Ik wil jullie persoonlijk bedanken voor het maken hiervan. Ik kan jullie niet genoeg danken. Ik heb nog nooit zoveel enthousiasme in mijn klas gezien,
        als met Hedy. We zijn tot level 5 gegaan en zijn van plan nog een extra week in de klas en labs door te gaan voordat we overstappen op Python.
        *Pakistan*

        Ik vind Hedy echt heel gaaf en het is mooi qua opzet, wat het geschikt maakt voor basisonderwijs.
        Hedy's graduele concept werkt heel goed.
        De korte uitleg aan het begin van ieder level en de korte voorbeeldjes helpen de kinderen snel op weg met de nieuwigheden in het level.
        De verschillende avonturen die ze kunnen kiezen werken erg goed.
        Je ziet de kinderen de avonturen kiezen die ze aanspreekt en ze werken daarmee door de levels.
        Hedy is erg leuk voor kinderen die al goed zijn in programmeren en die een voorproefje willen van echt programmeren.
        Het is een goede voorbereiding op voortgezet onderwijs als daar meer ICT wordt onderwezen.
        *(NL) Montessori school*

        <img width="500px" src="static/images/teacherfeedback/Fkids1.JPG"></img>
teacher-guide:
-   title: Introductie Hedy
    key: intro
    subsections:
    -   title: Wat is Hedy?
        text: |-
            Hedy is een tekstuele programmeertaal speciaal ontwikkeld voor jongeren.
            In tegenstelling tot andere programmeertalen voor kinderen zoals Scratch, maakt Hedy geen gebruik van codeblokken, maar is het een tekstuele programmeertaal.
            Met Hedy leer je dus codes typen zoals de echte programmeurs dat doen, maar in kleine stapjes en met speelse opdrachten.
            Daarnaast kun je met Hedy programmeren in je eigen voorkeurstaal. Je kunt dus kiezen voor Nederlandse commando's!
            Zo functioneert Hedy als opstapje naar de talen zoals Python op een laagdrempelige en vooral leuke manier!
            Hier vind je een (Engelstalige) <a href="https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s" target="_blank">video</a> over hoe Hedy tot stand is gekomen.
    -   title: Doelgroep
        text: |-
            Hedy is ontwikkeld met het oog op kinderen in de bovenbouw van de basisschool en de onderbouw van het voortgezet onderwijs.
            Het is belangrijk dat de leerlingen goed kunnen lezen, dus AVI-M5 is wel een vereiste.
            De leerlingen (en leraren!) hoeven geen programmeerervaring te hebben om met Hedy aan de slag te kunnen.
    -   title: Hoe werkt Hedy?
        text: Hier vind je een <a href="https://www.youtube.com/watch?v=CvButplmN64" target="_blank">introductievideo</a> over Hedy, waarin Felienne de basis uitlegt.
    -   title: Apparaten
        text: |-
            Hedy werkt via internet en werkt op alle apparaten waar een browser (Google Chrome, Firefox, Edge etc) op staat, dus laptops, Chromebooks, tablets en telefoons zijn allemaal geschikt.
            Je hoeft niets te downloaden om met Hedy te kunnen werken, ga gewoon naar de website en dan ben je er al helemaal klaar voor!
    -   title: De Hedy Community
        text: |-
            Alle Hedy leerkrachten, programmeurs en andere fans zijn welkom op onze <a href="https://discord.gg/8yY7dEme9r" target="_blank">Discord server</a>. Dit is een goede plek om te praten over Hedy: We hebben kanalen waar je gave projecten en lesideeën kunt laten zien, kanalen om fouten (bugs) te melden en kanalen om te kletsen met andere leerkrachten en het Hedy team.
            <a href="https://www.youtube.com/watch?v=Lyz_Lnd-_aI" target="_blank">Hier</a> vind je een (Engelstalige) video over hoe jij je kunt aansluiten bij onze community.
    -   title: Hedy en de AVG
        text: |-
            Organisaties in de EU zijn verplicht zich te houden aan de AVG (Algemene Verordening Gegevensbescherming) indien persoonsgegevens verwerkt worden. 

            Omdat dat voor veel scholen een complex vraagstuk is, kun je alle programmeer-functionaliteiten van Hedy gebruiken zonder persoonsgegevens te delen. 
            De allereenvoudigste manier hiervoor is Hedy gebruiken zonder het aanmaken van accounts voor leerkracht en leerlingen. Alle functionaliteit is dan beschikbaar, muv van personalisering van levels, het opslaan van programma's van leerlingen en het bekijken van hun voortgang. Dat is beperkend, maar er zijn scholen die Hedy op die manier inzetten.

            Een tweede manier is om als leerkracht een account aan te maken met een mailadres zonder persoonsgegevens, bijv "leraar25@email.com". Behalve een mailadres, alleen nodig voor het resetten van je wachtwoord, hoef je geen persoonsgegevens te delen als je een lerarenaccount aanmaakt.
            Vervolgens kan je met je leerkrachtenaccount ook anonieme accounts aanmaken voor leerlingen, bijv regenboog-leerling1, regenboog-leerling2 etc (zie verder: Onderwijsvoorbereidingen). Op die manier kan je alle functionaliteit van Hedy gebruiken zonder het delen van persoonsgegevens van jezelf of je leerlingen.

            Mocht dit voor jouw context niet voldoen, dan kunnen we een dan kunnen we een verwerkersovereenkomst tekenen voor het verwerken van jullie persoonsgegevens.
-   title: Tutorial
    key: tutorial
    subsections:
    -   title: Tutorial
        text: Wil je de tutorial van Hedy (nog eens) volgen? Klik dan <a href="https://hedy.org/tutorial" target="_blank">hier</a>.
-   title: Onderwijsvoorbereidingen
    key: voorbereidingen
    subsections:
    -   title: Voor leerkrachten
        text: Je kunt je lessen voorbereiden op de pagina <a href="https://hedy.org/for-teachers" target="_blank">Voor Leerkrachten</a>. Op deze pagina vind je alles wat je nodig hebt om les te geven met Hedy, zoals je klassen, je avonturen en slides. Alle functionaliteiten van deze pagina worden hieronder verder uitgelegd.
    -   title: Een klas aanmaken
        text: |-
            Als leerkracht kun je een klas aanmaken voor je leerlingen.
            In deze klas kun je de accounts en programma's van de leerlingen bekijken en hun voortgang bijhouden.
            <a href="https://www.youtube.com/watch?v=Y3RTIWftJQg" target="_blank">Deze video</a> laat je zien hoe je snel een klas aanmaakt.
    -   title: Een klas dupliceren
        text: |-
            Geef je les aan meerdere klassen? Dan hoef je niet elke klas apart te personaliseren. Maak simpelweg één klas, personaliseer de klas (zie het kopje 'een klas personaliseren'), en dupliceer de klas zo vaak als je wilt.
            Je kunt de klas dupliceren op de 'Voor Leerkrachten' pagina. Als je een klas dupliceert, dan kopieer je alle instellingen in die klas ook. Dit betekent dat alle levels en avonturen die je hebt uitgeschakeld voor je klas, ook voor de gedupliceerde klas(sen) uitgeschakeld zullen zijn.
            De leerlingaccounts en tweede leerkrachtaccounts in je klas worden niet naar de nieuwe klas gekopieerd.
    -   title: Voeg een tweede leerkracht toe
        text: |-
            Ben je niet de enige leerkracht in een klas? Dan kun je nu een tweede leerkracht toevoegen aan een klas. Ga naar de 'Voor leerkrachten' pagina en klik op de klas. Kies daarna 'leerkracht toevoegen' en vul de gebruikersnaam van je collega in.
            Je collega krijgt nu een uitnodiging in zijn/haar account. Om de uitnodiging te accepteren of af te wijzen, klikt je collega op zijn/haar gebruikersnaam in de rechterbovenhoek en kiest 'mijn account'.
            Zodra de leerkracht de uitnodiging heeft geaccepteerd kan hij/zij de klas ook personaliseren.
            Om een tweede leerkracht te verwijderen uit jouw klas, ga je naar de klassenpagina. De leerkracht die de klas aangemaakt heeft, kan niet verwijderd worden uit de klas.
    -   title: Een klas personaliseren
        text: |-
            Je kunt de klas aanpassen naar jouw wensen en de avonturen kiezen die beschikbaar zijn voor jouw leerlingen. Op deze manier kun je het aantal zichtbare avonturen en levels beperken en zo kun je zelf kiezen waar de leerlingen aan werken.
            Klik op jouw klas op de 'Voor Leerkrachten' pagina en kies 'Klas personaliseren'. Op deze pagina kun je allerlei instellingen vinden om Hedy nog makkelijker te gebruiken in de klas.

            **Avonturen selecteren**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df38cbb2-468e-4317-ac67-92eaf4212adc" width="1000">
            Hier kun je avonturen selecteren en op volgorde zetten. De roze tabjes zijn avonturen met nieuwe commando's. De grijze tabjes zijn normale avonturen. Om de volgorde van de avonturen aan te passen kun je de tabjes slepen. We raden echter aan dit niet te doen, aangezien het Hedy team ervoor gezorgd heeft dat de avonturen standaard op volgorde van makkelijk naar moeilijk staan.
            Wil je een avontuur verwijderen voor jouw leerlingen, klik dan op het kruisje op het tabje van het avontuur. .
            <img src="https://github.com/hedyorg/hedy/assets/80678586/0ddd10b5-ef60-4480-a0c4-fc9a0f323baa" width="300">
            Wil je avonturen toevoegen, bijvoorbeeld je eigen avontuur of een avontuur dat je per ongeluk verwijderd hebt, gebruik dan dit menu. Klik simpelweg op het gewenste avontuur, het avontuur verschijnt dan (weer) in het rijtje avonturen. Om je wijzigingen te verwijderen klik je op 'Reset'.

            **Openingsdata**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/4e59acfa-4772-429f-8328-babb43c942d5" width="300">
            Met deze functie kun je openingsdata instellen voor de levels. Zo kun je vooraf een lesplan maken zonder elke week nieuwe levels open te hoeven zetten.
            Wil je hier geen gebruik van maken? Geen probleem, laat dit gebied dan leeg.

            **Ontgrendel level scores**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/99a34dab-f112-459e-bfd1-07618be4715a" width = "1000">
            Deze optie zorgt voor een norm die de leerlingen moeten halen als quizcijfer, voordat zij door mogen naar het volgende level. Als je bijvoorbeeld '80' invult, dan moeten de leerlingen minstens 80% goede antwoorden geven op de quiz. Halen ze de norm niet? Dan mogen ze niet door naar het volgende level en moeten ze de quiz herkansen.
            Wil je hier geen gebruik van maken? Laat het vakje dan leeg.

            **Overige instellingen**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/a8491d67-6d6e-42a7-b672-fd3d083a76f8"/>
            Er is nog een aantal instellingen die handig kunnen zijn bij het gebruik van Hedy. De eerste optie,verplichte programmeursmodus, zorgt ervoor dat de leerlingen alleen nog maar een invoer- en uitvoerscherm te zien krijgen. De avonturen en spiekbriefjes zijn zo niet meer beschikbaar. Dit kan handig zijn als je bijvoorbeeld een toets wil afnemen.
            Programmeursmodus is ook beschikbaar voor de leerlingen als vrije keuze, als je deze optie niet selecteert.

            Wil je alle leerlingen weergeven in de klassen highscore, dan kun je de tweede optie selecteren.
            Met alle andere opties kun je dingen verstoppen op de site. Hierdoor raken de leerlingen wellicht minder afgeleid.

            **Opslaan**
            <img src="https://github.com/hedyorg/hedy/assets/80678586/df179df3-3073-4d15-bba6-62e58fb675be" width="300">
            Vergeet je wijzigingen niet op te slaan als je klaar bent met het personaliseren van de klas.
    -   title: Leerlingaccounts
        text: |-
            Er zijn 2 manieren om studenten toe te voegen aan jouw klas: Je kunt accounts voor de aanmaken of je kunt hen zelf accounts laten aanmaken.

            **Jij maakt accounts voor je leerlingen**
            De makkelijkste manier om leerlingen aan jouw klas toe te voegen is door zelf accounts aan te maken voor je leerlingen. Dit doe je door te klikken op de knop 'maak leerlingaccounts' en gebruikersnamen en wachtwoorden voor ze in te vullen.
            Ze kunnen inloggen met de inloggegevens die jij hebt gekozen. Daarna kunnen ze de inloggegevens zelf aanpassen, zonder uit de klas verwijderd te worden.
            <a href="https://www.youtube.com/watch?v=eEQvik-Ce5M" target="_blank">Deze video</a> laat de snelste en makkelijkste manier zien om leerlingaccounts aan te maken voor je klas.

            **Leerlingen maken hun eigen accounts**
            De leerlingen kunnen ook zelf een account aanmaken, net als jij hebt gedaan. Om ze vervolgens aan jouw klas toe te voegen, kun je ze de uitnodigingslink versturen die je vindt op je klassenpagina.
            Let op: Je leerlingen moeten wel ingelogd izjn op Hedy voordat ze op de uitnodigingslink klikken.
            Je kunt leerlingen ook handmatig toevoegen aan de klas met de knop 'Uitnodigen met een gebruikersnaam'.
    -   title: Voorkeurstaal kiezen
        text: |-
            Wanneer leerlingen een profiel aanmaken is het de bedoeling om een 'voorkeurstaal' te kiezen. Hedy zal dan altijd te zien zijn in deze taal.
            Deze taal wijzigen kan altijd, ga hiervoor naar 'Mijn profiel' en vervolgens weer 'Mijn profiel'.

            **Als je voorkeurstaal anders is dan Engels**
            Je kunt niet alleen de taal van de avonturen in het Nederlands (of een andere taal) zetten. Je kunt ook kiezen in welke taal de commando's (zoals 'print' of 'ask') worden weergegeven.
            Zo kun je jouw leerlingen in het Engels leren programmeren, maar ook in hun moedertaal. Zo kun je bijvoorbeeld het commando 'vraag' gebruiken in plaats van 'ask'.
            Als een leerling wil wisselen van taal, kan hij/zij de keyword switcher aanklikken. Hierdoor veranderen de commando's van Nederlands naar Engels of andersom.
            Wist je dat... de leerlingen ook programma's mogen maken met Nederlandse én Engelse commando's door elkaar? Dit kan bijvoorbeeld handig zijn als een leerling wel al een paar commando's in het Engels kent, maar nog niet allemaal.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/0b3122e6-ff22-43d7-b8b6-62f47f485293" width="100">

            **Video**
            <a href="https://www.youtube.com/watch?v=QrVZETj4oLM" target="_blank">Deze video</a> laat je zien hoe je de voorkeurstaal aanpast van de avonturen en van de commando's.
    -   title: Opslaan
        text: |-
            Als je bent ingelogd, zie je boven in beeld naast Mijn profiel ook Mijn programma's. 
            Leerlingen hebben die opties ook. Bij mijn programma's vind je alle programma's terug waaraan je hebt gewerkt.
            Programma's worden vanzelf opgeslagen in 'Mijn programma's' wanneer de code wordt uitgevoerd, en elke 10 seconden, onder hun standaardnaam
            en level (bijvoorbeeld: Verhaal 5). Als je een programma onder een nieuwe naam wilt opslaan, typ je de nieuwe naam in de naambalk.
            Momenteel kan slechts één programma per level, per tabblad worden opgeslagen.

            Met de deelknop achter de naam van een programma kun een programma delen (leerlingen kunnen dit ook).
            Deze programma's worden gedeeld op <a href="https://hedy.org/explore" target="_blank">Ontdekken</a>, waar iedereen ze kan zien en gebruiken.
            Wil je een programma niet meer delen? Ga naar 'Mijn programma's' en klink op 'Stop delen'.

            Het papieren vliegtuigje kan gebruikt worden om programma's in te leveren bij de leerkracht van een klas. Aangeleverde programma's zijn niet meer bewerkbaar.
-   title: Lesgeven met Hedy
    key: lesgeven
    subsections:
    -   title: Lesgeven met Hedy
        text: |-
            Hedy is opgebouwd uit verschillende levels, waarin de leerlingen steeds één of meerdere nieuwe vaardigheden leren.
            Wij raden aan om per les één Hedy level te behandelen. Zo leren uw leerlingen stapje voor stapje programmeren en kan de nieuwe stof inslijpen voordat u naar het volgende level gaat.
            In onze levels hanteren we deze structuur: Introductie, nieuwe concepten en commando's, aan de slag, puzzels en quizzen.
    -   title: Slides
        text: |-
            Bij het lesgeven vind je het wellicht fijn om slides te gebruiken. Onze slides zijn te vinden op de 'Voor leerkrachten' pagina. Er is een set slides voor elk level. In de slides leggen we alle nieuwe commando's uit per level. Daarnaast proberen we uit te leggen waarom de leerlingen deze nieuwe commando's leren en wanneer deze commando's handig kunnen zijn.
            We geven in de slides ook meerdere voorbeelden van nieuwe commando's. Uiteraard staat het je vrij om eigen slides te gebruiken of om de Hedy website te gebruiken om de beste Hedy lessen te kunnen verzorgen!
    -   title: Introductie
        text: |-
            In de introductie van uw les activeert u de voorkennis van uw leerlingen. Wat weten zij al van het onderwerp, wat hebben ze geleerd in de voorgaande les, en welke fouten hebben zij gemaakt, wat gaan ze nu anders doen?
            Door een korte herhaling van de vorige les zitten de nieuwe commando's en veelgemaakte fouten weer vers in het geheugen van uw leerlingen en zijn ze klaar om een nieuw level te ontdekken.
    -   title: Instructie van nieuwe concepten en commando's
        text: |-
            Nieuwe concepten en commando's kunnen voor leerlingen soms erg lastig zijn om te begrijpen.
            Het is daarom van belang dat u als leerkracht het juiste gebruik van de nieuwe commando's voordoet aan de klas.
            Voornamelijk in de lagere levels, waarin de programmeerconcepten geheel nieuw zijn voor uw leerlingen, kan het lastig zijn om de concepten te begrijpen.
            Het tonen van voorbeelden maakt een abstracte uitleg (bijvoorbeeld over 'Wat is een variabele?') herkenbaar voor de leerlingen ('Kijk, de variabele huisdier wordt vervangen door hond!').
            Onze slides kunnen u hierbij helpen.
    -   title: Aan de slag
        text: |-
            Bij elk Hedy level zijn verschillende avonturen te vinden in de roze tabbladen.
            De opvolgende tabs zijn avonturen die de studenten kunnen uitproberen en eigen te maken.
            De avonturen staan geordend van makkelijk naar moeilijk, dus het is het beste om de leerlingen te laten beginnen met het verhaalavontuur en daarna naar rechts te werken.
            Uiteraard hoeven de leerlingen niet bij alle levels alle opdrachten te maken, en kunt u zorgen voor een leuke afwisseling in de opdrachten per les.
            De avonturen bevatten over het algemeen een voorbeeldcode, die met de groene knop in de hoek van het voorbeeld gekopieerd kunnen worden naar het werkveld.
            Hierna kunnen de leerlingen de code zelf een keer proberen en kunnen ze zelf de code aanpassen om er hun eigen project van te maken.
            Stimuleer de leerlingen om hun eigen ideeën toe te voegen aan de code, en hun eigen varianten van de codes te creëren.
    -   title: Quiz en Puzzels
        text: |-
            Om te testen of uw leerlingen de nieuwe concepten en commando's volledig begrepen hebben, kunt u de leerlingen de quiz laten invullen.
            Dit zijn 10 multiple-choice vragen over de leerstof van het desbetreffende level.
            Nog niet elk level heeft quizzes of puzzels, omdat we nog druk bezig zijn met de ontwikkeling hiervan.
            Sommige levels bevatten ook puzzels. Bij de puzzels krijgen de leerlingen een aantal regels code te zien, waarbij de leerlingen de regels in de juiste volgorde moeten zetten.

            In deze (Engelstalige) <a href="https://www.youtube.com/watch?v=lNh5EdZVUwc" target="_blank">video</a> vertelt Felienne meer over de quizzen en puzzels.
    -   title: Evaluatie
        text: |-
            Rond je les af met een korte evaluatie. Wat hebben de leerlingen opgestoken? En waar zijn ze tegenaan gelopen?
            Wat hebben ze kunnen leren van hun fouten? En natuurlijk: Wat hebben ze gemaakt?
            Leerlingen zijn vaak trots op hun creaties, dus het is leuk om wat tijd over te houden om leerlingen de kans te geven om hun werk te presenteren aan hun klasgenoten.
-   title: Leraarstatistieken
    key: teacher_statistics
    subsections:
    -   title: Live Dashboard
        text: |-
            Als je de voortgang van je leerlingen live wil bijhouden, kun je gebruiken maken van het live dashboard. Je vindt het dashboard door op 'Live statistieken' te klikken op je klassenpagina.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/97a54679-b1d6-46b4-a633-ab0161114642" width="1000">
            Alle functionaliteiten van het dashboard worden hieronder uitgelegd.
    -   title: Level Selectie
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/94dc891d-cdd6-4311-91f2-51900eaf4c2a" width="500">
            Begin met het selecteren van de levels die jij wil zien in het overzicht. Selecteer de levels waaraan je leerlinegn nu werken door op de corresponderende nummers te klikken. Je kunt de levels weer deselecteren door er opnieuw op te klikken.
            In dit voorbeeld zijn level 1 en 2 geselecteerd. Je kunt op refresh klikken om de pagina opnieuw te laden voor de meest actuele resultaten.
    -   title: Klassenoverzicht
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/b2c30ef9-6eba-4c02-92a3-9669504a54a8" width="1000">
            In het klassenoverzicht kun je zien aan welk avontuur je leerlingen momenteel werken. Je ziet in het voorbeeld dat er een leerling werkt aan het 'Steen, Papier, schaar'avontuur in level 1, een leerling werkt aan de 'Waarzegger' in level 1 en een leerling werkt aan 'Steen, Papier, Schaar' op level 2.
            Als je wil weten welke leerling waaraan werkt kun je op het getal klikken en dan verschijnen de accountnamen.
            Je kunt ook zien hoeveel leerlingen de quiz afhebben. In dit geval heeft een leerling de level 1 quiz gedaan. Je kunt weer op het eentje klikken als je wil weten wie.

            Je ziet misschien dat er een leerling 'mist' in het overzicht. Dat klopt, hij is aan het werk in een level dat niet geselecteerd is.
    -   title: Leerlingenlijst
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/693e976c-199f-46f4-abae-3f18f9854cd0" width="1000">
            Hier vind je een lijst van je leerlingen en zie je hun individuele voortgang. De blauwe ring laat zien waar de leerlinegn nu aan werken.
            <img src="https://github.com/hedyorg/hedy/assets/80678586/c7e2150f-60de-4ef7-8862-5901a7fb6609" width="150">
            Het is belangrijk om te weten dat de blauwe stippen betekenen dat de leerling het avontuur 'geprobeerd' geeft. Dat betekent dat ze een code hebben uitgevoerd in dit avontuur, maar dit betekent niet automatisch dat ze het ook goed gedaan hebben!
            Als je wil weten of een leerling ook echt goed bezig is, dan kun je op hun naam klikken in het overzicht. Dit zie je bijvoorbeeld als je op marleen_h3a klikt:
            <img src="https://github.com/hedyorg/hedy/assets/80678586/f8c2480d-c724-46f9-a702-33532828de70" width="800">
            Je ziet dat Marleen moeite heeft met programmeren. Ze heeft meerdere keren geprobeerd een programma te runnen met lege plekken erin. Ze begrijpt waarschijnlijk niet dat ze eerst zelf iets moet aanpassen aan de code.
            Zo kan het overzicht je een beter begrip geven van waar je leerlingen tegenaan lopen.
    -   title: Veelvoorkomende fouten
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/e7af5ce3-ca74-48e7-9654-f17435596fbc" width="500">
            Als je niet alleen geïnteresseerd bent in de individuele foutjes van leerlingen, maar graag wil weten waar de hele klas vaak tegenaan loopt, dan kun je dit overzicht gebruiken.
            De meest voorkomende errorberichten die je leerlingen ontvangen worden hier weergegeven. Zo kun je (opnieuw) klassikaal instructie geven over dit onderwerp aan de hele klas.
            Door op de error te klikken, zie je welke leerlingen dit errorbericht hebben ontvangen. Als je op oplossen klikt, verwijder je de error uit de lijst.
    -   title: Overview of programs per adventure
        text: |-
            <img src="https://github.com/hedyorg/hedy/assets/80678586/f07bf714-7250-4711-82a1-616f9f7b55e8" width="1000">
            Nog een handig overzicht van het werk van je leerlingen vind je op de klassenpagina. Ga naar de klassenpagina en klik op 'Overzicht van programma's per avontuur'. Hier vind je dit overzicht.
            Dit overzicht kun je gebruiken om het werk van je leerlingen na te kijken. Als ze een programma maken in een avontuur, verschijnt er een oogke in het overzicht. Klik op het oogje om het werk te bekijken. Ben je tevreden met het werk? Dan kun je een vinkje in het vakje plaatsen.
            Zo heb je een mooi overzicht van de resultaten van de leerlingen.
-   title: Extra Hedy functies
    key: functies
    subsections:
    -   title: Je eigen avontuur
        text: Als leerkracht kun jij je eigen avonturen maken en toevoegen aan jouw klas(sen). In deze <a href="https://www.youtube.com/watch?v=A0zbXpxX4q4" target="_blank">video</a> wordt hierover meer verteld.
    -   title: Publieke avonturen
        text: Wil je graag avonturen gebruiken die door andere leerkrachten ontworpen zijn= Dan kun je terecht op de <a href="https://hedy.org/public-adventures" target="_blank">publieke avonturen pagina</a>. Hier vind je alle avonturen die gedeeld zijn door andere leerkrachten van over de hele wereld. Om een bruikbaar avontuur te vinden kun je een level, taal of tag selecteren. Heb je er eentje gevonden? Klik op clone om een kopie van het avontuur op je eigen account op te slaan. Je kunt deze kopie aanpassen en met je klas delen, op dezelfde manier als je dat met je eigen avonturen zou doen. Het origineel wordt niet aangepast, die blijft dus gewoon in de publieke avonturen staan. Heb je zelf een avontuur gemaakt dat je graag wil delen? Klik dan bij het maken van je avontuur het vinkje aan dat vraagt of je het aan de publieke avonturen wil toevoegen.
    -   title: Ontdekken
        text: |-
            Op de pagina <a href="https://hedy.org/explore" target="_blank">Ontdekken</a>[Ontdekken] kun je het werk zien van andere Hedygebruikers.Je kunt hun codes uitproberen en als inspiratie gebruiken voor de eigen projecten.
            Je kunt ook zelf programma's toevoegen aan deze pagina door te klikken op 'Opslaan en Delen' als je een code maakt of door naar 'Mijn Programma's' te gaan en daar bij het gewenste programma te klikken op 'Delen'.
            Wil jij je werk niet meer delen? Ga dan naar 'Mijn Programma's' en klik op 'Stop delen'.
            Wil je meer informatie over de Ontdekken pagina, kijk dan deze (Engelstalige) <a href="https://www.youtube.com/watch?v=26boFjqvS5Q" target="_blank">video</a>.
    -   title: Badges
        text: |-
            Als je rechtsboven op je gebruikersnaam klikt, kun je kiezen voor de pagina <a href="https://hedy.org/my-achievements" target="_blank">Mijn Badges</a>. Op deze pagina wordt bijgehouden welke badges jij al hebt verdiend. Jouw leerlingen hebben eenzelfde pagina.
            Als je over de badge heengaat met je muis, zie je hoe je een badge kunt verdienen. Er zijn ook verborgen badges, waarbij het geheim is hoe je ze kunt halen.
            Wil je meer weten over de badges, kijk dan deze (Engelstalige) <a href="https://www.youtube.com/watch?v=-FjmKejukCs" target="_blank">video</a>.
    -   title: High Scores
        text: |-
            Op <a href="https://hedy.org/highscores" target="_blank">deze pagina</a> kun je de high scores van Nederland en de hele wereld zien van alle Hedy gebruikers.
            In deze <a href="https://www.youtube.com/watch?v=IqTiUkBVTo8" target="_blank">video</a> vertelt Felienne meer over de High Scores.
    -   title: Debugger
        text: |-
            Werkt een code niet? Dan zit er vast een bug (programmeerfoutje) in! Om de bug op te sporen, kun je de debugger gebruiken.
            De debugger is de knop met het lieveheersbeestje in je codeerscherm. Als je erop drukt, wordt je programma regel voor regel uitgevoerd.
            Heb je het foutje gevonden? Dan kun je op de rode stopknop drukken om de debugger af te sluiten.
    -   title: Voorleesfunctie
        text: Wil je dat de uitvoer van je programma wordt voorgelezen? Dan kun je de voorleesfunctie gebruiken die je onder de 'voer de code uit' knop kunt vinden.
    -   title: Programmeurs modus
        text: |-
            Word je afgeleid door alle avonturen, of wil je een lang programma maken? Dan is de 'Programmeurs modus' iets voor jou!
            Met de programmeurs modus schakelaar onderaan je scherm kun je een groter codeerveld maken.
    -   title: Spiekbriefje
        text: |-
            In elk level is een knopje te vinden met 🤔. Onder deze knop vinden jij en jouw leerlingen het spiekbriefje. Op het spiekbriefje staan korte voorbeelden van alle commando's die je in dat level kunt gebruiken.
            Weet je dus even niet meer hoe een commando werkt, zoek hem op, op het spiekbriefje!
    -   title: Video
        text: In deze <a href="https://www.youtube.com/watch?v=c4MntPPgl1Y" target="_blank">video</a> worden nog wat extra functionaliteiten van hedy uitgelegd, zoals het spiekbriefje en toetsenbordopties.
-   title: Na Hedy
    key: after
    subsections:
    -   title: Wat kun je doen na Hedy?
        text: |-
            Gefeliciteerd met het uitspelen van Hedy! Je leerlingen hebben nu geleerd om hun eigen programma's te creëren in Python.
            Uiteraard kun je blijven doorgaan in Hedy, maar het is voor de leerlingen misschien interessant om over te stappen op een "echte" Python compiler.
            Wil je doorgaan in Pyhton? Bekijk dan <a href="https://www.python.org/about/gettingstarted/" target="_blank">deze Pythonwebsite</a> om te leren hoe je verder kunt in een andere compiler.

            Nu je leerlingen basiskennis van het programmeren hebben opgedaan, kun je natuurlijk ook een kijke nemen bij andere programmeertalen. De taal verschil wellicht van Hedy en Python, maar de basiskennis komt zeker van pas.
-   title: Antwoorden van de opdrachten
    key: answers
    intro: |-
        De antwoorden van de opgaven kun je vinden bij het profiel van het gebruiksaccount 'Hedy_answers'. Deze antwoorden zijn weliswaar in het Engels, maar geven u als leerkracht waarschijnlijk wel inzicht in hoe uw leerlingen de opdrachten zouden kunnen oplossen.
        Daarbij hopen we dat leerlingen hun eigen creativiteit gebruiken bij het maken van de opdrachten, waardoor onze antwoorden slechts een voorbeeld geven van hoe een goed antwoord eruit kan zien. Er zijn natuurlijk veel meer geode antwoorden mogelijk.

        Om naar het profiel van 'Hedy_answers' te gaan, klikt u <a href="https://hedy.org/user/hedy_answers" target="_blank">hier</a>.
-   title: Veelgemaakte fouten
    key: common_mistakes
    intro: |-
        Van fouten kun je leren en dat geldt al helemaal bij programmeren! Fouten maken is onvermijdelijk en helemaal niet erg, maar het kan als leerkrachten soms nog knap lastig zijn om foutjes van leerlingen op te sporen en op te lossen. Vooral als de programma's almaar langer worden, wanneer de leerlingen hogere levels bereiken. Daarom hebben wij hier per level een lijst gemaakt van de meest gemaakte fouten en de oplossingen.
    levels:
    -   level: "1"
        sections:
        -   title: Leerlingen vergeten de commando's te typen
            example:
                error_text: Zo vergeten leerlingen het print commando vaak.
                error_code: Hedy kan dit niet printen
                solution_text: Leer de leerlingen aan om altijd te beginnen met een commando.
                solution_code: "{print} Hedy kan dit wel printen!"
        -   title: Leerlingen typen commando's met hoofdletters
            example:
                error_text: Commando's werken niet als zij getypt worden met een hoofdletter.
                error_code: |-
                    Ask Waarom werkt mijn code niet?
                    Print Er moeten geen hoofdletters bij de commando's.
                solution_text: Haal de hoofdletters weg.
                solution_code: |-
                    {ask} Waarom werkt mijn code nu wel?
                    {print} Omdat ik de hoofdletters weggehaald heb!
        -   title: Leerlingen gebruiken echo zonder ask
            example:
                error_text: Het commando echo herhaalt het antwoord van een ask commando. Zonder ask werkt de echo dus niet.
                error_code: "{echo} Jouw naam is"
                solution_text: Voeg een vraag toe met een ask commando.
                solution_code: |-
                    {ask} Hoe heet jij?
                    {echo} Jouw naam is
        -   title: Leerlingen willen hun echo-woord (variabele) in het midden van de zin in plaats van aan het einde
            example:
                error_text: En groot gelijk hebben ze! Daarom leren ze in het volgende level variabelen gebruiken.
                error_code: |-
                    {ask} Wat is de leukste programmeertaal?
                    {echo} is de beste!
                solution_text: "In level 1 moeten we het hier op houden:"
                solution_code: |-
                    {ask} Wat is de leukste programmeertaal?
                    {echo} De beste is...
        -   title: "Tekenschildpad: Leerlingen laten het pijltje uit beeld lopen"
            example:
                error_text: Vaak vinden leerlingen het leuk om hoge getallen uit te testen in de turtle, waardoor het pijltje uit beeld loopt.
                error_code: |-
                    {forward} 300
                    {turn} 90
                solution_text: Leerlingen denken dat het turn commando niet werkt, ondanks dat het doet wat het moest doen. Wat er gebeurde is dat het pijltje al buiten het beeld is gekomen. Gebruik kleinere getallen om dat te voorkomen.
                solution_code: |-
                    {forward} 100
                    {turn} 90
        -   title: "Tekenschildpad: Leerlingen gebruiken het commando \"backward\", maar er is helemaal niet zo'n commando."
            example:
                error_text: Achteruit lopen doet de turtle met mingetallen. Dit kan verwarrend zijn voor leerlingen.
                error_code: backward 100
                solution_text: "Om de schildpad terug te laten gaan, gebruik het forward commando en een min-getal. Bijvoorbeeld:"
                solution_code: "{forward} -100"
    -   level: "2"
        sections:
        -   title: Leerlingen maken spelfouten in de commando's
            example:
                error_text: Als een leerling een spelfout maakt in een commando, kan Hedy het commando niet herkennen.
                error_code: prinnt Maak geen spelfouten
                solution_text: Leer de leerlingen aan om de foutmeldingen te lezen. Deze geven namelijk aan welk woord fout gespeld is.
                solution_code: "{print} Maak geen spelfouten"
        -   title: Leerlingen vergeten dat het ask commando is veranderd
            example:
                error_text: In dit level leren de leerlingen werken met variabelen. Ook het ask commando gebruikt variabelen in dit level, wat nogal eens wordt vergeten door leerlingen.
                error_code: ask Wat wil je bestellen
                solution_text: In dit level moet je altijd aangeven waarin Hedy jouw antwoord moet opslaan, zodat je het later kunt gebruiken. Dat waarin noemt men dus een variabele.
                solution_code: bestelling {is} {ask} Wat wil je bestellen
        -   title: Leerlingen gebruiken het echo commando, wat niet werkt in level 2
            example:
                error_text: Voor sommige leerlingen kan het frusterend zijn dat het `{echo}` commando niet meer werkt. Het is daarom belangrijk om de voordelen van variabelen uit te leggen. Zo kun je bijvoorbeeld meerdere variabelen gebruiken, en kun je variabelen in een zin gebruiken, overal in een zin, meerdere variabelen, waar je maar wilt!
                error_code: |-
                    antwoord {is} {ask} Waarom werkt echo niet meer
                    echo
                solution_text: Gebruik in plaats van echo een variabele.
                solution_code: |-
                    antwoord {is} {ask} Waarom werkt echo niet meer
                    {print} antwoord
        -   title: Leerlingen gebruiken de naam van een variabele in een printcommando als woord
            example:
                error_text: In het voorbeeld hieronder wordt 'naam' gebruikt als variabele, maar ook als gewone tekst. De uitvoer van deze code wordt 'hoi mijn Hedy is Hedy', wat natuurlijk niet de bedoeling is.
                error_code: |-
                    naam {is} Hedy
                    {print} hoi mijn naam is naam
                solution_text: Gebruik daarom andere variabelenamen dan de tekst die je wil printen. In level 4 wordt dit probleem opgelost met aanhalingstekens.
                solution_code: |-
                    naam {is} Hedy
                    {print} hoi ik heet naam
        -   title: Leerlingen geven variabelen namen met meerdere woorden.
            example:
                error_text: |-
                    Je mag variabelen geen naam geven met twee woorden. Het moet altijd één woord zijn.
                    In het voorbeeld hieronder heeft een leerling de variabele bijvoorbeeld 'gekozen deur' genoemd. Dit is fout.
                error_code: gekozen deur is ask Welke deur kies jij
                solution_text: Voeg een laag streepje toe aan de variabelenaam. Zo wordt het gerekend als één woord.
                solution_code: gekozen_deur {is} {ask} Welke deur kies jij
        -   title: Leerlingen gebruiken twee verschillende namen voor dezelfde variabele
            example:
                error_text: In dit voorbeeld gebruikt een leerling bijvoorbeeld de namen 'paard' en 'naam' voor dezelfde variabele.
                error_code: |-
                    paard {is} {ask} Hoe heet jouw paard
                    {print} Jouw paard heet naam
                solution_text: Gebruik altijd dezelfde naam voor een variabele. Controleer ook of de variabelenaam enkelvoud of meervoud is, daar lees je gemakkelijk overheen (antwoord/antwoorden).
                solution_code: |-
                    naam {is} {ask} Hoe heet jouw paard
                    {print} Jouw paard heet naam
    -   level: "3"
        sections:
        -   title: Leerlingen proberen lijstjes te printen
            example:
                error_text: Een lijstje kan niet geprint worden. Je kunt wel een item uit een lijst printen met at random.
                error_code: |-
                    boodschappen {is} appels, melk, chocolade
                    {print} boodschappen
                solution_text: Om alle boodschappen te printen kun je ze gewoon achter een print commando zetten. Anders kun je het lijstje gebruiken met at random om een willekeurig item van het lijstje te printen.
                solution_code: |-
                    {print} appels, melk, chocolade

                    of

                    boodschappen {is} appels, melk, chocolade
                    {print} boodschappen {at} {random}
        -   title: Leerlingen gebruiken de naam van een variabele of lijstje in een printcommando als woord
            example:
                error_text: In het voorbeeld hieronder wordt 'naam' gebruikt als variabele, maar ook als gewone tekst. De uitveor van deze code wordt 'hoi mijn Hedy is Hedy', wat natuurlijk niet de bedoeling is.
                error_code: |-
                    naam {is} Hedy
                    {print} hoi mijn naam is naam

                    of

                    dier {is} nijlpaard, bij, zwaan
                    {print} het leukste dier is... dier {at} {random}
                solution_text: Gebruik daarom andere variabelenamen dan de tekst die je wil printen. In level 4 wordt dit probleem opgelost met aanhalingstekens.
                solution_code: |-
                    naam {is} Hedy
                    {print} hoi ik heet naam

                    of

                    dieren {is} nijlpaard, bij, zwaan
                    {print} het leukste dier is... dieren {at} {random}
        -   title: Leerlingen maken spelfouten in at random of vergeten een van de twee woorden
            example:
                error_text: Zo worden add en at soms verward. Of wordt at vergeten
                error_code: |-
                    dieren {is} hond, koe, meeuw
                    {print} dieren add random
                solution_text: Dit probleem wordt opgelost door de correcte spelling te gebruiken.
                solution_code: |-
                    dieren {is} hond, koe, meeuw
                    {print} dieren {at} {random}
        -   title: Leerlingen vergeten het print commando te gebruiken bij een at random
            example:
                error_text: Soms zetten leerlingen at random aan het begin van de zin, of ze vergeten het print commando.
                error_code: |-
                    fruit {is} appel, kers, banaan
                    fruit at random
                solution_text: Benadruk dat je Hedy iets wil laten printen, dus dat het printcommando nodig is.
                solution_code: |-
                    fruit {is} appel, kers, banaan
                    {print} fruit {at} {random}
        -   title: Leerlingen vergeten komma's in hun lijstjes
            example:
                error_text: In een lijst scheidt je de items met een komma. Als je de komma's vergeet herkent Hedy het lijstje niet.
                error_code: |-
                    pizzas {is} funghi tonno quattro stagioni
                    {print} pizzas {at} {random}
                solution_text: Na elk item in een lijst, komt er een komma
                solution_code: |-
                    pizzas {is} funghi, tonno, quattro stagioni
                    {print} pizzas {at} {random}
        -   title: Leerlingen proberen het `{at}` `{random}` commando te gebruiken zonder een lijst
            example:
                error_text: Zoals in het voorbeeld hieronder
                error_code: |-
                    voetbalclubs {is} Ajax
                    {print} voetbalclubs {at} {random}
                solution_text: In het voorbeeld hierboven valt er voor Hedy natuurlijk niets at random te kiezen, want er is geen lijstje gemaakt om uit te kiezen. Om at random te kunnen gebruiken is er dus echt een lijstje nodig.
                solution_code: |-
                    voetbalclubs {is} Ajax, PSV, Feyenoord
                    {print} voetbalclubs {at} {random}
        -   title: Leerlingen proberen add/remove te gebruiken zonder lijst
            example:
                error_text: In het voorbeeld hieronder is namen een variabele, maar geen lijstje. Je kunt hier dus niets aan toevoegen.
                error_code: |-
                    namen {is} Jake
                    jouw_naam {is} {ask} Hoe heet jij?
                    {add} jouw_naam {to_list} namen
                    {print} namen {at} {random}
                solution_text: Je moet dus eerst een lijstje hebben, dus moet je een tweede naam toevoegen (Amy) aan namen om het een lijstje te maken. Als je Amy niet wil gebruiken, kun je Amy wel weer verwijderen uit het lijstje met remove.
                solution_code: |-
                    namen {is} Jake, Amy
                    jouw_naam {is} {ask} Hoe heet jij?
                    {add} jouw_naam {to_list} namen
                    {print} namen {at} {random}
        -   title: Leerlingen vergeten het `{to}` of `{from}` gedeelte van `{add}` of `{remove}`
            example:
                error_text: Bij add hoort to en bij remove hoort from.
                error_code: |-
                    avonturen {is} verhaal, papegaai, dobbelsteen
                    keuze {is} {ask} Wat vind jij het leukste Hedy avontuur?
                    add keuze
                    remove dobbelsteen
                    {print} Ik hou van avonturen {at} {random}
                solution_text: Hedy moeten weten aan welk lijstje het nieuwe item moet worden toegevoegd of van welk lijstje het verwijderd moet worden.
                solution_code: |-
                    avonturen {is} verhaal, papegaai, dobbelsteen
                    keuze {is} {ask} Wat vind jij het leukste Hedy avontuur?
                    {add} keuze {to_list} avonturen
                    {remove} dobbelsteen {from} avonturen
                    {print} Ik hou van avonturen {at} {random}
    -   level: "4"
        sections:
        -   title: Leerlingen vergeten de aanhalingstekens aan beide kanten te zetten
            example:
                error_text: In dit level moeten er aanhalingstekens gezet worden bij print en ask commando's. Er moet een aanhalingsteken voor en een aanhalingsteken achter de tekst.
                error_code: |-
                    {print} Hallo
                    naam {is} {ask} 'Hoe heet jij?
                solution_text: Voeg de correcte aanhalingstekens toe.
                solution_code: |-
                    {print} 'Hallo'
                    naam {is} {ask} 'Hoe heet jij?'
        -   title: Leerlingen gebruiken de verkeerde aanhalingstekens
            example:
                error_text: Het is van belang om aan het begin van de les te demonstreren hoe je het correcte aanhalingsteken typt. Veel leerlingen weten dit teken namelijk nog niet te vinden op hun toetsenbord en kiezen dan een enkele aanhalingsteken ('') of de dubbele aanhalingstekens (""). Enkele schuine aanhalingstekens (``) zijn geen geldige aanhalingstekens op Hedy.
                error_code: |-
                    {print} `Welkom in het restaurant`
                    eten {is} {ask} "Wat wil je bestellen?"
                solution_text: "Zo gebruik je de aanhalingstekens correct:"
                solution_code: |-
                    {print} 'Welkom in het restaurant'
                    eten {is} {ask} 'Wat wil je bestellen?'
        -   title: Leerlingen gebruiken hoge komma's na een print commando
            example:
                error_text: Een hoge komma kan je niet gebruiken in een print commando. Je ziet het al aan de verkeerde verkeuring in de tekst.
                error_code: "{print} 'Er lopen twee oma's door het park'"
                solution_text: Je kunt ervoor kiezen om het woord fout te spellen door geen hoge komma te gebruiken, of je kunt de schuine komma gebruiken. Die zit linksboven naast de 1 toets op je toetsenbord.
                solution_code: |-
                    {print} 'Er lopen twee omas door het park'
                    {print} 'Er lopen twee oma`s door het park'
    -   level: "5"
        sections:
        -   title: Leerlingen vergeten het print commando in een if commando
            example:
                error_text: Nadat de leerlingen een if of else hebben gebruikt, vergeten ze vaak dat print nog steeds nodig is.
                error_code: |-
                    {if} naam {is} Hedy 'Mooi!'
                    {else}  Hedy {is} Lelijk!
                solution_text: Voeg print toe om de code kloppend te maken.
                solution_code: |-
                    {if} naam {is} Hedy {print} 'Mooi!'
                    {else} {print} 'Lelijk!'
        -   title: Leerlingen gebruiken twee verschillende namen voor dezelfde variabele
            example:
                error_text: In dit voorbeeld gebruikt een leerling bijvoorbeeld de namen 'paard' en 'naam' voor dezelfde variabele.
                error_code: |-
                    paard {is} {ask} 'Hoe heet jouw paard?'
                    {if} naam {is} Bonfire {print} 'leuk'
                    {else} {print} 'minder leuk!'
                solution_text: Gebruik altijd dezelfde naam voor een variabele. Controleer ook of de variabelenaam enkelvoud of meervoud is, daar lees je gemakkelijk overheen (antwoord/antwoorden).
                solution_code: |-
                    paard {is} {ask} 'Hoe heet jouw paard?'
                    {if} paard {is} Bonfire {print} 'leuk'
                    {else} {print} 'minder leuk!'
        -   title: Leerlingen vergeten beide aanhalingstekens bij een print commando
            example:
                error_text: Leerlingen vergeten vaak een aanhalingsteken aan het einde van hun tekst bij een print commando, vooral als dat print commando in een if commando staat.
                error_code: |-
                    {if} naam {is} Hedy {print} leuk
                    {else} {print} 'minder leuk!
                solution_text: Gebruik altijd twee aanhalingstekens per print commando, een vooraan en een achteraan.
                solution_code: |-
                    {if} naam {is} Hedy {print} 'leuk'
                    {else} {print} 'minder leuk!'
        -   title: Leerlingen gebruiken aanhalingstekens rond de naam van de variabele
            example:
                error_text: Er moeten (in dit level) geen aanhalingstekens om een variabele.
                error_code: |-
                    {if}  naam  {is} 'Hedy' {print} 'leuk'
                    {else} {print} 'minder leuk!'
                solution_text: Haal de aanhalingstekens weg, zodat de code werkt.
                solution_code: |-
                    {if} naam {is} Hedy {print} 'leuk'
                    {else} {print} 'minder leuk!
        -   title: Leerlingen geven variabelen namen bestaande uit meerdere woorden
            example:
                error_text: |-
                    In Hedy mag variabelen geen naam geven met spaties er in, of uit meerdere woorden. Een variabele moet altijd uit één woord bestaan. Leerlingen kunnen wel meerdere woorden verbinden met een liggend streepje (_), het underscore teken. Bijvoorbeeld 'gekozen_deur' (_)
                error_code: gekozen deur is ask  Welke deur kies jij?
                solution_text: Voeg een laag streepje toe aan de variabelenaam. Zo wordt het gerekend als één woord.
                solution_code: gekozen_deur {is} {ask} 'Welke deur kies jij?'
        -   title: Leerlingen willen dat bij de if meerdere antwoorden goed zijn
            example:
                error_text: Leerlingen willen vaak graag dat er meerdere antwoorden 'goed' zijn. In het voorbeeld hieronder wil de leerling bijvoorbeeld dat Hedy tegen hem en zijn vrienden zegt dat ze grappig zijn en tegen alle andere leerlingen dat ze niet grappig zijn.
                error_code: "{if} naam {is} Jesse, David, Souf {print} 'jij bent grappig' {else} {print} 'jij bent niet grappig'"
                solution_text: |-
                    Je kunt hierbij het `{in}` commando uitleggen. Dit wordt pas in latere hogere levels aangeleerd, maar werkt op level 5 wel al.
                    Een andere oplossing is om alleen `{if}` commando's te gebruiken, zonder een `{else}` commando. Het nadeel is dat Hedy zonder else commando natuurlijk geen antwoord geeft als je een andere naam hebt dan Jesse, David of Souf.
                solution_code: |-
                    vrienden {is} Jesse, David, Souf
                    naam {is} {ask} 'Wie ben jij?'
                    {if} naam {in} vrienden {print} 'leuk'
                    {else} {print} 'minder leuk'

                    of

                    naam {is} {ask} 'hoe heet jij?'
                    {if} naam {is} Jesse {print} 'leuk'
                    {if} naam {is} David {print} 'leuk'
                    {if} naam {is} Souf {print} 'leuk'
        -   title: De leerlingen vullen bij ask hetzelfde in als bij de variabelenaam, dus de variabele wordt de zelfde waarde als de variabelenaam
            example:
                error_text: "In het voorbeeld hieronder was bijvoorbeeld het wachtwoord: 'wachtwoord'. Hedy zal hierbij altijd 'Je mag computeren!' printen."
                error_code: |-
                    wachtwoord {is} {ask} 'Wat is het wachtwoord?'
                    {if} wachtwoord {is} wachtwoord {print} 'Je mag computeren!'
                    {else} {print} 'Verboden toegang!'
                solution_text: Kies dus een andere naam voor je variabele dan de waarde die je wil invullen.
                solution_code: |-
                    geheim_wachtwoord {is} {ask} 'Wat is het wachtwoord?'
                    {if} geheim_wachtwoord {is} wachtwoord {print} 'Je mag er door!'
                    {else} {print} 'Verboden toegang!'
    -   level: "6"
        sections:
        -   title: Students struggle with quotation marks
            example:
                error_text: Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.
                error_code: "{print} '5 + 5'"
                solution_text: In this code the output screen will print '10'.
                solution_code: "{print} 5 + 5"
        -   title: Students struggle with the concept of doing maths with a variable
            example:
                error_text: "Some students will find it hard to do maths with variables. Try to show them very simple examples, like:"
                error_code: |-
                    age = {ask} 'How old are you?'
                    {print} 'Next year you will be ' age + 1
                solution_text: Or take it a step further like this.
                solution_code: |-
                    price = 0
                    {print} 'Welcome to our burger restaurant'
                    burger = {ask} 'Would you like a burger?'
                    {if} burger = yes price = price + 10
                    drink = {ask} 'Would you like a drink?'
                    {if} drink = yes price = price + 4
                    {print} 'That will be ' price ' euros please'
    -   level: "7"
        sections:
        -   title: Students forget one of the word of the repeat command, or they forget the print command
            example:
                error_text: Make sure that the students know to use both the full repeat command and the print command.
                error_code: |-
                    {repeat} 3 {times}  For he`s a jolly good fellow
                    {repeat} 3 print
                solution_text: "This is the correct code:"
                solution_code: |-
                    {repeat} 3 {times} {print} 'For he`s a jolly good fellow'
                    {repeat} 3 {times} {print} 'Which nobody can deny!'
        -   title: Students try to repeat multiple lines
            example:
                error_text: In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.
                error_code: |-
                    {repeat} 3 {times} drink = {ask} 'What would you like to drink?'
                    {print} drink
                solution_text: You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.
                solution_code: |-
                    drink = {ask} 'What would you like to drink?'
                    {print} drink
                    drink = {ask} 'What would you like to drink?'
                    {print} drink
                    drink = {ask} 'What would you like to drink?'
                    {print} drink
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long-running programs. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: "{repeat} 100 {times} {print} 'How many times can I repeat this?'"
                solution_text: Make sure the programs aren't too long
                solution_code: "{repeat} 20 {times} {print} 'This is enough'"
    -   level: "8"
        sections:
        -   title: Students use the indentation wrong
            example:
                error_text: Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple snippets before making a whole program with it.
                error_code: |-
                    {repeat} 3 {times}
                    {print} 'hello'
                solution_text: "This is the correct code:"
                solution_code: |-
                    {repeat} 3 {times}
                        {print} 'hello'
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                error_text: For instance, in the code below the student wanted to take the drinks order of 3 people. But insted the program asked 3 times, but only wrote down one order.
                error_code: |-
                    {repeat} 3 {times}
                        drink = {ask} 'What would you like to drink?'
                    {print} drink
                solution_text: |-
                    In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.
                    Showing your students these differences can help them understand why we need indentation to make our programs work.
                solution_code: |-
                    {repeat} 3 {times}
                        drink = {ask} 'What would you like to drink?'
                        {print} drink
        -   title: Students want to nest if statements, or put if statements inside a loop
            example:
                error_text: |-
                    In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.
                    In the next level this is allowed.
                error_code: |-
                    birthday = {ask} 'Is it you birthday?'
                    {if} birthday = yes
                        {repeat} 3 {times}
                            {print} 'Hip Hip Hooray!'
                solution_text: "This is the correct code for this level:"
                solution_code: |-
                    birthday = {ask} 'Is it you birthday?'
                    {if} birthday = yes
                        {print} 'Hip Hip Hooray!'
                        {print} 'Hip Hip Hooray!'
                        {print} 'Hip Hip Hooray!'
        -   title: Students make programs that take too long to run
            example:
                error_text: In this level it's very easy to make long-running programs. The students aren't allowed to make programs that take to long to load (to save our servers).
                error_code: |-
                    {repeat} 100 {times}
                        {print} 'How many times can I repeat this?'
                solution_text: Make sure the programs aren't too long
                solution_code: |-
                    {repeat} 20 {times}
                        {print} 'This is enough'
        -   title: Students use the if command to check if the variable value is the same as the variable name
            example:
                error_text: |-
                    We hebben een gemeenschappelijke fout onder onze studenten gemerkt, ze proberen een programma te creëren dat een wachtwoord controleert, maar ze maken het wachtwoord 'password'.
                    In lijn 2 wordt de computer gevraagd te controleren of het variabele wachtwoord hetzelfde is als het variabele wachtwoord, dus zelf. Wat betekent dat het antwoord altijd ja is.
                    Dus met deze code is het antwoord altijd 'je kunt binnenkomen' wat de speler ook invult.
                error_code: |-
                    password {is} {ask} 'What is the password?'
                    {if} password {is} password
                        {print} 'You can come in'
                    {else}
                        {print} 'You are not allowed'
                solution_text: You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.
                solution_code: |-
                    password {is} {ask} 'What is the password?'
                    {if} password {is} 'password'
                        {print} 'You can come in'
                    {else}
                        {print} 'You are not allowed'
    -   level: "9"
        sections:
        -   title: Students make mistakes with indentation
            example:
                error_text: The hardest part about this level is getting the indentation right. Students love nesting if statements, sometimes even inside other nested if statements. Keeping track of indentation can get pretty tough.
                error_code: |-
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                            {if} book {is} yes
                    {print} 'Robin buys the book and goes home'
                    {else}
                        {print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
                solution_text: This is the correct code. Try to keep track of all the different constructions when putting if statements inside other if statements.
                solution_code: |-
                    {print} 'Robin is walking downtown'
                    location = {ask} 'Is Robin going into a shop, or does she go home?'
                    {if} location {is} shop
                        {print} 'She enters the shop.'
                        {print} 'Robin sees an interesting looking book'
                        book = {ask} 'Does Robin buy the book?'
                        {if} book {is} yes
                            {print} 'Robin buys the book and goes home'
                        {else}
                            {print} 'Robin leaves the shop and goes home'
                    {else}
                        {print} 'Robin goes home'
    -   level: "10"
        sections:
        -   title: Leerlingen gebruiken het `{for}` commando niet correct
            example:
                error_text: We often see that students try to print the list (in the example animals) instead of the items of the list.
                error_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animals
                solution_text: The word animals in the last line should be changed into animal.
                solution_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animal
        -   title: Students forget the indentation
            example:
                error_text: Students tend to forget to use indentation after a for command.
                error_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                    {print} 'I love ' animals
                solution_text: You should use indentation after a for command.
                solution_code: |-
                    animals {is} dog, cat, blobfish
                    {for} animal {in} animals
                      {print} 'I love ' animal
    -   level: "11"
        sections:
        -   title: Students forget to use indentation
            example:
                error_text: Make sure that the students use indentation.
                error_code: |-
                    {for} i {in} {range} 1 {to} 5
                    {print} i
                solution_text: "This is the correct code:"
                solution_code: |-
                    {for} i {in} {range} 1 {to} 5
                        {print} i
        -   title: Students don't understand the i
            example:
                error_text: |-
                    Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.
                    For example, this code:
                error_code: |-
                    {for} i {in} {range} 1 {to} 5
                    {print} i
                solution_text: Could just as well be replaced with this code. It works the same.
                solution_code: |-
                    {for} banana {in} {range} 1 {to} 5
                        {print} banana
    -   level: "12"
        sections:
        -   title: Students forget quotation marks
            example:
                error_text: Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the if command.
                error_code: |-
                    superheroes = Spiderman, Batman, Iron Man
                    superhero = superheroes {at} {random}
                    {if} superhero = Batman
                        {print} 'IM BATMAN!'
                solution_text: "This is the correct code:"
                solution_code: |-
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    superhero = superheroes {at} {random}
                    {if} superhero {is} 'Batman'
                        {print} 'IM BATMAN!'
        -   title: Students use quotation marks on numbers they want to use for calculations
            example:
                error_text: |-
                    You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.
                    In the example below, you can't do maths with the number 25, because it's in quotation marks.
                error_code: |-
                    score = '25'
                    answer {is} {ask} 'Do you want a point?'
                    {if} answer {is} 'yes'
                        score = score + 1
                        {print} score
                solution_text: "This is the correct code:"
                solution_code: |-
                    score = 25
                    answer {is} {ask} 'Do you want a point?'
                    {if} answer {is} 'yes'
                        score = score + 1
                        {print} score
        -   title: Students use commas instead of periods in decimal numbers
            example:
                error_text: Decimal numbers can be used from this level on, but you can't use commas.
                error_code: "{print} 2,5 + 2,5"
                solution_text: "This is the correct code:"
                solution_code: "{print} 2.5 + 2.5"
    -   level: "13"
        sections:
        -   title: Leerlingen verwarren`{and}` met `{or}`
            example:
                error_text: Both commands might appear similar, but their functions are very different.
                error_code: |-
                    game {is} {ask} 'Do you want to play a game?'
                    time {is} {ask} 'Do you have time to play?'
                    {if} game {is} 'yes' {or} time {is} 'yes'
                        {print} 'Lets play!'
                solution_text: In this case, the person should answer yes on both questions, so you should use `and`.
                solution_code: |-
                    game {is} {ask} 'Do you want to play a game?'
                    time {is} {ask} 'Do you have time to play?'
                    {if} game {is} 'yes' {and} time {is} 'yes'
                        {print} 'Lets play!'
    -   level: "14"
        sections:
        -   title: Students confuse the < and > signs
            example:
                error_text: Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.
                error_code: |-
                    age = {ask} 'How old are you?'
                    {if} age < 12
                        {print} 'You are older than I am!'
                solution_text: "This is the correct code:"
                solution_code: |-
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_text: These signs are probably new for most students. Make sure to explain these signs to your students.
                error_code: |-
                    name = {ask} 'What is your name?'
                    {if} name =  'Hedy'
                        {print} 'You are not Hedy'
                solution_text: "This is the correct code:"
                solution_code: |-
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
        -   title: Students forget to use the == sign
            example:
                error_text: In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.
                error_code: |-
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy'
                        {print} 'You are cool!'
                solution_text: "This is the correct code:"
                solution_code: |-
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
    -   level: "15"
        sections:
        -   title: Students forget indentation in the while loop
            example:
                error_text: Indentation is often hard for students.
                error_code: |-
                    answer = 0
                    {while} answer != 25
                    answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                solution_text: "This is the correct code:"
                solution_code: |-
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
    -   level: "16"
        sections:
        -   title: Students forget the brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = 'starwberry', 'chocolate'
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: "This is the correct code:"
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students use the wrong brackets
            example:
                error_text: From this level on lists should be in brackets.
                error_code: |-
                    icecream = ('starwberry', 'chocolate')
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: "This is the correct code:"
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: "This is the correct code:"
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students still use the old at random command
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    {print} 'I love ' icecream at random ' icecream'
                solution_text: "This is the correct code:"
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.
                error_code: |-
                    icecream = [starwberry, chocolate]
                    {print} 'I love ' icecream[{random}] ' icecream'
                solution_text: "This is the correct code:"
                solution_code: |-
                    icecream = ['starwberry', 'chocolate']
                    {print} 'I love ' icecream[{random}] ' icecream'
    -   level: "17"
        sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_text: The elif command needs a condition behind it. It cannot be used like else, without a condition.
                error_code: |-
                    color = {ask} 'What is your favorite color?'
                    {if} color == 'green':
                        {print} 'green is nice'
                    {elif}
                        {print} 'I like green'
                solution_text: "This is the correct code:"
                solution_code: |-
                    color = {ask} 'What is your favorite color?'
                    {if} color == 'green':
                        {print} 'green is nice'
                    {elif} color == yellow:
                        {print} 'yellow is alright'
                    {else}:
                        {print} 'I like green'
        -   title: Students forget the colon
            example:
                error_text: After each command that requires indentation, a colon should be used.
                error_code: |-
                    answer = {ask} 'How are you doing?'
                    {if} answer {is} 'great'
                        {print} 'Me too!'
                    {elif} answer {is} 'bad'
                        {print} 'Let me cheer you up!'
                    {else}
                        {print} 'Im great!'
                solution_text: "This is the correct code:"
                solution_code: |-
                    answer = {ask} 'How are you doing?'
                    {if} answer {is} 'great':
                        {print} 'Me too!'
                    {elif} answer {is} 'bad':
                        {print} 'Let me cheer you up!'
                    {else}:
                        {print} 'Im great!'
    -   level: "18"
        sections:
        -   title: Students forget to use the brackets
            example:
                error_text: Students will forget to put brackets around their text.
                error_code: "{print} 'my name is Hedy!'"
                solution_text: "This is the correct code:"
                solution_code: "{print}('my name is Hedy!')"
        -   title: Students will still use the ask command
            example:
                error_text: The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.
                error_code: |-
                    {print}('My name is Hedy!')
                    name = ask('What is your name?')
                    {print}('So your name is ', name)
                solution_text: "This is the correct code:"
                solution_code: |-
                    {print}('My name is Hedy!')
                    name = {input}('What is your name?')
                    {print}('So your name is ', name)
        -   title: Students might use the brackets as quotation marks
            example:
                error_text: They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.
                error_code: |-
                    temperature = 25
                    {print}('It is ') temperature ('degrees outside')
                solution_text: "This is the correct code:"
                solution_code: |-
                    temperatuur = 25
                    {print}('Het is ', temperatuur, 'graden buiten')

workbooks:
    levels:
    -   level: '1'
        intro: |-
            ### Printen en invoer
            Aan het einde van de les kun jij:
            * Code schrijven die tekst print
            * Een verhaal met invoer maken
        exercises:
        -   type: text
            contents: |-
                ### Opdrachten
                Een computer doet niet zomaar zelf iets, je moet een computer altijd een opdracht geven. Zo'n opdracht heet commando. Om code uit te printen, gebruiken we de code `print`.

                ### Tekst printen    
                Je hebt net op het bord de `print` opdracht gezien.
                Een `print` opdracht print een woord uit, als het tussen aanhalingstekens staat. Bijvoorbeeld zo `print hallo`.
                #### Opdracht 1: Voorspel de uitvoer
        -   type: output
            code: "print Hallo allemaal"
            answer: "Hallo allemaal"
            lines: '1'
        -   type: output
            code: "print goedemorgen"
            answer: "goedemorgen"
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 2: Foutje?
                Soms sluipt er een foutje in je code. Dat is niet erg, maar Hedy kan je code dan niet goed lezen.
                Welke van deze code zijn fout, denk jij?
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: "prnt Hallo allemaal!"
            answer: "Fout"
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: "print print"
            answer: "Goed"
        -   type: text
            contents: |-
                ### Invoer vragen

                Alleen tekst is een beetje saai. Je kan in Hedy ook om _invoer_ vragen. Invoer is tekst die je aan de computer geeft.
                De computer onthoudt die tekst en kan die later weer aan jou laten zien.
                Deze code toont de vraag 'Hoe heet jij?'

                ```hedy
                ask Hoe heet jij?
                ```

                ### Invoer laten zien

                Alleen een ask slaat het antwoord op, maar laat het niet zien. Daarvoor heb je de opdracht `echo` nodig. Die laat het antwoord zien op het einde van de zin.
                Bijvoorbeeld zo:

                ```hedy
                ask Hoe heet jij?
                echo dus jij heet: 
                ```

                Als iemand die Maan heet deze code zou gebruiken, dan wordt de uitvoer:

                ```
                dus jij heet: Maan
                ```

                Let op, het komt precies zo in beeld als het er staat, dus met hetzelfde hoofdlettergebruik en de dubbele punt erbij!

                #### Opdracht 3: Voorspel de uitvoer

                Voorspel wat de uitvoer van deze codes is. Doe alsof je je eigen naam hebt ingevuld.

        -   type: output
            code: |-
                ask Hoe heet jij?
                echo dus jij heet:
            answer: "dus jij heet: **naam**"
            lines: '2'
        -   type: output
            code: |-
                ask Hoe heet jij?
                echo Leuk om je te ontmoeten,
            answer: "Leuk om je te ontmoeten, **naam**"
            lines: '2'
        -   type: text
            contents: |-
                #### Opdracht 4: Programmeer-woorden 

                Iedere les gaan we nieuwe woorden leren, deze les ook. Weet jij wat deze termen betekenen? Leg het uit je eigen woorden.
        -   type: define
            word: commando
            answer: "Een opdracht die je aan de computer geeft, bijv print."
            lines: '1'
        -   type: define
            word: invoer
            answer: "Wat je intikt, als Hedy een ask venster laat zien."
            lines: '1'
        -   type: define
            word: uitvoer
            answer: "Wat Hedy op het scherm zet als je op Uitvoeren drukt, in het rechterscherm."
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 5: Codes

                We hebben tot nu toe 3 codes geleerd: `print`, `ask` en `echo`. Wat doen die? Leg het uit in je eigen woorden. 

        -   type: define
            word: het commando `print`
            answer: "Zet tekst op het scherm."
            lines: '1'
        -   type: define
            word: het commando `ask`
            answer: "Vraagt om invoer van de gebruiker."
            lines: '1'
        -   type: define
            word: het commando `echo`
            answer: "Herhaalt de invoer van de gebruiker."
            lines: '1'
    -   level: '2'
        intro: |-
            ### Variabelen

            Aan het einde van de les kun jij:

            * Iets opslaan in een variabele
            * Een verhaal en tekening maken waarin je een variabele gebruikt
        exercises:
        -   type: text
            contents: |-
                ### Variabele opslaan en gebruiken

                Je hebt net op het bord de `is` opdracht gezien. 
                Een `is` opdracht slaat iets op in de computer, en geeft het een naam. We noemen dat een variabelen.
                Wat in de variabele is opgeslagen noemen we de waarde van de variabele.
            code: |-
                naam is Mo
                print naam
        -   type: text
            contents: |-
                #### Opdracht 1: Omcirkel het juiste stukje code
        -   type: circle
            goal: variabelen
            code: |-
                naam is Hedy
                print Hallo naam
                leeftijd is 17
                print Jij bent leeftijd jaar oud
            answer: "Op alle regels"
        -   type: circle
            goal: plekken waar een variabele **wordt ingesteld**
            code: |-
                naam is Hedy
                print Hallo naam
                leeftijd is 17
                print Jij bent leeftijd jaar oud
            answer: "Op regel 1 en 3"
        -   type: circle
            goal: plekken waar een variabele **wordt gebruikt**
            code: |-
                naam is Hedy
                print Hallo naam
                leeftijd is 17
                print Jij bent leeftijd jaar oud
            answer: "Op regel 2 en 4"
        -   type: text
            contents: |-
                #### Opdracht 2: Voorspel de uitvoer           
                Tip: Vind je het lastig om de uitvoer te voorspellen? Gebruik dan dit stappenplan:

                1. Omcirkel de plek waar een variabele wordt ingesteld
                2. Omcirkel de plek waar de variabele wordt gebruikt
                3. Trek een lijn tussen deze plekken
                4. Zet de waarde (aan de rechterkant van de `is`) op de plek van het gebruik.
# TODO Voorbeeldje?
        -   type: output
            code: |-
                naam is Mo
                print Goed bezig naam!
            answer: "Goed bezig Mo!"
            lines: '1'
        -   type: output
            code: |-
                naam is Mo
                print Goed bezig Mo!
            answer: "Goed bezig Mo!"
            lines: '1'
        -   type: output
            code: |-
                voornaam is Layla
                print Goedemorgen naam!
            answer: "Goedemorgen Layla!"
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 3: Foutje?
                Lees de codes goed! Welke zijn er goed of fout.

        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                achternaam is Jansen
                print Goedemorgen achternaam!
            answer: "Goed"

        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                naam is
                print Goedemorgen naam!
            answer: "Fout. naam wordt niet ingesteld"

        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                naam is Jansen
                print Goedemorgen meneer naam!
                print Hallo meneer naam!
            answer: "Goed. Je mag een variabele meer dan eens gebruiken"
        -   type: text
            contents: |-
                ### Invoer vragen

                Alleen tekst opslaan is nog niet krachtig. In level 1 hebben we de code `ask` gezien.

                Die code mag je nu combineren met een `is`. Dat gaat zo:
            code: |-
                naam is ask Hoe heet jij?

        -   type: text
            contents: |-
                ### Invoer laten zien
                Je kan nu gewoon met een `print` het antwoord laten zien, zonder `echo`.
            code: |-
                naam is ask Hoe heet jij?
                print dus jij heet: naam

        -   type: text
            contents: |-
                Als iemand die Maan heet deze code zou gebruiken, dan wordt de uitvoer: `dus jij heet: Maan`
                #### Opdracht 4: Voorspel de uitvoer            
                Voorspel wat de uitvoer van deze codes is. Doe alsof je je eigen naam hebt ingevuld.
        -   type: output
            code: |-
                naam is ask Hoe heet jij?
                print dus jij heet: naam
            answer: "Dus jij heet: **naam**"
            lines: '1'
        -   type: output
            code: |-
                toestand is ask Hoe gaat het met jou?
                print Dus het gaat toestand met jou
            answer: "Dus het gaat **goed** met jou"
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 5: Programmeer-woorden
                We hebben deze les weer nieuwe woorden geleerd! Leg ze uit je eigen woorden.
        -   type: define
            word: variabele
            answer: "Een naam die je geeft aan iets, bijv voornaam of leeftijd."
            lines: '1'
        -   type: define
            word: waarde
            answer: "Wat je opslaat in een variabele, bijv Henk of 12."
            lines: '1'
        -   type: define
            word: instellen
            answer: "Het instellen van een variabele met een is code"
            lines: '1'
        -   type: define
            word: interactief
            answer: "Een programma waarbij een gebruiker invoer kan geven."
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 6: Codes
                We hebben nieuwe codes geleerd: `is`, `is ask` samen. Wat doen die? Leg het uit in je eigen woorden.
        -   type: define
            word: het commando `is`
            answer: "Waarde (rechts van de is) opslaan in een variabele (links van de is)"
            lines: '1'
        -   type: define
            word: het commando `is ask`
            answer: "Vraagt om invoer van de gebruiker en die opslaan in de variabele links van de is."
            lines: '1'
    -   level: '3'
        intro: |-
            ### Lijsten en willekeurigheid
            Aan het einde van de les kun jij:

            * Meerdere dingen opslaan in een variabele, zo'n variabele heet een lijst.
            * Een verhaal maken waarin willekeurige dingen gebeuren.
            * Een tekening maken waarin willekeurige dingen verschijnen.
        exercises:
        -   type: text
            contents: |-
                ### Variabelen
                Je hebt net op het bord de `is` opdracht gezien met een lijst. 
                Net als bij een gewone variabele, slaan we iets op in een lijst met `is`.
            code: |-
                vrienden is Mo, Layla, Denny
                print Ik ga vandaag naar vrienden at random

        -   type: text
            contents: |-
                #### Opdracht 1: Omcirkel het juiste stukje code              

        -   type: circle
            goal: lijsten
            code: |-
                vandaag is maandag
                klassen is 1HC, 1HB, 1HA
                lokalen is 011, 304, 305, OLC
            answer: "klassen en lokalen"
        -   type: circle
            goal: plek(ken) waar tekst uit een lijst wordt gebruikt
            code: |-
                klassen is 1HC, 1HB, 1HA
                print vandaag heeft klassen at random vrij!
            answer: "Op het einde van regel 2"
        -   type: text
            contents: |-
                #### Opdracht 2: Voorspel de uitvoer
                Vind je het lastig? Gebruik dan weer het stappenplan om variabele-uitvoer te voorspellen.

                1. Omcirkel de plek waar de lijst wordt ingesteld
                2. Omcirkel de plek waar de lijst wordt gebruikt
                3. Trek een lijn tussen deze plekken
                4. Bij een `at` `random` mag je zelf willekeurig iets uit de lijst kiezen.
        -   type: output
            code: |-
                docenten is Hermans, Merbis, Bagci, Senkal
                print Vandaag les van docenten at random!
            answer: Vandaag les van **keuze uit docenten**
            lines: '1'
        -   type: output
            code: |-
                docenten is Hermans, Merbis, Bagci, Senkal
                print De docent vandaag is Hermans.
            answer: De docent vandaag is Hermans.
            lines: '1'
        -   type: output
            code: |-
                weer is zonnig, regen, wolken, onweer
                print Wat is het lekker weer vandaag!
            answer: Wat is het lekker weer vandaag!
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 3: Foutje?
                Lees de codes goed! Welke zijn er goed of fout.
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                weer is zonnig, regen, wolken, onweer
                print Bah! De computer loopt weer vast.
            answer: "Fout. Je kan een lijst niet printen."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                docenten is Hermans
                print Vandaag alweer docenten at random
            answer: "Fout, docenten is geen lijst"
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                docenten is onweer, regen, ijzel
                print Vandaag alweer docenten at random!
            answer: "Goed, de naam hoeft niet te kloppen voor de computer."
        -   type: text
            # [Teacher] Dit zijn alle avonturen zonder `add to` en `remove from`.[/Teacher]
            # Misschien ook nog even mooier weergeven?
            contents: |-
                ## Avonturen
                Dit is een goed moment voor deze avonturen:
                Introductie
                Willekeurig
                Dobbelsteen
                Steen, papier, schaar
                Muziek
                Waarzegger
                Restaurant
                Spookhuis
                Afwas?
        -   type: text
            contents: |-
                ### Lijsten aanpassen

                Tot nu toe hebben we lijsten steeds aan het begin van het programma ingesteld.
            code: |-
                antwoorden is ja, nee, misschien
                print Het antwoord is antwoorden at random
        -   type: text
            contents: |-
                Maar soms wil je dat de gebruiker van een programma ook opties kan toevoegen.
                Dat doe je met een `add` en een `to` commando. Je kan ook iets uit een lijst verwijderen, met `remove` en `from`.

            code: |-
                dieren is 🐿, 🦔, 🦇, 🦉
                dier is ask Wat zou het kunnen zijn?
                add dier to dieren
                print het was een dieren at random
        -   type: text
            contents: |-
                #### Opdracht 4: Goed of fout?

        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                letters is a,b,c,d
                remove a to letters
            answer: "Fout. Bij remove hoort from, niet to."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                eten is pizza, friet, kapsalon
                remove kroket from eten
            answer: "Goed, je mag iets verwijderen dat niet in de lijst zit. Maar dat heeft natuurlijk geen nut."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                eten is pizza, friet, kapsalon
                add pizza to eten
            answer: "Goed, je mag iets toevoegen dat al in de lijst zit. Dan staat het twee keer op de lijst."
        -   type: text
            contents: |-
                #### Opdracht 5: Schrijf de code
                Kijk goed naar de uitvoer, en schrijf er een passende code bij.
                **Zorg ervoor dat er steeds minstens een willekeurige keuze in je programma zit, dus niet alleen een print!**
        -   type: input
            answer: |-
                nummers is 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                print Welkom bij de bingoavond
                print De drie geluksnummers zijn:
                print nummers at random en print nummers at random en print nummers at random
            output: |-
                Welkom bij de bingoavond
                De drie geluksnummers zijn:
                5 en 3 en 10
        -   type: input
            answer: |-
                films is Avengers, Barbie, Inside Out
                print We gaan vanavond naar de film.
                print We kiezen: films at random
            output: |-
                We gaan vanavond naar de film.
                We kiezen: Inside Out

        -   type: text
            contents: |-
                #### Opdracht 6: Programmeerwoorden
                We hebben deze les weer nieuwe programmeerwoorden geleerd! Leg ze uit je eigen woorden.

        -   type: define
            word: lijst
            answer: "Een variabele waarin meerdere waardes kunnen worden opgeslagen"
            lines: '1'
        -   type: define
            word: willekeurig
            answer: "Iets dat door de computer wordt uitgekozen."
            lines: '1'
        -   type: define
            word: toevoegen
            answer: "Iets in een lijst erbij zetten"
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 7: Codes
                De code `is` is in dit level veranderd, en we hebben ook nieuwe codes geleerd.
                Wat doen die? Leg het uit in je eigen woorden.
        -   type: define
            word: "het commando `is` (Let op: `is` kan dus meerdere dingen doen!)"
            answer: "Waarde (rechts van de is) opslaan in een variabele of lijst (links van de is)"
            lines: '1'
        -   type: define
            word: "het commando `add to` "
            answer: "Voeg iets aan een lijst toe. Het element om toe te voegen staat tussen `add` en `to`, en de lijst staat erachter."
            lines: '1'
        -   type: define
            word: "het commando `remove from` "
            answer: "Verwijdert iets uit een lijst. Het element om te verwijderen staat tussen `add` en `to`, en de lijst staat erachter."
            lines: '1'
        -   type: define
            word: "het commando `at random` "
            answer: "Kiest een willekeurig element uit de lijst."
            lines: '1'
        -   type: text
            contents: |-
                #### Wat vond jij?

        -   type: question
            text: "Wat was de leukste opdracht van dit level?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht leuk?"
            lines: '5'
        -   type: question
            text: "Welke opdracht was het minst leuk?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht niet leuk?"
            lines: '5'
    -   level: '4'
        intro: |-
            ## Aanhalingstekens
            Aan het einde van de les:

            * snap jij waarom aanhalingstekens nodig zijn in programmeren.
            * kan jij aanhalingstekens op de goede plek in code zetten.
            * kan jij foutmeldingen over aanhalingstekens goed lezen.
        exercises:
        -   type: text
            contents: |-
                ### Aanhalingstekens

                We hebben geleerd om aanhalingstekens te gebruiken, als iets letterlijk zo in beeld moet komen.
                We gebruiken aanhalingstekens bij `print` en bij `ask`.
            code: |-
                vriend is ask 'Hoe heet jij?'
                print 'Leuk! Ik ga naar de stad met ' vriend
        -   type: text
            contents: |-
                #### Opdracht 1: Maak de code af.
                Deze opdrachten doe je in twee stappen:
                1. Zet op de juiste plekken aanhalingstekens in de code.
                2. Staat alles goed? Voorspel dan wat de uitvoer van de code is.

        -   type: output
            code: |-
                print Hallo allemaal!
                print Welkom bij Hedy
            answer: |-
                Hallo allemaal!
                Welkom bij Hedy
            lines: '2'
        -   type: text
            contents: |-
                Vergeet niet deze opdrachten in twee stappen te doen, eerst de aanhalingstekens links.
                Dan de code rechts!

        -   type: output
            code: |-
                naam is Hermans
                lokaal is 305
                print Vandaag hebben we les van naam in lokaal!
            answer: "Vandaag hebben we les van Hermans in 305!"
            lines: '1'
        -   type: output
            code: |-
                docenten is Hermans, Merbis, Bagci, Senkal
                print De docent vandaag is docenten at random.
            answer: "De docent vandaag is Hermans"
            lines: '1'
        -   type: output
            code: |-
                weer is zonnig, regen, wolken, onweer
                print Wat is het lekker weer vandaag!
            answer: "Wat is het lekker weer vandaag!"
            lines: '1'
        -   type: output
            code: |-
                print Wat is het lekker weer vandaag!
                naam is Bassie
            answer: "Wat is het lekker weer vandaag!"
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 2: Foutje?
                Lees de codes goed! Welke zijn er goed of fout.
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: "print 'Daar lopen twee lama's'"
            answer: "Fout. Er staat een aanhalingsteken tussen de enkele aanhalingstekens."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: "print 'De lama wandelt op straat"
            answer: "Fout. De aanhalingstekens moeten altijd in paren gebruikt worden."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                print "Daar lopen twee oma's"
            answer: "Goed! Als je twee aanhalingstekens gebruikt dan kan je wel oma's schrijven."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                print 'De lama wandelt op straat'
                print "Wat een avontuur"
            answer: "Goed. Je mag aanhalingstekens door elkaar gebruiken, als ze per regel maar hetzelfde zijn!"
        -   type: text
            contents: |-
                #### Ask
                Vergeet niet dat je ook bij `ask` aanhalingstekens gebruikt!

                #### Opdracht 3: Foutje?
                Lees de codes goed! Welke zijn er goed of fout.

        -   type: MC-code
            options: ["Goed", "Fout"]
            code: "ask 'Zie jij die twee konijnen daar?'"
            answer: "Fout. Vergeet niet bij ask een variabele te gebruiken!"
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: "naam is ask 'Hoe heet jij?"
            answer: "Fout. Aanhalingstekens moeten altijd in paren gebruikt worden."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                aantal is ask "Hoeveel capibara's lopen daar?"
            answer: "Goed."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                aantal is ask "Hoeveel capibara's lopen daar?"
                print 'Dat zijn er aantal'
            answer: "Fout. Het woord aantal wordt geprint en niet de variabele"
        -   type: text
            contents: |-
                #### Opdracht 4: Schrijf de code
                Kijk goed naar de uitvoer, en schrijf er een passende code bij.

        -   type: input
            answer: |-
                print 'Welkom bij de bingoavond'
                print 'Hier komt het eerste getal...!'
            output: |-
                Welkom bij de bingoavond
                Hier komt het eerste getal...!

        -   type: input
            answer: |-
                print 'We gaan vanavond naar de film.'
                film is ask 'Waar heb jij zin in?'
            output: |-
                We gaan vanavond naar de film.
                Waar heb jij zin in?
        -   type: text
            contents: |-
                #### Opdracht 5: Programmeerwoorden
                We hebben deze les weer nieuwe programmeerwoorden geleerd! Leg ze uit je eigen woorden.
        -   type: define
            word: aanhalingstekens
            answer: "Hoge komma's, die je gebruikt als je iets letterlijk wilt printen."
            lines: '1'
        -   type: define
            word: het om aanhalingstekens te gebruiken in Hedy?
            answer: "Je gebruikt aanhalingstekens wanneer iets door de computer precies zo moet worden geprint."
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 6: Codes
                We hebben ook nieuwe codes geleerd in level 4.
        -   type: define
            word: het commando `clear`?
            answer: "Maakt het scherm leeg"
            lines: '1'
        -   type: define
            word: het commando `color`?
            answer: "Verandert de kleur van de turtle"
            lines: '1'
        -   type: text
            contents: |-
                #### Wat vond jij?
        -   type: question
            text: "Wat was de leukste opdracht van dit level?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht leuk?"
            lines: '5'
        -   type: question
            text: "Welke opdracht was het minst leuk?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht niet leuk?"
            lines: '5'
    -   level: '5'
        intro: |-
            ## if else
            Aan het einde van de les:
            * hoe je de computer kan laten reageren op invoer.
        exercises:
        -   type: text
            contents: |-
                ### Keuzes maken
                Tot nu toe voerde Hedy altijd alle regels code uit. Vanaf nu kan je met een `if` bepaalde regels uitvoeren, alleen in bepaalde gevallen.
                De code die je na `if` schrijft, noem je een conditie.
                In dit voorbeeld is de conditie `vriend is Jasmijn`.
            code: |-
                vriend is ask 'Hoe heet jij?'
                if vriend is Jasmijn print 'Hallo!' else print 'Nee, jij niet!'
        -   type: text
            contents: |-
                #### Opdracht 1: Onderstreep de condities
                Wat is een conditie? Onderstreep in deze codes steeds de conditie.
        -   type: circle
            goal: de conditie
            code: |-
                vandaag is ask 'Welke dag is het?'                    
                if vandaag is vrijdag print 'Ja' else print 'Nee'
            answer: "vandaag is vrijdag"
        -   type: circle
            goal: de conditie
            code: |-
                vandaag is ask 'Welke dag is het?'                    
                if vandaag is zaterdag print 'Geen school vandaag' 
                else print 'Helaas wel'
            answer: "vandaag is zaterdag"
        -   type: circle
            goal: de conditie
            code: |-
                leeftijd is ask 'Hoe oud ben jij?'                    
                if leeftijd is 16 print 'Perfecto'
                else print 'Jij bent te jong!'
            answer: "leeftijd is 16"
        -   type: text
            contents: |-
                #### Opdracht 2: Omcirkel de juiste regels
                Welke code wordt uitgevoerd? Omcirkel alleen die stukken.
                Doe alsof het vandaag vrijdag is, en jij 12 jaar bent.

        -   type: circle
            goal: code die wordt **uitgevoerd**
            code: |-
                vandaag is ask 'Welke dag is het?'                    
                if vandaag is vrijdag print 'Ja' else print 'Nee'
            answer: "print 'Ja'"
        -   type: circle
            goal: code die wordt **uitgevoerd**
            code: |-
                vandaag is ask 'Welke dag is het?'                    
                if vandaag is zaterdag print 'Geen school vandaag' 
                else print 'Helaas wel'
            answer: "print 'Helaas wel'"
        -   type: circle
            goal: code die wordt **uitgevoerd**
            code: |-
                leeftijd is ask 'Hoe oud ben jij?'                    
                if leeftijd is 16 print 'Perfecto' 
                else print 'Jij bent te jong!'
            answer: "print 'Jij bent te jong!'"
        -   type: text
            contents: |-
                #### Opdracht 3: Foutje?
                Lees de codes goed! Welke zijn er goed of fout.

        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                leeftijd is ask 'Hoe oud ben jij?'                    
                if leeftijd is 16 print 'Perfecto' else 'Jij bent te jong!'
            answer: "Fout. Er staat geen print achter else"
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                dier is ask 'Wat voor dier is dat?'                    
                if dier is Lama print 'Beeeee'
            answer: "Goed! Er hoeft geen else code te staan"
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: "print \"Daar lopen twee oma's\""
            answer: "Goed! Als je twee aanhalingstekens gebruikt dan kan je wel oma's schrijven."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                if naam Hedy 
                print 'Programmeren is leuk!'
            answer: "Fout, de is mist."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                ask 'Hoe heet deze school?'
                if school is LK print 'Ja!'
            answer: "Fout. Er staat geen variabele bij ask."
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                aantal is ask "Hoeveel capibara's lopen daar?"
                if aantal is 5 print 'Dat zijn er dan aantal'
            answer: "Fout. Het woord aantal wordt geprint en niet de variabele"
        -   type: text
            contents: |-
                #### Opdracht 4: Voorspel de uitvoer
                Wat is de uitvoer van deze programma's? 
                Let op! Soms staat er random in een programma. Dan moet je zelf kiezen wat Hedy zou kiezen.
                Er kunnen dan dus meerdere antwoorden goed zijn!

        -   type: output
            code: |-
                docenten is Hermans, Merbis, Bagci, Senkal                    
                docent is docenten at random                    
                if docent is Hermans print 'Hoera!'
            answer: "Hoera! of niks"
            lines: '1'
        -   type: output
            code: |-
                docenten is Hermans, Merbis, Bagci, Senkal                    
                docent is docenten at random                    
                if docent is Hermans print 'Jammer!' else print 'Hoera!'
            answer: "Hoera! of Jammer!"
            lines: '1'
        -   type: output
            code: |-
                getallen is 1, 2, 3, 4, 5, 6, 7, 8, 9, 10                    
                print 'Welkom bij de bingoavond'                    
                getal is getallen at random                    
                if getal is 10 print 'Gewonnen!' else print 'Helaas'
            answer: |-
                Welkom bij de bingoavond
                Gewonnen! of Helaas
            lines: '2'
        -   type: output
            code: |-
                getal is ask 'Wat is jouw lievelingsgetal?'                    
                if getal is 10 print 'Mijne ook!'
            answer: "Mijne ook! of niks"
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 5: Programmeerwoorden
                We hebben deze les weer nieuwe programmeerwoorden geleerd! Leg ze uit je eigen woorden.

        -   type: define
            word: conditie
            answer: "Iets dat waar of niet waar is. Het staat achter de code `if`"
            lines: '1'
        -   type: text
            contents: |-
                #### Opdracht 6: Codes
                We hebben ook nieuwe codes geleerd in level 5.

        -   type: define
            word: het commando `if`
            answer: "Bepaalt welke regel wordt uitgevoerd. Als de conditie waar is, wordt de code erachter uitgevoerd."
            lines: '1'
        -   type: define
            word: het commando `else`
            answer: "Bepaalt welke regel wordt uitgevoerd. Als de conditie niet waar is, wordt de code erachter uitgevoerd."
            lines: '1'
        -   type: text
            contents: |-
                #### Wat vond jij?

        -   type: question
            text: "Wat was de leukste opdracht van dit level?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht leuk?"
            lines: '5'
        -   type: question
            text: "Welke opdracht was het minst leuk?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht niet leuk?"
            lines: '5'
    -   level: '6'
        intro: |-
            ## Rekenen
            Aan het einde van de les weet jij:
            * hoe je met Hedy kan rekenen
        exercises:
        -   type: text
            contents: |-
                ### Rekenen
                Een belangrijke taak die computers goed kunnen uitvoeren is rekenen.

                De plus is makkelijk, die schrijf je zoals bij rekenen: `5 + 5`.
                De min gaat ook goed, dat is `5 - 5`. 
                De keer is een beetje anders, die programmeer je met het sterretje (boven de 8): `5 * 5`.
                Gedeeld door gaat met een schuine streep vooruit: `5 / 5`.

                Let op! Rekencode hoeft niet tussen aanhalingstekens.

            code: |-
                print 'vijf keer vijf is ' 5 * 5
        -   type: text
            contents: |-
                #### Opdracht 1: Voorspel the uitvoer
                Wat is de uitvoer van deze programma's?
        -   type: output
            code: |-
                print 'twee plus tien is ' 2 * 10
                print 5 * 5 ' is 30 min 5'
                print 10 / 2
            answer: |-
                twee plus tien is 20
                25 is 30 min 5
                5
            lines: '3'
        -   type: text
            contents: |-
                #### Opdracht 2: Rekenen
                Deze opdracht doe je weer in stappen. 
                1. Maak eerst de codes af, op een logische manier door iets in te vullen op de streepjes.
                2. Is de code af? Vul dan in wat de uitvoer van de code wordt.
        -   type: output
            code: |-
                print 'vijf plus tien is ' ___
                print 'zes min vijf is ' ___
                print 'honderd gedeeld door vijf is ' ___
                ___ _________________________ 4 * 12
            answer: |-
                vijf plus tien is 50
                zes min vijf is 1
                honderd gedeeld door vijf is 20
                vier keer twaalf is 48
            lines: '4'
        -   type: text
            contents: |-
                ### Opdracht 2: Rekenen met ask en variabelen
                Je kan een rekensom ook opslaan in een variabele, vergelijken met een `ask` en een som uitvoeren in een `if`.
                Dat gaan we nu oefenen. 
                Voorspel wat de uitvoer van deze programma's is.
                Bij een `ask` en `random` mag je zelf kiezen wat het antwoord wordt, maar het moet wel kunnen!
        -   type: output
            code: |-
                som = 2 * 5
                print 'Het antwoord op deze som is ' som
            answer: |-
                Het antwoord op deze som is 10
            lines: '1'
        -   type: output
            code: |-
                goede_antwoord = 142 / 2
                jouw_antwoord = ask 'Wat is 142 gedeeld door twee?'
                if goede_antwoord = jouw_antwoord
                print 'Knap werk!'
                else print 'Helaas pindakaas'
            answer: |-
                'Knap werk!' of 'Helaas pindakaas'
            lines: '1'
        -   type: output
            code: |-
                getallen is 2, 4, 6, 7, 9, 11, 17
                getal is getallen at random
                print 'Hoeveel is ' getal ' keer 7?'
            answer: |-
                Hoeveel is 7 keer 7? (of een ander getal uit 2, 4, 6, 9, 11, 17)
            lines: '1'
        -   type: output
            code: |-
                lievelings is ask 'Wat is je lievelingsgetal?'
                print '3 keer ' lievelings ' is ' 3 * lievelings
            answer: |-
                3 keer 6 (bijvoorbeeld) is 18
            lines: '1'
        -   type: text
            contents: |-
                ### Opdracht 3: Invoer
                Je krijgt nu weer een uitvoer te zien. Schrijf een programma dat bij deze uitvoer kan horen.
                Let op: vaak zijn er meerdere antwoorden goed, je mag zelf iets kiezen, als het maar kan.
                Kijk ook goed naar het aantal streepjes!
        -   type: input
            answer: |-
                print 'Dit is een heel groot getal:' 4*17
            output: |-
                Dit is een heel groot getal: 68
        -   type: input
            answer: |-
                print 1000/10 ' is het antwoord op 1000/10.'
            output: |-
                100 is het antwoord op 1000/10.
        -   type: input
            answer: |-
                getallen is 1,2,3,4,5,6,7,8,9,10
                print getallen at random * 7 ' is een willekeurig getal uit de tafel van 7'
            output: |-
                14 is een willekeurig getal uit de tafel van 7
        -   type: text
            contents: |-
                #### Opdracht 4: Programmeerwoorden
                We hebben deze les nieuwe programmeertekens geleerd. We oefenen ze nog een keer.
        -   type: define
            word: "keer"
            answer: "*"
            lines: '1'
        -   type: define
            word: "gedeeld door"
            answer: "/"
            lines: '1'
        -   type: text
            contents: |-
                #### Wat vond jij?
        -   type: question
            text: "Wat was de leukste opdracht van dit level?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht leuk?"
            lines: '5'
        -   type: question
            text: "Welke opdracht was het minst leuk?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht niet leuk?"
            lines: '5'
    -   level: '7'
        intro: |-
            ## Herhalen!
            Aan het einde van de les kan jij:
            * een regel code meerdere keren uitvoeren
        exercises:
        -   type: text
            contents: |-
                ### Herhaling
                Soms wil je één regel code meerdere keren herhalen, bijvoorbeeld in een liedje of verhaal.
            code: |-
                repeat 5 times print 'Baby shark!'
        -   type: text
            contents: |-
                #### Opdracht 1: Voorspel de uitvoer
                Wat is de uitvoer van deze programma's?
        -   type: output
            code: |-
                repeat 3 times print 'Baby shark!'
            answer: |-
                Baby shark!
                Baby shark!
                Baby shark!
            lines: '3'
        -   type: output
            code: |-
                repeat 1 times print 'Hallo allemaal!'
            answer: |-
                Hallo allemaal!
            lines: '1'
        -   type: output
            code: |-
                a is 4
                repeat a times print 'Hallo allemaal!'
            answer: |-
                Hallo allemaal!
                Hallo allemaal!
                Hallo allemaal!
                Hallo allemaal!
            lines: '4'
        -   type: text
            contents: |
                ### Opdracht 2: Invoer
                Je krijgt nu weer een uitvoer te zien. Schrijf een programma dat bij deze uitvoer kan horen.

                Let op: vaak zijn er meerdere antwoorden goed, je mag zelf iets kiezen, als het maar kan.
                Kijk ook goed naar het aantal streepjes!
        -   type: input
            answer: |-
                print 'Hallo allemaal!'
                repeat 2 times print 'Dit is een regel'
            output: |-
                Hallo allemaal!
                Dit is een regel
                Dit is een regel
            lines: '2'
        -   type: input
            answer: |-
                print 'Dit is regel 1'
                print 'Dit is regel 2'
                print 'Dit is regel 3'
            output: |-
                Dit is regel 1
                Dit is regel 2              
                Dit is regel 3
            lines: '3'
        -   type: text
            contents: |-
                ### Opdracht 3: Goed of fout?
                Lees de code goed, en bepaal of deze code een foutmelding oplevert.
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                print 'De prins riep steeds om hulp'
                repeat 3 times 'Help!'
            answer: Fout, print mist
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                forward 100
                repeat 3 times turn 90
            answer: Goed
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                mensen = mama, papa, Emma, Sophie
                repeat 7 times print 'De afwasser is ' mensen
            answer: Fout, at random mist
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                dobbel = 1, 2, 3, 4, 5, 6
                repeat 5 times print 'Jij gooit: ' dobbel at random
            answer: Goed
        -   type: text
            contents: |-
                #### Opdracht 4: Programmeerwoorden
                We hebben deze les een nieuw programmeerwoord geleerd: `repeat`.
        -   type: define
            word: "repeat"
            answer: "een regel code herhalen"
            lines: '1'
        -   type: text
            contents: |-
                #### Wat vond jij?
        -   type: question
            text: "Wat was de leukste opdracht van dit level?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht leuk?"
            lines: '5'
        -   type: question
            text: "Welke opdracht was het minst leuk?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht niet leuk?"
            lines: '5'
    -   level: '8'
        intro: |-
            ## Herhalen!
            Aan het einde van de les kan jij:
            * meerdere regels code meerdere keren uitvoeren
        exercises:
        -   type: text
            contents: |-
                ### Herhaling
                Misschien heb je al gezien dat de herhaling nu maar heel simpel is, maar één regel.
                Vaak wil je meerdere regels herhalen, om een complexer programma te maken.
                Dat gaat in Hedy, en ook in Python, met inspringen!
                Inspringen betekent spaties voor regels code zetten.
            code: |-
                repeat 5 times
                    print 'Baby shark!'
        -   type: text
            contents: |-
                #### Opdracht 1: Welke regels worden er herhaald?

                Tip: Kijk goed welke regels inspringen, oftewel met spaties beginnen!
        -   type: circle
            goal: inspringen
            code: |-
                repeat 3 times
                    print 'Baby shark!'
                    print 'Tudu tudu tudu!'                  
                print 'Baby shark!'
            answer: Regels 2 en 3
        -   type: circle
            goal: inspringen
            code: |-
                print 'Hallo!'
                repeat 2 times
                    print 'Ja, hallo allemaal'
            answer: Regel 3
        -   type: circle
            goal: inspringen
            code: |-
                naam is ask 'Hoe heet jij?'
                if naam is Hedy
                    print 'Ja'
                else
                    print 'Nee'
            answer: Geen regels! Bij if spring je wel in, maar worden regels niet herhaald!

        -   type: text
            contents: |-
                #### Opdracht 2: Voorspel de uitvoer
                Wat is de uitvoer van deze programma's?
        -   type: output
            code: |-
                print 'Hallo!'
                repeat 1 times 
                    print ':)'
            answer: |-
                Hallo!
                :)
        -   type: output
            code: |-
                print 'Hallo!'
                repeat 5 times 
                    print ':('
                print 'En klaar!'
            answer: |-
                Hallo!
                :(
                :(
                :(
                :(
                :(
                En klaar!
        -   type: text
            contents: |
                ## If en else
                Ook bij `if` en `else` moet je inspringen gebruiken. Zo kan je als een conditie waar of niet waar is, ook meerdere regels uitvoeren.

                ### Opdracht 3: Voorspel de uitvoer

                Voorspel de uitvoer van deze codes.
        -   type: output
            code: |-
                naam is ask 'Hoe heet jij?'
                if naam is Hedy
                    print 'Ja'
                else
                    print 'Nee'
            answer: 'Nee'
            lines: '1'
        -   type: output
            code: |-
                getallen is 1, 2, 3, 4, 5, 6, 7
                keuze is getallen at random
                if keuze is vijf
                    print 'Hoera!'
                    print 'Hoera!'
                else
                    print 'Jammer hoor'
            answer: 'Jammer hoor'
            lines: '2'
        -   type: output
            code: |-
                dobbel = 1, 2, 3, 4, 5, 6
                repeat 3 times 
                    print 'Jij gooide: ' dobbel at random
                    print 'Het spel is nu afgelopen'
            answer: |-
                Jij gooide: <1, 2, 3, 4, 5 of 6 >
                Het spel is nu afgelopen
                Jij gooide: <1, 2, 3, 4, 5 of 6 >
                Het spel is nu afgelopen
                Jij gooide: <1, 2, 3, 4, 5 of 6 >
                Het spel is nu afgelopen
            lines: '6'
        -   type: text
            contents: |-
                ### Opdracht 4: Goed of fout?
                Lees de code goed, en bepaal of deze code een foutmelding oplevert.
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                naam is Hermans
                if naam is Senkal
                  print 'Hoera!'
                else
                print 'Pech'
            answer: Fout, er is niet ingesprongen bij else
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                nummer is 10
                  if nummer is 5
                print 'Hoera!'
                  else
                print 'Pech'
            answer: Fout, er is verkeerd ingesprongen
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                mensen = mama, papa, Emma, Sophie
                repeat 7 times print 'De afwasser is ' mensen at random
            answer: Fout, repeat mag niet meer op één regel
        -   type: MC-code
            options: ["Goed", "Fout"]
            code: |-
                dag is ask 'Welke dag is het?'
                if dag is vrijdag
                  print 'Hoera!'
            answer: Goed
        -   type: text
            contents: |-
                #### Opdracht 5: Schrijf de code
                Je krijgt uitvoer in beeld, en jij moet er kloppende code bij schrijven. Gebruik een `repeat` waar het kan

                Kijk ook goed naar het aantal regels code dat je nodig hebt!
        -   type: input
            answer: |-
                repeat 4 times
                    print 'Joehoe!'
            output: |-
                Joehoe!
                Joehoe!  
                Joehoe!
                Joehoe!
        -   type: input
            answer: |-
                repeat 2 times
                    print 'Vader Jacob...'
                repeat 2 times
                    print 'Slaapt gij nog?'
                repeat 2 times
                    print 'Alle klokken luiden!'
                repeat 2 times
                    print 'Bim bam bom!'
            output: |-
                Vader Jacob...
                Vader Jacob...  
                Slaapt gij nog?
                Slaapt gij nog?
                Alle klokken luiden!
                Alle klokken luiden!
                Bim bam bom!
                Bim bam bom!
        -   type: text
            contents: |-
                #### Opdracht 6: Programmeerwoorden
                We hebben deze les een nieuw programmeerwoord geleerd: inspringen.
        -   type: define
            word: "Hoe laat je een regel code inspringen?"
            answer: "een regel code laten beginnen met spaties"
            lines: '1'

        -   type: text
            contents: |-
                #### Wat vond jij?
        -   type: question
            text: "Wat was de leukste opdracht van dit level?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht leuk?"
            lines: '5'
        -   type: question
            text: "Welke opdracht was het minst leuk?"
            lines: '1'
        -   type: question
            text: "Waarom vond je juist die opdracht niet leuk?"
            lines: '5'
