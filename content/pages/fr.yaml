title: "Documentation de Hedy"
sections:
-   title: "Introduction"
    subsections:
    -   title: "Qu'est-ce qu'Hedy ?"
        text: |
            Hedy est un langage de programmation textuel, spécifiquement développé pour les (pré-)ados (10 à 15 ans).
            Contrairement aux langages de programmation pour les enfants, comme Scratch, Hedy n'utilise pas de blocs de code.
            Ainsi, avec Hedy vous apprendrez à taper du code comme les vrais programmeurs, mais en petites étapes avec des exercices ludiques.
            De cette façon, Hedy peut fonctionner comme un tremplin vers de vrais langages de programmation comme Python d'une manière accessible et surtout amusante !
            Ici vous pouvez regarder une [vidéo] (https://www.youtube.com/watch?v=EdqT313rM40&amp;t=2s) sur le développement d'Hedy comme un langage de programmation.
    -   title: "Audience cible"
        text: |
            Hedy a été développée en pensant aux élèves du collège et du lycée (âgés de 10 à 15 ans).
            Il est important que les élèves soient capables de bien lire. Nous recommandons de ne pas commencer avec Hedy avant que les élèves aient atteint au moins un niveau de lecture de niveau 6ème.
            Les élèves (et les professeurs !) n'ont pas besoin d'expérience de programmation avant de commencer avec Hedy.
    -   title: "Comment fonctionne Hedy ?"
        text: |
            Hedy est séparé en plusieurs niveaux, chacun permettant d'apprendre de nouvelles commandes. Chaque niveau comprends une variété d'aventures pour pratiquer ces nouvelles commandes.
            En tant que professeur, vous décidez des aventures disponibles à vos élèves. Feront-ils un restaurant, une calculatrice ou une maison hantée, ce niveau-ci ? À chaque niveau, les aventures sont classé par ordre de difficulté croissante, de la plus simple à la plus difficile.
            Vos élèves ont relèveront ainsi continuellement de nouveaux défis. Les aventures peuvent être effectuées par les élèves par eux-même, ou vous pouvez les effectuer en groupe devant la classe. 

            Les aventures incluent du code exemple, pour que les professeurs moins technologiquement habiles puissent aussi tiliser Hedy !
            Bien sûr, Hedy est aussi pour les professeurs créatifs qui adorent créer leur propres aventures et plan d'études !

            Après avoir programmé toutes les aventures d'un certain niveau, vos élèves peuvent tester leurs connaissance dans un quiz.
            Vous pouvez suivre le progrès et le travail de vos étudiant depuis la page Classe.
    -   title: "L'enseignement avec Hedy"
        text: |
            Hedy est basé sur le web, cela signifie qu'il peut fonctionner sur n'importe quel objet avec un navigateur internet (Firefox, Google Chrome, Edge, etc) donc les portables, les chromebooks, les tablettes et même les smartphones fonctionnent avec Hedy.
            Il n'y a pas besoin de télécharger quoi que ce soit pour faire marcher Hedy, il faut juste aller sur le site web et c'est parti !
    -   title: "Appareils"
        text: |
            Tous les enseignants Hedy, programmeurs et autres fans sont les bienvenus sur notre [server Discord](https ://discord.gg/8yY7dEme9r). C'est l'endroit idéal pour chatter à propos d'Hedy : nos avons des channels où vous pouvez montrer vos projets cools et vos lessons, des channels pour remonter les bugs et des channels pour chatter avec d'autres enseignants et l'équipe Hedy.
    key: intro
-   title: "Préparatifs"
    subsections:
    -   title: "Réglage de la langue"
        text: |
            Comme enseignant, tu peux créer une classe pour tes élèves. Dans cette classe, tu peux voir les comptes des élèves et leurs programmes et tu peux suivre leurs progrès. 
            Tu peux aussi personaliser ta classe et choisir quelles aventures sont disponibles pour eux. De cette manière, tes étudiants ne seront pas submergé par la quantité d'aventures et de niveaux et ils pourront se concentrer sur les aventures que tu veux qu'ils pratiquent.
    -   title: "Sauvegarde des programmes"
        text: |
            Comme vous êtes maintenant connecté, vous verrez la bannière bleue avec Mon profil et Mes programmes.
            Ces onglets existent aussi pour vous, les élèves. Dans Mes programmes, vous pouvez trouver tous les codes qui ont été sauvegardés.

            Vous pouvez sauvegarder vos projets facilement en donnant un nom à votre projet dans la barre blanche et en appuyant sur le bouton vert Enregistrer le code.

            Que la programmation commence !
    -   title: Setting preferred language
        text: "When students create profile they are supposed to choose a 'preferred language'. Hedy will always be loaded in this selected language.\nChanging this language can always be done later on by navigation to 'My account' and 'My personal settings' again.\nFrom December 2021 on setting a preferred language is obligatory for each Hedy account.\nWhen your account or the accounts of your students have being created earlier than this date you will receive a message that a preferred language is missing.\nDon't worry! Navigate to 'My profile' and set a language in your profile settings.\nUntil you set a language Hedy will be shown in your browser language and, when this language is not supported, in English.\n\n**For non-English speakers**\nNot only can you change the language of the adventures to your own language. You can also choose which language the keywords (for example 'print' or 'ask') should be in.\nThis way you can teach your students to code with English keywords, but you can also let them program in their own laguage. For example Dutch students can use the command 'vraag' instead of 'ask'.\n"
    -   title: Storing programs
        text: "Because you are now logged in, you'll see the blue banner with My profile and My programs.\nThese tabs exist for your students too. In My programs you can find all the codes that you've saved.\n\nYou can save your projects easily by giving your project a name in the white bar and pressing the green button Save Code.\nYou (and your students) can also share programs. These programs will be posted on our explore page, for everybody to see and use.\nIf you want to unshare your program, go to 'My programs' and click 'Unshare'.\n"
    key: préparations
-   title: "L'enseignement avec Hedy"
    subsections:
    -   title: " "
        text: |
            Hedy contient beaucoup de niveaux différents qui enseignent chacun une nouvelle compétence. Nous recommandons d'enseigner un niveau par leçon.
            Cela donne à vos élèves le temps de saisir pleinement une nouvelle commande ou un nouveau concept et de s'exercer avec lui, avant de passer au niveau suivant.
            Nous utilisons cette structure dans nos leçons :
    -   title: "Introduction"
        text: |
            Vous pouvez commencer vos leçons en activant les connaissances préalables de vos élèves : Que savent-ils déjà sur le sujet, qu'ont-ils appris dans la leçon précédente et quelles erreurs ont-ils commises dont ils ont maintenant tiré les leçons ?
            De cette façon, toutes les commandes apprises précédemment et les erreurs fréquemment commises sont fraîches dans la mémoire de vos élèves, lorsque vous commencez à présenter la nouvelle leçon.
    -   title: "Introduction de nouveaux concepts et de nouvelles commandes"
        text: |
            Les nouveaux concepts et commandes peuvent être très difficiles à comprendre pour certains élèves.
            C'est pourquoi il est important de montrer à vos élèves comment utiliser correctement les nouvelles commandes.
            En particulier dans les niveaux inférieurs, où certains élèves n'ont aucune expérience de la programmation, il peut être difficile pour eux de comprendre les nouveaux concepts abstraits.
            Montrer de nombreux exemples rend un concept abstrait (par exemple : "Qu'est-ce qu'une variable ?") plus reconnaissable et plus facile à comprendre ("Regardez, la variable animal à été changé en chien").
    -   title: "Commençons le travail"
        text: |
            Chaque niveau contient différentes aventures que vous pouvez trouver dans les onglets roses. Le premier onglet rose explique les nouvelles commandes de ce niveau.
            Les onglets suivants sont des aventures que les élèves peuvent essayer et créer eux-mêmes.
            Les aventures sont classées du plus facile au plus difficile, nous vous recommandons donc de commencer par la gauche et de vous diriger vers la droite.
            Le dernier onglet "What's next" donne une petite idée de ce que vous apprendrez dans le niveau suivant. Bien entendu, vous pouvez sélectionner les aventures que vous voulez faire faire à vos élèves pour chaque niveau.
            Ils ne sont pas obligés de faire toutes les aventures. Chaque aventure contient un exemple de code, que les élèves peuvent essayer à l'aide du bouton vert.
            Le code d'exemple est copié dans le champ de travail, où les élèves peuvent essayer le code et l'adapter pour se l'approprié.
            Encouragez vos élèves à transformer les codes d'exemple en leurs propres projets en ajoutant leurs propres idées et en créant leur propre variation de l'aventure.
    -   title: "Quiz"
        text: |
            Pour vérifier si vos élèves ont assimilé toutes les nouvelles informations du niveau, vous pouvez les laisser faire le quiz.
            Le quiz contient 10 questions à choix multiple sur les nouveaux concepts et la commande de ce niveau.
            Il n'y a pas encore de quiz pour tous les niveaux, car nous sommes encore en train de les rajouter.
    -   title: "Évaluation"
        text: |
            Terminez votre leçon par une brève évaluation. Qu'ont appris les élèves ? Quelles difficultés ont-ils rencontrées ?
            Comment ont-ils appris de leurs erreurs ? Et bien sûr : Qu'ont-ils créé ?
            Les élèves sont souvent très fiers de leurs propres créations, il est donc souhaitable de garder un peu de temps pour donner à vos élèves l'occasion de montrer leur travail à leurs camarades de classe.
    key: enseigner
-   title: "Erreurs fréquemment commises"
    key: "common_mistakes"
    intro: |
        Vous pouvez apprendre de vos erreurs, surtout en codage !
        Il est inévitable de faire des erreurs, et c'est une excellente occasion d'apprendre, mais pour les enseignants, il peut être difficile de trouver la bonne solution à une erreur !
        D'autant plus que les codes deviennent de plus en plus longs au fil des niveaux. C'est pourquoi nous avons dressé une liste des erreurs fréquemment commises dans chaque niveau, ainsi que leurs solutions.
    levels:
    -   level: '1'
        sections:
        -   title: "Les élèves oublient de taper les commandes"
            example:
                error_text: |
                    Par exemple, ils tapent une phrase sans `{print}`.
                error_code: |
                    Hedy ne peut pas afficher ça.
                solution_text: |
                    Apprenez à vos élèves à toujours commencer une ligne par une commande.
                solution_code: |
                    imprimer Hedy peut imprimer ceci !
        -   title: "Les élèves utilisent des majuscules lorsqu'ils tapent des commandes"
            example:
                error_text: |
                    Les commandes ne fonctionneront pas si elles sont en majuscules.
                error_code: |
                    Demander Pourquoi mon code échoue-t-il ?
                    Imprime Parce que j'utilise des majuscules.
                solution_text: |
                    Enlevez les majuscules.
                solution_code: |
                    {ask} Pourquoi mon code marche-t-il ?
                    {print} Parce que j'ai enlevé les majuscules !
        -   title: "Students use echo without ask"
            example:
                error_text: |
                    Echo is made to repeat an answer after an ask command. Without ask echo won't do anything.
                error_code: |
                    echo Your name is
                solution_text: |
                    Add an ask command to make it work.
                solution_code: |
                    ask What's your name?
                    echo Your name is
        -   title: "Students want their echo word (variable) to be in the middle of a sentence"
            example:
                error_text: |
                    And they are right! That's why they will learn to use proper variables in the next level.
                error_code: |
                    ask Which programming language is the most fun?
                    echo is the best!
                solution_text: |
                    In level 1 we have to keep it at this:
                solution_code: |
                    ask Which programming language is the most fun?
                    echo The best is...
        -   title: "Turtle: Students let the turtle walk off of the screen"
            example:
                error_text: |
                    Often students love to try out big numbers when using the turtle, which causes the arrow to walk off the screen.
                error_code: |
                    forward 300
                    turn 90
                solution_text: |
                    In the example. students tend to think that the turn command doesn't work. Eventhough is does work, but you can't see it happening off screen. Use smaller numbers to prevent this from happening.
                solution_code: |
                    forward 100
                    turn 90
        -   title: "Turtle: Students use the command backward, but that doens't exist"
            example:
                error_text: |
                    Backward is not a command.
                error_code: |
                    backward 100
                solution_text: |
                    To make the turtle go backwards, you use the forward command and a negative number. For example:
                solution_code: |
                    forward -100
    -   level: '2'
        sections:
        -   title: "Students make typos in their commands"
            example:
                error_text: |
                    Hedy can't recognize a command with a typo.
                error_code: |
                    prinnt Don't make typos!
                solution_text: |
                    Teach your students to read the error messages. This way they can find out themselves what went wrong.
                solution_code: |
                    print Don't make typos!
        -   title: "Students forget that the ask command has changed"
            example:
                error_text: |
                    In this level students learn about variables. The ask command requires a variable as well, but students forget this.
                error_code: |
                    ask what would you like to eat?
                solution_text: |
                    In this level you have to tell Hedy where to save your answer, so it can be used later on. This is called a variable.
                solution_code: |
                    order is What would you like to eat?
        -   title: "Students try to use the echo command. "
            example:
                error_text: |
                    For some students it might be frustrating to learn that the echo command doesn't work anymore. That's why it's very important to explain the advantages of using variables. For example you can use multiple variables in a code, and you can put them anywhere you like in a sentence!
                error_code: |
                    answer is ask Why doesn't echo work anymore?!
                    echo
                solution_text: |
                    Use a varible instead.
                solution_code: |
                    answer is ask Why doens't echo work anymore?!
                    print answer
        -   title: "Students use a variable name or as a normal word"
            example:
                error_text: |
                    In the example below the word 'name' is used a a variable, but also as a normal text. The output of this code will be 'Hi my Hedy is Hedy'.
                error_code: |
                    name is Hedy
                    print Hi my name is name
                solution_text: |
                    So don't use a word you want to use in the text as a variable name. In level 4 this is solved with quotation marks.
                solution_code: |
                    name is Hedy
                    print Hi I'm name
        -   title: "Students use long variable names containing two words."
            example:
                error_text: |
                    A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: |
                    chosen door is ask Which door do you pick?
                solution_text: |
                    Add an underscore.
                solution_code: |
                    chosen_door is ask which door do you pick?
        -   title: "Students might use two different names for the same variable"
            example:
                error_text: |
                    In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |
                    horse is ask What is your horse called?
                    print Your horse is called name
                solution_text: |
                    Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |
                    name is ask What is your horse called?
                    print Your horse is called name
    -   level: '3'
        sections:
        -   title: "Students try to print whole lists"
            example:
                error_text: |
                    A list can't be printed. You can only print one item from the list with at random.
                error_code: |
                    groceries is apples, milk, chocolate
                    print groceries
                solution_text: |
                    To print a list of all the groceries, you simply need to put them after a print command. Else you can use the list to print one item with at random.
                solution_code: |
                    print apples, milk, chocolate

                    or

                    groceries is apples, milk, chocolate
                    print groceries at random
        -   title: "Le élèves utilises le nom de la variable ou d'une liste comme du texte normal"
            example:
                error_text: |
                    This problem probably occured in level 2 as well. Now it can happen with lists too.
                error_code: |
                    name is Hedy
                    print Hi my name is name

                    or

                    animal is rhino, bee, swan
                    print The best animal is... animal at random
                solution_text: |
                    Don;t use the names of variables or lists in regular text to print. In level 4 this problem is solves with quotation marks.
                solution_code: |
                    name is Hedy
                    print Hi I'm name

                    or

                    animals is rhino, bee, swan
                    print The best animal is... animals at random
        -   title: "Students forget at in at random"
            example:
                error_text: |
                    Like in the example
                error_code: |
                    birds is sparrow, seagull, robin
                    print birds random
                solution_text: |
                    This problem is solved by adding the word at.
                solution_code: |
                    birds is sparrow, seagull, robin
                    print birds at random
        -   title: "Les élèves oublient d'utiliser la commande print alors qu'ils utilisent la commande at random"
            example:
                error_text: |
                    Or they will sometimes put at random at the beginning of the line.
                error_code: |
                    fruit is apple, cherry, banana
                    fruit at random
                solution_text: |
                    Emphasize to your students that you always need a print to print text.
                solution_code: |
                    fruit is apple, cherry, banana
                    print fruit at random
        -   title: "Students forget to use commas in their lists"
            example:
                error_text: |
                    In a list items are seperated with a comma.
                error_code: |
                    pizzas is funghi tonno quattro stagioni
                    print pizzas at random
                solution_text: |
                    After each item on your list, there should be a comma
                solution_code: |
                    pizzas is funghi, tonno, quattro stagioni
                    print pizzas at random
        -   title: "Les élèves essaient d'utiliser at random sans une liste"
            example:
                error_text: |
                    For example
                error_code: |
                    clubs is Manchester United
                    print clubs at random
                solution_text: |
                    Hedy can't print anything at random, because there is no list to choose from.
                solution_code: |
                    clubs is Manchester United, Bayrn Munchen, FC Barcelona
                    print clubs at random
        -   title: "Students try to use add/remove without a list "
            example:
                error_text: |
                    In the example below 'names' is not a list, but a variable. You cannot add anything to it.
                error_code: |
                    names is Jake
                    your_name is ask Who are you?
                    add your_name to names
                    print names at random
                solution_text: |
                    There has to be a list first, so you have to add a second name to turn names into a list, for example Amy. If you don't want amy on your list, you can use remove to remove it after.
                solution_code: |
                    names is Jake, Amy
                    your_name is ask Who are you?
                    add your_name to names
                    print names at random
        -   title: "Les élèves oublient d'utiliser to/from dans add/remove"
            example:
                error_text: |
                    Without to/from the add/remove command won't work.
                error_code: |
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice
                    remove dice
                    print I love adventures at random
                solution_text: |
                    Hedy has to know which list the item should be added to/removed from.
                solution_code: |
                    adventures is story, parrot, dice
                    choice is Which adventure do you like best?
                    add choice to adventures
                    remove dice from adventures
                    print I love adventures at random
    -   level: '4'
        sections:
        -   title: "Students forget to use quotation marks on both sides of the text"
            example:
                error_text: |
                    In this level print and ask need a set of quotation marks. One before of the text and one after.
                error_code: |
                    print Hello
                    mood is ask 'How are you?
                solution_text: |
                    Add the correct quotation marks.
                solution_code: |
                    print 'Hello'
                    mood is ask 'How are you?'
        -   title: "Students use the wrong quotation marks"
            example:
                error_text: |
                    It is important to start your lesson by checking if the students know how to type a quotation mark properly. ELse they might use the "double quotes" or the `skewed one`.
                error_code: |
                    print `Welcome to the restaurant`
                    food is ask "What would you like to order?"
                solution_text: |
                    These are the correct quotation marks:
                solution_code: |
                    print 'Welcome to the restaurant'
                    food is ask 'What would you like to order?'
        -   title: "Students use an apostrophe in their text"
            example:
                error_text: |
                    From this level on apostrophes are not allowed. They are often used in English when thyping contractions like you're, don't or what's.
                error_code: |
                    print 'You're not allowed to type this'
                solution_text: |
                    You can choose to use the wrong grammar and just leave the apostrophe out. Or you could use the ` as an apostrophe.
                solution_code: |
                    print 'Youre allowed to type this'
                    print 'And you`re able to do this'
    -   level: '5'
        sections:
        -   title: "Students forget to use print in an if command"
            example:
                error_text: |
                    After students use if or else they forget to use a second command like print or ask.
                error_code: |
                    if name is Hedy 'Great!'
                    else 'Hedy is better!'
                solution_text: |
                    Add the print command to fix it.
                solution_code: |
                    if name is Hedy print 'Great!'
                    else print 'Hedy is better!'
        -   title: "Students might use two different names for the same variable"
            example:
                error_text: |
                    In this example the student has used 'horse' and 'name' for the same variables.
                error_code: |
                    horse is ask 'What is your horse called?'
                    if name is Bonfire print 'cool'
                    else print 'less cool!'
                solution_text: |
                    Always check wheter the variable has the same name throughout the code. Slight differences can be hard to spot (for example plurals) but they will interfere with the code.
                solution_code: |
                    horse is ask 'What is your horse called'
                    if horse is Bonfire print 'cool!'
                    else print 'less cool!'
        -   title: "Les élèves oublient encore les guillemets des deux côtés"
            example:
                error_text: |
                    If commandos can get very long and students tend to forget to use quotes.
                error_code: |
                    if name is Hedy print fun
                    else print 'meh!
                solution_text: |
                    Always use 2 quotes in a print command.
                solution_code: |
                    if name is Hedy print 'fun'
                    else print 'meh!'
        -   title: "Les élèves utilisent des guillemets autour des noms de variables"
            example:
                error_text: |
                    In this level there are no quotes around variable names.
                error_code: |
                    if 'name' is 'Hedy' print 'fun'
                    else print 'meh!'
                solution_text: |
                    Remove the quotes to get the code to work.
                solution_code: |
                    if name is Hedy print 'fun'
                    else print 'meh!
        -   title: "Les élèves utilisent des noms de variable longs contenant 2 mots"
            example:
                error_text: |
                    A variable should be named with one word. You could use an underscore to connect two words. That counts as one.
                error_code: |
                    chosen door is ask 'Which door do you pick?'
                solution_text: |
                    Add an underscore.
                solution_code: |
                    chosen_door is ask 'which door do you pick?'
        -   title: "Students want multiple answers to be correct"
            example:
                error_text: |
                    For example this student Hedy to tell all his friends that they are funny, but other classmates would be told that they are not.
                error_code: |
                    if name is Jesse, David, Souf print 'You are funny' else print 'You are not funny'
                solution_text: |
                    You could use the `in` command for that. It is explained in a higher level, but it does already work in level 5.
                    Another solution is to use multiple if commands and no else command. The disadvantage is that it won't tell the other classmates that they are not funny.
                solution_code: |
                    friends is Jesse, David, Souf
                    name is ask 'Who are you?'
                    if name in friends print 'You are funny'
                    else print 'You are not funny'

                    or

                    name is ask 'Who are you?'
                    if naam is Jesse print 'You are funny'
                    if naam is David print 'You are funny'
                    if naam is Souf print 'You are funny'
        -   title: "The students make the variable name the same as the value in the if statement"
            example:
                error_text: |
                    In the example below the password is 'password'. This will result in it always being correct.
                error_code: |
                    password is ask 'What is the password?'
                    if password is password print 'Access granted'
                    else print 'Acces denied!'
                solution_text: |
                    Pick a different name for your variable.
                solution_code: |
                    secret_password is ask 'What is the password'
                    if secret_password is password print 'Access granted!'
                    else print 'Access denied!'
    -   level: '6'
        sections:
        -   title: Students struggle with quotation marks
            example:
                error_text: "Some students struggle with adding quotattion marks or not. If you add quotation marks, the output screen will literally show '5+5'.\n"
                error_code: "print '5 + 5'\n"
                solution_text: "In this code the output screen will print '10'.\n"
                solution_code: "print 5 + 5\n"
        -   title: Students struggle with the concept of doing maths with a variable
            example:
                error_code: "age = ask 'How old are you?'\nprint 'Next year you will be ' age + 1\n"
                error_text: "Some students will find it hard to do maths with variables. Try to show them very simple examples, like:\n"
                solution_text: "Or take it a step further like this.\n"
                solution_code: "price = 0\nprint 'Welcome to our burger restaurant'\nburger = ask 'Would you like a burger?'\nif burger = yes price = price + 10\ndrink = ask 'Would you like a drink?'\nif drink = yes price = price + 4\nprint 'That will be ' price ' euros please'\n"
    -   level: '7'
        sections:
        -   title: Students forget one of the word of the repeat command, or they forget the print command
            example:
                error_text: "Make sure that the students know to use both the full repeat command and the print command.\n"
                error_code: "repeat 3 times 'For he`s a jolly good fellow'\nrepeat 3 print 'Which nobody can deny!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "repeat 3 times print 'For he`s a jolly good fellow'\nrepeat 3 times print 'Which nobody can deny!'\n"
        -   title: Students try to repeat multiple lines
            example:
                error_code: "repeat 3 times drink = ask 'What would you like to drink?'\nprint drink\n"
                solution_text: "You should go to the next level to be able to repeat multiple lines. So on this level you'll have to print everything seperately.\n"
                solution_code: "drink = ask 'What would you like to drink?'\nprint drink\ndrink = ask 'What would you like to drink?'\nprint drink\ndrink = ask 'What would you like to drink?'\nprint drink\n"
                error_text: "In this level you can only repeat one line of code multiple times. In this code the student wanted to print 3 different drinks, but it won't work. It will ask the question 3 times and only print the last answer.\n"
        -   title: Students make programs that take too long to run
            example:
                error_text: "In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).\n"
                error_code: "repeat 100 times print 'How many times can I repeat this?'\n"
                solution_text: "Make sure the codes aren't too long\n"
                solution_code: "repeat 20 times print 'This is enough'\n"
    -   sections:
        -   example:
                error_code: "repeat 3 times\nprint 'hello'\n"
                error_text: "Indentation is a new concept in this level, that is hard to use for some students. Make sure they practise some simple codes before making a whole program with it.\n"
                solution_text: "This is the correct code:\n"
                solution_code: "repeat 3 times\n    print 'hello'\n"
            title: Students use the indentation wrong
        -   title: Students only repeat 1 line when they wanted to repeat multiple lines
            example:
                solution_text: "In the correct code the third line starts with indentation too. This way it belongs to the repeat block and therefore it will be repeated 3 times.\nShowing your students these differences can help them understand why we need indentation to make our programs work.\n"
                solution_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\n    print drink\n"
                error_text: "For instance, in the code below the student wanted to take the drinks order of 3 people. But insted the program asked 3 times, but only wrote down one order.\n"
                error_code: "repeat 3 times\n    drink = ask 'What would you like to drink?'\nprint drink\n"
        -   title: Students want to nest if statements, or put if statements inside a loop
            example:
                error_text: "In this level students aren't allowed yet to put if statements inside other if statements or inside repeat loops.\nIn the next level this is allowed.\n"
                error_code: "birthday = ask 'Is it you birthday?'\nif birthday = yes\n    repeat 3 times\n        print 'Hip Hip Hooray!'\n"
                solution_text: "This is the correct code for this level:\n"
                solution_code: "birthday = ask 'Is it you birthday?'\nif birthday = yes\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n    print 'Hip Hip Hooray!'\n"
        -   title: Students make programs that take too long to run
            example:
                error_text: "In this level it's very easy to make long codes. The students aren't allowed to make programs that take to long to load (to save our servers).\n"
                error_code: "repeat 100 times\n    print 'How many times can I repeat this?'\n"
                solution_text: "Make sure the codes aren't too long\n"
                solution_code: "repeat 20 times\n    print 'This is enough'\n"
        -   example:
                solution_text: "You can fix this mistake by adding quotation marks. This way the computer knows that the second password in `if password is 'password'` is a string value (so normal text) and not the variable name.\n"
                solution_code: "password is ask 'What is the password?'\nif password is 'password'\n    print 'You can come in'\nelse\n    print 'You are not allowed'\n"
                error_text: "We have seen this mistake by some of our students. They make a password for their computer, but they make the password 'password'.\nIn line 2 the computer is asked to check wheter the variable password is the same as the variable password, so itself. Which means the answer is alway yes.\nSo with this code the answer will always be 'You can come in' no matter what the player fills in.\n"
                error_code: "password is ask 'What is the password?'\nif password is password\n    print 'You can come in'\nelse\n    print 'You are not allowed'\n"
            title: Students use the if command to check if the variable value is the same as the variable name
        level: '8'
    -   sections:
        -   title: Students make mistakes with indentation
            example:
                error_text: "The hardest part about this level is getting the indentation right. Students love nesting if statements, sometimes even inside other nested if statements. Keeping track of indentation can get pretty tough.\n"
                error_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n        if book is yes\nprint 'Robin buys the book and goes home'\nelse\n    print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
                solution_text: "This is the correct code. Try to keep track of all the different constructions when putting if statements inside other if statements.\n"
                solution_code: "print 'Robin is walking downtown'\nlocation = ask 'Is Robin going into a shop, or does she go home?'\nif location is shop\n    print 'She enters the shop.'\n    print 'Robin sees an interesting looking book'\n    book = ask 'Does Robin buy the book?'\n    if book is yes\n        print 'Robin buys the book and goes home'\n    else\n        print 'Robin leaves the shop and goes home'\nelse\n    print 'Robin goes home'\n"
        level: '9'
    -   sections:
        -   title: Students so not use the for command correctly
            example:
                error_text: "We often see that students try to print the list (in the example animals) instead of the items of the list.\n"
                error_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animals\n"
                solution_text: "The word animals in the last line should be changed into animal.\n"
                solution_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animal\n"
        -   example:
                solution_code: "animals is dog, cat, blobfish\nfor animal in animals\n  print 'I love ' animal\n"
                error_text: "Students tend to forget to use indentation after a for command.\n"
                error_code: "animals is dog, cat, blobfish\nfor animal in animals\nprint 'I love ' animals\n"
                solution_text: "You should use indentation after a for command.\n"
            title: Students forget the indentation
        level: '10'
    -   level: '11'
        sections:
        -   title: Students forget to use indentation
            example:
                error_text: "Make sure that the students use indentation.\n"
                error_code: "for i in range 1 to 5\nprint i\n"
                solution_text: "This is the correct code:\n"
                solution_code: "for i in range 1 to 5\n    print i\n"
        -   title: Students don't understand the i
            example:
                error_text: "Some students don't understand that i is a variable. i is chosen, because it is used in Python programming, but you could just as easily use a different variable name.\nFor example, this code:\n"
                error_code: "for i in range 1 to 5\nprint i\n"
                solution_text: "Could just as well be replaced with this code. It works the same.\n"
                solution_code: "for banana in range 1 to 5\n    print banana\n"
    -   sections:
        -   example:
                error_text: "Students need more quotation marks now than in the previous levels. In this example quotation marks were forgotten in the list and in the if command.\n"
                solution_text: "This is the correct code:\n"
                error_code: "superheroes = Spiderman, Batman, Iron Man\nsuperhero = superheroes at random\nif superhero = Batman\n    print 'IM BATMAN!'\n"
                solution_code: "superheroes = 'Spiderman', 'Batman', 'Iron Man'\nsuperhero = superheroes at random\nif superhero is 'Batman'\n    print 'IM BATMAN!'\n"
            title: Students forget quotation marks
        -   title: Students use quotation marks on numbers they want to use for calculations
            example:
                error_text: "You can use quotation marks on numbers, but only if you want the computer to think of them as text. This means you can't do calculations with the number.\nIn the example below, you can't do maths with the number 25, because it's in quotation marks.\n"
                error_code: "score = '25'\nanswer is ask 'Do you want a point?'\nif answer is 'yes'\n    score = score + 1\n    print score\n"
                solution_text: "This is the correct code:\n"
                solution_code: "score = 25\nanswer is ask 'Do you want a point?'\nif answer is 'yes'\n    score = score + 1\n    print score\n"
        -   title: Students use commas instead of periods in decimal numbers
            example:
                error_text: "Decimal numbers can be used from this level on, but you can't use commas.\n"
                error_code: "print 2,5 + 2,5\n"
                solution_text: "This is the correct code:\n"
                solution_code: "print 2.5 + 2.5\n"
        level: '12'
    -   level: '13'
        sections:
        -   title: Students confuse `and` with `or`
            example:
                error_text: "Both commands might appear similar, but their functions are very different.\n"
                error_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' or time is 'yes'\n    print 'Lets play!'\n"
                solution_text: "In this case, the person should answer yes on both questions, so you should use `and`.\n"
                solution_code: "game is ask 'Do you want to play a game?'\ntime is ask 'Do you have time to play?'\nif game is 'yes' and time is 'yes'\n    print 'Lets play!'\n"
    -   level: '14'
        sections:
        -   title: Students confuse the < and > signs
            example:
                error_text: "Often, students are already familiar with these signs from maths class. But if your students don't know these signs yet, they might have a challenge with it.\n"
                error_code: "age = ask 'How old are you?'\nif age < 12\n    print 'You are older than I am!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "age = ask 'How old are you?'\nif age > 12\n    print 'You are older than I am!'\n"
        -   title: Students use the wrong signs for `!=` `<=` and `>=`
            example:
                error_text: "These signs are probably new for most students. Make sure to explain these signs to your students.\n"
                error_code: "name = ask 'What is your name?'\nif name =< 'Hedy'\n    print 'You are not Hedy'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "name = ask 'What is your name?'\nif name != 'Hedy'\n    print 'You are not Hedy'\n"
        -   title: Students forget to use the == sign
            example:
                error_text: "In this level, students are still allowed to use = or is. But on other levels, or in python, they might get in trouble for that. So it is best to train them to use it.\n"
                error_code: "name = ask 'What is your name?'\nif name = 'Hedy'\n    print 'You are cool!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "name = ask 'What is your name?'\nif name == 'Hedy'\n    print 'You are cool!'\n"
    -   level: '15'
        sections:
        -   title: Students forget indentation in the while loop
            example:
                error_text: "Indentation is often hard for students.\n"
                error_code: "answer = 0\nwhile answer != 25\nanswer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "answer = 0\nwhile answer != 25\n    answer = ask 'What is 5 times 5?'\nprint 'A correct answer has been given'\n"
    -   level: '16'
        sections:
        -   title: Students forget the brackets
            example:
                error_text: "From this level on lists should be in brackets.\n"
                error_code: "icecream = 'starwberry', 'chocolate'\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   title: Students use the wrong brackets
            example:
                error_text: "From this level on lists should be in brackets.\n"
                error_code: "icecream = ('starwberry', 'chocolate'}\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   example:
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream[random] ' icecream'\n"
            title: Students forget the quotation marks while focussing on the brackets
        -   title: Students still use the old at random command
            example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream at random ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
        -   title: Students forget the quotation marks while focussing on the brackets
            example:
                error_text: "Students are sometimes very focussed on the new aspect of the syntax, that they forget the quotation marks.\n"
                error_code: "icecream = [starwberry, chocolate]\nprint 'I love ' icecream[random] ' icecream'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "icecream = ['starwberry', 'chocolate']\nprint 'I love ' icecream[random] ' icecream'\n"
    -   level: '17'
        sections:
        -   title: Students use elif like else, so without a condition
            example:
                error_text: "The elif command needs a condition behind it. It cannot be used like else, without a condition.\n"
                error_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif:\n    print 'I like green'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "color = ask 'What is your favorite color?'\nif color == 'green':\n    print 'green is nice'\nelif color == yellow:\n    print 'yellow is alright'\nelse:\n    print 'I like green'\n"
        -   title: Students forget the colon
            example:
                error_text: "After each command that requires indentation, a colon should be used.\n"
                error_code: "answer = ask 'How are you doing?'\nif answer is 'great'\n    print 'Me too!'\nelif answer is 'bad'\n    print 'Let me cheer you up!'\nelse\n    print 'Im great!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "answer = ask 'How are you doing?'\nif answer is 'great':\n    print 'Me too!'\nelif answer is 'bad':\n    print 'Let me cheer you up!'\nelse:\n    print 'Im great!'\n"
    -   level: '18'
        sections:
        -   title: Students forget to use the brackets
            example:
                error_text: "Students will forget to put brackets around their text.\n"
                error_code: "print 'my name is Hedy!'\n"
                solution_text: "This is the correct code:\n"
                solution_code: "print('my name is Hedy!')\n"
        -   title: Students will still use the ask command
            example:
                error_text: "The ask command has been used since level 1. So it might be hard for the students to switch to input instead of ask.\n"
                error_code: "print('My name is Hedy!')\nname = ask('What is your name?')\nprint('So your name is ', name)\n"
                solution_text: "This is the correct code:\n"
                solution_code: "print('My name is Hedy!')\nname = input('What is your name?')\nprint('So your name is ', name)\n"
        -   title: Students might use the brackets as quotation marks
            example:
                error_text: "They have learned to keep the variables outside of the quotation marks, so they might do the same with the brackets. Which is not the correct way to use them.\n"
                error_code: "temperature = 25\nprint('It is ') temperature ('degrees outside')\n"
                solution_text: "This is the correct code:\n"
                solution_code: "temperature = 25\nprint('It is ', temperature, 'degrees outside')\n"
learn-more-sections:
-   title: "Appréciez vous Hedy ?"
    text: |
        Nous aimerions en apprendre plus sur votre expérience !
        [Cliquez ici pour nous envoyer un message](mailto :hello@hedy.org "About Hedy")
-   title: "Vous avez trouvé une erreur ?"
    text: |
        [Remontez-la sur GitHub](https://github.com/hedyorg/hedy/issues/new/choose)
-   title: "Semaine européenne du code 2020"
    text: |
        Vous voulez en savoir plus sur Hedy ? Consultez cette conférence que Felienne a donnée à la Semaine européenne du code 2020 :

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/R2U9MEowYag?wmode=opaque" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
-   title: "Article scientifique sur Hedy"
    text: |
        Vous voulez en savoir encore plus ? Lisez [l'article de recherche](https://www.felienne.com/wp-content/uploads/2020/07/Hedy_paper_website_draft.pdf) sur la conception d'Hedy.
start-sections:
-   title: "Qu’est-ce qu’un langage de programmation progressif ?"
    text: |
        Apprendre à programmer peut être difficile. Non pas que programmer *est* difficile en soit ! Mais il y a beaucoup de règles à mémoriser, comme quand on apprend le français. 
        De la même manière que quand on apprend à lire ou à écrire, tu auras besoin de beaucoup d’entraînement pour apprendre à programmer.

        Aujourd'hui, tu peux lire ce texte facilement. Mais te souviens-tu de quand tu as appris à lire ? Au début ça te prenait un peu de temps de lire syllabe par syllabe ! 
        C’est vrai pour la programmation aussi : ça peut être difficile au début, mais ça devient de plus en plus facile !

        Le bon côté de Hedy, c’est qu’il est *progressif*. Ça veut dire que tu ne dois pas apprendre toutes les règles en même temps. 
        Les premiers niveaux n’ont que quelques règles, ce qui te permet de t’y habituer tranquillement.
        À chaque nouveau niveau, nous introduisons de nouvelles règles, nous ajoutons de nouvelles commandes à celle que tu as déjà apprises. Ces commandes sont des instructions pour l’ordinateur.
-   title: "Pourquoi Hedy est progressif ?"
    text: |
        Felienne, la créatrice de Hedy, explique dans cette vidéo (en anglais) pourquoi Hedy est progressif.

        <iframe width="560" height="315" class="mx-auto mt-4" src="https://www.youtube.com/embed/fmF7HpU_-9k" frameborder="0" allow="accelerometer ; autoplay ; encrypted-media ; gyroscope ; picture-in-picture" allowfullscreen></iframe>
-   title: "À qui est destiné Hedy ?"
    text: |
        Hedy est destiné à tous les enfants qui veulent apprendre à programmer ! Il suffit de savoir lire le français.
-   title: "Dois-je déjà savoir programmer ?"
    text: |
        Non, ce n'est pas nécessaire. Cependant, si tu as déjà programmé avec Scratch ou Python, certaines commandes te seront familières.
-   title: "Hedy est-il gratuit ?"
    text: |
        Oui ! Hedy est aussi 'Open source', ce qui signifie que n’importe qui sachant programmer peut nous aider à améliorer Hedy.
        Si vous aimez Hedy, nous aimerions un [don](https://github.com/sponsors/hedyorg?locale=en) !
-   title: "Que dois-je installer ?"
    text: |-
        Rien. Hedy fonctionne dans le navigateur avec lequel tu lis cette page. Probablement Chrome, Edge, ou Firefox. Hedy fonctionne aussi sur ton smartphone ou ta tablette.
join-sections:
-   text: "# There are three ways in which you can support Hedy!\n"
    title: Supporting Hedy
-   title: Improving the language
    text: "The gradual and multi-lingual nature of Hedy create a lot of interesting technical challenges.\nFind those issues on [Github](https://github.com/hedyorg/hedy/issues?q=is%3Aopen+is%3Aissue+label%3Alanguage).\n"
-   title: Translating Hedy
    text: "Not a programmer? No problem! Another way to support Hedy is by [translating keywords, error messages, adventures are other content](https://github.com/hedyorg/hedy/blob/main/TRANSLATING.md)\n\nThis is the current status, help us complete a language, or add a new one!\n<a href=\"https://hosted.weblate.org/engage/hedy/\">\n<img src=\"https://hosted.weblate.org/widgets/hedy/-/multi-auto.svg\" alt=\"Translation status\" /></a>\n"
-   title: Help teachers get started
    text: "Hedy is designed to support teachers in providing programming lessons in class. We have specific teacher features like the option to create a class, customize it and see how your students are doing.\nIf you like Hedy, you can reach out to schools that you know to help teachers get started! We can help you find schools or teachers via [Discord](https://discord.gg/8yY7dEme9r).\n"
