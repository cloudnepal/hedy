levels:
    0:
        1:
            header: Välkommen till Hedy!
            text: Hedy är ett programmeringsspråk.
        2:
            header: Programmering
            text: |-
                Programmering är att ge instruktioner till en dator, med datorns språk.

                Ett sådant språk kallas för ett programmeringsspråk.
        3:
            header: Programmeringsspråk
            text: |-
                Kanske känner du redan till några programmeringsspråk?
                Ett par exempel är:
                * Scratch
                * Python
                * HTML
        4:
            header: Programmering
            text: |-
                Om man kan programmera kan man göra många häftiga saker:
                * Bygga interaktiva berättelser
                * Skapa datormålningar och rita dem på papper eller tyg
                * Bygga egna appar att ha på telefonen
        5:
            header: Programmering i Hedy
            text: I Hedy använder vi speciella koder, som `{print}`.
            code: '{print} Welcome to Hedy!'
        6:
            header: Programmering i Hedy
            text: Kodord visas i rosa.
            code: '{print} Welcome to Hedy!'
        7:
            header: Programmering i Hedy
            text: Vi startar koden med Kör kod-knappen under koden.
            code: '{print} Welcome to Hedy!'
        8:
            header: Programmering i Hedy
            text: Utmatning visas till höger.
            code: '{print} Welcome to Hedy!'
        9:
            header: Programmering i Hedy
            text: Utmatningen kan också vara en teckning.
            code: |-
                {forward} 100
                {turn} left
    1:
        1:
            header: Välkommen till nivå 1!
            text: |-
                Vi börjar nivå 1 med att göra historier i Hedy!

                Vi behöver tre textkoder för att skapa interaktiva berättelser.
        2:
            header: '{print}'
            text: |-
                Den första koden man kan använda i nivå 1 är `{print}`.

                `{print}` används för att visa text på skärmen.
            code: '{print} Put text on the screen'
        3:
            header: Kommandot {print}
            text: |-
                Du kan ändra texten efter skriv-kommandot till vad du vill.

                Eller så kan du skriva ut flera rader genom att lägga till en ny kodrad som också börjar med `{print}`.
            code: '{print} Put text on the screen'
        4:
            header: '{ask}'
            text: |-
                Det andra kommandot som du kan använda på nivå 1 är `{ask}`.

                `{ask}` används för att ställa en fråga som kan besvaras.
            code: |-
                {print} Welcome to your own rock scissors paper!
                {ask} What will you choose?
        5:
            header: '{echo}'
            text: |-
                Du såg i förra exemplet att om du använder kommandot `{ask}` kan du ställa en fråga.

                Men svaret visas inte i på utdataskärmen.

                Om du vill att svaret ska visas kan du använda det sista kommandot på den här nivån: `{echo}`.

                `{echo}` används för att upprepa svaret på en `{ask}`.
            code: |-
                {print} Hello!
                {ask} What is your name?
                {echo} hello
        6:
            header: Programmering!
            text: |-
                Med `{print}`, `{ask}` och `{echo}` kan du redan skapa en liten berättelse.
                Det här är ett bra tillfälle att prova äventyren Papegoja, Berättelse och Sten, sax, påse.
            editor: /hedy/1
        7:
            header: Programmering!
            text: Äventyren visas i flikar.
            editor: /hedy/1
        8:
            header: Programmering!
            text: De gula pilknapparna används för att kopiera exempel.
            editor: /hedy/1
        9:
            header: Rita med sköldpaddan
            text: Nu när vi har sett textkod kommer vi att titta på ritkod.
        10:
            header: 'Rita med sköldpaddan: {forward}'
            text: '`{forward}` flyttar sköldpaddan framåt.'
            code: |-
                {forward} 50
                {turn} left
        11:
            header: 'Rita med sköldpaddan: {turn}'
            text: '`{turn}` används för att få sköldpaddan att svänga vänster eller höger.'
            code: |-
                {forward} 50
                {turn} left
        12:
            header: Debugging
            text: Debugging a code means getting rid of mistakes in the code. Let's debug this code together. Click the ladybug button to start the debugger.
            code: |-
                I am DJ Hedy
                {print} What song would you like to hear?
                {ask} I like that song too!
                {print} Next up... {echo}
            debug: 'True'
        13:
            header: Let the programming fun begin!
            text: Enjoy the adventures in level 1!
    2:
        1:
            header: Välkommen till nivå 2
            text: |-
                På den här nivån får du lära dig att använda variabler.

                En variabel är ett ord som kan användas för att spara information.

                Till exempel: ett namn, en ålder eller ett favoritlag.
        2:
            header: Variabler
            text: För att skapa eller sätta en variabels värde använder vi kommandot `{is}`
            code: |-
                name {is} Hedy
                age {is} 15
                {print} name is age years old
        3:
            header: Interaktiv
            text: |-
                Vi kan också sätta en variabel genom att ställa frågor.

                Svaret på frågan lagras i variabeln.

                På så sätt behöver vi inte kommandot `{echo}`.
            code: |-
                name {is} {ask} What is your name?
                {print} Hello name
        4:
            header: Flera variabler
            text: Nu när vi använder variabler kan vi använda flera variabler istället för bara ett `{echo}`-kommando.
            code: |-
                name {is} {ask} What is your name?
                {print} Hello name
                age {is} {ask} How old are you?
                {print} name is age years old.
        5:
            header: Sov
            text: Du kan också använda kommandot `{sleep}` för att pausa koden ett tag.
            code: |-
                {print} My favorite colour is...
                {sleep} 2
                {print} green!
        6:
            header: Sov 5
            text: |-
                Du kan lägga till ett tal efter kommandot `{sleep}` om du vill att pausen ska vara längre.

                Om du vill kan du även använda en variabel istället för ett tal för att bestämma längden på sov-kommandot.
            code: |-
                pause {is} 10
                {print} My favorite colour is...
                {sleep} pause
                {print} green!
        7:
            header: Debugging
            text: Debugging a code means getting rid of mistakes in the code. Let's debug this code together. Click the ladybug button to start the debugger.
            code: |-
                {print} Welcome to the donut shop!
                filling {is} What kind of filling would you like?
                {print} You have chosen... Filling! Yum!
                topping {ask} What kind of topping would you like?
                topping is delicious!
                {print} I'll go get your donut. {sleep}
                {print} Here you go! A filling donut with toping!
                {ask} Have a nice day!
            debug: 'True'
        8:
            header: Låt den roliga programmeringen börja!
            text: Ha det kul med äventyren på nivå 2!
    3:
        1:
            header: Välkommen till nivå 3
            text: På den här nivån får du lära dig att göra en lista, lägga till och ta bort element från din lista och välja ett slumpmässigt element från listan.
        2:
            header: Göra en lista
            text: |-
                Du gör en lista med kommandot `{is}`.

                Skriv kommatecken mellan elementen i listan.
            code: animals {is} dogs, cats, kangaroos
        3:
            header: Slumpmässigt
            text: |-
                Du kan använda listan med kommandot `{at}` `{random}`.
                Datorn kommer slumpmässigt att välja ett element från listan.
                Varje gång du kör denna kod kommer utskriften att skilja sig åt.
            code: |-
                animals {is} dogs, cats, kangaroos
                {print} animals {at} {random}
        4:
            header: Slumpmässigt i en mening
            text: Du kan använda kommandot `{at} {random}` i en mening också.
            code: |-
                animals {is} dogs, cats, kangaroos
                {print} My favorite animal is animals {at} {random}
        5:
            header: Lägg till i
            text: |-
                Du kan lägga till element i en lista med kommandot `{add}` `{to}`.

                Du kan välja vad som ska läggas till i listan eller så kan du använda kommandot `{add}` `{to}` i kombination med kommandot `{ask}`.
                På så sätt kan du låta spelaren bestämma vad som ska läggas till i listan.
            code: |-
                animals {is} dog, cat, kangaroo
                like {is} {ask} What is your favorite animal?
                {add} like {to_list} animals
                {print} I choose animals {at} {random}
        6:
            header: Ta bort från
            text: |-
                Motsatsen till kommandot `{add}` `{to}` är kommandot `{remove}` `{from}`.
                Detta kommando tar bort ett element från en lista.
            code: |-
                animals {is} dog, cat, kangaroo
                dislike {is} {ask} What animal do you not like?
                {remove} dislike {from} animals
                {print} I choose animals {at} {random}
        7:
            header: Debugging
            text: Let's debug this code!
            editor: |-
                music_genres {is} rock, pop, metal, indie, jazz
                chosen_genre is music {at} {random}
                {print} Let's listen to chosen genre
                nice {ask} Do you like that genre?
                {remove} chosen_genre {from} chosen_genre
                second_choice {is} music_genres
                {print} or do you prefer... second_choice {at} {random}
                {remove} second_choice {to} music_genres
                {print} I like music_genre {random} best!
            debug: 'True'
        8:
            header: Nu sätter vi igång!
            text: Ha det kul med äventyren på nivå 3!
    4:
        1:
            header: Välkommen till nivå 4
            text: På den här nivån får du lära dig använda citattecken.
            code: '{print} ''print with quotes!'''
        2:
            header: Problem
            text: 'På de tidigare nivåerna kan du ha stött på det här problemet:'
            code: |-
                name {is} Sophie
                {print} My name is name
            debug: 'True'
        3:
            header: Fixa det med citattecken
            text: |-
                På den här nivån kommer vi att lösa detta problem genom att använda citattecken.

                Detta gör också att vår kod mer liknar 'riktig' Python-kod.
        4:
            header: Citattecken med skriv
            text: När du använder kommandot `{print}` måste du sätta texten som du vill ska visas på skärmen inom citattecken.
            code: '{print} ''print with quotes!'''
        5:
            header: Citattecken med fråga
            text: Detta gäller också för kommandot `{fråga}`.
            code: name {is} {ask} 'name please?'
        6:
            header: Citattecken och variabler
            text: |-
                Du vill inte att variabelnamn ska skrivas ut på skärmen.
                Det är därför variabler ska lämnas utanför citattecknen, så här:
            code: |-
                name {is} Harry
                {print} 'Hello ' name
        7:
            header: Citattecken och variabler
            text: |-
                När variabelnamn används inuti mening måste variablerna stå utanför citattecknen.
                Resten av meningen behöver citattecken. Det ser ut så här:
            code: |-
                name {is} Harry
                {print} 'Hello ' name ', how are you?'
        8:
            header: Citattecken och sammandragningar
            text: |-
                Var försiktig! Nu när du använder citattecken kan du inte använda apostrofer i sammandragningar.

                Försök att skriva ut en sammandragning som engelska "you're" eller "I'm" på skärmen nedan och se vad som händer …
            code: '{print} ''This won''t work!'''
            debug: 'True'
        9:
            header: Rensa
            text: |-
                På den här nivån lär du dig också kommandot {clear}.
                Med det kommandot kan du sudda ut all text från din utdataskärm.

                Var försiktig så att du alltid använder ett sov-kommando också. Om du inte gör det kommer datorn att sudda ut all text innan du hinner läsa den!
            code: |-
                {print} '3'
                {clear}
                {print} '2'
                {clear}
                {print} '1'
                {clear}
                {print} 'SURPRISE!'
        10:
            header: Debugging
            text: Let's debug this code!
            code: |-
                {clear}
                {print} What a nice day to go to the beach!
                {ask} 'Do you want to build a sandcastle or swim in the ocean?'
                {print} 'You would like to activity '
                {print} 'I'd like to do that too'
                {print} 'Look at these beautiful seashells!'
                colors {is} 'orange, silver, white, brown'
                {print} 'I love the colors {at} {random} one!'
                choice {is} {ask} Which one do you like?
            debug: 'True'
        11:
            header: Klara, färdiga, gå!
            text: Ha det kul med äventyren på nivå 4!
    5:
        1:
            header: Välkommen till nivå 5
            text: 'På den här nivån får du lära dig att använda tre nya kommandon: `{if}`, `{else}` och `{in}`.'
        2:
            header: om
            text: |-
                Med kommandot `{if}` kan du välja mellan två alternativ.
                I exemplet kommer datorn att skriva 'nice' om det givna svaret är Hedy.
                Om svaret inte är Hedy kommer datorn inte att göra någonting.
            code: |-
                name {is} {ask} 'what is your name?'
                {if} name {is} Hedy {print} 'nice'
        3:
            header: Glöm inte att skriva ut
            text: Glöm inte att använda kommandot `{print}` när du använder kommandot `{if}`.
            code: '{if} name {is} Hedy ''nice'''
            debug: 'True'
        4:
            header: annars
            text: |-
                När du använder ett `{if}`-kommando kan du också lägga till ett `{else}`-kommando.
                Om svaret är Hedy kommer datorn att skriva 'nice'.
                Men om svaret är något annat kommer datorn att skriva 'boo'.
            code: '{if} name {is} Hedy {print} ''nice'' {else} {print} ''boo!'''
        5:
            header: Långa rader
            text: |-
                Du kanske har märkt att dina rader kan bli väldigt långa när du har både ett `{if}`- och ett `{else}`-kommando.

                Du kan välja att dela upp kommandona på två rader, så här:
            code: |-
                {if} name {is} Hedy {print} 'nice'
                {else} {print} 'boo!'
        6:
            header: Ett till nytt kommando
            text: |-
                Om du har övat med kommandona `{if}` och `{else}` kan du också prova kommandot `{in}`.

                Med `{in}` kan du låta datorn kolla om ett element finns i en lista, t.ex:

                Tänk på att Hedy är skiljer på stora och små bokstäver. Det betyder om du svarar "Grönt" istället för "grönt", kommer Hedy att skriva "meh".
            code: |-
                pretty_colors {is} green, yellow
                favorite_color {is} {ask} 'What is your favorite color?'
                {if} favorite_color {in} pretty_colors {print} 'pretty!'
                {else} {print} 'meh'
        7:
            header: Debugging
            text: Let's debug this code!
            code: |-
                {print} Welcome to HedyAir Security!
                boarding_pass {is} {ask} 'Do you have your boarding pass?'
                {if} bording_pass yes {print} Great!
                {else} Please, get your boarding pass ready.
                passport {is} 'Can I see your passport, please?'
                {if} passport {is} yes 'thank you'
                {else} 'You can't fly without a passport'
                declare {is} {ask} Do you have anything to declare?
                {if} declare {is} yes
                item_to_declare {is} {ask} 'What would you like to declare'
                {else} Alright
                {print} Thank you. Please head to gate A22.'
            debug: 'True'
        8:
            header: Nu kör vi!
            text: Ha det kul med äventyren på nivå 5!
    6:
        1:
            header: Välkommen till nivå 6
            text: På den här nivån lägger vi till matematik till vår kod.
        2:
            header: Addition
            text: Om du vill addera så använder du helt enkelt plustecknet.
            code: '{print} ''5 plus 5 is '' 5 + 5'
        3:
            header: Subtraktion
            text: För att subtrahera använder du minustecknet.
            code: '{print} ''5 minus 5 is '' 5 - 5'
        4:
            header: Multiplikation
            text: Om du vill multiplicera kan du använda asterisk.
            code: '{print} ''5 times 5 is '' 5 * 5'
        5:
            header: Division
            text: Du kan använda snedstreck för division.
            code: '{print} ''5 divided by 5 is '' 5 / 5'
        6:
            header: Sammanfattning
            text: Sammanfattningsvis kan du använda +, –, * och / för att räkna.
            code: |-
                {print} '5 plus 5 is ' 5 + 5
                {print} '5 minus 5 is ' 5 - 5
                {print} '5 times 5 is ' 5 * 5
                {print} '5 divided by 5 is ' 5 / 5
        7:
            header: Symbolen =
            text: |-
                Från och med nu kan du också använda likhetstecken (=) istället för `{is}`-kommandot.
                Detta gäller både tal och ord, och det gäller även efter kommandona `{if}` eller `{else}`.
            code: |-
                name = Hedy
                answer = 20 + 4
        8:
            header: Beräkningar med variabler
            text: 'Du kan göra beräkningar med tal, men du kan också använda variabler för att göra beräkningar, t.ex. så här:'
            code: |-
                number_1 = {ask} 'Fill in the first number:'
                number_2 = {ask} 'Fill in the second number:'
                correct_answer = number_1 * number_2
                {print} number_1 ' times ' number_2 ' is ' correct_answer
        9:
            header: Debugging
            text: Let's debug this code!
            code: |-
                {print} 'This is the water park ticket machine'
                {print} 'Price list: Children under 12 $3, Adults $5'
                {print} 'Mondays are 25% off'
                amount_of_children = 'How many kids tickets would you like?'
                amount_of_adults = 'How many adult tickets would you like?'
                day_of_the_week = {ask} 'What day is it?'
                {clear}
                child_price = amount of children * 3
                adult_price = amount_of_adults + 5
                total_price = adult_price * child_price
                {if} day {is} monday
                total_price = total_price * 0.25
                {print} 'That will be total_price please'
            debug: 'True'
        10:
            header: Nu sätter vi igång!
            text: Ha det kul med äventyren på nivå 6!
    7:
        1:
            header: Välkommen till nivå 7
            text: På den här nivån får du lära dig att upprepa en kodrad hur många gånger som helst.
        2:
            header: upprepa 3 gånger
            text: |-
                Om du vill upprepa en kodrad kan du använda koden `{repeat}` 3 `{times}`.
                Om du vill upprepa raden fler gånger ändrar du bara talet.

                Till exempel: Om du programmerar en berättelse där din karaktär ropar på hjälp fem gånger, kan det se ut så här:
            code: |-
                {print} 'The prince kept calling for help'
                {repeat} 5 {times} {print} 'Help!'
                {print} 'Why is nobody helping me?'
        3:
            header: Glöm inte kommandot skriv
            text: Glöm inte kommandot `{print}` när du använder kommandot upprepa.
            code: '{repeat} 5 {times} ''Help!'''
            debug: 'True'
        4:
            header: Upprepa ett fråga-kommando
            text: Du kan också upprepa ett `{ask}`-, `{if}`- eller `{else}`-kommando flera gånger.
            code: |-
                {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                {else} {repeat} 3 {times} {print} 'You have learned something new!'
        5:
            header: Debugging
            text: Let's debug this code!
            code: |-
                {print} You gave stranded on a desert island.
                {repeat} 3 'Help!'
                rescued = {ask} Has anybody come to the rescue?
                {if} rescued yes {is}
                {print} Lucky!
                {else} {repeat} 3 {times} 'HELP!'
                rescued = 'What about now?'
                {if} yes
                {print} 'Hurray!
                {else} 'That's a shame... Oh well... time to build a shelter and find some food.'
            debug: 'True'
        6:
            header: Klara, färdiga, gå!
            text: Ha det kul med äventyren på nivå 7!
    8:
        1:
            header: Välkommen till nivå 8
            text: På den här nivån lär du dig att använda indrag för att få kommandona `{repeat}`, `{if}` och `{else}` att fungera för flera rader kod.
        2:
            header: '{repeat}-kommandon förut'
            text: |-
                På de tidigare nivåerna såg kommandot `{repeat}` ut så här:

                Du kunde bara upprepa en kodrad.
            code: '{repeat} 5 {times} {print} ''Help!'''
            debug: 'True'
        3:
            header: '{repeat}-kommandon nu'
            text: |-
                På den här nivån kan du upprepa flera rader kod. För att göra det måste du berätta för datorn vilka rader som hör ihop och ska upprepas.
                Det gör du genom att använda indrag.

                Använd fyra blanksteg (eller en tabb) i början av varje rad som du vill upprepa, så här:
            code: |-
                {repeat} 5 {times}
                    {print} 'Hello everyone'
                    {print} 'This will be printed 5 times'
        4:
            header: '{repeat}-kommandon nu'
            text: |-
                Om du vill kan du fortsätta efter kommandot `{repeat}` utan indrag.
                Rader utan indrag kommer inte att upprepas.
            code: |-
                {repeat} 3 {times}
                    {print} 'Hello!'
                {print} 'We are done repeating!'
        5:
            header: om och annars förut
            text: |-
                Detsamma gäller för kommandona `{if}` och `{else}`.
                Dessa kommandon användes tidigare:
            code: |-
                {if} name {is} Hedy {print} 'nice'
                {else} {print} 'boo!'
            debug: 'True'
        6:
            header: om och annars nu
            text: |-
                Så här är kommandona`{if}` och `{else}` nu.
                Varje rad efter kommandona `{if}` och `{else}` börjar med indrag.
            code: |-
                name = {ask} 'What is your name?'
                {if} name {is} Hedy
                    {print} 'Welcome Hedy'
                {else}
                    {print} 'Welcome programmer!'
        7:
            header: stoppa indraget
            text: Precis som med kommandot `{repeat}` kan du sluta använda indrag och raderna kommer alltid att visas, altså inte bara om påståendet är sant.
            code: "name = {ask} 'What is your name?'\n{if} name {is} Hedy\n    {print} 'Welcome Hedy'\n{else}\n    {print} 'Welcome programmer!' \n{print} '3..2..1.. Start programming!'"
        8:
            header: if-satser inuti if-satser
            text: |-
                Du kanske har funderat på att ha ett if-kommando inuti ett repeat-kommando, eller inuti ett annat if-kommando.
                För närvarande är detta inte möjligt. På de högre nivåerna kommer det att bli tillåtet, men nu ska vi fokusera på att öva kommandona `{if}` `{else}` och `{repeat}` med korrekt indrag först.
        9:
            header: Debugging
            text: Let's debug this code!
            code: |-
                {print} 'HedyWheels bus tickets machine'
                zone_1 = Town Hall, Library, Campus, Market Place
                zone_2 = Swimming Pool, Skate Park, Mall, Airport
                destination = 'Where do you want to go?'
                {if} destination {in} zone 1
                {print} destination 'is in zone 1'
                price = 3 euros
                    {if} destination {is} zone_2
                {print} destination 'is in zone 2'
                price = 6
                ticket_types = {ask} 'Press 1 for a single use ticket.
                Press 2 for a round trip ticket:'
                {if} ticket_type = 1
                {print} 'You chose a single use ticket'
                {else}
                        {print} You chose a round trip ticket'
                price * 2
                {print} 'That will be ' price ' euros please'
            debug: 'True'
        10:
            header: Vi kollar in äventyren!
            text: Ha det kul med äventyren på nivå 8!
    9:
        1:
            header: Välkommen till nivå 9
            text: |-
                På den här nivån kan du använda flera rader kod efter ett `{if}`- eller `{repeat}`-kommando.

                Du kan till och med ha ett `{repeat}`-kommando inuti ett annat `{repeat}`-kommando.
        2:
            header: Flera rader efter `{repeat}`
            text: Du får ha flera rader efter `{repeat}`.
            code: |-
                {repeat} 3 {times}
                    food = {ask} 'What do you want?'
                    {if} food {is} pizza
                        {print} 'nice!'
                    {else}
                        {print} 'pizza is better'
        3:
            header: Indrag är viktigt!
            text: Indrag är mycket viktigt för att tala om för datorn vilka rader som ska upprepas och vilka rader som bara ska köras en gång.
            code: |-
                {repeat} 3 {times}
                    {print} 'This line will be repeated...'
                    {print} 'This one too...'
                {print} 'but this one will not!'
        4:
            header: Flera rader efter `{if}`
            text: Du kan också ha flera rader efter `{if}`
            code: |-
                continue = {ask} 'Do you want to continue?'
                {if} continue = yes
                    sure = {ask} 'Are you sure?'
                    {if} sure {is} yes
                        {print} 'We will continue'
                    {else}
                        {print} 'You are not sure'
                {else}
                    {print} 'You do not want to continue'
        5:
            header: Indrag är viktigt
            text: Indrag är fortfarande mycket viktigt och kan göra stor skillnad i koden.
            code: |-
                continue = {ask} 'Do you want to continue?'
                {if} continue = yes
                    sure = {ask} 'Are you sure?'
                    {if} sure {is} yes
                        {print} 'We will continue'
                {else}
                    {print} 'You are not sure'
        6:
            header: Ett `{if}` inuti en `{repeat}`
            text: |-
                Nu när du kan ha flera kodrader efter dessa kommandon kan du också placera dem inuti varann.
                Kolla in det här:
            code: |-
                {repeat} 3 {times}
                    food = {ask} 'What do you want?'
                    {if} food {is} pizza
                        {print} 'nice!'
                    {else}
                        {print} 'pizza is better'
        7:
            header: Tänk på indraget
            text: Tänk på att den fjärde och sjätte raden i koden börjar med åtta mellanslag.
            code: |-
                {repeat} 3 {times}
                    food = {ask} 'What do you want?'
                    {if} food {is} pizza
                        {print} 'nice!'
                    {else}
                        {print} 'pizza is better'
        8:
            header: Debugging
            text: Let's debug this code!
            code: |-
                {print} 'Welcome to HedyJumps, your parachute jump adventure!'
                people = {ask} 'How many people are you jumping with today?
                {print} 'We'll ask all of you some questions for safety reasons.'
                extra_instructions_people = a, b
                {repeat} 3 {times}
                    name = {ask} 'What is your name?'
                jumped_before = 'Have you ever done a parachute jump before, ' name '?'
                {if} jumped_before  no
                {print} 'No worries, you'll get an extra safety instruction in room 13'
                {add} name {to} extra_instructions_people
                {else}
                {print} 'Fun!'
                {print} 'Thanks for filling in the safety questions everyone. Enjoy your jump!'
            debug: 'True'
        9:
            header: Nu kör vi!
            text: Ha det kul med äventyren på nivå 9!
    10:
        1:
            header: Välkommen till nivå 10
            text: 'På den här nivån kommer du att lära dig ett nytt kommando: `{for}`.'
        2:
            header: Kommandot 'för'
            text: Med 'för' kan du skapa en lista och använda alla element i listan. `{for}` skapar ett block, som 'upprepa' och 'om', så alla rader i blocket ska börja med indrag (fyra mellanslag).
            code: |-
                animals = dog, cat, blobfish
                {for} animal {in} animals
                    {print} 'I love ' animal
        3:
            header: Kommandot 'för'
            text: 'Här ser du ett annat exempel på kommandot `{for}`:'
            code: |-
                days = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
                names = mom, dad, Emma, Sophie
                {for} day {in} days
                    {print} names {at} {random} ' does the dishes on ' day
        4:
            header: Debugging
            text: Let's debug this code
            code: |-
                {print} 'Ladies and gentlemen!'
                {print} 'For one night and one night only in circus Hedy!'
                acts = shoot out of a canon, walk the tightrope, pack themself in a suitcase,
                people = Iris the Incredible Achmed the Amazing Francis the Fantastic
                    {for} people {in} acts
                chosen_person {is} people {random}
                    chosen_person ' will ' act
                {add} chosen_person {from} people
                {print} 'Come and watch our show tonight!'
                {print} 'Tickets are only available at the counter
            debug: 'True'
        5:
            header: Dags att programmera!
            text: Ha det kul med äventyren på nivå 10!
    11:
        1:
            header: Välkommen till nivå 11
            text: |-
                På den här nivån lägger vi till en ny variant av kommandot `{for}`. På tidigare nivåer använde vi för med en lista, men vi kan också använda för med tal.

                På så sätt behöver vi inte kommandot `{repeat}` längre.
        2:
            header: Kommandot 'för'
            text: 'Så här ser det nya för-kommandot ut:'
            code: |-
                {for} counter {in} {range} 1 {to} 10
                    {print} counter
                {print} 'Ready or not. Here I come!'
        3:
            header: variabeln i
            text: |-
                I föregående bild fick variabeln namnet 'räknare', eftersom den räknade nedåt.
                Du kan naturligtvis använda vilket namn du vill för variabeln.
                Standardnamnet för variabler i den här situationen som används i programspråk som Python är 'i'.
                Det ser ut så här:
            code: |-
                number = 10
                {for} i {in} {range} 1 {to} 10
                    {print} i * number
        4:
            header: Debugging
            text: Let's debug this code!
            code: |-
                factor {is} {ask} 'Which table of multiplication do you need?'
                {repeat} {for} numbers {in} {range} 1 {to} 10 {times}
                    {print} This is the table of multiplications for factor
                    {print} number ' x ' factor ' = ' i * factor
            debug: 'True'
        5:
            header: Låt oss börja programmera!
            text: Ha det kul med äventyren på nivå 11!
    12:
        1:
            header: Välkommen till nivå 12
            text: Från och med denna nivå får du använda decimaltal och det har gjorts vissa ändringar av citattecknen.
        2:
            header: Citattecken
            text: |-
                Den här nivån ändrar lite hur citattecken används.
                Från och med nu måste ** alla texter ** vara inom citattecken. Detta gäller också värden för variabler, element i listor och text efter {if}-kommandon.
            code: |-
                name = 'Hedy the Robot'
                {print} 'Hello ' name
        3:
            header: Decimaltal
            text: |-
                Från och med denna nivå får du också använda decimaltal. Det kan göra program som din restaurang ännu bättre!

                Siffror har inte citattecken.
            code: |-
                {print} 'decimal numbers now need to use a dot'
                {print} 2.5 + 2.5
        4:
            header: Functions!
            text: |-
                In this level you'll learn how to use functions. A function is a block of code you can easily use multiple times. Using functions helps us organize pieces of code that we can use again and again. To create a function, use define and give the function a name. Then put all the lines you want in the function in a indented block under the define line. Leave one empty line in your code to make it look nice and neat. Great job! You have created a function!

                Now, whenever we need that block of code, we just use call with the function's name to call it up! We don't have to type that block of code again.
        5:
            header: Twinkle Twinkle little star!
            text: |-
                In this program you see an example of a function.
                Let's see what happens if you fill in the rest of the song!
            code: |-
                {define} twinkle
                     {print} 'Twinkle'
                     {print} '...'

                {call} twinkle
                {print} 'Up above the world so high'
                {print} 'Like a diamond in the sky'
                {call} twinkle
        6:
            header: Functions
            text: As you could see in the example a function is a block of code that can be called anytime. You use `{define}` to set the function and `{call}` to use it.
        7:
            header: Debugging
            text: Let's debug this code!
            code: |-
                {call} new_member
                {print} 'Hi new member!'
                username = {ask} 'What is your username?'
                password = 'What is your password?'
                {print} 'Welcome to our club!'

                username = {ask} 'Please enter your username. Are you a new member? Type New Member'
                {if} username = New Member
                {call} new member
                    {else}
                        password = {ask} 'Please enter password'
            debug: 'True'
        8:
            header: Ready to try it out?
            text: Enjoy the adventures in level 12!
    13:
        1:
            header: Välkommen till nivå 13
            text: Nu ska vi lära oss `{and}` och `{or}`! Om du vill kolla två påståenden behöver du inte använda två 'om' utan kan använda 'och' och 'eller'.
        2:
            header: Kommandot och
            text: |-
                Kommandot `{och}` används alltid ihop med kommandot {if}.
                På så sätt kan du kontrollera om två påståenden är sanna. Till exempel:
            code: |-
                name = {ask} 'what is your name?'
                age = {ask} 'what is your age?'
                {if} name {is} 'Hedy' {and} age {is} 2
                    {print} 'You are the real Hedy!'
        3:
            header: Kommandot 'eller'
            text: |-
                Kommandot `{or}` fungerar på samma sätt som kommandot `{and}`, men bara ett av de två påståendena måste vara sant.

                Låt oss se vad som händer när du byter `{and}` mot `{or}`.
            code: |-
                name = {ask} 'what is your name?'
                {if} name {is} 'Hedy' {or} name {is} 'hedy'
                    {print} 'Welcome!!'
        4:
            header: Functions with arguments
            text: Now that you've learned how to use functions, you'll learn how to use a function with an **argument**. An argument is a variable that is used within a function. It is not used outside the function.
        5:
            header: Example
            text: |-
                In this example you see how the argument 'place' is used in the function.
                Run the code and change 'ocean' and 'sea' to something else, and see what happens.
            code: |-
                {define} song {with} place
                    {print} 'My Bonnie is over the ' place

                {call} song {with} 'ocean'
                {call} song {with} 'sea'
                {call} song {with} 'ocean'
        6:
            header: Example with variable
            text: |-
                You can also combine functions with a question.

                What happens if you make these changes:
                ```
                define song with place
                    print 'My Bonnie is ' place

                answer is ask 'Where is my Bonnie?'
                call song with answer
                ```
            code: |-
                {define} song {with} place
                    {print} 'My Bonnie is over the ' place

                {call} song {with} 'ocean'
                {call} song {with} 'sea'
                {call} song {with} 'ocean'
        7:
            header: Even more questions!
            text: |-
                Now we have combined even more question with the function. Type this code and see what happens.

                Note how the variables and the arguments have the same name. This is allowed.
                Does it confuse you? Just use different names, that is allowed as well.
                ```
                define song with name, place
                    print 'My ' name ' is ' place

                name is ask 'Who?'
                place is ask 'Where are they?'
                call song with name, place
                ```
            code: |-
                {define} song {with} place
                    {print} 'My Bonnie is over the ' place

                {call} song {with} 'ocean'
                {call} song {with} 'sea'
                {call} song {with} 'ocean'
        8:
            header: Debugging
            text: Let's debug this code!
            code: |-
                {define} happiness {with} name
                    {print} '🥳'
                {play} G
                {play} A
                {play} B
                {print} 'Party on, ' name
                {define} sadness
                {print} '😞'
                {play} E
                {play} D
                {play} C
                {print} 'Hope you feel better, ' name

                name = {ask} 'What is your' name '?'
                mood = {ask} 'Are you happy or sad?'
                {if} mood = happy
                    {call} happiness {with} person
                {else} mood = sad
                    {define} sadness {to} name
            debug: 'True'
        9:
            header: Let's go!
            text: Enjoy the adventures in level 13!
    14:
        1:
            header: Välkommen till nivå 14
            text: På den här nivån får du lära dig några nya symboler som kan hjälpa dig att förbättra dina program, t.ex. '>'.
        2:
            header: Symboler
            text: |-
                Detta är de nya symbolerna som du kan använda:

                  > betyder större än …

                  >= betyder större än eller lika med …

                  < betyder mindre än …

                  <= betyder mindre än eller lika med …

                Du kan använda dem så här:
            code: |-
                age = {ask} 'How old are you?'
                {if} age < 13
                    {print} 'You are younger than me!'
                {else}
                    {print} 'You are older than me!'
        3:
            header: Symboler
            text: |-
                Du kan också använda:

                == är lika med.

                != är inte lika med

                == används i `{if}`-satser.
            code: |-
                answer = {ask} 'Do you want to learn more?'
                {if} answer == 'yes'
                    {print} 'Go to the next adventure!'
                {if} answer != 'yes'
                    {print} 'That is a shame!'
        4:
            header: Return value
            text: In the previous levels you have learned to create functions and use arguments with them. Another great use of a function is to let it calculate something for you. You can give the function a calculation and it will give you the answer of the calculation. This answer is called a **return value**.
        5:
            header: Return value
            text: For example, in this code the function calculate_new_price will calculate the new price of any item. It will give you the new price as a return value.
            code: |-
                {define} calculate_new_price {with} amount, percentage
                    percentage = percentage / 100
                    discount_amount = amount * percentage
                    {return} amount - discount_amount

                old_price = {ask} 'How much is on the price tag?'
                discount = {ask} 'What percentage is the discount?'

                new_price = {call} calculate_new_price {with} old_price, discount
                {print} 'The new price is ' new_price ' dollar'
        6:
            header: Debugging
            text: Let's debug this code!
            code: |-
                item = 'not bought'
                {print} 'I would like to buy this item'
                price == {ask} 'What is the price?'
                {if} price less than or the same as 10
                    {print} 'Thats a great deal!'
                    item = 'bought'
                {if} price is more than 10 {and} less than or the same as 20
                    {print} 'Alright'
                    item = 'bought'
                {if} price is more than 20 {and} less than 50
                    {print} 'That is a bit much!'
                {if} price is more than or the same as 50
                    {print} 'No way!'
                {if} item =! bought
                    {print} 'Shame.. I wont buy it'
                {else}
                    {print} 'I will buy it! Thank you!'
            debug: 'True'
        7:
            header: Let's get to work!
            text: Enjoy the adventures in level 14!
    15:
        1:
            header: Välkommen till nivå 15
            text: På den här nivån lär du dig om `{while}`-loopen.
        2:
            header: '{while}'
            text: |-
                Vi ska lära oss en ny loop, medan-loopen! Loopen fortsätter så länge som påståendet är sant. Så glöm inte att ändra värdet inuti slingan.

                I exempelkoden fortsätter vi tills ett korrekt svar har getts. Om det rätta svaret aldrig ges kommer loopen aldrig att avslutas!
            code: |-
                answer = 0
                {while} answer != 25
                    answer = {ask} 'What is 5 times 5?'
                {print} 'A correct answer has been given'
        3:
            header: Debugging
            text: Let's debug this code!
            code: |-
                numbers = 1, 2

                {for} i {in} {range} 3 {to} 50
                    {add} x {to} numbers
                    i = + 1

                random_number = numbers {random}
                guesses = 10

                {while} guess = 0
                    answer = 'Guess my number:'
                    {if} answer >= random_number
                        {print} 'lower'
                        guesses = guesses -1
                    {if} answer > random_number
                        {print} 'higher!'
                        guesses = guesses
                    {else} answer = random_number
                        {print} 'correct'
                        guesses = 10

            debug: 'True'
        4:
            header: Vi testar det!
            text: Ha det kul med äventyren på nivå 15!
    16:
        1:
            header: Välkommen till nivå 16
            text: På den här nivån får du lära dig mer om [hakparenteser] och hur du använder dem.
        2:
            header: Hakparenteser
            text: Vi kommer att göra listor på Python-vis, med hakparenteser runt listorna! Vi behåller också citattecknen runt varje element, som vi har lärt oss i tidigare nivåer. Vi använder hakparenteser för att peka ut en plats i en lista. Kommandot 'på slump' kan inte användas längre.
            code: |-
                friends = ['Ahmed', 'Ben', 'Cayden']
                {print} friends[1] ' is the first friend on the list.'
                {print} friends[2] ' is the second friend on the list.'
                {print} friends[3] ' is the third friend on the list.'
                #now we will match 2 lists using the variable i
                lucky_numbers = [15, 18, 6]
                {for} i {in} {range} 1 {to} 3
                    {print} friends[i] 's lucky number is ' lucky_numbers[i]
        3:
            header: Debugging
            text: Let's debug this code!
            code: |-
                {print} 'Friendship test'
                {subjects} = ['song', 'movie', 'food', 'drink']
                answers_player_1 = []
                answers_player_2 = []
                score = 100

                {for} i {in} {range} 1 {to} 4
                    answer = {ask} 'what is your favorite ' subjects[i]
                {add} answer {to} answers_player_1

                {print} 'Player 2, your turn!'
                {for} i {in} {range} 0 {to} 4
                    answer_player_2 = {ask} 'what is player 1s favorite ' subjects
                    {add} answer_player_2 {in} answers_player_2
                    {if} answers_player_2[2] == answers_player_1[1]
                        {print} 'Correct!'
                    {else}
                        {print} 'Wrong!'
                    score = score - 25

                {print} 'Player 2, you've scored ' score '%'

                {if} score = 100
                    {print} 'You are an amazing friend'
                {if} score < 100 {or} score >= 50
                    {print} 'You could do better'
                {else} score < 50
                    {print} 'Do you even know this person?!'
            debug: 'True'
        4:
            header: Vi testar det!
            text: Ha det kul med äventyren på nivå 16!
    17:
        1:
            header: Välkommen till nivå 17
            text: På den här nivån får du lära dig hur man använder kolon och kommandot 'annars om'.
        2:
            header: Kolon
            text: Nu ska vi ändra indraget lite grann. Varje gång vi behöver en indragning behöver vi kolon (:) på raden före indragningen.
            code: |-
                prices = ['1 million dollars', 'an apple pie', 'nothing']
                your_price = prices[{random}]
                {print} 'You win ' your_price
                {if} your_price == '1 million dollars' :
                    {print} 'Yeah! You are rich!'
                {else}:
                    {print} 'Better luck next time..'
        3:
            header: Annarsom
            text: 'På den här nivån kan du också använda ett nytt kommando: annarsom. annarsom är en sammandragning av ''annars om'' och du behöver det när du vill skapa tre (eller fler!) alternativ. Kolla in det här!'
            code: |-
                prices = ['1 million dollars', 'an apple pie', 'nothing']
                your_price = prices[{random}]
                {print} 'You win ' your_price
                {if} your_price == '1 million dollars' :
                    {print} 'Yeah! You are rich!'
                {elif} your_price == 'an apple pie' :
                    {print} 'Lovely, an apple pie!'
                {else}:
                    {print} 'Better luck next time..'
        4:
            header: Vi testar det!
            text: Ha det kul med äventyren på nivå 17!
            debug: 'True'
            code: "{define} ask_direction\n    direction = {ask} 'Where do you want to go?'\n    {if} direction = 'backwards'\n        {turn} 180\n    {else} direction == 'right'\n        {turn} 90\n    {else} direction == 'left'\n        {turn} 270\n        {forward} 100\n\ncontinue = 'yes'\n\n{while} continue == 'yes'\n    {print} ask_direction\n    {sleep}\n    continue = 'do you want to draw some more?'\n    {sleep}"
        5:
            header: Let's try it out!
            text: Enjoy the adventures in level 17!
    18:
        1:
            header: Välkommen till nivå 18
            text: Grattis! Du har nått den sista nivån i Hedy! Koden som du har skapat här kan kopieras till riktiga Python-miljöer som repl.it eller PyCharm och du kan fortsätta att lära dig där! Tänk på att Python bara kan läsa engelska kommandon, så om du har använt andra språk måste du byta till engelska nu.
        2:
            header: Python-sättet
            text: |-
                Vi har kommit till riktig Python-kod! Det betyder att vi måste använda parenteser med print och range från och med nu.

                Om du vill skriva ut mer än ett element måste du också skilja dem med kommatecken.

                Den sista ändringen vi behöver göra för att få Python-kod är att ändra ask till input.

                Klicka på fliken 'print' för alla exempel.
            editor: /hedy/18
        3:
            header: De allra sista äventyren!
            text: Njut av de allra sista äventyren på nivå 18!
