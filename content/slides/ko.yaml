levels:
    0:
        1:
            header: Hedy에 온 걸 환영해요!
            text: Hedy는 프로그래밍 언어에요.
        2:
            header: 프로그래밍
            text: "프로그래밍이란 컴퓨터에 컴퓨터 언어를 사용하여 명령을 내리는 것이다. \n\n이 언어를 \"프로그래밍 언어\"라고 부른다."
        3:
            header: 프로그래밍 언어
            text: |-
                아마 당신은 이미 몇몇 프로그래밍 언어를 알고 있나요?
                다음과 같은 예가 있습니다:
                * Scratch
                * Python
                * HTML
        4:
            header: 프로그래밍
            text: |-
                프로그래밍을 할 수 있다면 멋진 일을 많이 할 수 있습니다:
                * 대화형 스토리 만들기
                * 컴퓨터 도면을 만들어 종이나 천에 그린다
                * 휴대폰에서 사용할 수 있는 앱을 직접 만들어 보세요
        5:
            header: Hedy에서의 프로그래밍
            text: Hedy에서는 특별한 코드를 사용한다 `{print}`.
            code: '{print} Hedy에 온 걸 환영해요!'
        6:
            header: Hedy에서의 프로그래밍
            text: 코드의 단어는 분홍색으로 표시됩니다.
            code: '{print} Hedy에 온 걸 환영해요!'
        7:
            header: Hedy에서의 프로그래밍
            text: 코드 아래에 있는 Run code 버튼으로 코드를 시작합니다.
            code: '{print} Hedy에 온 걸 환영해요!'
        8:
            header: Hedy에서의 프로그래밍
            text: 출력이 왼쪽에 나타납니다.
            code: '{print} Hedy에 온 걸 환영해요!'
        9:
            header: Hedy에서의 프로그래밍
            text: 출력은 그림일 수도 있습니다.
            code: |-
                {forward} 100
                {turn} left
    1:
        1:
            header: 레벨 1에 오신 것을 환영합니다!
            text: |-
                Hedy에서 스토리를 만들어가면서 레벨 1을 시작하겠습니다!

                대화형 이야기를 만들기 위해서는 세 개의 텍스트 코드가 필요합니다.
        2:
            header: '{print}'
            text: |-
                레벨 1에서 사용할 수 있는 첫 번째 코드는 '{print}'입니다.

                '{print}'는 화면에 텍스트를 표시하는 데 사용됩니다.
            code: '{print} Put text on the screen'
        3:
            header: '{print} 명령'
            text: |-
                인쇄 명령 후 텍스트를 원하는 대로 변경할 수 있습니다.

                또는 '{print}'로 시작하는 코드 라인을 하나 더 추가하여 여러 라인을 인쇄할 수도 있습니다.
            code: '{print} Put text on the screen'
        4:
            header: '{ask}'
            text: |-
                레벨 1에서 사용할 수 있는 두 번째 코드는 '{ask}'입니다.

                '{ask}'는 대답할 수 있는 질문을 할 때 사용합니다.
            code: |-
                {print} Welcome to your own rock scissors paper!
                {ask} What will you choose?
        5:
            header: '{echo}'
            text: |-
                앞의 예에서 볼 수 있듯이. {ask} 명령어를 사용하면 질문을 할 수 있다.

                그러나 출력 화면에는 답이 나타나지 않습니다.

                답을 보여주기를 원한다면 이 레벨의 마지막 명령어인 '{echo}'를 사용하면 됩니다.

                '{quest}'는 '{ask}'의 답을 반복할 때 사용한다.
            code: |-
                {print} Hello!
                {ask} What is your name?
                {echo} hello
        6:
            header: 프로그래밍!
            text: "{print}, {ask}, {echo}를 사용하면 이미 작은 이야기를 만들 수 있습니다. \n앵무새 이야기와 바위, 가위바위보 모험을 해볼 좋은 때입니다."
            editor: /hedy/1
        7:
            header: 프로그래밍!
            text: 모험은 탭에 표시됩니다.
            editor: /hedy/1
        8:
            header: 프로그래밍!
            text: 노란색 화살표 버튼은 예제를 복사하는 데 사용할 수 있습니다.
            editor: /hedy/1
        9:
            header: 거북이와 그림그리기
            text: 이제 텍스트 코드를 살펴보았으므로 다음으로 도면 코드를 살펴보겠다.
        10:
            header: '거북이로 그리기: {forward}'
            text: '''{forward}''는 거북이를 앞으로 움직일 때 사용합니다.'
            code: |-
                {forward} 50
                {turn} left
        11:
            header: '거북이와 그림 그리기: {turn}'
            text: '''{turn}''은 거북이가 왼쪽이나 오른쪽으로 돌게 할 때 사용합니다.'
            code: |-
                {forward} 50
                {turn} left
        12:
            header: Debugging
            text: Debugging a code means getting rid of mistakes in the code. Let's debug this code together. Click the ladybug button to start the debugger.
            code: |-
                I am DJ Hedy
                {print} What song would you like to hear?
                {ask} I like that song too!
                {print} Next up... {echo}
            debug: 'True'
        13:
            header: Let the programming fun begin!
            text: Enjoy the adventures in level 1!
    2:
        1:
            header: 레벨 2에 오신 걸 환영합니다
            text: "이 레벨에서 여러분은 변수를 사용하는 법을 배울 것이다. \n\n변수는 정보를 저장하기 위해 사용될 수 있는 단어이다. \n\n예를 들어, 이름, 나이 또는 좋아하는 스포츠 팀."
        2:
            header: Variables (변수)
            text: 변수를 만들거나 설정하려면 '{is}' 명령을 사용합니다
            code: |-
                name {is} Hedy
                age {is} 15
                {print} name is age years old
        3:
            header: Interactive (인터렉티브)
            text: |-
                우리는 질문을 함으로써 변수를 설정할 수도 있다.

                질문에 대한 답은 변수에 저장됩니다.

                이렇게 하면 '{echo}' 명령이 필요 없습니다.
            code: |-
                name {is} {ask} What is your name?
                {print} Hello name
        4:
            header: Multiple variables(다중변수)
            text: 이제 변수를 사용하므로 하나의 '{echo}' 명령 대신 여러 변수를 사용할 수 있습니다.
            code: |-
                name {is} {ask} What is your name?
                {print} Hello name
                age {is} {ask} How old are you?
                {print} name is age years old.
        5:
            header: sleep (슬립)
            text: '`{sleep}` 명령어을 사용하여 코드를 잠시 중지할 수도 있습니다.'
            code: |-
                {print} My favorite colour is...
                {sleep} 2
                {print} green!
        6:
            header: Sleep 5
            text: |-
                일시정지 시간을 길게 하려면 `{sleep}`명령 뒤에 숫자를 추가할 수 있습니다.

                원한다면 숫자 대신 변수를 사용하여 sleep 명령의 지속 시간을 결정할 수도 있습니다.
            code: |-
                pause {is} 10
                {print} My favorite colour is...
                {sleep} pause
                {print} green!
        7:
            header: Debugging
            text: Debugging a code means getting rid of mistakes in the code. Let's debug this code together. Click the ladybug button to start the debugger.
            code: |-
                {print} Welcome to the donut shop!
                filling {is} What kind of filling would you like?
                {print} You have chosen... Filling! Yum!
                topping {ask} What kind of topping would you like?
                topping is delicious!
                {print} I'll go get your donut. {sleep}
                {print} Here you go! A filling donut with toping!
                {ask} Have a nice day!
            debug: 'True'
        8:
            header: 프로그래밍의 재미를 시작합시다!
            text: 레벨 2의 모험을 즐기세요!
    3:
        1:
            header: 레벨 3에 오신 것을 환영합니다
            text: 이 레벨에서는 목록을 만들고 목록에서 항목을 추가 및 제거하고 목록에서 임의 항목을 선택하는 방법을 배우게 됩니다.
        2:
            header: 목록 만들기
            text: "{is}로 목록을 작성합니다. \n\n목록의 항목을 쉼표로 구분합니다."
            code: animals {is} dogs, cats, kangaroos
        3:
            header: At random
            text: |-
                목록은 '{at}' '{random}' 명령과 함께 사용할 수 있습니다.
                컴퓨터는 목록에서 임의로 한 항목을 선택할 것이다.
                이 코드를 실행할 때마다 출력이 달라집니다.
            code: |-
                animals {is} dogs, cats, kangaroos
                {print} animals {at} {random}
        4:
            header: At random in a sentence (문장에서 랜덤)
            text: 문장에서도 '{at}' '{random}' 명령을 사용할 수 있습니다.
            code: |-
                animals {is} dogs, cats, kangaroos
                {print} My favorite animal is animals {at} {random}
        5:
            header: Add to
            text: "{add} {to} 명령을 사용하여 목록에 항목을 추가할 수 있습니다. \n\n목록에 추가할 항목을 선택하거나 {add} {to} 명령을 {ask} 명령과 함께 사용할 수 있습니다. \n이렇게 하면 플레이어가 목록에 추가할 항목을 결정할 수 있습니다."
            code: |-
                animals {is} dog, cat, kangaroo
                like {is} {ask} What is your favorite animal?
                {add} like {to_list} animals
                {print} I choose animals {at} {random}
        6:
            header: 제거 대상
            text: |-
                '{add}' '{to}' 명령의 반대는 '{remove}' '{from}' 명령입니다.
                이 명령은 목록에서 항목을 제거합니다.
            code: |-
                animals {is} dog, cat, kangaroo
                dislike {is} {ask} What animal do you not like?
                {remove} dislike {from} animals
                {print} I choose animals {at} {random}
        7:
            header: Debugging
            text: Let's debug this code!
            editor: |-
                music_genres {is} rock, pop, metal, indie, jazz
                chosen_genre is music {at} {random}
                {print} Let's listen to chosen genre
                nice {ask} Do you like that genre?
                {remove} chosen_genre {from} chosen_genre
                second_choice {is} music_genres
                {print} or do you prefer... second_choice {at} {random}
                {remove} second_choice {to} music_genres
                {print} I like music_genre {random} best!
            debug: 'True'
        8:
            header: 일을 시작하자!
            text: 레벨 3의 모험을 즐기세요!
    4:
        1:
            header: 레벨 4에 오신것을 환영합니다
            text: 이 레벨에서는 따옴표 사용법을 배우게 됩니다.
            code: '{print} ''print with quotes!'''
        2:
            header: 문제
            text: '이전 레벨에서는 다음과 같은 문제가 발생했을 수 있습니다:'
            code: |-
                name {is} Sophie
                {print} My name is name
            debug: 'True'
        3:
            header: 따옴표로 고정하기
            text: "이 레벨에서 우리는 따옴표를 사용하여 이 문제를 해결할 것이다. \n\n이것은 또한 우리의 코드를 '진짜' 파이썬 코드처럼 보이게 한다."
        4:
            header: 인쇄된 따옴표
            text: '''{print}'' 명령을 사용할 때마다 화면에 나타날 텍스트를 따옴표로 표시해야 합니다.'
            code: '{print} ''print with quotes!'''
        5:
            header: 따옴표에 quest가 있음
            text: 이는 '{ask}' 명령에도 적용됩니다.
            code: name {is} {ask} 'name please?'
        6:
            header: 따옴표 및 변수
            text: "화면에 변수 이름이 인쇄되지 않도록 하려면 \n이와 같이 따옴표에서 변수를 제외해야 하는 이유입니다:"
            code: |-
                name {is} Harry
                {print} 'Hello ' name
        7:
            header: 따옴표 및 변수
            text: "문장 중간에 변수 이름이 사용될 때는 따옴표에서 변수를 빼야 한다. \n그러나 나머지 문장에는 따옴표가 필요하다. 이는 다음과 같다:"
            code: |-
                name {is} Harry
                {print} 'Hello ' name ', how are you?'
        8:
            header: 따옴표 및 축약
            text: "주의하세요! 따옴표를 사용하고 계시기 때문에 축약할 때 따옴표'를 사용할 수 없습니다. \n\n아래 화면에서 \"당신은\" 또는 \"나는\"과 같은 축약을 인쇄하고 어떻게 되는지 확인해보세요..."
            code: '{print} ''This won''t work!'''
            debug: 'True'
        9:
            header: 분명한
            text: "이 레벨에서는 {clear} 명령어도 배울 것이다. \n이 명령어를 사용하면 출력 화면에서 모든 텍스트를 지울 수 있다. \n\n항상 sleep 명령어를 사용하도록 주의해야 한다. 그렇지 않으면 컴퓨터가 읽기 전에 모든 텍스트를 지울 것이다!"
            code: |-
                {print} '3'
                {clear}
                {print} '2'
                {clear}
                {print} '1'
                {clear}
                {print} 'SURPRISE!'
        10:
            header: Debugging
            text: Let's debug this code!
            code: |-
                {clear}
                {print} What a nice day to go to the beach!
                {ask} 'Do you want to build a sandcastle or swim in the ocean?'
                {print} 'You would like to activity '
                {print} 'I'd like to do that too'
                {print} 'Look at these beautiful seashells!'
                colors {is} 'orange, silver, white, brown'
                {print} 'I love the colors {at} {random} one!'
                choice {is} {ask} Which one do you like?
            debug: 'True'
        11:
            header: 자, 준비, 시작!
            text: 레벨 4의 모험을 즐기세요!
    5:
        1:
            header: 레벨 5에 오신것을 환영합니다
            text: 이 레벨에서는 '{if}', '{else}', '{in}' 등 3개의 새로운 명령어를 사용하는 법을 배우게 된다.
        2:
            header: if
            text: "{if} 명령어를 사용하면 두 가지 옵션 중 하나를 선택할 수 있다. \n이 예제에서 컴퓨터는 주어진 답이 Hedy이면 nice를 출력할 것이다. \n만약 그 답이 Hedy가 아니라면 그 컴퓨터는 아무것도 하지 않을 것이다."
            code: |-
                name {is} {ask} 'what is your name?'
                {if} name {is} Hedy {print} 'nice'
        3:
            header: 인쇄하는 것을 잊지 마세요
            text: '''{if}'' 명령을 사용할 때는 ''{print}'' 명령을 사용하는 것을 잊지 마십시오.'
            code: '{if} name {is} Hedy ''nice'''
            debug: 'True'
        4:
            header: else
            text: "'{if}' 명령어를 사용할 때는 '{else}' 명령어를 추가할 수도 있다. \n만약 그 답이 Hedy이면 컴퓨터는 nice를 출력할 것이다. \n그러나 만약 그 답이 다른 것이라면 컴퓨터는 boo를 출력할 것이다"
            code: '{if} name {is} Hedy {print} ''nice'' {else} {print} ''boo!'''
        5:
            header: 긴줄
            text: "{if} 명령어와 {else} 명령어가 둘 다 있을 때 줄이 매우 길어질 수 있음을 알아차렸을 수도 있다. \n\n명령어를 분리하여 다음과 같이 두 줄에 놓을 수 있다:"
            code: |-
                {if} name {is} Hedy {print} 'nice'
                {else} {print} 'boo!'
        6:
            header: Another new command
            text: "{if} 명령어와 {else} 명령어를 연습했다면 {in} 명령어를 사용해 볼 수도 있다. \n\n{in}을(를) 사용하면 컴퓨터가 목록에 항목이 있는지 확인할 수 있다. \n\n예를 들어 Hedy는 대소문자를 구분합니다. 녹색 대신 녹색으로 대답하면 Hedy는 meh를 출력합니다."
            code: |-
                pretty_colors {is} green, yellow
                favorite_color {is} {ask} 'What is your favorite color?'
                {if} favorite_color {in} pretty_colors {print} 'pretty!'
                {else} {print} 'meh'
        7:
            header: Debugging
            text: Let's debug this code!
            code: |-
                {print} Welcome to HedyAir Security!
                boarding_pass {is} {ask} 'Do you have your boarding pass?'
                {if} bording_pass yes {print} Great!
                {else} Please, get your boarding pass ready.
                passport {is} 'Can I see your passport, please?'
                {if} passport {is} yes 'thank you'
                {else} 'You can't fly without a passport'
                declare {is} {ask} Do you have anything to declare?
                {if} declare {is} yes
                item_to_declare {is} {ask} 'What would you like to declare'
                {else} Alright
                {print} Thank you. Please head to gate A22.'
            debug: 'True'
        8:
            header: 가자!
            text: 레벨 5의 모험을 즐기세요!
    6:
        1:
            header: 레벨 6에 오신것을 환영합니다
            text: 이 레벨에서 우리는 코드에 수학을 추가하고 있다.
        2:
            header: Addition
            text: 덧셈을 계산하려면 더하기 기호를 사용하기만 하면 됩니다.
            code: '{print} ''5 plus 5 is '' 5 + 5'
        3:
            header: 뺄셈
            text: 빼기를 원한다면 빼기 기호를 사용하면 된다.
            code: '{print} ''5 minus 5 is '' 5 - 5'
        4:
            header: 곱셈
            text: 곱하기를 원하는 경우 별표를 사용할 수 있습니다.
            code: '{print} ''5 times 5 is '' 5 * 5'
        5:
            header: 나누기
            text: 슬래시를 분할에 사용할 수 있습니다.
            code: '{print} ''5 divided by 5 is '' 5 / 5'
        6:
            header: 요약
            text: 요약하면 +, -, * 및 /를 사용하여 수학을 할 수 있습니다.
            code: |-
                {print} '5 plus 5 is ' 5 + 5
                {print} '5 minus 5 is ' 5 - 5
                {print} '5 times 5 is ' 5 * 5
                {print} '5 divided by 5 is ' 5 / 5
        7:
            header: The = symbol
            text: "이제부터는 {is} 명령 대신 = 기호를 사용할 수도 있습니다. \n이것은 숫자와 단어 모두에 적용되며, {if} 또는 {flag} 명령 뒤에도 적용됩니다."
            code: |-
                name = Hedy
                answer = 20 + 4
        8:
            header: 변수를 이용한 계산
            text: '숫자와 함께 계산을 사용할 수도 있지만 변수를 사용하여 다음과 같은 계산을 수행할 수도 있습니다:'
            code: |-
                number_1 = {ask} 'Fill in the first number:'
                number_2 = {ask} 'Fill in the second number:'
                correct_answer = number_1 * number_2
                {print} number_1 ' times ' number_2 ' is ' correct_answer
        9:
            header: Debugging
            text: Let's debug this code!
            code: |-
                {print} 'This is the water park ticket machine'
                {print} 'Price list: Children under 12 $3, Adults $5'
                {print} 'Mondays are 25% off'
                amount_of_children = 'How many kids tickets would you like?'
                amount_of_adults = 'How many adult tickets would you like?'
                day_of_the_week = {ask} 'What day is it?'
                {clear}
                child_price = amount of children * 3
                adult_price = amount_of_adults + 5
                total_price = adult_price * child_price
                {if} day {is} monday
                total_price = total_price * 0.25
                {print} 'That will be total_price please'
            debug: 'True'
        10:
            header: 일을 시작하자!
            text: 레벨 6의 모험을 즐기세요!
    7:
        1:
            header: 레벨 7에 오신것을 환영합니다
            text: 이 레벨에서는 코드의 한 줄을 원하는 횟수만큼 반복하는 방법을 배울 수 있습니다.
        2:
            header: 세 번을 되풀이하다
            text: "만약 한 줄의 코드를 반복하고 싶다면, {repeat} 3 {times} 코드를 사용할 수 있다. \n만약 한 줄을 더 반복하고 싶다면, 숫자를 바꾸기만 하면 된다. \n\n예를 들어, 만약 당신이 캐릭터가 도움을 요청하는 이야기를 5번 동안 프로그래밍한다면, 다음과 같이 보일 수 있다:"
            code: |-
                {print} 'The prince kept calling for help'
                {repeat} 5 {times} {print} 'Help!'
                {print} 'Why is nobody helping me?'
        3:
            header: 인쇄 명령을 잊지 마십시오
            text: repeat 명령을 사용할 때 '{print}' 명령을 잊지 마십시오.
            code: '{repeat} 5 {times} ''Help!'''
            debug: 'True'
        4:
            header: 질문 명령 반복
            text: 또한 '{ask}', '{if}' 또는 '{else}' 명령을 여러 번 반복할 수 있습니다.
            code: |-
                {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                {else} {repeat} 3 {times} {print} 'You have learned something new!'
        5:
            header: Debugging
            text: Let's debug this code!
            code: |-
                {print} You gave stranded on a desert island.
                {repeat} 3 'Help!'
                rescued = {ask} Has anybody come to the rescue?
                {if} rescued yes {is}
                {print} Lucky!
                {else} {repeat} 3 {times} 'HELP!'
                rescued = 'What about now?'
                {if} yes
                {print} 'Hurray!
                {else} 'That's a shame... Oh well... time to build a shelter and find some food.'
            debug: 'True'
        6:
            header: 준비완료!
            text: 레벨 7의 모험을 즐기세요!
    8:
        1:
            header: 레벨 8에 오신것을 환영합니다
            text: 이 레벨에서는 들여쓰기를 사용하여 '{repeat}', '{if}' 및 '{else}' 명령이 여러 줄의 코드에 대해 작동하도록 하는 방법을 배울 것이다.
        2:
            header: '{messages}개 이전의 명령'
            text: "이전 레벨에서 '{repeat}' 명령어는 다음과 같이 보였습니다. \n\n코드 한 줄만 반복할 수 있습니다."
            code: '{repeat} 5 {times} {print} ''Help!'''
            debug: 'True'
        3:
            header: 지금 {messages}개의 명령
            text: "이 레벨에서는 여러 줄의 코드를 반복할 수 있다. \n이를 위해서는 어떤 줄이 함께 속하므로 반복해야 하는지 컴퓨터에 말해야 한다. \n\n들여쓰기를 사용하여 이 작업을 수행한다. 반복할 각 줄의 맨 앞에 있는 4개의 공백(또는 하나의 탭)을 다음과 같이 사용한다:"
            code: |-
                {repeat} 5 {times}
                    {print} 'Hello everyone'
                    {print} 'This will be printed 5 times'
        4:
            header: 지금 {messages}개의 명령
            text: "원한다면 들여쓰기 없이 '{repeat}' 명령 뒤에 계속 진행할 수 있다. \n들여쓰기로 시작하지 않는 행은 반복되지 않는다."
            code: |-
                {repeat} 3 {times}
                    {print} 'Hello!'
                {print} 'We are done repeating!'
        5:
            header: if and else before
            text: "{if} 명령어와 {else} 명령어도 마찬가지이다. \n이전의 명령어는 다음과 같다:"
            code: |-
                {if} name {is} Hedy {print} 'nice'
                {else} {print} 'boo!'
            debug: 'True'
        6:
            header: if and else now
            text: "이제 {if} 명령어와 {else} 명령어는 다음과 같다. \n{if} 명령어와 {else} 명령어 뒤의 각 행은 들여쓰기로 시작한다."
            code: |-
                name = {ask} 'What is your name?'
                {if} name {is} Hedy
                    {print} 'Welcome Hedy'
                {else}
                    {print} 'Welcome programmer!'
        7:
            header: 들여쓰기 중지
            text: '''{repeat}'' 명령어와 마찬가지로 들여쓰기 사용을 중지할 수 있으며 줄은 항상 표시됩니다. 문장이 참일 경우에만 해당되는 것은 아닙니다.'
            code: "name = {ask} 'What is your name?'\n{if} name {is} Hedy\n    {print} 'Welcome Hedy'\n{else}\n    {print} 'Welcome programmer!' \n{print} '3..2..1.. Start programming!'"
        8:
            header: if statements inside if statements
            text: "repeat 명령어 안에 if 명령어를 넣거나, 다른 if 명령어 안에 if 명령어를 넣으려고 생각해봤을 것이다. \n지금으로서는 아직 불가능하다. 상위 단계에서는 가능하겠지만, 일단 적절한 들여쓰기를 가진 {if} {else} 명령어와 {repeat} 명령어를 연습하는 것에 집중하자."
        9:
            header: Debugging
            text: Let's debug this code!
            code: |-
                {print} 'HedyWheels bus tickets machine'
                zone_1 = Town Hall, Library, Campus, Market Place
                zone_2 = Swimming Pool, Skate Park, Mall, Airport
                destination = 'Where do you want to go?'
                {if} destination {in} zone 1
                {print} destination 'is in zone 1'
                price = 3 euros
                    {if} destination {is} zone_2
                {print} destination 'is in zone 2'
                price = 6
                ticket_types = {ask} 'Press 1 for a single use ticket.
                Press 2 for a round trip ticket:'
                {if} ticket_type = 1
                {print} 'You chose a single use ticket'
                {else}
                        {print} You chose a round trip ticket'
                price * 2
                {print} 'That will be ' price ' euros please'
            debug: 'True'
        10:
            header: 모험을 확인해 봅시다!
            text: 레벨 8의 모험을 즐기세요!
    9:
        1:
            header: 레벨 9에 오신 걸 환영합니다
            text: "이 레벨에서는 {if} 명령 뒤에 또는 {repeat} 명령 뒤에 여러 줄의 코드를 사용할 수 있다. \n\n다른 {repeat} 명령어 안에 {repeat} 명령어를 넣을 수도 있다."
        2:
            header: '''{repeat}'' 뒤에 여러 줄이 있음'
            text: '''{repeat}'' 뒤에는 여러 줄을 사용할 수 있습니다.'
            code: |-
                {repeat} 3 {times}
                    food = {ask} 'What do you want?'
                    {if} food {is} pizza
                        {print} 'nice!'
                    {else}
                        {print} 'pizza is better'
        3:
            header: Indentation matters!
            text: 들여쓰기는 어떤 선을 반복해야 하는지, 어떤 선을 한 번만 실행해야 하는지 컴퓨터에 알려주는 매우 중요합니다.
            code: |-
                {repeat} 3 {times}
                    {print} 'This line will be repeated...'
                    {print} 'This one too...'
                {print} 'but this one will not!'
        4:
            header: '''{if}'' 뒤의 다중 행'
            text: '''{if}'' 뒤에 여러 줄을 사용할 수도 있습니다'
            code: |-
                continue = {ask} 'Do you want to continue?'
                {if} continue = yes
                    sure = {ask} 'Are you sure?'
                    {if} sure {is} yes
                        {print} 'We will continue'
                    {else}
                        {print} 'You are not sure'
                {else}
                    {print} 'You do not want to continue'
        5:
            header: Indentation matters
            text: 다시 말하지만 들여쓰기는 여전히 매우 중요하며 코드에 큰 차이를 만들 수 있다.
            code: |-
                continue = {ask} 'Do you want to continue?'
                {if} continue = yes
                    sure = {ask} 'Are you sure?'
                    {if} sure {is} yes
                        {print} 'We will continue'
                {else}
                    {print} 'You are not sure'
        6:
            header: '{repeat} 안에 있는 {if}'
            text: "이제 이 명령어 뒤에 여러 줄의 코드를 사용할 수 있게 되었으므로, 서로 간에 코드를 넣을 수도 있습니다. \n이것을 확인해보세요:"
            code: |-
                {repeat} 3 {times}
                    food = {ask} 'What do you want?'
                    {if} food {is} pizza
                        {print} 'nice!'
                    {else}
                        {print} 'pizza is better'
        7:
            header: 움푹 들어간 곳에 주의하세요
            text: 이 코드의 네 번째 줄과 여섯 번째 줄은 8칸의 들여쓰기로 시작합니다.
            code: |-
                {repeat} 3 {times}
                    food = {ask} 'What do you want?'
                    {if} food {is} pizza
                        {print} 'nice!'
                    {else}
                        {print} 'pizza is better'
        8:
            header: Debugging
            text: Let's debug this code!
            code: |-
                {print} 'Welcome to HedyJumps, your parachute jump adventure!'
                people = {ask} 'How many people are you jumping with today?
                {print} 'We'll ask all of you some questions for safety reasons.'
                extra_instructions_people = a, b
                {repeat} 3 {times}
                    name = {ask} 'What is your name?'
                jumped_before = 'Have you ever done a parachute jump before, ' name '?'
                {if} jumped_before  no
                {print} 'No worries, you'll get an extra safety instruction in room 13'
                {add} name {to} extra_instructions_people
                {else}
                {print} 'Fun!'
                {print} 'Thanks for filling in the safety questions everyone. Enjoy your jump!'
            debug: 'True'
        9:
            header: 가자!
            text: 레벨 9의 모험을 즐기세요!
    10:
        1:
            header: 레벨 10에 오신 것을 환영합니다
            text: 이 레벨에서는 새로운 명령어 '{for}'를 배우게 됩니다.
        2:
            header: 명령어
            text: With for you는 목록을 만들고 그 목록의 모든 항목을 사용할 수 있다. '{for}'는 반복과 같은 블록을 만들고, 만약 그렇다면 블록의 모든 줄은 들여쓰기(4칸)로 시작해야 한다.
            code: |-
                animals = dog, cat, blobfish
                {for} animal {in} animals
                    {print} 'I love ' animal
        3:
            header: 명령어
            text: 'Here you see another example of the `{for}` command:'
            code: |-
                days = Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday
                names = mom, dad, Emma, Sophie
                {for} day {in} days
                    {print} names {at} {random} ' does the dishes on ' day
        4:
            header: Debugging
            text: Let's debug this code
            code: |-
                {print} 'Ladies and gentlemen!'
                {print} 'For one night and one night only in circus Hedy!'
                acts = shoot out of a canon, walk the tightrope, pack themself in a suitcase,
                people = Iris the Incredible Achmed the Amazing Francis the Fantastic
                    {for} people {in} acts
                chosen_person {is} people {random}
                    chosen_person ' will ' act
                {add} chosen_person {from} people
                {print} 'Come and watch our show tonight!'
                {print} 'Tickets are only available at the counter
            debug: 'True'
        5:
            header: 프로그램 할 시간!
            text: 레벨 10의 모험을 즐기세요!
    11:
        1:
            header: 레벨 11에 오신 것을 환영합니다
            text: "이 레벨에서는 {for} 명령어의 새로운 형태를 추가한다. 이전 레벨에서는 목록과 함께 사용했지만 숫자와 함께 사용할 수도 있다. \n\n이렇게 하면 {repeat} 명령어가 더 이상 필요하지 않게 된다."
        2:
            header: 명령어
            text: 'new for 명령어는 다음과 같습니다:'
            code: |-
                {for} counter {in} {range} 1 {to} 10
                    {print} counter
                {print} 'Ready or not. Here I come!'
        3:
            header: 변수 i
            text: "이전 슬라이드에서 변수는 카운트다운을 하고 있었기 때문에 'counter'라고 이름 붙여졌다. \n물론 원하는 변수의 이름은 무엇이든 사용할 수 있다. \n이러한 상황에서 파이썬과 같은 프로그래밍 언어에서 사용되는 변수의 표준 명칭은 'i'이다. \n다음과 같다:"
            code: |-
                number = 10
                {for} i {in} {range} 1 {to} 10
                    {print} i * number
        4:
            header: Debugging
            text: Let's debug this code!
            code: |-
                factor {is} {ask} 'Which table of multiplication do you need?'
                {repeat} {for} numbers {in} {range} 1 {to} 10 {times}
                    {print} This is the table of multiplications for factor
                    {print} number ' x ' factor ' = ' i * factor
            debug: 'True'
        5:
            header: 프로그래밍 시작!
            text: 레벨 11의 모험을 즐기세요!
    12:
        1:
            header: 레벨 12에 오신 걸 환영합니다
            text: 이 단계부터는 십진법 숫자를 사용할 수 있으며 따옴표에 약간의 변화가 있습니다.
        2:
            header: 따옴표
            text: "이 레벨은 따옴표의 사용에 약간의 변경을 가한다. \n이제부터는 **모든 텍스트**는 따옴표로 표시되어야 한다. 여기에는 변수 값, {if} 명령 뒤의 항목 및 목록의 항목이 포함된다."
            code: |-
                name = 'Hedy the Robot'
                {print} 'Hello ' name
        3:
            header: 십진법
            text: "이 단계부터 당신은 또한 십진법 숫자를 사용할 수 있습니다. \n\n이것은 당신의 식당과 같은 프로그램들을 훨씬 더 좋게 만들 수 있습니다! 숫자는 따옴표를 만들지 않습니다."
            code: |-
                {print} 'decimal numbers now need to use a dot'
                {print} 2.5 + 2.5
        4:
            header: Functions!
            text: |-
                In this level you'll learn how to use functions. A function is a block of code you can easily use multiple times. Using functions helps us organize pieces of code that we can use again and again. To create a function, use define and give the function a name. Then put all the lines you want in the function in a indented block under the define line. Leave one empty line in your code to make it look nice and neat. Great job! You have created a function!

                Now, whenever we need that block of code, we just use call with the function's name to call it up! We don't have to type that block of code again.
        5:
            header: Twinkle Twinkle little star!
            text: |-
                In this program you see an example of a function.
                Let's see what happens if you fill in the rest of the song!
            code: |-
                {define} twinkle
                     {print} 'Twinkle'
                     {print} '...'

                {call} twinkle
                {print} 'Up above the world so high'
                {print} 'Like a diamond in the sky'
                {call} twinkle
        6:
            header: Functions
            text: As you could see in the example a function is a block of code that can be called anytime. You use `{define}` to set the function and `{call}` to use it.
        7:
            header: Debugging
            text: Let's debug this code!
            code: |-
                {call} new_member
                {print} 'Hi new member!'
                username = {ask} 'What is your username?'
                password = 'What is your password?'
                {print} 'Welcome to our club!'

                username = {ask} 'Please enter your username. Are you a new member? Type New Member'
                {if} username = New Member
                {call} new member
                    {else}
                        password = {ask} 'Please enter password'
            debug: 'True'
        8:
            header: Ready to try it out?
            text: Enjoy the adventures in level 12!
    13:
        1:
            header: 레벨 13에 오신 것을 환영합니다
            text: 이제 {and}와 {or}에 대해서 공부하겠습니다! 두 문장을 확인하려면 두 개의 if를 사용할 필요가 없고 그리고 그리고 또는 를 사용할 수 있습니다.
        2:
            header: 명령어와 명령어
            text: "'{and}' 명령어는 항상 {if} 명령어와 함께 사용된다. \n이 방법으로 두 문장이 참인지 확인할 수 있다. 예를 들어:"
            code: |-
                name = {ask} 'what is your name?'
                age = {ask} 'what is your age?'
                {if} name {is} 'Hedy' {and} age {is} 2
                    {print} 'You are the real Hedy!'
        3:
            header: 명령어
            text: "{or}는 {and} 명령어와 같은 방식으로 작동하지만 두 문장 중 하나만 참이어야 한다. \n\n{or}에 대한 {and}를 변경하면 어떤 일이 일어나는지 보자."
            code: |-
                name = {ask} 'what is your name?'
                {if} name {is} 'Hedy' {or} name {is} 'hedy'
                    {print} 'Welcome!!'
        4:
            header: Functions with arguments
            text: Now that you've learned how to use functions, you'll learn how to use a function with an **argument**. An argument is a variable that is used within a function. It is not used outside the function.
        5:
            header: Example
            text: |-
                In this example you see how the argument 'place' is used in the function.
                Run the code and change 'ocean' and 'sea' to something else, and see what happens.
            code: |-
                {define} song {with} place
                    {print} 'My Bonnie is over the ' place

                {call} song {with} 'ocean'
                {call} song {with} 'sea'
                {call} song {with} 'ocean'
        6:
            header: Example with variable
            text: |-
                You can also combine functions with a question.

                What happens if you make these changes:
                ```
                define song with place
                    print 'My Bonnie is ' place

                answer is ask 'Where is my Bonnie?'
                call song with answer
                ```
            code: |-
                {define} song {with} place
                    {print} 'My Bonnie is over the ' place

                {call} song {with} 'ocean'
                {call} song {with} 'sea'
                {call} song {with} 'ocean'
        7:
            header: Even more questions!
            text: |-
                Now we have combined even more question with the function. Type this code and see what happens.

                Note how the variables and the arguments have the same name. This is allowed.
                Does it confuse you? Just use different names, that is allowed as well.
                ```
                define song with name, place
                    print 'My ' name ' is ' place

                name is ask 'Who?'
                place is ask 'Where are they?'
                call song with name, place
                ```
            code: |-
                {define} song {with} place
                    {print} 'My Bonnie is over the ' place

                {call} song {with} 'ocean'
                {call} song {with} 'sea'
                {call} song {with} 'ocean'
        8:
            header: Debugging
            text: Let's debug this code!
            code: |-
                {define} happiness {with} name
                    {print} '🥳'
                {play} G
                {play} A
                {play} B
                {print} 'Party on, ' name
                {define} sadness
                {print} '😞'
                {play} E
                {play} D
                {play} C
                {print} 'Hope you feel better, ' name

                name = {ask} 'What is your' name '?'
                mood = {ask} 'Are you happy or sad?'
                {if} mood = happy
                    {call} happiness {with} person
                {else} mood = sad
                    {define} sadness {to} name
            debug: 'True'
        9:
            header: Let's go!
            text: Enjoy the adventures in level 13!
    14:
        1:
            header: 레벨 14에 오신 것을 환영합니다
            text: 이 레벨에서는 >와 같이 프로그램을 개선하는 데 도움이 되는 몇 가지 새로운 기호를 배울 수 있습니다.
        2:
            header: Symbols (심볼)
            text: |-
                사용할 수 있는 새로운 기호는 다음과 같습니다:

                  >는 ...보다 크다는 뜻이다...

                  >=는 ...보다 크거나 같음을 의미합니다...

                  <은 ...보다 작다는 뜻이다...

                  <=>는 ...보다 작거나 같음을 의미합니다...

                다음과 같이 사용할 수 있습니다:
            code: |-
                age = {ask} 'How old are you?'
                {if} age < 13
                    {print} 'You are younger than me!'
                {else}
                    {print} 'You are older than me!'
        3:
            header: Symbols (심볼)
            text: |-
                당신은 또한 아래와 같이 사용할 수 있습니다:

                == is the same as.

                != is not

                == is used in `{if}` statements.
            code: |-
                answer = {ask} 'Do you want to learn more?'
                {if} answer == 'yes'
                    {print} 'Go to the next adventure!'
                {if} answer != 'yes'
                    {print} 'That is a shame!'
        4:
            header: Return value
            text: In the previous levels you have learned to create functions and use arguments with them. Another great use of a function is to let it calculate something for you. You can give the function a calculation and it will give you the answer of the calculation. This answer is called a **return value**.
        5:
            header: Return value
            text: For example, in this code the function calculate_new_price will calculate the new price of any item. It will give you the new price as a return value.
            code: |-
                {define} calculate_new_price {with} amount, percentage
                    percentage = percentage / 100
                    discount_amount = amount * percentage
                    {return} amount - discount_amount

                old_price = {ask} 'How much is on the price tag?'
                discount = {ask} 'What percentage is the discount?'

                new_price = {call} calculate_new_price {with} old_price, discount
                {print} 'The new price is ' new_price ' dollar'
        6:
            header: Debugging
            text: Let's debug this code!
            code: |-
                item = 'not bought'
                {print} 'I would like to buy this item'
                price == {ask} 'What is the price?'
                {if} price less than or the same as 10
                    {print} 'Thats a great deal!'
                    item = 'bought'
                {if} price is more than 10 {and} less than or the same as 20
                    {print} 'Alright'
                    item = 'bought'
                {if} price is more than 20 {and} less than 50
                    {print} 'That is a bit much!'
                {if} price is more than or the same as 50
                    {print} 'No way!'
                {if} item =! bought
                    {print} 'Shame.. I wont buy it'
                {else}
                    {print} 'I will buy it! Thank you!'
            debug: 'True'
        7:
            header: Let's get to work!
            text: Enjoy the adventures in level 14!
    15:
        1:
            header: 레벨 15에 오신 것을 환영합니다
            text: 이 레벨에서 당신은 '{while}' 루프에 대해 배울 것이다.
        2:
            header: '{while}'
            text: "우리는 새로운 순환 고리, while 순환 고리를 배울 거예요! 순환 고리는 문장이 참인 한 계속됩니다. 그러니 순환 고리의 값을 바꾸는 것을 잊지 마세요. \n\n예제 코드에서, 우리는 정답이 주어질 때까지 계속합니다. 만약 정답이 주어지지 않는다면, 순환 고리는 절대로 끝나지 않을 것입니다!"
            code: |-
                answer = 0
                {while} answer != 25
                    answer = {ask} 'What is 5 times 5?'
                {print} 'A correct answer has been given'
        3:
            header: Debugging
            text: Let's debug this code!
            code: |-
                numbers = 1, 2

                {for} i {in} {range} 3 {to} 50
                    {add} x {to} numbers
                    i = + 1

                random_number = numbers {random}
                guesses = 10

                {while} guess = 0
                    answer = 'Guess my number:'
                    {if} answer >= random_number
                        {print} 'lower'
                        guesses = guesses -1
                    {if} answer > random_number
                        {print} 'higher!'
                        guesses = guesses
                    {else} answer = random_number
                        {print} 'correct'
                        guesses = 10

            debug: 'True'
        4:
            header: 한번 해보자!
            text: 레벨 15의 모험을 즐기세요!
    16:
        1:
            header: 레벨 16에 오신 것을 환영합니다
            text: 이 레벨에서는 [대괄호]와 이를 사용하는 방법에 대해 배우게 됩니다.
        2:
            header: 대괄호
            text: 우리는 목록을 파이썬 방식으로 만들 것이다. 우리는 또한 이전 레벨에서 배운 것처럼 각 항목의 주변에 따옴표를 유지한다. 우리는 목록의 한 자리를 가리킬 때 대괄호를 사용한다. at random 명령어는 더 이상 사용할 수 없다.
            code: |-
                friends = ['Ahmed', 'Ben', 'Cayden']
                {print} friends[1] ' is the first friend on the list.'
                {print} friends[2] ' is the second friend on the list.'
                {print} friends[3] ' is the third friend on the list.'
                #now we will match 2 lists using the variable i
                lucky_numbers = [15, 18, 6]
                {for} i {in} {range} 1 {to} 3
                    {print} friends[i] 's lucky number is ' lucky_numbers[i]
        3:
            header: Debugging
            text: Let's debug this code!
            code: |-
                {print} 'Friendship test'
                {subjects} = ['song', 'movie', 'food', 'drink']
                answers_player_1 = []
                answers_player_2 = []
                score = 100

                {for} i {in} {range} 1 {to} 4
                    answer = {ask} 'what is your favorite ' subjects[i]
                {add} answer {to} answers_player_1

                {print} 'Player 2, your turn!'
                {for} i {in} {range} 0 {to} 4
                    answer_player_2 = {ask} 'what is player 1s favorite ' subjects
                    {add} answer_player_2 {in} answers_player_2
                    {if} answers_player_2[2] == answers_player_1[1]
                        {print} 'Correct!'
                    {else}
                        {print} 'Wrong!'
                    score = score - 25

                {print} 'Player 2, you've scored ' score '%'

                {if} score = 100
                    {print} 'You are an amazing friend'
                {if} score < 100 {or} score >= 50
                    {print} 'You could do better'
                {else} score < 50
                    {print} 'Do you even know this person?!'
            debug: 'True'
        4:
            header: 한번 해보자!
            text: 레벨 16의 모험을 즐기세요!
    17:
        1:
            header: 레벨 17에 오신 것을 환영합니다
            text: 이 레벨에서 당신은 콜론을 사용하는 방법을 배울 것이고 당신은 elif 명령을 배울 것이다.
        2:
            header: Colon (콜론)
            text: 이제 우리는 들여쓰기를 조금 바꿀 것이다. 들여쓰기가 필요할 때마다, 우리는 들여쓰기 전 줄에 다음이 필요하다.
            code: |-
                prices = ['1 million dollars', 'an apple pie', 'nothing']
                your_price = prices[{random}]
                {print} 'You win ' your_price
                {if} your_price == '1 million dollars' :
                    {print} 'Yeah! You are rich!'
                {else}:
                    {print} 'Better luck next time..'
        3:
            header: Elif
            text: '이 레벨에서 당신은 또한 새로운 명령어를 사용할 수 있다: elif. elif는 다른 경우의 줄임말이고 당신이 3개 이상의 옵션을 만들고 싶을 때 그것이 필요하다. 그것을 확인해봐!'
            code: |-
                prices = ['1 million dollars', 'an apple pie', 'nothing']
                your_price = prices[{random}]
                {print} 'You win ' your_price
                {if} your_price == '1 million dollars' :
                    {print} 'Yeah! You are rich!'
                {elif} your_price == 'an apple pie' :
                    {print} 'Lovely, an apple pie!'
                {else}:
                    {print} 'Better luck next time..'
        4:
            header: Debugging
            text: Let's debug this code!
            code: |-
                {define} ask_direction
                    direction = {ask} 'Where do you want to go?'
                    {if} direction = 'backwards'
                        {turn} 180
                    {else} direction == 'right'
                        {turn} 90
                    {else} direction == 'left'
                        {turn} 270
                        {forward} 100

                continue = 'yes'

                {while} continue == 'yes'
                    {print} ask_direction
                    {sleep}
                    continue = 'do you want to draw some more?'
                    {sleep}
            debug: 'True'
        5:
            header: 한번 해보자!
            text: 레벨 17의 모험을 즐기세요!
    18:
        1:
            header: 레벨 18에 오신 걸 환영합니다
            text: 축하해요! 당신이 Hedy의 마지막 레벨에 도달했어요! 당신이 여기서 만든 코드는 replit나 PyCharm과 같은 실제 파이썬 환경에 복사할 수 있고, 당신은 거기서 계속 배울 수 있어요! 그러나 파이썬은 오직 영어 명령어만 읽을 수 있어서, 다른 언어를 사용해 왔다면, 지금 영어로 바꿔야 할 것입니다.
        2:
            header: 파이썬 방식
            text: "우리는 진짜 파이썬 코드에 도착했다! 이제부터는 인쇄 범위와 함께 괄호를 사용해야 한다는 것을 의미한다. \n\n또한 두 개 이상의 항목을 인쇄하려면 쉼표로 구분해야 한다. \n\n파이썬 코드를 얻기 위해 마지막으로 해야 할 변경 사항은 질문을 입력으로 변경하는 것이다. \n\n모든 예제를 보려면 '인쇄' 탭을 클릭하십시오."
            editor: /hedy/18
        3:
            header: 마지막 모험!
            text: 레벨 18의 마지막 모험을 즐겨보세요!
