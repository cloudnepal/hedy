1:
-   name: '{print}'
    explanation: '{print} noe med `{print}`.'
    demo_code: '{print} Hallo velkommen til Hedy!'
-   name: '{ask}'
    explanation: Still et sp√∏rsm√•l med `{ask}`.
    demo_code: '{ask} Hva er favorittfargen din?'
-   name: '{echo}'
    explanation: gjenta noe med √• bruke `{echo}`.
    demo_code: "{ask} Hva er favorittfargen din?\n{echo} s√• favorittfargen din er"
-   name: '{print} emojier'
    explanation: print en emoji med `{print}`
    demo_code: '{print} üôã üåç ‚ùó'
-   name: '{forward}'
    explanation: Tegn en linje med `{forward}`.
    demo_code: '{forward} 100'
-   name: '{turn}'
    explanation: snu tegneskilpadden med `{turn}`
    demo_code: "{forward} 25\n{turn} {left}\n{forward} 25\n{turn} {right}"
2:
-   name: '{is}'
    explanation: Gi et ord et navn som kan brukes andre steder i programmet med kommandoen `{is}`. Du kan velge navnet helt selv.
    demo_code: "navn {is} Hedy\n{print} Velkommen navn"
-   name: '{ask}'
    explanation: still et sp√∏rsm√•l med `{ask}`. Pass p√•! Du m√• gi svaret et navn ved hjelp av `{is}`.
    demo_code: "farge {is} {ask} Hva er din favorittfarge?\n{print} farge er din favoritt!"
-   name: '{sleep}'
    explanation: La Hedy f√• seg en pause i et sekund eller fler.
    demo_code: "{print} La meg tenke i et sekund...\n{sleep}\n{print} Hmm.. Jeg trenger tre sekunder til...\n{sleep} 3\n{print} Eureka! Jeg har svaret!"
-   explanation: Gi et tall et navn ved √• bruke `{is}`. Du kan velge navnet selv.
    demo_code: "vinkel {is} 90\n{turn} vinkel\n{forward} 100"
    name: er - skilpadde
3:
-   name: velg_tilfeldig
    explanation: Velg et tilfeldig ord fra en liste med `{at}` og `{random}`
    demo_code: "dyr {is} hund, katt, hest\n{print} dyr {at} {random}"
-   name: '{add}'
    explanation: legg til en ting i listen
    demo_code: "dyr {is} ku, katt\n{add} hund {to_list} dyr"
-   name: '{remove}'
    explanation: fjern en ting fra en liste
    demo_code: "dyr {is} katt, hund, ku\n{remove} hund {from} dyr"
4:
-   name: '{print}'
    explanation: skriv ut n√∏yaktig det du vil med fnutter
    demo_code: "{print} 'Hallo, velkommen til Hedy.'"
-   name: '{is}'
    explanation: Gi et navn til noe tekst og `{print}` ut uten fnutter
    demo_code: "navn {is} Hedy\n{print} 'Mitt navn er ' navn"
-   name: '{ask}'
    explanation: still et sp√∏rsm√•l med `{ask}`.
    demo_code: "farge {is} {ask} 'Hva er din favorittfarge?'\n{print} farge ' er din favoritt!'"
5:
-   name: '{print}'
    explanation: skriv ut n√∏yaktig det du vil med fnutter
    demo_code: "{print} 'Hallo, velkommen til Hedy.'"
-   name: '{ask}'
    explanation: still et sp√∏rsm√•l med `{ask}`.
    demo_code: "farge {is} {ask} 'Hva er din favorittfarge?'\n{print} farge ' er din favoritt'"
-   name: '{if}'
    explanation: Ta et valg med `{if}`
    demo_code: "farge {is} {ask} 'Hva er din favorittfarge?'\n{if} farge {is} gr√∏nn {print} 'vakkert!' {else} {print} 'meh'"
-   name: '{if} med skilpadden'
    explanation: Ta et valg med `{if}`
    demo_code: "svaret {is} {ask} 'Hvor langt skal vi bevege skilpadden?'\n{if} svaret {is} langt {forward} 100 {else} {forward} 5"
-   name: '{in}'
    explanation: Sjekk om lister inneholder elementer `{in}`
    demo_code: "vakre_farger {is} gr√∏nn, gul\nfarge {is} {ask} 'Hva er din favoritt farge'\n{if} farge {in} vakre_farger {print} 'Vakkert!' {else} {print} 'meh'"
-   name: '{pressed}'
    explanation: Sjekk om en gitt knapp p√• tastaturet er `{pressed}`.
    demo_code: "{if} a {is} {pressed} {print} 'You pressed A!' {else} {print} 'You pressed another key!'"
6:
-   name: '{print}'
    explanation: skriv ut n√∏yaktig det du vil med fnutter
    demo_code: "{print} '5 ganget 5 er ' 5 * 5"
-   name: '{ask}'
    explanation: '{ask} om et regnestykke og sjekk om det er korrekt.'
    demo_code: "svar = {ask} 'Hva er 10 pluss 10?'\n{if} svar {is} 20 {print} 'Korrekt!' {else} {print} 'Feil'"
-   name: '`{ask}` {and} `{if}` skilpadde'
    explanation: '{ask} brukeren hvor mange grader de vil ha'
    demo_code: "grader= {ask} 'Hvor mange grader?'\nvinkel = 360 / grader\n{forward} 50"
7:
-   name: '{print}'
    explanation: skriv n√∏yaktiv med bruk av fnutter
    demo_code: "{print} 'Hallo, velkommen til Hedy.'"
-   name: '{ask}'
    explanation: still et sp√∏rsm√•l med `{ask}`.
    demo_code: "farge = {ask} 'Hva er din favorittfarge?'\n{print} farge ' er din favoritt!'"
-   name: '{if}'
    explanation: Ta et valg med `{if}`
    demo_code: "farge = {ask} 'Hva er din favorittfarge?'\n{if} farge {is} gr√∏nn {print} 'Vakkert!' {else} {print} 'meh'"
-   name: '{repeat} - skillpadde'
    explanation: gjenta en kodelinje med `{repeat}`.
    demo_code: '{repeat} 3 {times} {forward} 10'
8:
-   name: '{print}'
    explanation: skriv noe. Husk √• bruke fnutter n√•r du skal skrive ut tekst.
    demo_code: "{print} '5 {times} 5 {is} ' 5 * 5"
-   name: '{ask}'
    explanation: sp√∏r om svaret p√• et regnestykke og sjekk om det er rett. Vi kan printe to linjer n√•.
    demo_code: "svaret = {ask} 'Hva er 5 plus 5?'\n{if} svaret {is} 10\n    {print} 'Bra jobbet!'\n    {print} 'Du har helt rett, svaret er ' svaret\n{else}\n    {print} 'Oops!'\n    {print} 'Svaret er 10'"
-   name: '`{repeat}` med skilpadden'
    explanation: '{repeat} flere linjer'
    demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
-   name: '{pressed}'
    explanation: Check whether a given key on the keyboard is `{pressed}`.
    demo_code: "{if} a {is} {pressed}\n    {print} 'You pressed A!'\n{else}\n    {print} 'You pressed another key!'"
9:
-   name: '`{if}` med flere linjer'
    explanation: "'{ask}' om svaret p√• et regnestykke og se om det er korrekt. N√• skriver vi ut to linjer."
    demo_code: "svaret = {ask} 'Hva er 20 pluss 20?'\n{if} svaret {is} 40\n    {print} 'Bra jobbet!'\n    {print} 'Svaret er ' svaret\nelse\n    {print} 'Feil'\n    {print} 'Svaret er 40'"
-   name: '`{repeat}` og skilpadden'
    explanation: '{repeat} flere linjer'
    demo_code: "{repeat} 4 {times}\n    {turn} 90\n    {forward} 50"
10:
-   name: '{print}'
    explanation: skriv ut noe. Husk √• bruke fnutter n√•r du skal skrive tekst.
    demo_code: "{print} '5 {times} 5 {is} ' 5 * 5"
-   name: '{for} med en liste'
    explanation: 'skriv ut alle tingene i en liste '
    demo_code: "dyrene {is} hunder, katter, flyndre\n{for} dyr {in} dyrene\n    {print} 'Jeg elsker ' dyr"
11:
-   name: '{for} l√∏kke'
    explanation: Vi kan bruke `{for}` med en {range}
    demo_code: "{for} teller {in} {range} 1 {to} 5\n    {print} teller"
-   name: '{ask}'
    explanation: '{ask} etter svaret p√• et regnestykke og sjekk om det er korrekt. Vi kan skrive ut to linjer n√•.'
    demo_code: "svaret = {ask} 'Hva er 5 pluss 5?'\n{if} svaret {is} 10\n    {print} 'Bra jobbet!'\n    {print} 'Det var rett og svaret var ' svaret\nelse\n    {print} 'Oops!'\n    {print} 'Svaret er 10'"
12:
-   name: flyt direkte
    explanation: Desimaltall
    demo_code: "{print} 'Kj√∏r p√• med kalkulasjoner!'\n{print} 'To og en halv pluss to og en halv er lik...'\n{print} 2.5 + 2.5\n"
-   name: tildel tekst
    explanation: Tekst med fnutter etter `=`
    demo_code: "navn = 'Roboten Hedy'\n{print} 'Hello ' navn\n"
-   name: apostrof etter {if}sammenligning
    explanation: Tekst med fnutter etter {if}
    demo_code: "navn = {ask} 'Hvem er du?'\n{if} navn = 'Hedy'\n    {print} 'Hei hei!'\n"
-   name: hermetegn i liste
    explanation: En liste med fnutter
    demo_code: "superhelter = 'Iron Man', 'Batman', 'Superman'\n{print} superhelter {at} {random}\n"
13:
-   name: '{and}'
    explanation: Begge deler m√• v√¶re korrekt
    demo_code: "svar1 = {ask} 'Hva er 3 + 2?'\nsvar2 = {ask} 'Hva er 2 + 2?'\n{if} svar1 {is} 5 {and} svar2 {is} 4\n    {print} 'Begge svarene m√• v√¶re rett!'\n{else}\n    {print} 'Minst et svar et feil!'"
-   name: '{or}'
    explanation: Minst et av svarene m√• v√¶re rett. Det vil ogs√• fungere hvis begge er rett.
    demo_code: "svar1 = {ask} 'Hva er 3 + 2?'\nsvar2 = {ask} 'Hva er 2 + 2?'\n{if} svar1 {is} 5 {or} svar2 {is} 4\n    {print} 'Ihvertfall ett svar er riktig!'\n{else}\n    {print} 'Begge svarene er feil!'"
14:
-   name: Mindre
    explanation: Vi bruker `<` for √• sjekke om det f√∏rste tallet er mindre enn det andre tallet.
    demo_code: "alder = {ask} 'Hvor gammel er du?'\n{if} alder < 13\n    {print} 'Du er yngre enn meg!'"
-   name: St√∏rre
    explanation: Vi bruker `>` for √• sjekke om det f√∏rste tallet er st√∏rre enn det andre.
    demo_code: "alder = {ask} 'Hvor gammel er du?'\n{if} alder > 13\n    {print} 'Du er eldre enn meg!'"
-   name: Er lik
    explanation: Vi bruker `==` for √• sjekke om to ting er like.
    demo_code: "svar = {ask} 'Hva er  5 * 5?'\n{if} svar == 25\n    {print} 'Det {is} korrekt!'"
-   name: Ikke lik
    explanation: 'Vi bruker`!=` √• sjekke om ting er ''ikke lik''. '
    demo_code: "svar = {ask} 'Hva er 5 * 5?'\n{if} svar != 25\n    {print} 'Det er ikke korrekt!'"
-   name: Mindre {or} lik
    explanation: Vi bruker `<=` for √• sjekke om det f√∏rste tallet er mindre enn det andre tallet.
    demo_code: "alder = {ask} 'Hvor gammel er du?'\n{if} alder <= 12\n    {print} 'Du er yngre enn meg!'"
-   name: St√∏rre eller lik
    explanation: Vi bruker `>=` til √• sjekke om det f√∏rste tallet er st√∏rre eller lik det andre tallet.
    demo_code: "alder = {ask} 'Hvor gammel er du?'\n{if} alder >= 14\n    {print} 'Du er eldre enn meg!'"
15:
-   name: '{while}'
    explanation: Vi kan bruke `{while}`l√∏kken med ikke-lik
    demo_code: "svar = 0\n{while} svar != 25\n    svar = {ask} 'Hva er 5 ganger 5?'\n{print} 'Svaret er korrekt!'"
-   name: Mindre {while}
    explanation: 'Vi kan ogs√• bruke `{while}` l√∏kken med `<` og `>`. '
    demo_code: "telling = 1\n{while} telling < 3\n    {print} 'Vi gj√∏r dette ' 3 - telling ' flere ganger'\n    telling = telling + 1\n{print} 'Vi er ferdig √• telle'"
16:
-   name: firkantparantes
    explanation: Liste med firkantparanteser
    demo_code: "frukt = ['eple', 'banan', 'kirseb√¶r']\n{print} frukt"
-   name: Hent en ting fra en liste
    explanation: For √• hente en ting fra en liste bruker vi `[tall]`. S√• frukt[1] betyr, hent f√∏rste frukten i listen!
    demo_code: "frukt = ['banan', 'eple', 'vannmelon']\nf√∏rstefrukt = frukt[1]\n{print} f√∏rstefrukt"
-   name: Hent en tilfeldig ting fra en liste
    explanation: For √• f√• en tilfeldig til fra listen bruker vi [{random}]. S√• `frukt[{random}]` betyr; hent en tilfeldig frukt fra listen!
    demo_code: "frukt = ['banan', 'eple', 'vannmelon']\ntilfeldig_frukt = frukt[{random}]\n{print} tilfeldig_frukt"
17:
-   name: '{elif}'
    explanation: '`{elif}`.'
    demo_code: "a = 2\n{if} a == 1:\n    {print} 'a er 1'\n{elif} a == 2:\n    {print} 'a er 2'\n{else}:\n    {print} 'a er ikke 1 eller 2'"
-   name: '{print}'
    explanation: N√•r vi bruker en `{for}` l√∏kke, m√• vi legge til `:` p√• slutten av `{for}` linjen!
    demo_code: "{for} i {in} {range} 1 {to} 12:\n    {print} i\n{print} 'Klar eller ei, her kommer jeg!'"
-   name: '{if}'
    explanation: Vi m√• gj√∏re det samme med alle `{if}`-sjekkene v√•re
    demo_code: "farge = {ask} 'Hva er din favorittfarge?'\n{if} farge == 'gr√∏nn':\n    {print} 'Din favorittfarge er gr√∏nn'\n{else}:\n    {print} 'Din favorittfarge er ikke gr√∏nn'"
18:
-   name: '{print}'
    explanation: Med`{print}` m√• du bruke paranteser
    demo_code: "{print}('hei!')"
-   name: '{print} med var'
    explanation: Med `{print}` m√• vi bruke parantes og komma for √• skrive ut flere ting
    demo_code: "navn = 'Hedy'\n{print}('Mitt navn er ', navn)"
-   name: '{print} with var'
    explanation: With `{print}` you need to use parentheses and commas if you {print} more items
    demo_code: "name = 'Hedy'\n{print}('my name is ', name)"
-   name: ask something with {input}
    explanation: Use `{input}` instead of `{ask}` to ask something
    demo_code: "name = {input}('What is your name?')\n{print}('So your name is ', name)"
