1:
-   name: '{print}'
    explanation: Print tekst med `{print}`.
    demo_code: '{print} Hej og velkommen til Hedy!'
-   name: '{ask}'
    explanation: Stil sp√∏rgsm√•l med `{ask}`.
    demo_code: '{ask} Hvad er din yndlingsfarve?'
-   name: '{echo}'
    explanation: Gentag ting med `{echo}`.
    demo_code: |-
        {ask} Hvad er din yndlingsfarve?
        {echo} s√• din yndlingsfarve er
-   name: '{print} emojier'
    explanation: Udskriv en emoji med `{print}`.
    demo_code: '{print} üôã üåç ‚ùó'
-   name: '{forward}'
    explanation: Tegn en linje med `{forward}`.
    demo_code: '{forward} 100'
-   name: '{turn}'
    explanation: Drej tegneskildpadden med `{turn}`.
    demo_code: |-
        {forward} 25
        {turn} {left}
        {forward} 25
        {turn} {right}
2:
-   name: '{is}'
    explanation: For at kunne bruge et ord i programmet kan du navngive det med `{is}`. Du kan v√¶lge navnet selv.
    demo_code: |-
        navn {is} Hedy
        {print} velkommen navn
-   name: '{ask}'
    explanation: Sp√∏rg om noget med `{ask}`. V√¶r opm√¶rksom p√• at du skal navngive svaret med `{is}`.
    demo_code: |-
        farve {is} {ask} Hvad er din yndlingsfarve?
        {print} farve er din favorit!
-   name: '{sleep}'
    explanation: 'Med `{sleep}` kan du lade Hedy pause i et (par) sekund(er).'
    demo_code: |-
        {print} Lad mig t√¶nke i et sekund
        {sleep}
        {print} Hmm.. Jeg har brug for 3 sekunder til...
        {sleep} 3
        {print} Aha! Nu har jeg det!
-   name: '{is} med skildpadde'
    explanation: Navngiv et tal med `{is}`. Du kan v√¶lge navnet selv.
    demo_code: |-
        vinkel {is} 90
        {turn} vinkel
        {forward} 100
3:
-   name: V√¶lg tilf√¶ldigt
    explanation: V√¶lg et tilf√¶ldigt ord fra en gruppe med `{at}` og `{random}`.
    demo_code: |-
        dyr {is} hund, kat, k√¶nguru
        {print} dyr {at} {random}
-   name: '{add}'
    explanation: '`{add}` et element `{to_list}` en liste.'
    demo_code: |-
        dyr {is} ko, kat
        {add} hund {to_list} dyr
-   name: '{remove}'
    explanation: '`{remove}` et element `{from}` en liste.'
    demo_code: |-
        dyr {is} kat, hund, ko
        {remove} hund {from} dyr
4:
-   name: '{print}'
    explanation: Udskriv n√∏jagtigt ved hj√¶lp af citationstegn.
    demo_code: '{print} ''Hej og velkommen til Hedy.'''
-   name: '{is}'
    explanation: Navngiv et stykke tekst og `{print}` den uden citationstegn.
    demo_code: |-
        navn {is} Hedy
        {print} 'mit navn er ' navn
-   name: '{ask}'
    explanation: Stil sp√∏rgsm√•l med `{ask}`.
    demo_code: |-
        farve {is} {ask} 'Hvad er din yndlingsfarve?'
        {print} farve ' er din favorit!'
5:
-   name: '{print}'
    explanation: Udskriv n√∏jagtigt ved hj√¶lp af citationstegn.
    demo_code: '{print} ''Hej og velkommen til Hedy.'''
-   name: '{ask}'
    explanation: Stil sp√∏rgsm√•l med `{ask}`.
    demo_code: |-
        farve {is} {ask} 'Hvad er din yndlingsfarve?'
        {print} farve ' er din favorit!'
-   name: '{if}'
    explanation: Tr√¶f et valg med `{if}`.
    demo_code: |-
        farve {is} {ask} 'Hvad er din yndlingsfarve?'
        {if} farve {is} gr√∏n {print} 'p√¶nt!' {else} {print} 'tja'
-   name: '{if} med skildpadde'
    explanation: Tr√¶f et valg med `{if}`.
    demo_code: |-
        svar {is} {ask} 'Hvor langt skal jeg g√•?'
        {if} svar {is} langt {forward} 100 {else} {forward} 5
-   name: '{in}'
    explanation: Tjek elementer med `{in}`.
    demo_code: |-
        flotte_farver {is} gr√∏n, gul
        farve {is} {ask} 'Hvad er din yndlingsfarve?'
        {if} farve {in} flotte_farver {print} 'flot!' {else} {print} 'kedeligt'
-   name: '{pressed}'
    explanation: Kontroller om en given tast p√• tastaturet er `{pressed}`.
    demo_code: '{if} a {is} {pressed} {print} ''Du trykkede p√• A!'' {else} {print} ''Du trykkede p√• en anden tast!'''
6:
-   name: '{print}'
    explanation: Udskriv n√∏jagtigt ved hj√¶lp af citationstegn.
    demo_code: '{print} ''5 gange 5 er '' 5 * 5'
-   name: '{ask}'
    explanation: Bed om en udregning og kontroller om den er korrekt.
    demo_code: |-
        svar = {ask} 'Hvad er 10 plus 10?'
        {if} svar {is} 20 {print} 'Ja!' {else} {print} 'Ups'
-   name: '`{ask}` og `{if}` med skildpadde'
    explanation: Sp√∏rg brugeren hvor mange vinkler de √∏nsker.
    demo_code: |-
        vinkler = {ask} 'Hvor mange vinkler?'
        vinkel = 360 / vinkler
        {forward} 50
7:
-   name: '{print}'
    explanation: Udskriv n√∏jagtigt ved hj√¶lp af citationstegn.
    demo_code: '{print} ''Hej og velkommen til Hedy.'''
-   name: '{ask}'
    explanation: Stil sp√∏rgsm√•l med `{ask}`.
    demo_code: |-
        farve = {ask} 'Hvad er din yndlingsfarve?'
        {print} farve ' er din favorit!'
-   name: '{if}'
    explanation: Tr√¶f et valg med `{if}`.
    demo_code: |-
        farve = {ask} 'Hvad er din yndlingsfarve?'
        {if} farve {is} gr√∏n {print} 'p√¶nt!' {else} {print} 'tja'
-   name: '{repeat} med skildpadde'
    explanation: Gentag en linje kode med `{repeat}`.
    demo_code: '{repeat} 3 {times} {forward} 10'
8:
-   name: '{print}'
    explanation: Udskriv noget. Husk at bruge citationstegn til n√∏jagtig udskrivning.
    demo_code: '{print} ''5 gange 5 er '' 5 * 5'
-   name: '{ask}'
    explanation: Sp√∏rg om svaret p√• en addition og kontroller, om det er korrekt. Vi kan nu udskrive 2 linjer.
    demo_code: |-
        svar = {ask} 'Hvad er 5 plus 5?'
        {if} svar {is} 10
            {print} 'Godt klaret!'
            {print} 'Svaret er nemlig ' svar
        {else}
            {print} 'Ups!'
            {print} 'Svaret er 10'
-   name: '{repeat} med skildpadde'
    explanation: Gentag flere linjer.
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
-   name: '{pressed}'
    explanation: Kontroller om en given tast p√• tastaturet er `{pressed}`.
    demo_code: |-
        {if} a {is} {pressed}
            {print} 'Du trykkede p√• A!'
        {else}
            {print} 'Du trykkede p√• en anden tast!'
9:
-   name: '{if} med flere linjer'
    explanation: Sp√∏rg om svaret p√• en addition med `{ask}` og se om det er korrekt. Nu udskriver vi to linjer.
    demo_code: |-
        svar = {ask} 'Hvad er 10 plus 10?'
        {if} svar {is} 20
            {print} 'Godt klaret!!'
            {print} 'Svaret er nemlig ' svar
        {else}
            {print} 'Niks'
            {print} 'Svaret er 20'
-   name: '{repeat} med skildpadde'
    explanation: Gentag flere linjer.
    demo_code: |-
        {repeat} 4 {times}
            {turn} 90
            {forward} 50
10:
-   name: '{print}'
    explanation: Udskriv noget. Husk at bruge citationstegn til n√∏jagtig udskrivning.
    demo_code: '{print} ''5 gange 5 er '' 5 * 5'
-   name: '{for} med en liste'
    explanation: Udskriv alle elementerne i en liste.
    demo_code: |-
        alle_dyr {is} hunde, katte, fisk
        {for} dyr {in} alle_dyr
          {print} 'Jeg elsker ' dyr
11:
-   name: '{for}-l√∏kke (sl√∏jfe)'
    explanation: Vi kan bruge `{for}` med et `{range}`.
    demo_code: |-
        {for} t√¶ller {in} {range} 1 {to} 5
            {print} t√¶ller
-   name: '{ask}'
    explanation: Sp√∏rg om svaret p√• en addition og kontroller, om det er korrekt. Vi kan nu udskrive 2 linjer.
    demo_code: |-
        svar = {ask} 'Hvad er 5 plus 5?'
        {if} svar {is} 10
            {print} 'Godt klaret!'
            {print} 'Svaret er nemlig ' svar
        {else}
            {print} 'Ups!'
            {print} 'Svaret er 10'
12:
-   name: flyt direkte
    explanation: Decimaltal.
    demo_code: |-
        {print} 'Regn l√∏s!'
        {print} 'To og en halv plus to og en halv er...'
        {print} 2.5 + 2.5
-   name: tildel tekst
    explanation: Tekst med citationstegn efter `=`
    demo_code: |-
        navn = 'Robotten Hedy'
        {print} 'Hej ' navn
-   name: citationstegn efter `{if}`-sammenligning
    explanation: Tekst med citationstegn efter `{if}`.
    demo_code: |-
        navn = {ask} 'Hvem er du?'
        {if} navn = 'Hedy'
            {print} 'Hej du!'
-   name: citationstegn i liste
    explanation: En liste med citationstegn.
    demo_code: |-
        superhelte = 'Iron Man', 'Batman', 'Superman'
        {print} superhelte {at} {random}
13:
-   name: '{and}'
    explanation: To dele som begge skal v√¶re korrekte.
    demo_code: |-
        answer1 = {ask} 'What is 3+2?'
        answer2 = {ask} 'What is 2+2?'
        {if} answer1 {is} 5 {and} answer2 {is} 4
            {print} 'Both answers are correct!'
        {else}
            {print} 'At least one answer is wrong!'
-   name: '{or}'
    explanation: Mindst en af de to dele skal v√¶re korrekte. Hvis begge er korrekte, er det ogs√• fint.
    demo_code: |-
        svar1 = {ask} 'Hvad er 3+2?'
        svar2 = {ask} 'Hvad er 2+2?'
        {if} svar1 {is} 5 {or} svar2 {is} 4
            {print} 'Mindst et svar er korrekt!'
        {else}
            {print} 'Begge svar er forkerte!'
14:
-   name: Mindre end
    explanation: Vi bruger `<` til at kontrollere om det f√∏rste tal er mindre end det andet.
    demo_code: |-
        alder = {ask} 'Hvor gammel er du?'
        {if} alder < 13
            {print} 'Du er yngre end mig!'
-   name: St√∏rre end
    explanation: Vi bruger `>` til at kontrollere om det f√∏rste tal er st√∏rre end det andet.
    demo_code: |-
        alder = {ask} 'Hvor gammel er du?'
        {if} alder > 13
            {print} 'Du er √¶ldre end mig!'
-   name: Lig med
    explanation: Vi bruger `==` til at kontrollere om to ting er ens.
    demo_code: |-
        svar = {ask} 'Hvad er 5 * 5?'
        {if} svar == 25
            {print} 'Det er korrekt!'
-   name: Ikke lig med
    explanation: Vi bruger `!=` til at kontrollere om to ting ikke er ens.
    demo_code: |-
        svar = {ask} 'Hvad er 5 * 5?'
        {if} svar != 25
            {print} 'Det er ikke korrekt!'
-   name: Mindre end eller lig med
    explanation: Vi bruger `<=` til at kontrollere om det f√∏rste tal er mindre end eller lig med det andet.
    demo_code: |-
        alder = {ask} 'Hvor gammel er du?'
        {if} alder <= 12
            {print} 'Du er yngre end mig!'
-   name: St√∏rre end eller lig med
    explanation: Vi bruger `>=` til at kontrollere om det f√∏rste tal er st√∏rre end eller lig med det andet.
    demo_code: |-
        alder = {ask} 'Hvor gammel er du?'
        {if} alder >= 14
            {print} 'Du er √¶ldre end mig!'
15:
-   name: '{while}'
    explanation: Vi kan bruge en `{while}`-l√∏kke sammen med ikke lig med.
    demo_code: |-
        svar = 0
        {while} svar != 25
            svar = {ask} 'Hvad er 5 gange 5?'
        {print} 'Det er rigtigt'
-   name: '{while} mindre end'
    explanation: Vi kan ogs√• bruge en `{while}`-l√∏kke med `<` og `>`.
    demo_code: |-
        t√¶lle = 1
        {while} t√¶lle < 3
            {print} 'Vi g√∏r dette ' 3 - t√¶lle ' flere gange'
            t√¶lle = t√¶lle + 1
        {print} 'Vi er f√¶rdige'
16:
-   name: firkantede parenteser
    explanation: Lister med firkantede parenteser.
    demo_code: |-
        frugt = ['√¶ble', 'banan', 'kirseb√¶r']
        {print} frugt
-   name: Tilg√• et element i en liste
    explanation: For at tilg√• et element fra en liste bruger vi [tal], s√• frugt[1] betyder at f√• den f√∏rste frugt i listen!
    demo_code: |-
        frugt = ['banan', '√¶ble', 'kirseb√¶r']
        f√∏rste_frugt = frugt[1]
        {print} f√∏rste_frugt
-   name: Tilg√• et tilf√¶ldigt element i en liste
    explanation: For at tilg√• et tilf√¶ldigt element i en liste bruger vi [{random}]], s√• frugt{random}] betyder at f√• en tilf√¶ldig frugt fra listen!
    demo_code: |-
        frugt = ['banan', '√¶ble', 'kirseb√¶r']
        tilf√¶ldig_frugt = frugt[{random}]
        {print} tilf√¶ldig_frugt
17:
-   name: '{elif}'
    explanation: '`{elif}`'
    demo_code: |-
        a = 2
        {if} a == 1:
            {print} 'a er 1'
        {elif} a == 2:
            {print} 'a er 2'
        {else}:
            {print} 'a er hverken 1 eller 2'
-   name: '{print}'
    explanation: N√•r vi bruger en `{for}`-l√∏kke, skal vi l√¶gge en `:` bag `{for}`-s√¶tningen!
    demo_code: |-
        {for} i {in} {range} 1 {to} 12:
            {print} i
        {print} 'Klar eller ej, her kommer jeg!'
-   name: '{if}'
    explanation: Vi skal g√∏re det samme med alle vores `{if}` s√¶tninger.
    demo_code: |-
        farve = {ask} 'Hvad er din yndlingsfarve?'
        {if} farve == 'gr√∏n':
            {print} 'Din yndlingsfarve er gr√∏n'
        {else}:
            {print} 'Din yndlingsfarve er ikke gr√∏n'
18:
-   name: '{print}'
    explanation: Efter `{print}` skal du bruge parenteser.
    demo_code: '{print}(''hej!'')'
-   name: '{range}'
    explanation: Efter `{range}` skal du bruge parenteser.
    demo_code: |-
        {for} i {in} {range}(1,10):
            {print}('Hej nummer ', i)
-   name: '{print} med variabel'
    explanation: Med `{print}` skal du bruge parenteser og kommaer hvis du vil udskrive flere elementer.
    demo_code: |-
        navn = 'Hedy'
        {print}('Jeg hedder ', navn)
-   name: sp√∏rg om noget med {input}
    explanation: Brug `{input}` i stedet for `{ask}` for at sp√∏rge om noget.
    demo_code: |-
        navn = {input}('Hvad hedder du?')
        {print}('S√• du hedder ', navn)
