# Generate 'message-translations.ts'
#
# This file is compiled from the YAMLs found in content/client-messages/*.yaml,
# plus gettext-translated messages we found elsewhere.
import glob
from os import path
import json
import gettext

# Import packages from the website app (AutoPep8 will mess this up, so disable it)
import sys
sys.path.append(path.abspath(path.join(path.dirname(__file__), '..', '..')))  # noqa
from website.yaml_file import YamlFile  # noqa

OUTPUT_FILE = 'static/js/message-translations.ts'
ADDITIONAL_GETTEXT_KEYS = [
    'level_title',
]


def main():
    translations = {}
    message_keys = set()

    # Client messages
    for cm_file in sorted(glob.glob('content/client-messages/*.yaml')):
        lang_code = path.splitext(path.basename(cm_file))[0]
        cm = YamlFile.for_file(cm_file).to_dict()

        for key, value in list(cm.items()):
            # Make an array of strings into a single string, joined by newline
            if isinstance(value, list):
                cm[key] = '\n'.join(value)

        translations[lang_code] = cm
        message_keys |= cm.keys()

    # Gettext translations
    for lang, trans in translations.items():
        try:
            translator = gettext.translation('messages', localedir='translations', languages=[lang, 'en'])
            for key in ADDITIONAL_GETTEXT_KEYS:
                trans[key] = translator.gettext(key)
                message_keys.add(key)
        except Exception as e:
            raise RuntimeError(f"Not able to load translations for '{lang}'") from e

    # Write file
    with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
        f.write('// This file has been generated by build-tools/heroku/generate-client-messages.py\n')
        f.write('// DO NOT EDIT\n')
        f.write('\n')
        f.write('export type MessageKey = ' + ' | '.join(f"'{k}'" for k in sorted(message_keys)) + '\n')
        f.write('export const TRANSLATIONS: Record<string, Record<MessageKey, string>> = ' +
                json.dumps(translations, indent=2, sort_keys=True, ensure_ascii=False) + ';\n')


if __name__ == '__main__':
    main()
